@page "/ai-ganttchart/predictive-schedule"
@page "/gantt-chart/ai-predictive-schedule"

@inject AzureAIService OpenAIService
@using BlazorDemos.Model
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Service
@using System.IO

@inject IJSRuntime JsInterop
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@*End:Hidden*@

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the predictive scheduling feature in the Syncfusion Blazor Gantt Chart. It showcases how AI is utilized to forecast and schedule tasks based on historical data. The Gantt Chart displays taskbars with baselines, representing both the predicted schedule and the actual task timelines. The AI-driven prediction uses five years of historical task data alongside the current year's tasks to generate a comprehensive and accurate schedule, allowing users to visualize potential project timelines and adjust accordingly.</p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>
<ActionDescription>
    <p>This action predicts and generates a task schedule by analyzing five years of historical TaskCollection data along with the current year's TaskCollection. The AI model processes this data to forecast future tasks, creating a predictive task collection. This collection is then visualized on the Gantt Chart, with baselines indicating the predicted start and end dates of each task, allowing users to compare the projected schedule with the actual progress.</p>
</ActionDescription>

<div class="col-lg-12 control-section" id="gantt-control-section">
    @if (showMessage)
    {
        <div>
            <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons e-refresh" IconPosition=@IconPosition.Right OnClick="Reload">Something went wrong.</SfButton>
        </div>
    }
    <div style="position: relative">
        <SfGantt @ref="Gantt" DataSource="@TaskCollection" BaselineColor="red" RenderBaseline="@renderBaseline" Width="100%" TreeColumnIndex="1" WorkUnit="WorkUnit.Hour">
            <GanttTaskFields Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                             ParentID="ParentId" Work="Work" TaskType="TaskType" BaselineStartDate="BaselineStartDate" BaselineEndDate="BaselineEndDate">
            </GanttTaskFields>
            <GanttLabelSettings RightLabel="Resources" TValue="GanttDataModel.TaskInfoModel"></GanttLabelSettings>
            <GanttEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" AllowTaskbarEditing="true"
                               ShowDeleteConfirmDialog="true"></GanttEditSettings>
            <GanttColumns>
                <GanttColumn Field="Id" HeaderText="ID" Visible="false"></GanttColumn>
                <GanttColumn Field="Name" HeaderText="Event Name" Width="250px"></GanttColumn>
                <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
            </GanttColumns>
            <GanttSplitterSettings Position="28%"> </GanttSplitterSettings>
            <SfToolbar ID="Gantt_Toolbar">
                <ToolbarItems>
                    <ToolbarItem>
                        <Template>
                            <SfButton IsPrimary ID="openAI" @onclick="OpenAIHandler">Predictive scheduling</SfButton>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </SfGantt>
    </div>
</div>


<style>
    #Gantt_Toolbar {
        border: 1px solid lightgray !important;
        padding: 4px !important;
    }

    .e-icons.e-refresh::before {
        content: '\e706';
    }
</style>
@code {
    public SfGantt<GanttDataModel.TaskInfoModel> Gantt = new();
    private bool renderBaseline { get; set; }
    private List<GanttDataModel.TaskInfoModel> TaskCollection { get; set; } = new();
    private string AIPrompt = string.Empty;
    private bool showMessage;

    protected override void OnInitialized()
    {
        TaskCollection = GanttDataModel.HistoricalTaskData;
    }
    private string GeneratePrompt(List<GanttDataModel.TaskInfoModel> TaskCollection)
    {
        return @"You analyze the historical data collection of multiple years used for the Gantt Chart project management. Based on the existing historcal data set collection you need to modified the project schedule values the below TaskDataCollection for the project management for the year of 2026. Avoid json tags with your response. No other explanation or content to be returned."
        + @" HistoricalDataCollections :" + GetHistoricalCoolection() + @" TaskDataCollection: " + JsonSerializer.Serialize(TaskCollection) +
        "Return the result collection in json format named as 'TaskCollection' key - its contains the list of tasks collection";

    }
    private async Task Reload()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
    private async Task OpenAIHandler()
    {
        await Gantt.ShowSpinnerAsync();
        showMessage = false;
        renderBaseline = false;
        List<MessageModel> Messages = new()
        {
            new MessageModel { role = "system", content = "You are a helpful assistant."}
        };
        Dictionary<string, IEnumerable<object>> ganttData = new Dictionary<string, IEnumerable<object>>();
        List<GanttDataModel.TaskInfoModel> generatedCollection = new();
        var currentView = Gantt.GetCurrentViewRecords();
        var AIPrompt = GeneratePrompt(currentView);
        string result = await OpenAIService.GetCompletionAsync(AIPrompt, true, true);

        var contentAIPrompt = "Ensure the result 'TaskIds' key - its contain modified record task ids(list of int) in json object format. Note: Return response must be in json string and with no other explanation.";

        string contentResult = await OpenAIService.GetCompletionAsync(contentAIPrompt, true, true);

        try
        {
            if (contentResult.StartsWith("```json"))
            {
                contentResult = contentResult.Replace("```json", "").Replace("```", "").Trim();
            }
            else if (contentResult.StartsWith("```"))
            {
                contentResult = contentResult.Replace("```", "").Replace("```", "").Trim();
            }
            string response = JsonDocument.Parse(result).RootElement.GetProperty("TaskCollection").ToString();
            if (response is not null)
            {
                var collection = JsonSerializer.Deserialize<List<GanttDataModel.TaskInfoModel>>(response);
                if (collection is not null)
                {
                    generatedCollection = collection;
                }
            }
            string taskIdResponse = JsonDocument.Parse(contentResult).RootElement.GetProperty("TaskIds").ToString();
            if (taskIdResponse is not null)
            {
                var collection = JsonSerializer.Deserialize<List<int>>(taskIdResponse);
                if (collection is not null)
                {
                    foreach (var id in collection)
                    {
                        var record = generatedCollection.Where(s => s.Id == id).FirstOrDefault();
                        var existingRecord = currentView.Where(s => s.Id == id).FirstOrDefault();
                        if (record is not null && existingRecord is not null)
                        {
                            record.BaselineStartDate = existingRecord.StartDate;
                            record.BaselineEndDate = existingRecord.EndDate;
                        }
                    }
                }
            }
            if (generatedCollection is not null && generatedCollection.Count > 0)
            {
                renderBaseline = true;
                TaskCollection = generatedCollection.Cast<GanttDataModel.TaskInfoModel>().ToList();
            }
        }
        catch (Exception e)
        {
            showMessage = true;
            await Gantt.HideSpinnerAsync();
            return;
        }
        await Gantt.HideSpinnerAsync();
        await Task.CompletedTask;
    }
    private string GetHistoricalCoolection()
    {
        string historicalDataCollection = string.Empty;
        for (int year = 2021; year < 2026; year++)
        {
            StreamReader streamReader = new StreamReader($"Model/HistoricalData{year}.json");
            historicalDataCollection += $"HistoricalDataCollection{year}: " + JsonDocument.Parse(streamReader.ReadToEnd()).RootElement.GetProperty($"HistoricalDataCollection{year}").ToString() + ", ";
        }
        return historicalDataCollection;
    }
}