@page "/ai-ganttchart/progress-predictor"
@page "/gantt-chart/ai-progress-predictor"


@inject AzureAIService OpenAIService
@using BlazorDemos.Model
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Service
@using System.IO

@inject IJSRuntime JsInterop
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@*End:Hidden*@

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<SampleDescription>
    <p>This sample showcases how to predict milestone task completion and project end dates using AI-driven analysis within a Gantt Chart. The predictions are displayed as event markers, providing visual cues for upcoming milestones and the overall project timeline.</p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our 
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>GitHub repository</strong>
        </a>.
    </p>
</SampleDescription>
<ActionDescription>
    <p>This functionality retrieves predicted milestone dates and the overall project completion date. The predictions are based on the current year's <strong>TaskCollection data</strong>, enhanced by analyzing historical TaskCollection data from the past five years.</p>

</ActionDescription>


<div class="col-lg-12 control-section" id="gantt-control-section">
    @if (showMessage)
    {
        <div>
            <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons e-refresh" IconPosition=@IconPosition.Right OnClick="Reload">Something went wrong.</SfButton>
        </div>
    }
    <div style="position: relative">
        <SfGantt @ref="Gantt" DataSource="@TaskCollection" Width="100%" TreeColumnIndex="1" WorkUnit="WorkUnit.Hour">
            <GanttTaskFields Dependency="Predecessor" Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
            ParentID="ParentId" Work="Work" TaskType="TaskType">
            </GanttTaskFields>
            <GanttEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GanttEditSettings>
            <GanttColumns>
                <GanttColumn Field="Id" HeaderText="ID" Visible="false"></GanttColumn>
                <GanttColumn Field="Name" HeaderText="Event Name" Width="250px"></GanttColumn>
                <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
            </GanttColumns>
            <GanttSplitterSettings Position="28%"> </GanttSplitterSettings>
            <SfToolbar ID="Gantt_Toolbar">
                <ToolbarItems>
                    <ToolbarItem>
                        <Template>
                            <SfButton IsPrimary ID="openAI" @onclick="OpenAIHandler">Predict milestone</SfButton>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
            <GanttEventMarkers>
                @{
                    if (milestoneDates.Any())
                    {
                        foreach (var data in milestoneDates)
                        {
                            if (data.Key == "Project Completion date")
                            {
                                <GanttEventMarker Day=@data.Value Label=@(data.Key)
                                CssClass="e-gantt-custom-event-marker"></GanttEventMarker>
                            }
                            else
                            {
                                <GanttEventMarker Day=@data.Value Label=@(data.Key + " completion date")
                                CssClass="e-custom-event-marker"></GanttEventMarker>
                            }
                        }

                    }
                }
            </GanttEventMarkers>
        </SfGantt>
    </div>
</div>


@code {
    public SfGantt<GanttDataModel.TaskInfoModel> Gantt = new();
    private List<GanttDataModel.TaskInfoModel> TaskCollection { get; set; } = new();
    private bool showMessage;
    private Dictionary<string, string> riskAnalyzeContent = new();
    private Dictionary<string, string> riskAnalyzePriority = new();
    private Dictionary<string, DateTime> milestoneDates = new();
  
    protected override void OnInitialized()
    {
        TaskCollection = GanttDataModel.TaskDataCollection;
    }
    private string GeneratePrompt()
    {
        return @"You analyze the multiple year HistoricalTaskDataCollections and current TaskDataCollection to predict project completion dates and milestones based on current progress and historical trends. Ignore the null or empty values, and collection values based parent child mapping. Avoid json tags with your response. No other explanation or content to be returned."
        + @" HistoricalTaskDataCollections :" + GetHistoricalCollection() + @" TaskDataCollection: " + JsonSerializer.Serialize(TaskCollection) +
                    @"Generate a JSON object named 'TaskDetails' containing below keys:
- Key 'MilestoneTaskDate' with a list of milestone dates 'MilestoneDate' with 'TaskName' - task name. A milestone date is defined as the end date of tasks with a duration of 0 and only give current based milestone .
- Key 'ProjectCompletionDate' indicating the latest end date among all tasks.
- Key 'Summary' providing a summary of the project completion date and milestones.
        Here is the output JSON schema:
        {
      'TaskDetails': {
        'MilestoneTaskDate': [],
        'ProjectCompletionDate' : '',
        'Summary' : ''
        }
    }

Ensure milestones are defined correctly based on tasks with a duration of 0, and the project completion date reflects the latest end date of all tasks.
.";
    }
    private async Task Reload()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
    private async Task OpenAIHandler()
    {
        await Gantt.ShowSpinnerAsync();
        showMessage = false;
        milestoneDates = new();
        string AIPrompt = GeneratePrompt();
        string result = await OpenAIService.GetCompletionAsync(AIPrompt);

        try
        {
            if (result.StartsWith("```json"))
            {
                result = result.Replace("```json", "").Replace("```", "").Trim();
            }
            else if (result.StartsWith("```"))
            {
                result = result.Replace("```", "").Replace("```", "").Trim();
            }
            var content = JsonDocument.Parse(result).RootElement.GetProperty("TaskDetails").ToString();
            using (JsonDocument document = JsonDocument.Parse(content))
            {
                if (document.RootElement.TryGetProperty("MilestoneTaskDate", out JsonElement milestoneElement))
                {
                    foreach (var milestone in milestoneElement.EnumerateArray())
                    {
                        var datas = JsonSerializer.Deserialize<Dictionary<string, string>>(milestone);
                        if (milestoneDates.Any() && milestoneDates.ContainsKey(datas["TaskName"]))
                        {
                            continue;
                        }
                        var record = GanttDataModel.TaskDataCollection.Where(s => s.Name == datas["TaskName"]).FirstOrDefault();
                        if (record is not null)
                        {
                            var parentRecord = GanttDataModel.TaskDataCollection.Where(s => s.Id == record.ParentId).FirstOrDefault();
                            if (parentRecord is not null)
                            {
                                milestoneDates.Add(parentRecord.Name, Convert.ToDateTime(datas["MilestoneDate"]));
                            }
                        }
                    }
                }
            }
            var collection = JsonSerializer.Deserialize<Dictionary<string, object>>(content);

            if (collection is null)
            {
                await Gantt.HideSpinnerAsync();
                return;
            }
            await Task.Delay(100);
            if (DateTime.TryParse(collection["ProjectCompletionDate"].ToString(), out DateTime projectDate))
            {
                milestoneDates.Add("Project Completion date", projectDate);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            showMessage = true;
            await Gantt.HideSpinnerAsync();
            return;
        }
        await Gantt.HideSpinnerAsync();
        await Task.CompletedTask;
    }
    private string GetHistoricalCollection()
    {
        string historicalDataCollection = string.Empty;

        for (int year = 2021; year < 2026; year++)
        {
            string currentDir = Directory.GetCurrentDirectory();
            // Combine the current directory with the relative path
            string fullPath = Path.Combine(currentDir, "Model/ProgressHistoricalData.json");
            StreamReader streamReader = new StreamReader(fullPath);
            historicalDataCollection += $"HistoricalTaskDataCollection{year}: " + JsonDocument.Parse(streamReader.ReadToEnd()).RootElement.GetProperty($"TaskDataCollection{year}").ToString() + ", ";
        }
        return historicalDataCollection;
    }
}

<style>

    #Gantt_Toolbar {
        border: 1px solid lightgray !important;
        padding: 4px !important;
    }

    .e-custom-event-marker {
        border-left: 1px dashed red !important;
    }

    .e-custom-event-marker .e-span-label {
        color: red !important;
    }

    .e-gantt-custom-event-marker {
        border-left: 1px dashed green !important;
    }

    .e-gantt-custom-event-marker .e-span-label {
        color: green !important;
    }

    .e-icons.e-refresh::before {
        content: '\e706';
    }
</style>