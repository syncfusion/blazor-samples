@page "/ai-ganttchart/risk-assessor"
@page "/gantt-chart/ai-risk-assessor"


@inject AzureAIService OpenAIService
@using BlazorDemos.Model
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Service

@inject IJSRuntime JsInterop
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@*End:Hidden*@

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to identify tasks at risk based on their duration and dependencies within the Blazor Gantt Chart. Tasks that are determined to be critical are highlighted by dynamically changing their taskbar colors, making it easy to visualize potential risks in your project timeline.</p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>
<ActionDescription>
     <p>This action identifies tasks that are at risk by analyzing their duration and dependencies, then highlights these tasks by applying distinctive colors to their taskbars.</p>
</ActionDescription>

<div class="col-lg-12 control-section" id="gantt-control-section">
    @if (showMessage)
    {
        <div>
            <SfButton CssClass="e-flat" IsPrimary="true" IconCss="e-icons e-refresh" IconPosition=@IconPosition.Right OnClick="Reload">Something went wrong.</SfButton>
        </div>
    }
    <div style="position: relative">
        <SfGantt @ref="Gantt" EnableCriticalPath="true" ProjectStartDate="@(new DateTime(2021,03,28))" ProjectEndDate="@(new DateTime(2021,07,30))" DataSource="@TaskCollection" Width="100%" TreeColumnIndex="1" WorkUnit="WorkUnit.Hour">
            <GanttTaskFields Dependency="Predecessor" Id="Id" Name="Name" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                             ParentID="ParentId" Work="Work" TaskType="TaskType">
            </GanttTaskFields>
            <GanttEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GanttEditSettings>
            <GanttTemplates TValue="GanttDataModel.TaskInfoModel">
                <TaskbarTemplate>
                    @{
                        var task = (context as GanttDataModel.TaskInfoModel);
                        if (task == null)
                        {
                            return;
                        }
                        var taskModel = Gantt.GetRowTaskModel(task);
                        string className = string.Empty;
                        if (riskAnalyzePriority.Any() && riskAnalyzePriority.ContainsKey(task.Id.ToString()))
                        {
                            if ((riskAnalyzePriority[task.Id.ToString()]).ToLower().Contains("high"))
                            {
                                className = "e-sf-ai-taskbar-red";
                            }
                            else if ((riskAnalyzePriority[task.Id.ToString()]).ToLower().Contains("low"))
                            {
                                className = "e-sf-ai-taskbar-orange";
                            }
                        }
                        <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div @className" style="height:22px;" tabindex=-1>
                            <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar  @className" style="height:22px;width:@(taskModel.ProgressWidth + "px");text-align: right;border-radius: 0px;">
                            </div>
                        </div>
                    }
                </TaskbarTemplate>
            </GanttTemplates>
            <GanttColumns>
                <GanttColumn Field="Id" HeaderText="ID" Visible="false"></GanttColumn>
                <GanttColumn Field="Name" HeaderText="Event Name" Width="250px"></GanttColumn>
                <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
            </GanttColumns>
            <GanttLabelSettings TValue="GanttDataModel.TaskInfoModel">
                <RightLabelTemplate>
                    @{
                        var task = context as GanttDataModel.TaskInfoModel;
                        if (riskAnalyzeContent.Any() && riskAnalyzeContent.ContainsKey(task.Id.ToString()))
                        {
                            <p class="e-sf-ai-label-content">@riskAnalyzeContent[task.Id.ToString()]</p>
                        }
                    }
                </RightLabelTemplate>
            </GanttLabelSettings>
            <GanttCriticalPathSettings SlackValue="1"> </GanttCriticalPathSettings>
            <GanttSplitterSettings Position="28%"> </GanttSplitterSettings>
            <SfToolbar ID="Gantt_Toolbar">
                <ToolbarItems>
                    <ToolbarItem>
                        <Template>
                            <SfButton IsPrimary ID="openAI" @onclick="OpenAIHandler">Analyze Risk</SfButton>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </SfGantt>
    </div>
</div>


<style>
    #Gantt_Toolbar {
        border: 1px solid lightgray !important;
        padding: 4px !important;
    }

    .e-icons.e-refresh::before {
        content: '\e706';
    }

    .e-sf-ai-label-content {
        font-size: 14px;
        font-weight: 400;
        padding-top: 6px;
        color: #000000;
    }

    .e-sf-ai-taskbar-red {
        background: red !important;
    }

    .e-sf-ai-taskbar-orange {
        background: orange !important;
    }
</style>
@code {
    public SfGantt<GanttDataModel.TaskInfoModel> Gantt = new();
    private List<GanttDataModel.TaskInfoModel> TaskCollection { get; set; } = new();
    private bool showMessage;
    private Dictionary<string, string> riskAnalyzeContent = new();
    private Dictionary<string, string> riskAnalyzePriority = new();

    protected override void OnInitialized()
    {
        TaskCollection = GanttDataModel.DataSourceCollection();
    }
    private string GeneratePrompt(List<GanttDataModel.TaskInfoModel> TaskCollection)
    {
        return @"

1, You analyze the project complete collection in below 'TaskCollection' to identify potential risks and suggest mitigation strategies.
2, The collection contains the predessor(Dependency) values with type of SS(start to start), SF(Start to finish), FS(finish to start), FF(finish to finish) and the default type is SS. Depdency values not necessory in each task.
3, Analyze the complete project task collection duration and if any task get risk whole project and dependent task gets risk.
        TaskCollection: " + JsonSerializer.Serialize(Gantt.GetCurrentViewRecords())

        + @"Ensure the output is in JSON object format name of 'TaskDetails' alone with `Priority` key - high or low risk and `Summary` key  - details of the risk and mitigation strategy and Summary details given format is (TaskId-summary details), don't give another values and avoid any unwanted content or unwanted JSON tags. No other explanation or content to be returned.

        Output format:
        '{
        'TaskDetails':[{
        'Priority':value,
        'Summary':value
        },]
        }'

        Don't give any other values. Note: Return only this JSON response with no other content.";
    }
    private async Task Reload()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
    private async Task OpenAIHandler()
    {
        await Gantt.ShowSpinnerAsync();
        showMessage = false;
        riskAnalyzeContent = new();
        riskAnalyzePriority = new();
        string AIPrompt = GeneratePrompt(GanttDataModel.HistoricalTaskData);
        string result = await OpenAIService.GetCompletionAsync(AIPrompt);

        try
        {
            if (result.StartsWith("```json"))
            {
                result = result.Replace("```json", "").Replace("```", "").Trim();
            }
            else if (result.StartsWith("```"))
            {
                result = result.Replace("```", "").Replace("```", "").Trim();
            }
            var content = JsonDocument.Parse(result).RootElement.GetProperty("TaskDetails").ToString();
            var collection = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(content);
            if (collection is null)
            {
                await Gantt.HideSpinnerAsync();
                return;
            }
            foreach (var data in collection)
            {
                var id = data["Summary"].Split("-")[0];
                riskAnalyzeContent.Add(id, data["Summary"].Split("-")[1]);
                riskAnalyzePriority.Add(id, data["Priority"]);
            }
            await Gantt.RefreshAsync();
        }
        catch (Exception e)
        {
            showMessage = true;
            await Gantt.HideSpinnerAsync();
            return;
        }
        await Gantt.HideSpinnerAsync();
        await Task.CompletedTask;
    }
}
