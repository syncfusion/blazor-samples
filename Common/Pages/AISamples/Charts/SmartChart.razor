@page "/ai-charts/smart-chart"
@page "/chart/ai-smart-chart"

@inject AzureAIService OpenAIService
@inject NavigationManager NavigationManager

@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.RegularExpressions
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.InteractiveChat
@using ThemeHelper
@using BlazorDemos.Model
@using BlazorDemos.Service
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

@*Hidden:Lines*@
<AINotification></AINotification>

<AIToastNotification></AIToastNotification>
@*End:Hidden*@


<SampleDescription>
    <p>
        This sample demonstrates how AI can convert natural language into chart data and visualize it using Syncfusion Blazor Charts.
    </p>
    <p>
        <strong>Smart Charts</strong> interprets the prompts provided in the AI AssistView and transforms them into the data required for chart rendering. The resulting chart is then displayed using Syncfusion Blazor Charts.
    </p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and experiment with these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this sample, charts are generated based on prompts entered in the AI AssistView component. The sample supports various chart types, including <code>Line</code>, <code>Column</code>, <code>Spline</code>, <code>Area</code>, <code>Pie</code>, and <code>Donut</code>. Supported axis types include <code>Category</code>, <code>Numeric</code>, <code>DateTime</code>, and <code>Logarithmic</code>.
    </p>
</ActionDescription>

<div class="main-container">
    <SfSidebar ID="Sidebar"
               Type="SidebarType.Push"
               Width="280px"
               @bind-IsOpen="SidebarToggle"
               Target=".maincontent"
               EnablePersistence="false"
               Position="SidebarPosition.Right">
        <ChildContent>
            <div class="sidebar-content">
                <div class="sidebar-header">
                    <h3>Chat History</h3>
                    <SfButton IconCss="e-icons e-close"
                              CssClass="close-btn-sf"
                              OnClick="@ToggleSidebar"
                              Title="Close">
                    </SfButton>
                </div>
                <div class="chat-history-list">
                    @foreach (var history in chatHistories)
                    {
                        <div class="history-item @(currentChatHistory?.Title == history.Title ? "active" : "")"
                             @onclick="() => LoadChatHistory(history)">
                            <div class="history-title">@history.Title</div>
                            <div class="history-date">@history.ConversationCreatedDate.ToString("MMM dd, yyyy")</div>
                            <div class="history-actions">
                                <SfButton IconCss="e-icons e-trash"
                                          CssClass="action-btn-sf"
                                          OnClick="@(() => DeleteChatHistory(history))">
                                </SfButton>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </ChildContent>
    </SfSidebar>
    <div id="head">
        <div class="default-aiassistview">
            <SfAIAssistView @ref="sfAIAssistView" ID="aiAssistView" PromptSuggestions="@SuggestionMessages" PromptRequested="@PromptRequest" PromptChanged="@OnPromptChanged" ShowHeader="true" Width="100%" Height="100%">
                <AssistViewToolbar ItemClicked="ToolbarItemClicked">
                    <AssistViewToolbarItem Type="ItemType.Spacer" />
                    <AssistViewToolbarItem Type="ItemType.Button" Tooltip="New Chat" IconCss="@GetNewChatIconCss()" CssClass="custom-btn"></AssistViewToolbarItem>
                    <AssistViewToolbarItem Type="ItemType.Button" IconCss="e-icons e-menu" CssClass="custom-btn" Tooltip="Menu" />
                </AssistViewToolbar>
                <ResponseToolbar>
                    <ResponseToolbarItem IconCss="e-icons e-assist-like"></ResponseToolbarItem>
                    <ResponseToolbarItem IconCss="e-icons e-assist-dislike"></ResponseToolbarItem>
                </ResponseToolbar>
                <AssistViews>
                    <AssistView>
                        <BannerTemplate>
                            @if (isBannerTemplate)
                            {
                                <div class="banner-content">
                                    <div class="e-icons e-assistview-icon"></div>
                                    <h3>@headerText</h3>
                                    <i>To get started, provide input or choose a suggestion.</i>
                                </div>
                            }
                        </BannerTemplate>
                        <ResponseItemTemplate>
                            @{
                                var message = context;
                                if (message != null)
                                {
                                    <div class="response-item">
                                        @if (IsChartMessage(message))
                                        {
                                            var chartConfig = GetChartConfig(message);
                                            if (chartConfig != null)
                                            {
                                                <div class="chart-response">
                                                    <div class="chart-text">@GetDisplayText(message)</div>
                                                    @if (chartConfig.Series?.Any() == true && chartConfig.ChartType == ChartTypeEnum.Cartesian)
                                                    {
                                                        <div class="chart-container">
                                                            <SfChart Title="@chartConfig.Title" EnableSideBySidePlacement="@chartConfig.SideBySidePlacement" Theme="@Theme" EnableAdaptiveRendering="true" Width="100%">
                                                                <ChartPrimaryXAxis Title="@GetXAxisTitle(chartConfig)" ValueType="@GetXAxisType(chartConfig)" LabelRotation="@GetXAxisRotation(chartConfig)">
                                                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                                                </ChartPrimaryXAxis>
                                                                <ChartPrimaryYAxis Title="@GetYAxisTitle(chartConfig)" ValueType="@GetYAxisType(chartConfig)">
                                                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                                                </ChartPrimaryYAxis>
                                                                <ChartLegendSettings Visible="@chartConfig.ShowLegend" Position="LegendPosition.Bottom" ToggleVisibility="true"></ChartLegendSettings>
                                                                <ChartSeriesCollection>
                                                                    @foreach (var series in chartConfig.Series)
                                                                    {
                                                                        if (series.Type == SeriesType.Column)
                                                                        {
                                                                            <ChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="ChartSeriesType.Column" Fill="@GetSeriesColor(series, chartConfig)" EnableTooltip="@series.EnableTooltip">
                                                                                <ChartSeriesAnimation Enable="true"></ChartSeriesAnimation>
                                                                                <ChartCornerRadius TopLeft="4" TopRight="4"></ChartCornerRadius>
                                                                            </ChartSeries>
                                                                        }
                                                                        else if (series.Type == SeriesType.Line)
                                                                        {
                                                                            <ChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="ChartSeriesType.Line" Fill="@GetSeriesColor(series, chartConfig)" Width="3" EnableTooltip="@series.EnableTooltip">
                                                                                <ChartSeriesAnimation Enable="true"></ChartSeriesAnimation>
                                                                                <ChartMarker Visible="true" Height="7" Width="7">
                                                                                    <ChartMarkerBorder Width="2" Color="@GetSeriesColor(series, chartConfig)"></ChartMarkerBorder>
                                                                                </ChartMarker>
                                                                            </ChartSeries>
                                                                        }
                                                                        else if (series.Type == SeriesType.Area)
                                                                        {
                                                                            <ChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="ChartSeriesType.Area" Fill="@GetSeriesColor(series, chartConfig)" Opacity="0.7" EnableTooltip="@series.EnableTooltip">
                                                                                <ChartSeriesAnimation Enable="true"></ChartSeriesAnimation>
                                                                            </ChartSeries>
                                                                        }
                                                                        else if (series.Type == SeriesType.Spline)
                                                                        {
                                                                            <ChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="ChartSeriesType.Spline" Fill="@GetSeriesColor(series, chartConfig)" Width="3" EnableTooltip="@series.EnableTooltip">
                                                                                <ChartSeriesAnimation Enable="true"></ChartSeriesAnimation>
                                                                                <ChartMarker Visible="true" Height="7" Width="7">
                                                                                    <ChartMarkerBorder Width="2" Color="@GetSeriesColor(series, chartConfig)"></ChartMarkerBorder>
                                                                                </ChartMarker>
                                                                            </ChartSeries>
                                                                        }
                                                                    }
                                                                </ChartSeriesCollection>
                                                                <ChartTooltipSettings Enable="true" Format="${point.x} : ${point.y}" EnableMarker="true"></ChartTooltipSettings>
                                                            </SfChart>
                                                        </div>
                                                    }
                                                    @if (chartConfig.Series?.Any() == true && chartConfig.ChartType == ChartTypeEnum.Circular)
                                                    {
                                                        <div class="chart-container">
                                                            <SfAccumulationChart Title="@chartConfig.Title" Theme="@Theme" EnableAdaptiveRendering="true" Width="100%">
                                                                <AccumulationChartLegendSettings Visible="@chartConfig.ShowLegend" Position="LegendPosition.Right" ToggleVisibility="true"></AccumulationChartLegendSettings>
                                                                <AccumulationChartSeriesCollection>
                                                                    @foreach (var series in chartConfig.Series)
                                                                    {
                                                                        if (series.Type == SeriesType.Pie)
                                                                        {
                                                                            <AccumulationChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="AccumulationType.Pie" Radius="80%" StartAngle="0" EndAngle="360" Explode="false" ExplodeOffset="10%" EnableTooltip="@series.EnableTooltip">
                                                                                <AccumulationChartAnimation Enable="true"></AccumulationChartAnimation>
                                                                                <AccumulationDataLabelSettings Visible="true" Name="XValue" Position="AccumulationLabelPosition.Outside">
                                                                                    <AccumulationChartConnector Type="ConnectorType.Line" Length="30px"></AccumulationChartConnector>
                                                                                </AccumulationDataLabelSettings>
                                                                            </AccumulationChartSeries>
                                                                        }
                                                                        else if (series.Type == SeriesType.Doughnut)
                                                                        {
                                                                            <AccumulationChartSeries DataSource="@series.DataSource" Name="@series.Name" XName="@series.XBindingPath" YName="@series.YBindingPath" Type="AccumulationType.Pie" Radius="80%" InnerRadius="40%" StartAngle="0" EndAngle="360" Explode="false" ExplodeOffset="10%" EnableTooltip="@series.EnableTooltip">
                                                                                <AccumulationChartAnimation Enable="true"></AccumulationChartAnimation>
                                                                                <AccumulationDataLabelSettings Visible="true" Name="XValue" Position="AccumulationLabelPosition.Outside">
                                                                                    <AccumulationChartConnector Type="ConnectorType.Line" Length="30px"></AccumulationChartConnector>
                                                                                </AccumulationDataLabelSettings>
                                                                            </AccumulationChartSeries>
                                                                        }
                                                                    }
                                                                </AccumulationChartSeriesCollection>
                                                                <AccumulationChartTooltipSettings Enable="true" Format="${point.x} : ${point.y}%"></AccumulationChartTooltipSettings>
                                                            </SfAccumulationChart>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="text-response">
                                                    @((MarkupString)FormatMessage(message.Response))
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-response">
                                                @((MarkupString)FormatMessage(message.Response))
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        </ResponseItemTemplate>
                    </AssistView>
                </AssistViews>
            </SfAIAssistView>
        </div>
    </div>
</div>


@code {
    public bool SidebarToggle = false;
    public List<string> SuggestionMessages { get; set; } = new();
    internal string CurrentMessage = string.Empty;
    private SfAIAssistView? sfAIAssistView;
    private List<ChatMessageModel> messages = new();
    private List<ChatHistoryModel> chatHistories = new();
    private ChatHistoryModel? currentChatHistory;
    private string headerText = "How can I help you today?";
    private List<string> headerPrompts = new();
    private static readonly Random randomizer = new();
    private bool isDeleteCalled;
    private bool isBannerTemplate = true;
    private Theme Theme { get; set; }
    private bool isLoadingHistory = false;

    private static readonly List<string> chartResponses = new()
    {
        "Here's the chart based on your request:",
        "Your data visualization is ready:",
        "Generated chart as per your input:",
        "This chart illustrates the information you asked for:",
        "Here's what your data looks like in chart form:",
        "Hope this chart helps you see the trends clearly!",
        "Transformed your idea into a visual story:",
        "Turning numbers into visuals—here's your chart!"
    };

    private void ToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss.Contains("e-menu"))
        {
            ToggleSidebar();
        }
        else if (args.Item.IconCss.Contains("e-rename") || args.Item.IconCss.Contains("e-edit-notes"))
        {
            CloseChatHistory();
            ClearChat();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        await LoadChatHistories();
        InitializeHeaderPrompts();
    }

    private string GetNewChatIconCss()
    {
        string themeStr = Theme.ToString() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(themeStr) || themeStr.Contains("Fluent", StringComparison.OrdinalIgnoreCase) || themeStr.Contains("Bootstrap4", StringComparison.OrdinalIgnoreCase))
        {
            return "e-icons e-edit-notes";
        }
        return "e-icons e-rename";
    }

    private void InitializeHeaderPrompts()
    {
        SuggestionMessages = headerPrompts = new List<string>()
        {
            "Visualize profit trends over time",
            "Display regional sales comparison",
            "Track monthly website traffic",
        };
    }

    public void ToggleSidebar() => SidebarToggle = !SidebarToggle;

    private void CloseChatHistory() => SidebarToggle = false;

    public void ClearChat()
    {
        StartNewChat();
        if (sfAIAssistView != null)
        {
            InitializeHeaderPrompts();
            ClearAssistView(headerPrompts);
        }
    }

    internal void ClearAssistView(List<string> prompts)
    {
        if (sfAIAssistView != null)
        {
            sfAIAssistView.Prompts.Clear();
            SuggestionMessages = prompts;
            isBannerTemplate = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadChatHistories()
    {
        chatHistories = new List<ChatHistoryModel>();
        StartNewChat();
        StateHasChanged();
    }

    private async Task HandleMessageSent(ChatMessageModel userMessage)
    {
        messages.Add(userMessage);
        StateHasChanged();

        try
        {
            ChatMessageModel? aiResponse = null;

            if (IsChartRequest(userMessage.Text))
            {
                string prompt = GetChartUserPrompt(userMessage.Text);
                string textResponse = await OpenAIService.GetCompletionAsync(prompt, true);

                string cleanedJson = Regex.Replace(textResponse, @"[^\u0000-\u007F]+", string.Empty).Trim();
                cleanedJson = Encoding.UTF8.GetString(Encoding.UTF8.GetBytes(cleanedJson));

                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase) }
                    };

                aiResponse = new ChatMessageModel
                    {
                        Text = GetRandomChartResponse(),
                        TimeStamp = DateTime.Now,
                        MessageType = ChatMessageType.Chart,
                        ChartConfig = JsonSerializer.Deserialize<ChartConfig>(cleanedJson, options)
                    };
            }
            else
            {
                if (sfAIAssistView == null) return;
                CurrentMessage = "Include the keyword 'chart' or any other term commonly associated with data visualization in the prompt.";
            }

            if (aiResponse != null && messages.Count > 0 && sfAIAssistView != null)
            {
                messages.Add(aiResponse);
                if (!isLoadingHistory)
                {
                    SaveCurrentChat();
                }
                CurrentMessage = JsonSerializer.Serialize(aiResponse);
            }
        }
        catch (Exception ex)
        {
            var errorMessage = new ChatMessageModel
                {
                    Text = $"Apologies, an error occurred while processing your request: {ex.Message}",
                    TimeStamp = DateTime.Now,
                    MessageType = ChatMessageType.Text
                };
            messages.Add(errorMessage);
            if (sfAIAssistView == null) return;
            CurrentMessage = "Apologies, an error occurred while processing your request. Please try again later or check your API configuration and usage limits.";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task PromptRequest(AssistViewPromptRequestedEventArgs args)
    {
        CloseChatHistory();
        isBannerTemplate = false;
        await OnMessageSend(args);
        args.Response = CurrentMessage;
        args.PromptSuggestions.Clear();
    }

    private void OnPromptChanged(string _) => CloseChatHistory();

    private async Task OnMessageSend(AssistViewPromptRequestedEventArgs args)
    {
        await HandleMessageSent(new ChatMessageModel
            {
                Text = args.Prompt,
                TimeStamp = DateTime.Now,
                MessageType = ChatMessageType.Text
            });
    }

    private bool IsChartRequest(string text)
    {
        var chartKeywords = new[] {
            "chart", "graph", "plot", "visualize", "visualization", "data",
            "statistics", "bar", "pie", "line", "area", "column", "doughnut", "comparison", "track", "compare", "display"
        };
        return chartKeywords.Any(keyword => text.ToLower().Contains(keyword));
    }

    private void SaveCurrentChat()
    {
        if (messages.Any())
        {
            if (currentChatHistory == null)
            {
                currentChatHistory = new ChatHistoryModel
                    {
                        Title = GenerateChatTitle(),
                        ConversationCreatedDate = DateTime.Now,
                        Messages = new System.Collections.ObjectModel.ObservableCollection<ChatMessageModel>(messages)
                    };
                chatHistories.Insert(0, currentChatHistory);
            }
            else
            {
                currentChatHistory.Messages = new System.Collections.ObjectModel.ObservableCollection<ChatMessageModel>(messages);
            }
        }
    }

    private string GenerateChatTitle()
    {
        var firstUserMessage = messages.FirstOrDefault()?.Text;
        return !string.IsNullOrEmpty(firstUserMessage)
            ? (firstUserMessage.Length > 50 ? firstUserMessage[..47] + "..." : firstUserMessage)
            : $"Chat {DateTime.Now:MMM dd, HH:mm}";
    }

    private void StartNewChat()
    {
        messages.Clear();
        currentChatHistory = null;
        headerText = "How can I help you today?";
        InitializeHeaderPrompts();
        StateHasChanged();
    }

    private async Task LoadChatHistory(ChatHistoryModel history)
    {
        if (isDeleteCalled)
        {
            isDeleteCalled = false;
            return;
        }
        isLoadingHistory = true;
        ClearAssistView(new List<string>());
        currentChatHistory = history;
        messages.Clear();
        messages = history.Messages.Where(m => !string.IsNullOrWhiteSpace(m.Text)).Select(m => new ChatMessageModel { Text = m.Text, MessageType = m.MessageType, }).ToList();
        var prompts = messages.Where(m => m.MessageType == ChatMessageType.Text).Select(m => m.Text).ToList();
        if (sfAIAssistView != null)
        {
            foreach (var prompt in prompts)
            {
                await GenerateContent(prompt);
            }
        }
        isLoadingHistory = false;
        StateHasChanged();
    }

    internal async Task GenerateContent(string prompt)
    {
        if (sfAIAssistView != null)
        {
            await sfAIAssistView.ExecutePromptAsync(prompt);
        }
    }

    private async Task DeleteChatHistory(ChatHistoryModel history)
    {
        isDeleteCalled = true;
        chatHistories.Remove(history);

        if (currentChatHistory?.Title == history.Title)
        {
            ClearChat();
        }
    }

    private string GetRandomChartResponse() => chartResponses[randomizer.Next(chartResponses.Count)];

    private bool IsChartMessage(ResponseItemTemplateContext message) =>
        message.Response.Contains("CHART", StringComparison.InvariantCultureIgnoreCase);

    private ChartConfig? GetChartConfig(ResponseItemTemplateContext message)
    {
        try
        {
            var model = JsonSerializer.Deserialize<ChatMessageModel>(message.Response);
            return model?.ChartConfig;
        }
        catch
        {
            return null;
        }
    }

    private string GetDisplayText(ResponseItemTemplateContext message)
    {
        try
        {
            var model = JsonSerializer.Deserialize<ChatMessageModel>(message.Response);
            return model?.Text ?? message.Response;
        }
        catch
        {
            return message.Response;
        }
    }

    private string FormatMessage(string message)
    {
        if (string.IsNullOrEmpty(message)) return string.Empty;

        message = Regex.Replace(message, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        message = Regex.Replace(message, @"\*(.*?)\*", "<em>$1</em>");
        message = Regex.Replace(message, @"`(.*?)`", "<code>$1</code>");
        return message.Replace("\n", "<br>");
    }

    private string GetXAxisTitle(ChartConfig config) => config?.XAxis?.FirstOrDefault()?.Title ?? "X Axis";
    private string GetYAxisTitle(ChartConfig config) => config?.YAxis?.FirstOrDefault()?.Title ?? "Y Axis";
    private double GetXAxisRotation(ChartConfig config) => config?.XAxis?.FirstOrDefault()?.LabelRotation ?? 0;

    private Syncfusion.Blazor.Charts.ValueType GetXAxisType(ChartConfig config)
    {
        return config?.XAxis?.FirstOrDefault()?.Type switch
        {
            AxisType.Category => Syncfusion.Blazor.Charts.ValueType.Category,
            AxisType.Numerical => Syncfusion.Blazor.Charts.ValueType.Double,
            AxisType.DateTime => Syncfusion.Blazor.Charts.ValueType.DateTime,
            AxisType.Logarithmic => Syncfusion.Blazor.Charts.ValueType.Logarithmic,
            _ => Syncfusion.Blazor.Charts.ValueType.Category
        };
    }

    private Syncfusion.Blazor.Charts.ValueType GetYAxisType(ChartConfig config)
    {
        return config?.YAxis?.FirstOrDefault()?.Type switch
        {
            AxisType.Numerical => Syncfusion.Blazor.Charts.ValueType.Double,
            AxisType.DateTime => Syncfusion.Blazor.Charts.ValueType.DateTime,
            AxisType.Logarithmic => Syncfusion.Blazor.Charts.ValueType.Logarithmic,
            _ => Syncfusion.Blazor.Charts.ValueType.Double
        };
    }

    private string GetSeriesColor(SeriesConfig series, ChartConfig config)
    {
        var colors = new[]
        {
            "#1089E9", "#08CDAA", "#F58400", "#9656FF", "#F9C200",
            "#F954A3", "#05BB3D", "#06B1E2", "#FF4E4E"
        };

        if (!string.IsNullOrEmpty(series.Fill))
            return series.Fill;

        var index = config.Series.ToList().IndexOf(series);
        return colors[index % colors.Length];
    }

    public ChartConfig? GenerateChartFromPrompt(string prompt)
    {
        var lowerPrompt = prompt.ToLower();

        if (lowerPrompt.Contains("pie") || lowerPrompt.Contains("doughnut"))
            return GeneratePieChart();
        else if (lowerPrompt.Contains("line") || lowerPrompt.Contains("trend"))
            return GenerateLineChart();
        else if (lowerPrompt.Contains("bar") || lowerPrompt.Contains("column"))
            return GenerateColumnChart();
        else if (lowerPrompt.Contains("area"))
            return GenerateAreaChart();
        else
            return GenerateColumnChart();
    }

    private ChartConfig GeneratePieChart()
    {
        return new ChartConfig
            {
                Title = "Sample Pie Chart",
                ChartType = ChartTypeEnum.Circular,
                ShowLegend = true,
                Series = new System.Collections.ObjectModel.ObservableCollection<SeriesConfig>
            {
                new SeriesConfig
                {
                    Type = SeriesType.Pie,
                    Name = "Data Series",
                    DataSource = new System.Collections.ObjectModel.ObservableCollection<ChartDataModel>
                    {
                        new ChartDataModel { XValue = "Category A", YValue = 30 },
                        new ChartDataModel { XValue = "Category B", YValue = 25 },
                        new ChartDataModel { XValue = "Category C", YValue = 20 },
                        new ChartDataModel { XValue = "Category D", YValue = 15 },
                        new ChartDataModel { XValue = "Category E", YValue = 10 }
                    }
                }
            }
            };
    }

    private ChartConfig GenerateColumnChart()
    {
        return new ChartConfig
            {
                Title = "Sample Column Chart",
                ChartType = ChartTypeEnum.Cartesian,
                ShowLegend = true,
                SideBySidePlacement = true,
                XAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Categories", Type = AxisType.Category }
            },
                YAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Values", Type = AxisType.Numerical }
            },
                Series = new System.Collections.ObjectModel.ObservableCollection<SeriesConfig>
            {
                new SeriesConfig
                {
                    Type = SeriesType.Column,
                    Name = "Sales Data",
                    DataSource = new System.Collections.ObjectModel.ObservableCollection<ChartDataModel>
                    {
                        new ChartDataModel { XValue = "Jan", YValue = 35 },
                        new ChartDataModel { XValue = "Feb", YValue = 28 },
                        new ChartDataModel { XValue = "Mar", YValue = 34 },
                        new ChartDataModel { XValue = "Apr", YValue = 32 },
                        new ChartDataModel { XValue = "May", YValue = 40 },
                        new ChartDataModel { XValue = "Jun", YValue = 32 }
                    }
                }
            }
            };
    }

    private ChartConfig GenerateLineChart()
    {
        return new ChartConfig
            {
                Title = "Sample Line Chart",
                ChartType = ChartTypeEnum.Cartesian,
                ShowLegend = true,
                XAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Time Period", Type = AxisType.Category }
            },
                YAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Values", Type = AxisType.Numerical }
            },
                Series = new System.Collections.ObjectModel.ObservableCollection<SeriesConfig>
            {
                new SeriesConfig
                {
                    Type = SeriesType.Line,
                    Name = "Trend Data",
                    DataSource = new System.Collections.ObjectModel.ObservableCollection<ChartDataModel>
                    {
                        new ChartDataModel { XValue = "Q1", YValue = 21 },
                        new ChartDataModel { XValue = "Q2", YValue = 24 },
                        new ChartDataModel { XValue = "Q3", YValue = 36 },
                        new ChartDataModel { XValue = "Q4", YValue = 38 }
                    }
                }
            }
            };
    }

    private ChartConfig GenerateAreaChart()
    {
        return new ChartConfig
            {
                Title = "Sample Area Chart",
                ChartType = ChartTypeEnum.Cartesian,
                ShowLegend = true,
                XAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Months", Type = AxisType.Category }
            },
                YAxis = new System.Collections.ObjectModel.ObservableCollection<AxisConfig>
            {
                new AxisConfig { Title = "Revenue", Type = AxisType.Numerical }
            },
                Series = new System.Collections.ObjectModel.ObservableCollection<SeriesConfig>
            {
                new SeriesConfig
                {
                    Type = SeriesType.Area,
                    Name = "Revenue",
                    DataSource = new System.Collections.ObjectModel.ObservableCollection<ChartDataModel>
                    {
                        new ChartDataModel { XValue = "Jan", YValue = 10 },
                        new ChartDataModel { XValue = "Feb", YValue = 20 },
                        new ChartDataModel { XValue = "Mar", YValue = 30 },
                        new ChartDataModel { XValue = "Apr", YValue = 40 },
                        new ChartDataModel { XValue = "May", YValue = 50 },
                        new ChartDataModel { XValue = "Jun", YValue = 60 }
                    }
                }
            }
            };
    }

    private string GetChartUserPrompt(string userPrompt)
    {
        string userQuery = @"
        You are a data visualization assistant. Your task is to convert user inputs describing chart specifications into structured JSON format. Each input will describe a chart type and its configuration, including axes, legends, series, and data.

        ### Supported Chart Types
        - **Chart Type**: Only `cartesian` or `circular`
        - **Series Types**: Line, Column, Spline, Area, Pie, Doughnut

        ### JSON Output Format
        {
            ""chartType"": ""cartesian | circular"",
            ""title"": ""<Chart Title>"",
            ""showLegend"": true,
            ""sideBySidePlacement"": true | false,
            ""xAxis"": [
            {
                ""type"": ""category | numerical | datetime | logarithmic"",
                ""title"": ""<X Axis Title>""
            }
            ],
            ""yAxis"": [
            {
                ""type"": ""numerical | logarithmic"",
                ""title"": ""<Y Axis Title>"",
                ""min"": 0
            }
            ],
            ""series"": [
            {
                ""type"": ""<SeriesType>"",
                ""name"": ""<Series Name>"",
                ""dataSource"": [
                { ""xvalue"": ""<X>"", ""yvalue"": <Y> },
                ...
                ],
                ""tooltip"": true | false
            }
            ]
        }

        ### Rules to Follow
        1. **Chart Type**: Infer from keywords like ""pie"", ""line"", ""column"", etc.
        2. **Title**: Derive a meaningful title from the user input.
        3. **Axis**: Cartesian charts must include both X and Y axes. Circular charts omit axes.
        4. **Series**: Use only supported types. Series name should reflect the category.
        5. **Data Source**: Always include `xvalue` and `yvalue` pairs.
        6. **Legend**: Default to `true` unless explicitly stated otherwise.
        7. **SideBySidePlacement**:
            - `true` if multiple column series are placed side-by-side.
            - `false` if columns are stacked or mixed.

        ### Examples

        **User Input**: ""Sales by region column chart""
        **Expected Output**:
        {
            ""chartType"": ""cartesian"",
            ""title"": ""Sales by Region"",
            ""showLegend"": true,
            ""sideBySidePlacement"": true,
            ""xAxis"": [{ ""type"": ""category"", ""title"": ""Region"" }],
            ""yAxis"": [{ ""type"": ""numerical"", ""title"": ""Sales"", ""min"": 0 }],
            ""series"": [
            {
                ""type"": ""column"",
                ""name"": ""Sales"",
                ""dataSource"": [
                { ""xvalue"": ""North"", ""yvalue"": 100 },
                { ""xvalue"": ""South"", ""yvalue"": 80 },
                { ""xvalue"": ""East"", ""yvalue"": 60 },
                { ""xvalue"": ""West"", ""yvalue"": 90 }
                ],
                ""tooltip"": true
            }
            ]
        }

        **User Input**: ""Market share pie chart""
        **Expected Output**:
        {
            ""chartType"": ""circular"",
            ""title"": ""Market Share"",
            ""showLegend"": true,
            ""sideBySidePlacement"": false,
            ""series"": [
            {
                ""type"": ""pie"",
                ""name"": ""Market Share"",
                ""dataSource"": [
                { ""xvalue"": ""Product A"", ""yvalue"": 40 },
                { ""xvalue"": ""Product B"", ""yvalue"": 30 },
                { ""xvalue"": ""Product C"", ""yvalue"": 20 },
                { ""xvalue"": ""Product D"", ""yvalue"": 10 }
                ],
                ""tooltip"": true
            }
            ]
        }

        Now, generate the JSON configuration for the following user request:

        User Request: " + userPrompt;

        return userQuery;
    }
}

<style>
    /* Main layout styles */
    .maincontent {
        height: 100% !important;
        width: 100% !important;
    }

    .sidebar-content {
        height: 100%;
        border-top: 1px solid var(--color-sf-border);
        border-right: 1px solid var(--color-sf-border);
        border-bottom: 1px solid var(--color-sf-border);
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        height: 50px;
        padding: 16px;
        border-bottom: 1px solid var(--color-sf-border);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .sidebar-header h3 {
            margin: 0;
            font-size: 16px;
        }

    .chat-history-list {
        flex: 1;
        overflow-y: auto;
        padding: 8px;
    }

    .history-item {
        padding: 12px;
        margin-bottom: 4px;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s;
        position: relative;
    }

    .history-title {
        font-weight: 500;
        margin-bottom: 4px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        padding-right: 30px;
    }

    .history-date {
        font-size: 12px;
    }

    .history-actions {
        position: absolute;
        top: 12px;
        right: 12px;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .history-item:hover .history-actions {
        opacity: 1;
    }

    .action-btn-sf.e-btn,
    .close-btn-sf.e-btn {
        background: none !important;
        border: none !important;
        cursor: pointer;
        padding: 4px !important;
        border-radius: 4px !important;
        min-width: auto !important;
        min-height: auto !important;
        box-shadow: none !important;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .action-btn-sf.e-btn:hover {
            background-color: #ff4444 !important;
            color: white !important;
        }

        .action-btn-sf.e-btn:focus,
        .action-btn-sf.e-btn:active {
            background-color: #cc3333 !important;
            color: white !important;
        }

        .close-btn-sf.e-btn:hover {
            background-color: var(--color-sf-content-bg-color-hover) !important;
            color: var(--color-sf-toolbar-icon-color) !important;
        }

    .action-btn-sf .e-icons,
    .close-btn-sf .e-icons {
        font-size: 14px;
        margin: 0;
    }

    /* Chart container */
    .chart-container {
        width: 100%;
        height: 100%;
        border: 1px solid var(--color-sf-border-light);
        border-radius: 8px;
        background-color: var(--color-sf-content-bg-color-alt1);
        padding: 16px;
        margin: 8px 0;
    }

    /* AI Assist View */
    .default-aiassistview {
        height: 600px;
    }

        .default-aiassistview .banner-content .e-assistview-icon:before {
            font-size: 35px;
        }

        .default-aiassistview .banner-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 330px;
            text-align: center;
        }

    .responseItemContent {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-left: 20px;
    }

        .responseItemContent .response-header {
            font-size: 20px;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        .responseItemContent .responseContent {
            margin-left: 35px;
        }

        .responseItemContent .response-header .e-assistview-icon:before {
            margin-right: 10px;
        }


    .e-aiassistview .e-suggestions ul {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        padding: 0;
        margin: 0;
        list-style: none;
        width: 100%;
    }

        .e-aiassistview .e-suggestions ul li {
            flex: 1 1 200px;
            max-width: 300px;
            white-space: normal;
            text-align: center;
        }

    .default-aiassistview .e-toolbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .e-aiassist-view-toolbar-item.custom-btn:nth-of-type(3) {
        padding-right: 4px !important;
    }

    .e-aiassist-view-toolbar-item.custom-btn:nth-of-type(4) {
        padding-left: 4px !important;
    }

    .e-sidebar {
        z-index: 1 !important;
    }

        .e-sidebar.e-right {
            border-left: 0px !important;
        }

    .material3 .sidebar-header, .material3-dark .sidebar-header {
        height: 58px;
        border-bottom: 1px solid rgba(var(--color-sf-outline-variant));
    }

    .material3 .sidebar-content, .material3-dark .sidebar-content {
        border-top: 1px solid rgba(var(--color-sf-outline-variant));
        border-right: 1px solid rgba(var(--color-sf-outline-variant));
        border-bottom: 1px solid rgba(var(--color-sf-outline-variant));
    }

    .material3 .close-btn-sf.e-btn:hover, .material3-dark .close-btn-sf.e-btn:hover {
        background-color: rgba(var(--color-sf-on-surface), 0.05) !important;
        color: rgba(var(--color-sf-on-surface-variant)) !important;
    }

    .fluent .sidebar-header {
        border-bottom: 1px solid #605e5c;
    }

    .fluent .sidebar-content {
        border-top: 1px solid #605e5c;
        border-right: 1px solid #605e5c;
        border-bottom: 1px solid #605e5c;
    }

    .fluent .close-btn-sf.e-btn:hover {
        background-color: #edebe9 !important;
        color: #201f1e !important;
    }

    .fluent-dark .sidebar-header {
        border-bottom: 1px solid #a19f9d;
    }

    .fluent-dark .sidebar-content {
        border-top: 1px solid #a19f9d;
        border-right: 1px solid #a19f9d;
        border-bottom: 1px solid #a19f9d;
    }

    .fluent-dark .close-btn-sf.e-btn:hover {
        background-color: #292827 !important;
        color: #f3f2f1 !important;
    }

    .fluent .e-icons.e-close:before, .fluent-dark .e-icons.e-close:before {
        font-size: 18px !important;
    }

    .bootstrap5\.3 .close-btn-sf.e-btn:hover, .bootstrap5\.3-dark .close-btn-sf.e-btn:hover {
        background-color: var(--color-sf-secondary-bg-color-hover) !important;
        color: var(--color-sf-primary-text-color) !important;
    }

    .bootstrap5\.3 .e-icons.e-close:before, .bootstrap5\.3-dark .e-icons.e-close:before {
        font-size: 18px !important;
    }

    .bootstrap5\.3 .close-btn-sf.e-btn, .bootstrap5\.3-dark .close-btn-sf.e-btn {
        color: var(--color-sf-icon-color) !important;
    }

    .tailwind3 .sidebar-header, .tailwind3-dark .sidebar-header {
        height: 57px;
    }

    .tailwind3 .close-btn-sf.e-btn:hover, .tailwind3-dark .close-btn-sf.e-btn:hover {
        background-color: var(--color-sf-secondary-bg-color-hover) !important;
        color: var(--color-sf-icon-color) !important;
    }

    .highcontrast .sidebar-content {
        border-top: 1px solid #969696;
        border-right: 1px solid #969696;
        border-bottom: 1px solid #969696;
    }

    .highcontrast .sidebar-header {
        height: 57px;
        border-bottom: 1px solid #969696;
    }

    .highcontrast .close-btn-sf.e-btn:hover {
        background-color: #685708 !important;
        color: #fff !important;
    }

    @@media only screen and (max-width: 750px) {
        .e-aiassistview .e-suggestions ul {
            flex-direction: column;
            align-items: center;
        }

            .e-aiassistview .e-suggestions ul li {
                flex: 0 !important;
                max-width: none;
            }
    }
</style>