@page "/ai-charts/stock-forecasting"
@page "/chart/ai-stock-forecasting"

@inject AzureAIService OpenAIService
@inject NavigationManager NavigationManager
@inject HttpClient Http

@using Syncfusion.Blazor
@using System.Net.Http.Json
@using Newtonsoft.Json
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Spinner
@using System.Globalization;
@using System.Text;
@using System.Collections.ObjectModel;
@using BlazorDemos.Model
@using ThemeHelper
@*Hidden:Lines*@
@using BlazorDemos.Service
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates how AI can be used to forecast data and visualize it using Syncfusion Blazor Charts.
    </p>
    <p>
        <strong>Forecasting</strong> refers to the process of predicting future data points based on historical trends. In this sample, AI forecasts future values using stock data from various companies, helping users visualize potential trends and make informed decisions.
    </p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and experiment with these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this sample, stock data from various companies is visualized using Syncfusion Blazor Charts. An AI Assist button is provided to forecast future data, and the newly generated dataset is then dynamically assigned to the chart for visualization.
    </p>
</ActionDescription>

@*Hidden:Lines*@
<AINotification></AINotification>

<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<div class="control-section">
    <div class="left-panel">
        <div style="display: flex;">
            <div>
                <SfDropDownButton @key="SelectedSymbol">
                    <ContentTemplate>
                        <span class="@GetSelectedIconClass()"></span>
                        <span style="padding-right:8px">@SelectedSymbol</span>
                    </ContentTemplate>
                    <DropDownButtonEvents ItemSelected="OnStockItemSelected"></DropDownButtonEvents>
                    <DropDownMenuItems>
                        <DropDownMenuItem IconCss="e-logo-msft" Text="MSFT" Id="MSFT" />
                        <DropDownMenuItem IconCss="e-logo-goog" Text="GOOG" Id="GOOG" />
                        <DropDownMenuItem IconCss="e-logo-amzn" Text="AMZN" Id="AMZN" />
                        <DropDownMenuItem IconCss="e-logo-tsla" Text="TSLA" Id="TSLA" />
                    </DropDownMenuItems>
                </SfDropDownButton>
                <p class="para">@SelectedStockInfo?.Text</p>
            </div>

            @if (SelectedStockInfo != null)
            {
                <div class="stock-info">
                    <div>
                        <span style="font-size: 20px; font-weight: bold; padding-right:2px">@SelectedStockInfo.Close </span>USD<br>
                        <p style="margin: 0; color:@(SelectedStockInfo.Change >= 0 ? "green" : "red")">
                            @SelectedStockInfo.Change   @SelectedStockInfo.PercentChange%
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="button-and-chart-controls">
        <div class="left-buttons">
            <SfButtonGroup>
                <SfButton Content="3 Month" OnClick="@(() => FilterDataByMonths(3))" />
                <SfButton Content="6 Month" OnClick="@(() => FilterDataByMonths(6))" />
                <SfButton Content="1 Year" OnClick="@(() => FilterDataByMonths(12))" />
            </SfButtonGroup>
        </div>

        <div class="chart-controls">
            <SfDropDownList TValue="ChartSeriesType" TItem="ChartSeriesType" DataSource="@SeriesOptions"
                            Placeholder="Select Chart Type" @bind-Value="SelectedSeriesType" Width="150px">
            </SfDropDownList>

            <SfButton OnClick="AIButtonClicked" IsPrimary="true" IconCss="e-icons e-ai-chat">
            </SfButton>
            <SfSpinner @bind-Visible="@VisibleProperty" />
        </div>
    </div>
</div>

<SfChart Width="100%" @ref="ChartRef" Theme="@Theme">
    <ChartArea>
        <ChartAreaBorder Width="0"></ChartAreaBorder>
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MMM yyyy">
        <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        <ChartStriplines>
            <ChartStripline Start="@StripStartDate" End="@StripEndDate" Color="#E0E0E0" />
        </ChartStriplines>
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis RangePadding="ChartRangePadding.None" LabelFormat="n0">
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryYAxis>
    <ChartLegendSettings Visible="false"></ChartLegendSettings>
    <ChartTooltipSettings Enable="true" Shared="true" Header="">
    </ChartTooltipSettings>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
    <ChartSeriesCollection>
        @if (SelectedSeriesType == ChartSeriesType.Line)
        {
            <ChartSeries DataSource="@ChartData" XName="Date" YName="Close" Type="ChartSeriesType.Line" Name="@SelectedStockInfo?.Text" />
        }
        else if (SelectedSeriesType == ChartSeriesType.HiloOpenClose)
        {
            <ChartSeries DataSource="@ChartData" XName="Date" High="High" Low="Low" Open="Open" Close="Close"
                         Type="ChartSeriesType.HiloOpenClose" Name="@SelectedStockInfo?.Text" />
        }
        else if (SelectedSeriesType == ChartSeriesType.Candle)
        {
            <ChartSeries DataSource="@ChartData" XName="Date" High="High" Low="Low" Open="Open" Close="Close"
                         Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d" Name="@SelectedStockInfo?.Text" />
        }
    </ChartSeriesCollection>
</SfChart>



<style>
    .para {
        padding-top: 5px;
    }

    .stock-info {
        display: flex;
        align-items: flex-start;
        gap: 16px;
        margin-left: 10px;
    }

    #MSFT, #GOOG, #AMZN, #TSLA {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .e-logo-msft::before,
    .e-logo-goog::before,
    .e-logo-amzn::before,
    .e-logo-tsla::before {
        content: "";
        display: inline-block;
        width: 20px;
        height: 20px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        margin: 2px 2px 2px 2px;
        vertical-align: middle;
        position: relative;
    }

    .e-logo-msft::before {
        background-image: url('@(SampleService?.WebAssetsPath + "images/chart/microsoft.png")');
    }

    .e-logo-goog::before {
        background-image: url('@(SampleService?.WebAssetsPath + "images/chart/google.png")');
    }

    .e-logo-amzn::before {
        background-image: url('@(SampleService?.WebAssetsPath + "images/chart/amazon.png")');
    }

    .e-logo-tsla::before {
        background-image: url('@(SampleService?.WebAssetsPath + "images/chart/tesla.png")');
    }

    .control-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
        min-height: 0px
    }

    .left-panel {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .chart-controls {
        display: flex;
        align-items: center;
        gap: 10px
    }

    .button-and-chart-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        width: 100%;
    }
</style>


@code {
    public SfChart? ChartRef;
    private bool VisibleProperty { get; set; } = false;
    public ChartSeriesType SelectedSeriesType { get; set; } = ChartSeriesType.Candle;
    public string SelectedSymbol { get; set; } = "MSFT";
    public DateTime StripStartDate { get; set; }
    public DateTime StripEndDate { get; set; }
    public StockInfo? SelectedStockInfo;
    public List<ChartPoint> ChartData = new List<ChartPoint>();
    public int SelectedRange = 3;
    private Theme Theme { get; set; }

    public class StockInfo
    {
        public string? Symbol { get; set; }
        public string? Text { get; set; }
        public double Close { get; set; }
        public double Change { get; set; }
        public double PercentChange { get; set; }
    }

    protected async Task OnStockItemSelected(MenuEventArgs args)
    {
        SelectedSymbol = args.Item.Id;
        SelectedStockInfo = GetDefaultStockInfo(SelectedSymbol);
        await LoadChartDataAsync();
    }

    public StockInfo GetDefaultStockInfo(string symbol)
    {
        return symbol switch
        {
            "MSFT" => new StockInfo { Symbol = "MSFT", Text = "Microsoft Crp", Close = 138.35, Change = -2.00, PercentChange = -0.22 },
            "GOOG" => new StockInfo { Symbol = "GOOG", Text = "Alphabet Inc", Close = 152.83, Change = -2.00, PercentChange = -0.22 },
            "AMZN" => new StockInfo { Symbol = "AMZN", Text = "Amazon Inc", Close = 222.27, Change = -2.00, PercentChange = -0.22 },
            "TSLA" => new StockInfo { Symbol = "TSLA", Text = "Tesla Inc", Close = 201.73, Change = -2.00, PercentChange = -0.22 },
            _ => new StockInfo { Symbol = symbol, Close = 0.0, Change = 0.0, PercentChange = 0.0 }
        };
    }

    public Dictionary<string, string> SymbolIconMap = new()
    {
        { "MSFT", "e-logo-msft" },
        { "GOOG", "e-logo-goog" },
        { "AMZN", "e-logo-amzn" },
        { "TSLA", "e-logo-tsla" }
    };

    public string GetSelectedIconClass()
    {
        if (!string.IsNullOrEmpty(SelectedSymbol) && SymbolIconMap.ContainsKey(SelectedSymbol))
        {
            return SymbolIconMap[SelectedSymbol];
        }
        return "default-icon-class";
    }

    public List<ChartSeriesType> SeriesOptions = new()
    {
        ChartSeriesType.Candle,
        ChartSeriesType.Line,
        ChartSeriesType.HiloOpenClose
    };

    public class ChartPoint
    {
        public DateTime Date { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Open { get; set; }
        public double Close { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        SelectedRange = 3;
        SelectedStockInfo = GetDefaultStockInfo(SelectedSymbol);
        await LoadChartDataAsync();
    }

    public async Task LoadChartDataAsync()
    {
        try
        {
            ChartData.Clear();
            string? path = $"{NavigationManager.BaseUri}{SampleService?.WebAssetsPath}data/chart/{SelectedSymbol.ToLower()}-data.json";
            List<ChartPoint>? allData = await Http.GetFromJsonAsync<List<ChartPoint>>(path);
            ChartData = FilterChartData(allData ?? null!, SelectedRange);
        }
        catch (Exception ex)
        {
            ChartData = new();
        }

        StateHasChanged();
    }

    public List<ChartPoint> FilterChartData(List<ChartPoint> allData, int months)
    {
        if (ChartData.Any())
        {
            StripStartDate = ChartData.First().Date;
            StripEndDate = ChartData.Last().Date;
        }
        else
        {
            StripStartDate = StripEndDate = DateTime.Now;
        }
        DateTime latestDate = allData.Max(p => p.Date);
        DateTime cutoffDate = latestDate.AddMonths(-months + 1);
        return allData.Where(p => p.Date >= cutoffDate).OrderBy(p => p.Date).ToList();
    }

    public void FilterDataByMonths(int months)
    {
        SelectedRange = months;
        _ = LoadChartDataAsync();
    }

    public async Task AIButtonClicked()
    {
        VisibleProperty = true;
        List<ChartPoint> last10Items = ChartData.Skip(Math.Max(0, ChartData.Count - 10)).Take(10).ToList();
        string prompt = GeneratePrompt(last10Items);
        string value = await OpenAIService.GetCompletionAsync(prompt, false);
        if (string.IsNullOrWhiteSpace(value))
        {
            VisibleProperty = false;
            return;
        }
        await GenerateCollection(value);
        VisibleProperty = false;
    }

    public async Task GenerateCollection(string dataSource)
    {
        StripStartDate = ChartData.LastOrDefault()?.Date ?? DateTime.Now;
        string[] rows = dataSource.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string row in rows)
        {
            string[] parts = row.Split(':');
            if (parts.Length < 5) continue;

            string dateStr = parts[0].Trim();
            if (!DateTime.TryParse(dateStr, out DateTime date)) continue;

            double high = GetDouble(parts[1].Trim());
            double low = GetDouble(parts[2].Trim());
            double open = GetDouble(parts[3].Trim());
            double close = GetDouble(parts[4].Trim());

            ChartPoint item = new ChartPoint
                {
                    Date = date,
                    High = high,
                    Low = low,
                    Open = open,
                    Close = close
                };
            ChartData.Add(item);
            StripEndDate = date;
            await InvokeAsync(StateHasChanged);
        }
    }

    public double GetDouble(string text) => double.TryParse(text, out double result) ? result : 0;

    public DateTime GetDateTime(string text) => DateTime.TryParse(text, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result) ? result : DateTime.Now;

    public string GeneratePrompt(List<ChartPoint> historicalData)
    {
        DateTime lastDate = historicalData.LastOrDefault()?.Date ?? DateTime.Today;
        DateTime startDate = lastDate.AddDays(1);
        StringBuilder? prompt = new StringBuilder(@"Generate 35 realistic financial data points suitable for candlestick, OHLC, and line charts in ':' format.Use the following format for each row: yyyy-MM-dd: High: Low: Open: Close");
        prompt.AppendLine($"Start from {startDate:yyyy-MM-dd} and increment by 1 day for each row.");
        foreach (ChartPoint? data in historicalData)
        {
            prompt.AppendLine($"{data.Date:yyyy-MM-dd}: {data.High}, {data.Low}, {data.Open}, {data.Close}");
        }
        prompt.AppendLine("\n### STRICT OUTPUT REQUIREMENTS ###");
        prompt.AppendLine("- Generate EXACTLY 35 rows of data.");
        prompt.AppendLine("- Each row must be in the format: yyyy-MM-dd:High:Low:Open:Close.");
        prompt.AppendLine("- The predictions must include a natural mix of both upward and downward trends.");
        prompt.AppendLine("- NO missing or duplicate dates.");
        prompt.AppendLine("- NO extra text, explanations, or labels—just raw data.");
        prompt.AppendLine("- Ensure that each day's values are **realistic** and follow stock market behavior.");
        return prompt.ToString();
    }
}

