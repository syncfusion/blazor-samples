@page "/ai-querybuilder/natural-languagequery"
@page "/query-builder/ai-natural-languagequery"

@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@inject AzureAIService OpenAIService
@using BlazorDemos.Service

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@

<SampleDescription>
    <p>
        Natural Language Querying in the Query Builder allows users to construct complex queries using plain, everyday language. Instead of relying on technical query syntax, users can simply type their questions or requests as they would naturally speak them. This feature interprets the intent and generates the corresponding query, making data retrieval more accessible to non-technical users.
    </p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>

<ActionDescription>
    <p>
        The Natural Language Querying feature enables users to input queries in plain language, which the system then interprets to automatically generate the appropriate database queries. This simplifies the process of data retrieval, allowing users to obtain insights without needing to understand complex query syntax.
    </p>
</ActionDescription>

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<div id="control-section">
    <SfTab LoadOn="ContentLoad.Init">
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="Natural Language Query"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <p class="e-text">Query</p>
                    <SfTextArea @bind-value="TextAreaValue" placeholder="Find all users who lives in California and have over 500 credits" Width="100%" RowCount="5"></SfTextArea>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="QueryBuilder UI"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <SfQueryBuilder Readonly="true" TValue="User" @ref="QueryBuilderObj" DataSource="@DataSource">
                        <QueryBuilderColumns>
                            <QueryBuilderColumn Field="id" Label="ID" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.Number"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="name" Label="Name" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="email" Label="Email" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="address" Label="Address" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.Boolean"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="city" Label="City" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="state" Label="State" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.String"></QueryBuilderColumn>
                            <QueryBuilderColumn Field="credits" Label="Credits" Type="Syncfusion.Blazor.QueryBuilder.ColumnType.Number"></QueryBuilderColumn>
                        </QueryBuilderColumns>
                    </SfQueryBuilder>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
    <div class="e-custom-elem">
        <SfButton Content="Run Query" CssClass="e-primary" IconCss="e-icons e-play" @onclick="GenBtnClick"></SfButton>
    </div>
    <div class="e-custom-elem">
        <span class="e-text">Results</span>

        <SfGrid TValue="User" DataSource="@GridData" AllowPaging="true">
            <SfSpinner @bind-Visible="@VisibleProperty"></SfSpinner>
            <GridEvents Created="GridCreated" TValue="User"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(User.id) HeaderText="ID" TextAlign="TextAlign.Right" Width="60"></GridColumn>
                <GridColumn Field=@nameof(User.name) HeaderText="Name" Width="150"></GridColumn>
                <GridColumn Field=@nameof(User.email) HeaderText="Email" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                <GridColumn Field=@nameof(User.address) HeaderText="Address" Width="150"></GridColumn>
                <GridColumn Field=@nameof(User.city) HeaderText="City" Width="150"></GridColumn>
                <GridColumn Field=@nameof(User.state) HeaderText="State" Width="150"></GridColumn>
                <GridColumn Field=@nameof(User.credits) HeaderText="Credits" ></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    public bool VisibleProperty = false;
    public class User
    {
        public int id { get; set; }
        public string name { get; set; }
        public string email { get; set; }
        public string address { get; set; }
        public string city { get; set; }
        public string state { get; set; }
        public int credits { get; set; }
    }
    private static readonly string[] Names = { "John", "Jane", "Bob", "Alice", "Tom", "Sally", "Jim", "Mary", "Peter", "Nancy" };
    private static readonly string[] Cities = { "Los Angeles", "San Diego", "New York", "Chicago", "Houston", "Phoenix", "Philadelphia", "San Antonio", "Dallas", "San Jose" };
    private static readonly string[] States = { "California", "New York", "Illinois", "Texas", "Arizona", "Pennsylvania" };
    private static readonly string[] Streets = { "Elm St", "Oak St", "Maple Ave", "Pine St", "Cedar St", "Birch St" };
    private static readonly string[] Emails = { "example.com", "test.com", "demo.com" };

    public static List<User> GenerateRandomUsers(int count)
    {
        var random = new Random();
        var users = new List<User>();

        for (int i = 0; i < count; i++)
        {
            var id = i + 1;
            var name = Names[random.Next(Names.Length)];
            var email = $"{name.ToLower()}{id}@{Emails[random.Next(Emails.Length)]}";
            var address = $"{random.Next(10000)} {Streets[random.Next(Streets.Length)]}";
            var city = Cities[random.Next(Cities.Length)];
            var state = States[random.Next(States.Length)];
            var credits = random.Next(2001);

            users.Add(new User
            {
                id = id,
                name = name,
                email = email,
                address = address,
                city = city,
                state = state,
                credits = credits
            });
        }

        return users;
    }

    List<User> Users = GenerateRandomUsers(7);

    private string TextAreaValue { get; set; } = "Find all users who lives in California and have over 500 credits";
    SfQueryBuilder<User> QueryBuilderObj;
    private IEnumerable<User> GridData { get; set; }
    private IEnumerable<User> DataSource { get; set; }
    protected override void OnInitialized()
    {
        DataSource = Users;
    }
    private void GridCreated()
    {
        GridData = DataSource;
    }

    private async void GenBtnClick()
    {
        VisibleProperty = true;
        string prompt = "Create an SQL query to achieve the following task: " + TextAreaValue + " from a single table. Focus on constructing a valid SQL query that directly addresses the specified task, ensuring it adheres to standard SQL syntax for querying a single table. NOTE: Return only the SQL query without any additional explanation or commentary. The response should contain the query itself, formatted correctly and ready for execution.";

        string result = await OpenAIService.GetCompletionAsync(prompt, false);
        if (!String.IsNullOrEmpty(result))
        {
            string value = result.Split("WHERE ")[1].Split(";\n")[0];
            value = value.Replace("\n", " ");
            value = value.Replace(";", "");
            QueryBuilderObj.SetRulesFromSql(value);
            GridData = QueryBuilderObj.GetFilteredRecords().ToList().AsEnumerable<User>();
        }
        VisibleProperty = false;
        StateHasChanged();
    }
}

<style>
    #container {
        margin: 10px;
        border: 1px solid lightgray;
        border-radius: 4px;
    }

    #container .e-tab {
        margin-top: 16px;
    }

    .e-tab .e-content {
        padding: 16px;
    }

    .e-text {
        font-weight: bold;
        font-family: "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", sans-serif;
        font-size: 14px;
    }

    .e-custom-elem {
        margin-bottom: 16px;
        margin-left: 16px;
        width: calc(100% - 32px);
    }
</style>
