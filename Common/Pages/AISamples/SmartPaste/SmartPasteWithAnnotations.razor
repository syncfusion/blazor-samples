@page "/ai-smartpaste/annotations"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SmartComponents
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@*End:Hidden*@

<SampleDescription>
   <p>This sample demonstrates the usage of <code>data-smartpaste-description</code> in form fields to customize field descriptions. It shows how to provide specific descriptions for form fields, enhancing the Smart Paste feature's ability to automatically populate form data based on these custom descriptions.</p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>

<ActionDescription>
    <p>This sample uses the <code>data-smartpaste-description</code> attribute to customize field descriptions. By default, Smart Paste automatically identifies and describes form fields based on labels, names, or nearby text. You can override these descriptions by setting <code>data-smartpaste-description</code> for specific fields, which helps the backend model provide more accurate form auto-filling.</p>

</ActionDescription>
@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<div class="bug-form-container">
    <h6 style="text-align:center;">Bug Report Form</h6>
    <SfDataForm ID="bugReport"
                Model="@BugRptModel"
                ColumnCount="2"
                ColumnSpacing="20px"
                ButtonsAlignment="FormButtonsAlignment.Right">
        <FormValidator>
            <DataAnnotationsValidator></DataAnnotationsValidator>
        </FormValidator>

        <FormItems>
            <FormItem Field="@nameof(BugRptModel.BugName)" ColumnSpan="1">
                <Template>
                    <label class="e-form-label">Bug Name</label>
                    <SfTextBox HtmlAttributes="bugNameAttr"
                                @bind-Value="@BugRptModel.BugName"
                                Placeholder="What's the bug ?"
                                ID="bug-name" />
                </Template>
            </FormItem>
            <FormItem Field="@nameof(BugRptModel.BugPriority)" ColumnSpan="1">
                <Template>
                    <label class="e-form-label">Bug Priority</label>
                    <SfComboBox HtmlAttributes="bugPriorityAttr"
                                DataSource="@priorityLists"
                                @bind-Value="@BugRptModel.BugPriority"
                                ID="bug-priority"
                                Placeholder="Set priority"
                                @onchange=HandlePriorityChange />
                </Template>
            </FormItem>
            <FormItem Field="@nameof(BugRptModel.BugDescription)" ColumnSpan="2" >
                <Template>
                    <label class="e-form-label">Bug Description</label>
                    <SfTextArea Placeholder="Describe a little about the bug." />
                </Template>
            </FormItem>
            <FormItem Field="@nameof(BugRptModel.Reporter)" ColumnSpan="1" Placeholder="">
                <Template>
                    <label class="e-form-label">Reporter</label>
                    <SfTextBox HtmlAttributes="reporterNameAttr"
                                @bind-Value="@BugRptModel.Reporter"
                                Placeholder="Who is the reporter ?"
                                ID="reporter-name" />
                </Template>
            </FormItem>
            <FormItem Field="@nameof(BugRptModel.SubmittedDate)" ColumnSpan="1">
                <Template>
                    <label class="e-form-label">Submitted Date</label>
                    <SfTextBox HtmlAttributes="submittedDataAttr"
                                @bind-Value="@BugRptModel.SubmittedDate"
                                Placeholder="When it is reported ?"
                                ID="submitted-date" />
                </Template>
            </FormItem>
            <FormItem Field="@nameof(BugRptModel.ReproSteps)" ColumnSpan="2">
                <Template>
                    <label class="e-form-label">Repro Steps</label>
                    <SfTextArea ID="repro-steps"
                                HtmlAttributes="reproStepsAttr"
                                @bind-Value="@BugRptModel.ReproSteps"
                                Placeholder="Enter the repro steps here.."
                                RowCount="2" />
                </Template>
            </FormItem>
        </FormItems>

        <FormButtons>
            <SfButton IconCss="e-icons e-reset" Content="Reset" OnClick="HandleFormReset"></SfButton>
            <SfSmartPasteButton IsPrimary="true" Content="Smart Paste" IconCss="e-icons e-paste" OnClick="HandleSmartPasteClick">
            </SfSmartPasteButton>
        </FormButtons>
    </SfDataForm>
    <SfSpinner Visible="@visible"></SfSpinner>
</div>
  
<div class="sample-data-section">
    <h6 style ="text-align:center;"> Sample content </h6>
    <div class="content-flexed">
        @foreach (var (bug, index) in BugReports.Select((bug, index) => (bug, index)))
        {
            <div class="content-body" data-index="@index">
                <div class="copy-container" style="float: right">
                    <SfButton aria-label="content-copy-button" IconCss="@(copyBtnIconIndex == index ? checkIcon : copyIcon)"
                                CssClass="custom-copy-icon"
                                IsPrimary="true"
                                OnClick="@(() => CopyToClipboard(index))">
                    </SfButton>
                </div>
                @bug
            </div>
        }
    </div>
</div>

<style>
    .bug-form-container, .sample-data-section {
      width: 100%;
      margin: 30px auto;
    }

    .sample-data-section .content-flexed {
        display: flex;
        flex-wrap: wrap;
        gap: 14px;
    }

    .sample-data-section .content-body {
        line-height: 28px;
        font-size: 14px;
        max-width: 49%;
        border-radius: 10px;
        padding: 20px;
        border: 2px solid rgb(229 231 235 / var(--border-opacity));
        --border-opacity: 1;      
    }

    .e-btn.e-icon-btn.custom-copy-icon {
        padding: 4px;
        font-size: 10px;
    }

    .e-btn.custom-copy-icon:focus {
      box-shadow: none;
    }

    .bug-form-container {
        position: relative;
        border-radius: 20px;
        padding: 15px;
        border: 2px solid rgb(229 231 235 / var(--border-opacity));
        --border-opacity: 1;
        max-width: 600px;
    }

    .bug-report {
      padding: 10px;
      margin: 15px 0px;
      background-color: #f3f3f3;
      border: 1px solid #ddd;
      border-radius: 5px;
      line-height: 1.5;
    }
</style>

@code {
    private BugReportModel BugRptModel = new BugReportModel();

    private string copyIcon = "e-icons e-copy";
    private string checkIcon = "e-icons e-check";
    private int copyBtnIconIndex = -1;
    private string defaultPriority = "medium";
    private string[] priorityLists = { "Low", "Medium", "High" };
    private bool visible = false;

    private List<string> BugReports => CommonData.BugReports;


    Dictionary<string, object> bugNameAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Extract the core purpose of the bug data and use it as the value for Bug name field" }
    };
    Dictionary<string, object> reporterNameAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Name must follow the format: Initial Firstname Lastname" }
    };
    Dictionary<string, object> submittedDataAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Date must follow the format: Month Day. For ex: May 01" }
    };
    Dictionary<string, object> reproStepsAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Structure each steps in a Numbered format." },
        { "name", "repro-steps" }
    };
    Dictionary<string, object> bugPriorityAttr = new Dictionary<string, object>()
    {
        { "data-smartpaste-description", "Only allowed values are Low, Medium and High" }
    };

    private async Task CopyToClipboard(int index)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", BugReports[index]);
        copyBtnIconIndex = index;
    }
    private void HandleFormReset()
    {
        BugRptModel = new BugReportModel();
    }
    private void HandleSmartPasteClick(MouseEventArgs args)
    {
        visible = true;
    }
    private void HandlePriorityChange(ChangeEventArgs args)
    {
        string value = args.Value.ToString();
        BugRptModel.BugPriority = value;
        visible = false;
    }
}