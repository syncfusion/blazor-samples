@page "/ai-richtexteditor/ai-assistant"
@page "/rich-text-editor/ai-assistant"

@using BlazorDemos.Service
@inject AzureAIService semanticKernelAI
@inject IJSRuntime JSRuntime

@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Markdig;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Layouts

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@*End:Hidden*@
<SampleDescription>
    <p>This sample demonstrates the AI integration with the Rich Text Editor, enabling AI features such as content generation, summarization, rephrasing, translation, and grammar correction.</p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>


<ActionDescription>
    <p>In this sample, the Rich Text Editor content can be selected, and the AI Assistant dropdown menu can be opened to use the following AI features:</p>
    <ul>
        <li><strong>Rephrase:</strong> Selecting this option will offer alternative phrasings for sentences to improve clarity.</li>
        <li><strong>Correct Grammar:</strong> Selecting this option will correct the grammar for the selected content.</li>
        <li><strong>Summarize:</strong> Selecting this option will summarize long documents or sections into concise versions.</li>
        <li><strong>Elaborate:</strong> Selecting this option will generate content based on selected content.</li>
        <li><strong>Translate:</strong> Selecting this option will translate the selected content into the desired language based on the language selection.</li>
        <li><strong>Sentiment Analysis:</strong> Analyzes the content's sentiment and displays corresponding emoji expressions.</li>
    </ul>
</ActionDescription>

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@ 

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<div class="control-section" id="rteSection">
    <SfRichTextEditor Height="500px" Width="100%" @ref="rteObj" @bind-Value="@Value" SaveInterval="0" AutoSaveOnIdle="true">
        <RichTextEditorToolbarSettings Items="@Tools">
            <RichTextEditorCustomToolbarItems>
                <RichTextEditorCustomToolbarItem Name="AIAssistant">
                    <Template>
                        <SfDropDownButton CssClass="menubutton e-tbar-btn e-tbar-btn-text" IconCss="e-icons e-ai-chat e-btn-icon e-icon-left" Content="AI Assistant" Disabled="@enabelAIAssitantButton">
                            <DropDownButtonEvents ItemSelected="AIQuerySelectedMenu" />
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Rephrase"></DropDownMenuItem>
                                <DropDownMenuItem Text="Correct Grammar"></DropDownMenuItem>
                                <DropDownMenuItem Text="Summarize"></DropDownMenuItem>
                                <DropDownMenuItem Text="Elaborate"></DropDownMenuItem>
                                <DropDownMenuItem Text="Translate"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </RichTextEditorCustomToolbarItem>
                <RichTextEditorCustomToolbarItem Name="Rephrase">
                    <Template>
                        <SfButton CssClass="@ButtonClass" @onclick="Rephrase" Disabled="@enabelAIAssitantButton">
                            <div class="e-tbar-btn-text">Rephrase</div>
                        </SfButton>
                    </Template>
                </RichTextEditorCustomToolbarItem>
            </RichTextEditorCustomToolbarItems>
        </RichTextEditorToolbarSettings>
        <RichTextEditorEvents ValueChange="UpdateStatus" OnActionComplete="@(args => OnActionCompleteHandler(args))" />
    </SfRichTextEditor>
</div>
<div class="scroll-restricted">
    <SfDialog @bind-Visible="@dialogVisible" AllowPrerender="true" CssClass="e-rte-elements custom-dialog" ZIndex="1000" ShowCloseIcon="true" IsModal="true" Width="80%" Height="100%" Target="#rteSection">
        <DialogTemplates>
            <Header> <span class="e-icons e-ai-chat e-btn-icon e-icon-left"></span> AI Assistant </Header>
            <Content>             
                <div class="custom-row-0">
                    <div class="col-12 col-md-3 d-flex justify-content-start align-items-center">
                        <div class="w-100">
                            <SfDropDownList CssClass="e-round-corner" TItem="SubQuery" TValue="string" DataSource="@QueryList" @bind-Value="@dropVal" Enabled="@(!enabelRegenerateContentButton)">
                                <DropDownListEvents TItem="SubQuery" TValue="string" />
                                <DropDownListFieldSettings Text="Text" Value="ID" />
                                <DropDownListEvents TValue="string" TItem="SubQuery" ValueChange="AIQuerySelectedDropdownList"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-12 col-md-9 mt-9 mt-md-0 d-flex justify-content-end align-items-center">
                        @if (this.enableRephraseChips)
                        {
                            <SfChip CssClass="e-custom" Selection="SelectionType.Single" @bind-SelectedChips="@chipValue">
                                <ChipItems>
                                    <ChipItem Text="Standard" CssClass="e-custom"></ChipItem>
                                    <ChipItem Text="Fluent" CssClass="e-custom"></ChipItem>
                                    <ChipItem Text="Professional" CssClass="e-custom"></ChipItem>
                                </ChipItems>
                                <ChipEvents SelectionChanged="SelectedChipsChanged"></ChipEvents>
                            </SfChip>
                        }
                        else if (this.enableLanguageList)
                        {
                            <div class="col-3 col-md-3 mt-3 mt-md-0 d-flex cuscol justify-content-end align-items-center">
                                <span>Target Language</span>
                            </div>
                            <div class="col-3 col-md-3 mt-3 mt-md-0 d-flex justify-content-end align-items-center">
                                <SfDropDownList CssClass="e-round-corner" TItem="Languages" TValue="string" DataSource="@LanguageList" @bind-Value="@translatelanguage">
                                    <DropDownListFieldSettings Text="Text" Value="ID" />
                                    <DropDownListEvents TValue="string" TItem="Languages" ValueChange="AITranslateDropdownList"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        }
                    </div>
                </div>
                <div class="custom-row-1">
                    <div class="col-12 col-md-6 d-flex cuscol-1 justify-content-start">
                        <div class="w-100">
                            <SfRichTextEditor Width="100%" Height="286px" @ref="leftRteChildObj" @bind-Value="promptQuery">
                                <RichTextEditorToolbarSettings Enable="false"></RichTextEditorToolbarSettings>
                            </SfRichTextEditor>
                        </div>
                    </div>
                    @if (!isContentGenerating)
                    {
                        @if (noResultsFound)
                        {
                            <div class="col-12 col-md-6 mt-6 mt-md-0 d-flex cuscol-2 cuscol-noresult justify-content-center">
                                <div class="w-100">
                                    <div class="no-results-found">
                                        <span class="e-icons e-warning"></span>
                                        <div>No results found</div>
                                    </div>
                                </div>
                            </div>
                        }
                        else {
                            <div class="col-12 col-md-6 mt-6 mt-md-0 d-flex cuscol-2 justify-content-start">
                                <div class="w-100">
                                    <SfRichTextEditor Width="100%" Height="286px" @ref="rightRteChildObj" @bind-Value="AIResult">
                                        <RichTextEditorToolbarSettings Enable="false"></RichTextEditorToolbarSettings>
                                    </SfRichTextEditor>
                                </div>
                            </div>
                        }
                    } else {
                        <div class="col-12 col-md-6 mt-6 mt-md-0 d-flex cuscol-2 justify-content-start">
                            <div class="w-100">
                                <div class="content-preparing">
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="100%" Height="20px"></SfSkeleton><br />
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="90%" Height="20px"></SfSkeleton><br />
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="70%" Height="20px"></SfSkeleton><br />
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="50%" Height="20px"></SfSkeleton><br />
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="30%" Height="20px"></SfSkeleton><br />
                                    <SfSkeleton CssClass="skeleton-rectangle" Shape=SkeletonType.Rectangle Width="10%" Height="20px"></SfSkeleton>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </Content>
            <FooterTemplate>
                <div class="custom-row-2">
                    <div class="col-12 col-md-6 d-flex cuscol-0 justify-content-end align-items-center">
                        <div class="w-100">
                            <SfButton Disabled="@enabelRegenerateContentButton" IsPrimary="true" @onclick="RegenerateContent">Regenerate</SfButton>
                        </div>
                    </div>
                    <div class="col-12 col-md-6 mt-6 mt-md-0 cuscol-01 d-flex justify-content-end align-items-center">
                        @if (!string.IsNullOrEmpty(sentiment)) {
                            <button class="e-btn e-control e-info sentiment" id="info_Toast" disabled>@sentiment</button>
                        }
                        <SfButton Disabled="@enabelContentButton" @onclick="CopyContent">Copy</SfButton>
                        <SfButton Disabled="@enabelContentButton" IsPrimary="true" @onclick="ReplaceContent">Replace</SfButton>
                    </div>
                </div>
            </FooterTemplate>
        </DialogTemplates>
        <DialogEvents Closed="CloseDialog" OnOverlayModalClick="CloseDialog"/>
    </SfDialog>
</div>
<SfToast @ref="ToastObj" ID="toast_type" Target="@ToastTarget" ShowCloseButton="true">
    <ToastPosition X="Right" Y="Top" />
</SfToast>

@code {
    SfToast ToastObj;
    private string ToastTarget { get; set; } = "#scroll-restricted";
    SfRichTextEditor rteObj;
    SfRichTextEditor leftRteChildObj;
    SfRichTextEditor rightRteChildObj;
    private string Value { get; set; } = "<h5><span>Integrate AI with the Editor</span></h5><p>Integrate the AI assistant into the rich text editor by capturing the content from the editor, sending it to the AI service, and displaying the results or suggestions back in the editor.</p><h6>Summarize</h6><p>This function condenses the selected content into a brief summary, capturing the main points succinctly.</p><h6>Elaborate</h6><p>This function expands the selected content, adding additional details and context.</p><h6>Rephrase</h6><p>This function rewrites the selected content to convey the same meaning using different words or structures. It also enables rephrase options and disables language selection.</p><h6>Correct Grammar</h6><p>This function reviews and corrects the grammar of the selected content, ensuring it adheres to standard grammatical rules.</p><h6>Translate</h6><p>This function translates the selected content into the specified language, enabling language selection and disabling rephrase options.</p>";
    private bool dialogVisible { get; set; }
    private bool enabelAIAssitantButton { get; set; } = false;
    private bool enabelRegenerateContentButton { get; set; } = false;
    private bool enabelContentButton { get; set; } = true;
    private string promptQuery = string.Empty;
    private string subQuery = string.Empty;
    private string[] chipValue = new[] { "Standard" };
    private string translatelanguage = "EN";
    private string dropVal { get; set; } = "Rephrase";
    private bool enableRephraseChips { get; set; } = true;
    private bool enableLanguageList { get; set; } = false;
    private bool noResultsFound { get; set; } = false;
    public bool isContentGenerating { get; set; } = true;
    private string AIResult { get; set; } = string.Empty;
    private bool isSentimentCheck { get; set; } = false;
    private MarkdownPipeline pipeline { get; set; } = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
    private string sentiment = "";
    private string apiResultData = "";
    private string ButtonClass = "e-tbar-btn";

    private void UpdateStatus(Syncfusion.Blazor.RichTextEditor.ChangeEventArgs args)
    {
        Value = args.Value;
        enabelAIAssitantButton = string.IsNullOrWhiteSpace(Value);
    }

    private void OnActionCompleteHandler(Syncfusion.Blazor.RichTextEditor.ActionCompleteEventArgs args)
    {
        if (args.RequestType == "SourceCode")
        {
            this.ButtonClass = "e-tbar-btn e-overlay";
        }
        if (args.RequestType == "Preview")
        {
            this.ButtonClass = "e-tbar-btn";
        }
    }

    private void UpdateTextAreaStatus(InputEventArgs args)
    {
        Value = args.Value;
        enabelRegenerateContentButton = string.IsNullOrWhiteSpace(Value);
    }

    private async Task AIQuerySelectedMenu(MenuEventArgs args)
    {
        await DialogueOpen(args.Item.Text);
    }

    private async Task Rephrase()
    {
        await DialogueOpen("Rephrase");
    }

    private async Task DialogueOpen(string selectedQuery)
    {
        var selectionText = await rteObj.GetSelectedHtmlAsync();
        if (!string.IsNullOrEmpty(selectionText))
        {
            dialogVisible = true;
            dropVal = QueryList.FirstOrDefault(q => q.Text.Equals(selectedQuery, StringComparison.OrdinalIgnoreCase))?.ID;
            promptQuery = selectionText;
            await this.rteObj.SaveSelectionAsync();
            await this.leftRteChildObj.RefreshUIAsync();
            await UpdateAISuggestionsData(selectedQuery);
        }
        else
        {
            await this.ToastObj.ShowAsync(new ToastModel { ContentTemplate = @GetTemplate(true), ShowCloseButton = true, Timeout = 0 });
        }
    }

    private async Task SelectedChipsChanged(Syncfusion.Blazor.Buttons.SelectionChangedEventArgs args)
    {
        if (chipValue.Length == 0 && args != null && args.RemovedItems.Length > 0)
        {
            chipValue = new [] { args.RemovedItems[0] };
        }
        await UpdateAISuggestionsData("Rephrase");
    }

    private async Task AITranslateDropdownList(ChangeEventArgs<string, Languages> args)
    {
        await UpdateAISuggestionsData("Translate");
    }

    private async Task AIQuerySelectedDropdownList(ChangeEventArgs<string, SubQuery> args)
    {
        if (!string.IsNullOrEmpty(dropVal))
        {
            chipValue = new[] { "Standard" };
            translatelanguage = "EN";
            var selectedQuery = QueryList.FirstOrDefault(q => q.ID.Equals(dropVal, StringComparison.OrdinalIgnoreCase))?.Text;
            await UpdateAISuggestionsData(selectedQuery);
        }
    }

    private async Task UpdateAISuggestionsData(string selectedQuery)
    {
        enableRephraseChips = false;
        enableLanguageList = false;
        isSentimentCheck = false;
        switch (selectedQuery)
        {
            case "Summarize":
                subQuery = "Briefly summarize the following text in a short and concise manner.";
                break;
            case "Elaborate":
                subQuery = "Elaborate/Expand on the following text, providing more detail and context.";
                break;
            case "Rephrase":
                enableRephraseChips = true;
                enableLanguageList = false;
                subQuery = $"Rephrase the following text in a {chipValue[0]} [tone/style], ensuring clarity and maintaining the original meaning.";
                break;
            case "Correct Grammar":
                subQuery = "Correct any grammatical errors in the following text, ensuring it is clear and well-structured.";
                break;
            case "Translate":
                enableLanguageList = true;
                enableRephraseChips = false;
                subQuery = $"Translate the following text into {translatelanguage}, preserving the original meaning and tone.";
                break;
        }

        UpdateAISuggestionsData();
    }

    private async Task RegenerateContent()
    {
        UpdateAISuggestionsData();
    }

    private async Task ReplaceContent()
    {
        ExecuteCommandOption executeCommandOption = new ExecuteCommandOption();
        executeCommandOption.Undo = true;
        await this.rteObj.RestoreSelectionAsync();
        await this.rteObj.ExecuteCommandAsync(CommandName.InsertHTML, this.apiResultData, executeCommandOption);
        await CloseDialog();
    }

    private async Task CopyContent()
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", Markdig.Markdown.ToPlainText(AIResult, pipeline));
    }

    private async Task CloseDialog()
    {
        dialogVisible = false;
        promptQuery = string.Empty;
        AIResult = string.Empty;
        chipValue = new[] { "Standard" };
        dropVal = "Query1";
        enableRephraseChips = true;
        enableLanguageList = false;
        sentiment = "";
        apiResultData = "";
    }

    private async Task UpdateAISuggestionsData()
    {
        try
        {
            if (!string.IsNullOrEmpty(promptQuery))
            {
                enabelRegenerateContentButton = isContentGenerating = enabelContentButton = true;
                string systemPrompt = subQuery.Contains("emoji followed by the sentiment in the format") ? "You are a helpful assistant. Please respond in string format." : "NOTE:Please retain the existing HTML structure and modify the content only. Ensure that the response adheres to the specified formatting.";
                apiResultData = await semanticKernelAI.GetCompletionAsync(promptQuery, false, false, (subQuery + systemPrompt));
                if (apiResultData != null)
                {
                    isContentGenerating = false;
                    sentiment = isSentimentCheck ? apiResultData.Replace("\"", "").Replace("'", "") : "";
                    AIResult = isSentimentCheck ? promptQuery : apiResultData;
                    noResultsFound = string.IsNullOrEmpty(AIResult) || string.IsNullOrEmpty(promptQuery);
                    enabelRegenerateContentButton = enabelContentButton = noResultsFound;
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    isContentGenerating = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
            }
            catch
            {
                await this.ToastObj.ShowAsync(new ToastModel { ContentTemplate = @GetTemplate(), ShowCloseButton = true, Timeout = 0 });
            }
        }
        private RenderFragment GetTemplate(bool hasTextSelection = false) => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddContent(1, hasTextSelection ? "Please select the content to perform the AI operation." : "An error occurred during the AI process, Please try again.");
            builder.CloseElement();
        };
        public class SubQuery
        {
            public string ID { get; set; }
            public string Text { get; set; }
        }

        public class Languages
        {
            public string ID { get; set; }
            public string Text { get; set; }
        }

        public List<SubQuery> QueryList = new List<SubQuery>
    {
        new SubQuery { ID = "Rephrase", Text = "Rephrase" },
        new SubQuery { ID = "Grammar", Text = "Correct Grammar" },
        new SubQuery { ID = "Summarize", Text = "Summarize" },
        new SubQuery { ID = "Elaborate", Text = "Elaborate" },
        new SubQuery { ID = "Translate", Text = "Translate" }
    };

        public List<Languages> LanguageList = new List<Languages>
    {
        new Languages { ID = "EN", Text = "English" },
        new Languages { ID = "ZH", Text = "Chinese (Simplified)" },
        new Languages { ID = "ZHT", Text = "Chinese (Traditional)" },
        new Languages { ID = "ES", Text = "Spanish" },
        new Languages { ID = "HI", Text = "Hindi" },
        new Languages { ID = "AR", Text = "Arabic" },
        new Languages { ID = "BN", Text = "Bengali" },
        new Languages { ID = "PT", Text = "Portuguese" },
        new Languages { ID = "RU", Text = "Russian" },
        new Languages { ID = "JA", Text = "Japanese" },
        new Languages { ID = "DE", Text = "German" },
        new Languages { ID = "KO", Text = "Korean" },
        new Languages { ID = "FR", Text = "French" },
        new Languages { ID = "IT", Text = "Italian" },
        new Languages { ID = "TR", Text = "Turkish" }
    };

        private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Name = "AIAssistant", TooltipText = "AI Assistant" },
        new ToolbarItemModel() { Name = "Rephrase", TooltipText = "Rephrase" },
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
    };
}
<style>
    .e-custom {
        margin-right: 0.5rem;
        border-radius: 25px !important;
    }

    .skeleton-rectangle {
        border-radius: 4px;
    }

    @@media (max-width: 767px) {
        .cuscol-0, .cuscol-1, .cuscol-2 {
            justify-content: center;
        }

        .custom-row-0, .custom-row-1, .custom-row-2 {
            flex-direction: column;
        }

        .cuscol-1 {
            border-right: none !important;
            border-bottom: 1px solid #ced4da !important;
        }

        .cuscol-0 {
            border-right: none !important;
        }

        .h-100 {
            height: auto !important;
        }

        .custom-dialog .e-dialog .e-dlg-content {
            overflow-y: auto !important;
        }

            .custom-dialog .e-dialog .e-dlg-content .e-richtexteditor {
                height: 100px !important;
            }

        .cuscol-noresult {
            padding-bottom: 20px !important;
        }

        .e-chip-list {
            padding: 5px !important;
        }

        .cuscol {
            padding-right: 0.2rem !important;
            width: auto !important;
        }

        .custom-row-1 {
            height: auto !important;
        }
    }

    .cuscol-1, .cuscol-2 {
        padding: 20px;
    }

    .h-100 {
        height: 100%;
    }

    .w-100 {
        width: 100%;
    }

    .custom-dialog .e-dialog .e-dlg-content {
        padding: 0px !important;
        overflow-y: hidden;
    }

    .custom-dialog .e-dialog .e-dlg-header-content + .e-dlg-content {
        padding-top: 0px !important;
    }

    .custom-dialog .e-dialog .e-footer-content {
        padding: 0px !important;
    }

    .custom-dialog .e-dialog .e-dlg-content .e-richtexteditor.e-rte-tb-expand .e-rte-content, .e-richtexteditor.e-rte-tb-expand .e-source-content {
        border: 0;
        border-bottom: 1px solid #dee2e6;
        border-top: 0px solid #dee2e6 !important;
    }

    .menubutton.e-tbar-btn.e-tbar-btn-text {
        font-size: 14px !important;
    }

    .e-ai-chat::before {
        padding: 6px;
    }
    .custom-row-0 {
        border-bottom: 1px solid #ddd;
        padding: 12px 24px 12px 24px;
        flex-shrink: inherit;
    }

    .custom-row-1 {
        padding-left: 12px !important;
        padding-right: 12px !important;
        padding-top: 0px !important;
        padding-bottom: 0px !important;
        height: 100%;
    }

    .custom-row-0, .custom-row-1, .custom-row-2 {
        display: flex;
        flex-wrap: wrap;
    }

    .cuscol, .cuscol-0, .cuscol-1, .cuscol-2, .cuscol-01 {
        padding: 0.5rem;
    }

    .no-results-found {
        text-align: center;
        margin-top: 2rem;
    }

    .no-results-found img {
        display: block;
        margin: 0 auto;
    }

    .cuscol-noresult {
        padding-bottom: 150px !important;
    }

    .cuscol-0 {
        border-right: 1px solid #ced4da;
    }

    .cuscol-1 {
        border-right: 1px solid #ced4da;
        display: flex;
        flex-direction: column !important;
    }

    .cuscol-2 {
        display: flex;
        flex-direction: column !important;
    }

    .sentiment {
        color: #000 !important;
    }

    .e-icons.e-warning { 
        font-size: 30px;
        color: initial;
    }

    .justify-content-end{
        display: flex;
        justify-content: flex-end !important;
    }
</style>