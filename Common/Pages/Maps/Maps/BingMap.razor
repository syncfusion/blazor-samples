@page "/maps/bing-map"

@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample displays the Bing Maps in various formats, including a road view, an aerial view, and an aerial view with labels.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to configure and render the Bing Maps. The Bing Maps is rendered by specifying the appropriate URL in the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Maps.MapsLayer-1.html#Syncfusion_Blazor_Maps_MapsLayer_1_UrlTemplate" aria-label="Class reference of UrlTemplate property in Maps">UrlTemplate</a> of the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Maps.MapsLayer-1.html" aria-label="Class reference of MapsLayer">MapsLayer</a>.</p>
    <p>To view the Bing Maps, enter either the development key or the trail key and click the "GO" button. As a result, the key will be appended to the URL specified in the MapsLayer's UrlTemplate, and the appropriate Bing Maps will be rendered.</p>
    <p>More information about Bing Maps can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/maps/providers/bing-maps" aria-label="Blazor Bing Maps documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    .description {
        margin-left: 30%;
        width: 57%;
    }
</style>

<div class="row" style="display:@Display">
    <div style="width: 50%;margin-top: 100px;margin-left: 24%;">
        <div class="row">
            <div class="col-xs-10 col-sm-10 col-lg-10 col-md-10">
                <SfTextBox Placeholder="Enter the Bing Maps key" Input="GetBingMapKeyValue" CssClass="@CssClass" style="height: 40px;"></SfTextBox>
            </div>
            <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
                <SfButton IsPrimary="true" @onclick="TriggerBingMap" style="margin-left: -19px;height: 42px;">GO</SfButton>
            </div>
            <div style="display: @AlertDisplay;width: 75%;margin-left: 20px;color: red;">@ErrorMessage</div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-9 col-sm-9 col-lg-9 col-md-9">
            <p style="height: 2px;"></p>
            <div style="font-weight: 500;margin-left: 31%;">Note:</div>
            <ol>
                <li class="description">Please use the <a href="https://docs.microsoft.com/en-us/bingmaps/getting-started/bing-maps-dev-center-help/getting-a-bing-maps-key" aria-label="Bing Maps Key documentation">development or testing key.</a></li>
                <li class="description">The key entered here is used only for testing this feature from your side. We will not upload it to any server or use it for any other purposes.</li>
            </ol>
        </div>
    </div>
</div>

@if (EnableBingMap)
{
    <div class="control-section">
        <div style="margin-left: 28%;">
            <SfChip>
                <ChipEvents OnClick="@TriggerBingmapType"></ChipEvents>
                <ChipItems>
                    <ChipItem Text="Road View" style="border-radius: 14px;height: 25px;" class="@RoadChipStyle"  />
                    <ChipItem Text="Aerial View" style="border-radius: 14px;height: 25px;" class="@AerialChipStyle" />
                    <ChipItem Text="Aerial View With Labels" style="border-radius: 14px;height: 25px;" class="@LabelChipStyle" />
                </ChipItems>
            </SfChip>
        </div>
        <SfMaps Theme="@Theme">
            <MapsZoomSettings Enable="true" ZoomFactor="4" />
            <MapsCenterPosition Latitude="27.1751" Longitude="78.0421" />
            <MapsLayers>
                <MapsLayer UrlTemplate="@UrlTemplate" TValue="string"></MapsLayer>
            </MapsLayers>
        </SfMaps>
    </div>
}
@code {
    public Theme Theme { get; set; }
    public string RoadChipStyle = "e-chip e-focused";
    public string AerialChipStyle = "e-chip";
    public string LabelChipStyle = "e-chip";
    public string? CssClass { get; set; }
    public string? UrlTemplate { get; set; }
    public bool EnableBingMap { get; set; } = false;
    public string Display = "block";
    public string AlertDisplay = "none";
    public string? ErrorMessage;
    private string? bingMapKey;
    private string bingMapView = "RoadOnDemand";
    public string TextColor = "black";
    
    private void GetBingMapKeyValue(InputEventArgs args)
    {
        bingMapKey = args.Value;
    }

    private async Task TriggerBingmapType(Syncfusion.Blazor.Buttons.ChipEventArgs args)
    {
        string bingViewText = args.Text;
        bingMapView = bingViewText == "Road View" ? "RoadOnDemand" : bingViewText == "Aerial View" ? "Aerial" : "AerialWithLabels";
        RoadChipStyle = bingViewText == "Road View" ? "e-chip e-focused" : "e-chip";
        AerialChipStyle = bingViewText == "Aerial View" ? "e-chip e-focused" : "e-chip";
        LabelChipStyle = bingViewText == "Aerial View With Labels" ? "e-chip e-focused" : "e-chip";
        UrlTemplate = await SfMaps.GetBingUrlTemplate("https://dev.virtualearth.net/REST/V1/Imagery/Metadata/" + @bingMapView + "?output=json&uriScheme=https&key=" + @bingMapKey);
    }

    private async Task TriggerBingMap()
    {
        UrlTemplate = await SfMaps.GetBingUrlTemplate("https://dev.virtualearth.net/REST/V1/Imagery/Metadata/" + @bingMapView + "?output=json&uriScheme=https&key=" + @bingMapKey);
        if (!string.IsNullOrEmpty(UrlTemplate))
        {
            EnableBingMap = true;
            Display = "none";
        }
        else
        {
            if (string.IsNullOrEmpty(bingMapKey))
            {
                ErrorMessage = "Key should not be empty.";
            }
            else
            {
                ErrorMessage = "Please make sure you have entered a valid key and have an active internet connection.";
            }
            CssClass = "e-error";
            AlertDisplay = "block;";
        }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}
