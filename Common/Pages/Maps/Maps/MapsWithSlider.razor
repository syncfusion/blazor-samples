@page "/maps/map-with-slider"

@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Inputs
@using System.Globalization;
@using Syncfusion.Blazor
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the average annual population growth of the countries of the North American continent.</p>
</SampleDescription>
<ActionDescription>
    <p>The range color mapping is applied to the shapes based on the population growth of the countries in percentage. A slider is placed at the bottom, and by sliding it, the countries that fall within the population growth range are highlighted. The tooltip is also enabled in this example.</p>
    <p>More information about color mapping can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/maps/color-mapping/" aria-label="Blazor Maps Color Mapping documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    #gradient_slider.e-control.e-slider .e-slider-track {
        background: -webkit-linear-gradient(left, #E5E5E5 10%, #DCD57E 25%, #7EDCA2 50%, #6EB5D0 66%, #A6DC7E 70%, #DCA87E 90%);
        background: linear-gradient(left, #E5E5E5 10%, #DCD57E 25%, #7EDCA2 50%, #6EB5D0 66%, #A6DC7E 70%, #DCA87E 90%);
        background: -moz-linear-gradient(left, #E5E5E5 10%, #DCD57E 25%, #7EDCA2 50%, #6EB5D0 66%, #A6DC7E 70%, #DCA87E 90%);
    }

    #gradient_slider.e-control.e-slider .e-range {
        background-color: transparent;
    }

    .e-control-wrapper.e-slider-container #gradient_slider.e-control.e-slider .e-handle {
        background-color: #fff;
        border: 2px solid #666;
    }
</style>

<div class="control-section">
    <SfMaps Height="400" Theme="@Theme" Background="transparent">
        <MapsAreaSettings Background="transparent" />
        <MapsMargin Bottom="20" />
        <MapsZoomSettings Enable="false" />
        <MapsTitleSettings Text="Average Annual Population Growth in North American Countries">
            <MapsTitleTextStyle Size="16px" FontFamily="Segoe UI" />
        </MapsTitleSettings>
        <MapsLayers>
            <MapsLayer ShapeData='new {dataOptions = SampleService?.WebAssetsPath + "data/maps/north-america.json"}' ShapePropertyPath="@ShapePropertyPath" ShapeDataPath="Name" DataSource="@PopulationGrowth" TValue="Growth">
                <MapsShapeSettings ColorValuePath="Population">
                    <MapsShapeColorMappings>
                        <MapsShapeColorMapping StartRange="-1.5" EndRange="-0.75" Color='@ColorMappingColorOne' />
                        <MapsShapeColorMapping StartRange="-0.75" EndRange="0.1" Color='@ColorMappingColorTwo' />
                        <MapsShapeColorMapping StartRange="0.2" EndRange="0.75" Color='@ColorMappingColorThree' />
                        <MapsShapeColorMapping StartRange="0.76" EndRange="1.5" Color='@ColorMappingColorFour' />
                        <MapsShapeColorMapping StartRange="1.5" EndRange="2.25" Color='@ColorMappingColorFive' />
                        <MapsShapeColorMapping StartRange="2.25" EndRange="3" Color='@ColorMappingColorSix' />
                    </MapsShapeColorMappings>
                </MapsShapeSettings>
                <MapsLayerTooltipSettings Visible="true" Format="${Name} : ${Population}%">
                    <MapsLayerTooltipTextStyle FontFamily="Segoe UI"></MapsLayerTooltipTextStyle>
                </MapsLayerTooltipSettings>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
</div>
<div style="display:flex; justify-content:center;">
    <div style="width:250px;height:48px;">
        <SfSlider ID="gradient_slider" Type=SliderType.MinRange Min="-1.5" Max="3" Step="0.75" TValue="double" Value="@SliderPointerValue">
            <SliderEvents TValue="double" OnChange="@RangeStartChange"></SliderEvents>
        </SfSlider>
    </div>
</div>
<style>
    .content-wrapper {
        width: 52%;
        margin: 0 auto;
        min-width: 185px;
    }

    .sliderwrap {
        margin-top: 45px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .sliderwrap label {
        padding-bottom: 50px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
    }

    .userselect {
        -webkit-user-select: none; /* Safari 3.1+ */
        -moz-user-select: none; /* Firefox 2+ */
        -ms-user-select: none; /* IE 10+ */
        user-select: none; /* Standard syntax */
    }
</style>
@code {
    public string[] ShapePropertyPath = { "name" };
    public string[] ColorMappingColorOne = { "#7E9CDC" };
    public string[] ColorMappingColorTwo = { "#DCD57E" };
    public string[] ColorMappingColorThree = { "#7EDCA2" };
    public string[] ColorMappingColorFour = { "#6EB5D0" };
    public string[] ColorMappingColorFive = { "#A6DC7E" };
    public string[] ColorMappingColorSix = { "#DCA87E" };
    public double SliderPointerValue = 3;
    public bool OpacityChecked;
    public double MinRange;

    private void RangeStartChange(Syncfusion.Blazor.Inputs.SliderChangeEventArgs<double> args)
    {
        SliderPointerValue = Convert.ToDouble(args.Value, CultureInfo.InvariantCulture);
        MinRange = Convert.ToDouble(args.Value, CultureInfo.InvariantCulture);
        if (MinRange >= -1.5 && MinRange <= -0.75)
        {
            ColorSet("#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5");
        }
        if (MinRange >= -0.75 && MinRange <= 0)
        {
            ColorSet("#7E9CDC", "#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5");
        }
        if (MinRange >= 0 && MinRange <= 0.75)
        {
            ColorSet("#7E9CDC", "#DCD57E", "#E5E5E5", "#E5E5E5", "#E5E5E5", "#E5E5E5");
        }
        if (MinRange >= 0.75 && MinRange <= 1.5)
        {
            ColorSet("#7E9CDC", "#DCD57E", "#7EDCA2", "#E5E5E5", "#E5E5E5", "#E5E5E5");
        }
        if (MinRange >= 1.5 && MinRange <= 2.25)
        {
            ColorSet("#7E9CDC", "#DCD57E", "#7EDCA2", "#6EB5D0", "#E5E5E5", "#E5E5E5");
        }
        if (MinRange >= 2.25 && MinRange <= 3)
        {
            ColorSet("#7E9CDC", "#DCD57E", "#7EDCA2", "#6EB5D0", "#A6DC7E", "#E5E5E5");
        }
        if (MinRange >= 3 && MinRange <= 3.75)
        {
            ColorSet("#7E9CDC", "#DCD57E", "#7EDCA2", "#6EB5D0", "#A6DC7E", "#DCA87E");
        }
    }
    private void ColorSet(string Color1, string Color2, string Color3, string Color4, string Color5, string Color6)
    {
        ColorMappingColorOne = new string[] { Color1 };
        ColorMappingColorTwo = new string[] { Color2 };
        ColorMappingColorThree = new string[] { Color3 };
        ColorMappingColorFour = new string[] { Color4 };
        ColorMappingColorFive = new string[] { Color5 };
        ColorMappingColorSix = new string[] { Color6 };
    }
    public class Growth
    {
        public string? Name { get; set; }
        public double Population { get; set; }
    };

    public List<Growth> PopulationGrowth = new List<Growth>
    {
        new Growth { Name = "United States", Population = 0.75 },
        new Growth { Name = "Mexico", Population = 1.8 },
        new Growth { Name = "Canada", Population = 0.79 },
        new Growth { Name = "Guatemala", Population = 2.93 },
        new Growth { Name = "Cuba", Population = 0.25 },
        new Growth { Name = "Haiti", Population = 2.31 },
        new Growth { Name = "Dominican Rep.", Population = 0.98 },
        new Growth { Name = "Honduras", Population = 2.29 },
        new Growth { Name = "El Salvador", Population = 0.92 },
        new Growth { Name = "Nicaragua", Population = 2.37 },
        new Growth { Name = "Costa Rica", Population = 1.63 },
        new Growth { Name = "Panama", Population = 1.37 },
        new Growth { Name = "Puerto Rico", Population = -1.13 },
        new Growth { Name = "Jamaica", Population = 0.26 },
        new Growth { Name = "Trinidad and Tobago", Population = 0.52 },
        new Growth { Name = "Bahamas", Population = 1.34 },
        new Growth { Name = "Belize", Population = 2.50 },
        new Growth { Name = "Barbados", Population = 0.35 },
        new Growth { Name = "Saint Lucia", Population = 0.58 },
        new Growth { Name = "Saint Vincent and the Grenadines", Population = 0.1 },
        new Growth { Name = "U.S. Virgin Is.", Population = 0.1 },
        new Growth { Name = "Grenada", Population = 0.1 },
        new Growth { Name = "Antigua and Barbuda", Population = 1.14 },
        new Growth { Name = "Dominica", Population = 0.1 },
        new Growth { Name = "Bermuda", Population = 0.1 },
        new Growth { Name = "Cayman Is.", Population = 3.0 },
        new Growth { Name = "Greenland", Population = 0.1 },
        new Growth { Name = "St. Kitts and Nevis", Population = 0.1 },
        new Growth { Name = "Sint Maarten", Population = 2.63 },
        new Growth { Name = "British Virgin Is.", Population = 3.0 },
        new Growth { Name = "Anguilla", Population = 0.1 },
        new Growth { Name = "St-Barth√©lemy", Population = 0.1 },
        new Growth { Name = "St. Pierre and Miquelon", Population = 0.1 },
        new Growth { Name = "Montserrat", Population = 0.1 }
    };
    public Theme Theme { get; set; }
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}