@page "/chat-ui/api"
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.InteractiveChatDemo

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager

@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the properties available in the Chat UI component, showcasing how various features can be customized through the property pane. It highlights the flexibility of the component, allowing users to adjust timestamps, headers, footers, time breaks, and more.
    </p>
</SampleDescription>
<ActionDescription>
    <p>In this sample, the following APIs and properties are demonstrated for customization:</p>
    <ul>
        <li><code>TimestampFormat</code>: Allows users to change the timestamp format by selecting an option from the property pane.</li>
        <li><code>ShowTimestamp</code>: Controls whether the timestamp is displayed in the chat, toggled via the property pane <code>ShowTimestamp</code> property.</li>
        <li><code>ShowTimeBreak</code>: Enables or disables the display of time breaks in the chat interface.</li>
        <li><code>ShowHeader</code>: Lets users toggle the visibility of the chat header.</li>
        <li><code>ShowFooter</code>: Toggles the visibility of the chat footer.</li>
        <li><code>EnableCompactMode</code>: Reduces spacing and left-aligns all messages to display more content within the visible chat area. </li>
        <li><code>TypingUsers</code>: Allows users to manage the list of users who are typing, updated through the multi-select options in the property pane.</li>
        <li><code>MentionUsers</code>: Configurable list of users that can be tagged using '@@' in Chat Messages.</li>
        <li><code>StatusIconCss</code>: Defines a CSS class for the status bar icon, with built-in styles for Online, Offline, Away, and Busy statuses, while allowing further customization.</li>
        <li><code>MessageOptionsToolbar</code>: Configures the toolbar that appears on individual messages, allowing customization such as copy, forward, reply, pin and delete. Supports adding, removing, or reordering toolbar items based on application needs.</li>
    </ul>
    <p>
        These properties can be adjusted via the property pane for a highly flexible and customizable chat experience.
    </p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="api-chatui">
        <SfChatUI ID="chatui" @ref="ApiChatUI"
            User="CurrentUser"
            Messages="apiChatMessages"
            ShowTimeBreak="ShowTimebreak"
            ShowFooter="ShowFooter"
            ShowHeader="ShowHeader"
            ShowTimestamp="ShowTimestamp"
            EnableCompactMode="EnableCompactMode"
            AutoScrollToBottom="AutoScrollToBottom"
            TimestampFormat="@TimestampFormat"
            HeaderIconCss="chat_header_icon"
            TypingUsers="@TypingUsers"
            MentionUsers="@MentionUsers"
            HeaderText="Design Community">
            <MessageToolbar ItemClicked="MessageToolbarClicked">
                <MessageToolbarItem IconCss="e-icons e-chat-forward" Tooltip="Forward"></MessageToolbarItem>
                <MessageToolbarItem IconCss="e-icons e-chat-copy" Tooltip="Copy"></MessageToolbarItem>
                <MessageToolbarItem IconCss="e-icons e-chat-reply" Tooltip="Reply"></MessageToolbarItem>
                <MessageToolbarItem IconCss="e-icons e-chat-pin" Tooltip="Pin"></MessageToolbarItem>
                <MessageToolbarItem IconCss="e-icons e-chat-trash" Tooltip="Delete"></MessageToolbarItem>
            </MessageToolbar>
        </SfChatUI>
    </div>
</div>

<div class="col-lg-4 property-section chat-property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" title="Properties">
                <tbody>
                    <tr>
                        <td>
                            <div>Timestamp format</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div>
                                <SfDropDownList Placeholder="Format" Width="180px" TValue="string" TItem="TimeStampFormatValue" DataSource="@TimeStampFormatValueList" Value="TimestampFormat">
                                    <DropDownListFieldSettings Text="Value" Value="Value"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" TItem="TimeStampFormatValue" ValueChange="UpdateTimestamplFormat"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Show timeStamp</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfSwitch id="chatTimestamp" Checked="@ShowTimestamp" TChecked="bool?" ValueChange="@(args => ValueChanged(args, "ShowTimestamp"))" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Show timeBreak</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfSwitch id="chatTimebreak" Checked="@ShowTimebreak" TChecked="bool?" ValueChange="@(args => ValueChanged(args, "ShowTimebreak"))" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Show header</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfSwitch id="chatHeader" Checked="@ShowHeader" TChecked="bool?" ValueChange="@(args => ValueChanged(args, "ShowHeader"))" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Show footer</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfSwitch id="chatFooter" Checked="@ShowFooter" TChecked="bool?" ValueChange="@(args => ValueChanged(args, "ShowFooter"))" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Compact mode</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfSwitch id="compactMode" Checked="@EnableCompactMode" TChecked="bool?" ValueChange="@(args => ValueChanged(args, "EnableCompactMode"))" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Typing users</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfMultiSelect TValue="string" TItem="UserValue" DataSource="@UsersList" Placeholder="Typing users...">
                                    <MultiSelectFieldSettings Text="Value" Value="Value"></MultiSelectFieldSettings>
                                    <MultiSelectEvents TValue="string" TItem="UserValue" OnValueSelect="@OnTypingUserSelected" OnValueRemove="@OnTypingUserRemoved"></MultiSelectEvents>
                                </SfMultiSelect>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>Mention users</div>
                        </td>
                        <td style="padding-left: 20px">
                            <div style="padding-left: 0;padding-top: 0">
                                <SfMultiSelect TValue="List<UserModel>" TItem="UserModel" DataSource="@AvailabletMentionUsers" Value="@SelectedMentionUsers" Placeholder="Mention users...">
                                    <MultiSelectFieldSettings Text="User" Value="User"></MultiSelectFieldSettings>
                                    <MultiSelectEvents TValue="List<UserModel>" TItem="UserModel" OnValueSelect="@OnMentionUserSelected" OnValueRemove="@OnMentionUserRemoved"></MultiSelectEvents>
                                </SfMultiSelect>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .api-chatui {
        height: 500px;
        width: 60%;
        margin: 0 auto;
    }

    .api-chatui .e-header-icon.chat_header_icon {
        background-image: url(@(SampleService!.WebAssetsPath + "images/chat-ui/public-event.png"));
        background-color: unset;
    }

    .chat-property-section .property-panel-content td {
        padding: 10px 0px;
    }

    .chat-property-section .e-multiselect,
    .chat-property-section .e-multi-select-wrapper {
        padding-left: 0;
        padding-top: 0;
    }

    @@media only screen and (max-width: 850px) {
        .api-chatui {
            width: 80%;
        }
    }
</style>


@code {
    private SfChatUI ApiChatUI = new SfChatUI();
    private UserModel CurrentUser = new ChatMessagesData().GetSpecificUser("admin", "Alice", String.Empty, String.Empty, String.Empty);
    private string TimestampFormat = "MM/dd hh:mm tt";
    private bool ShowTimestamp = true;
    private bool ShowTimebreak = true;
    private bool ShowHeader = true;
    private bool ShowFooter = true;
    private bool EnableCompactMode = false;
    private bool AutoScrollToBottom = false;
    private List<ChatMessage> apiChatMessages = new ChatMessagesData().GetApiChatMessages();
    private List<UserModel> MentionUsers = new ChatMessagesData().GetMentionUsers();
    private List<UserModel> SelectedMentionUsers = new ChatMessagesData().GetMentionUsers();
    private List<UserModel> AvailabletMentionUsers = new ChatMessagesData().GetMentionUsers();
    private List<UserModel> TypingUsers = new List<UserModel>();
    private void ValueChanged(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args, string PropertyName)
    {
        switch (PropertyName)
        {
            case "ShowTimestamp":
                ShowTimestamp = args.Checked ?? false;
                break;
            case "ShowTimebreak":
                ShowTimebreak = args.Checked ?? false;
                break;
            case "ShowHeader":
                ShowHeader = args.Checked ?? false;
                break;
            case "ShowFooter":
                ShowFooter = args.Checked ?? false;
                break;
            case "AutoScrollToBottom":
                AutoScrollToBottom = args.Checked ?? false;
                break;
            case "EnableCompactMode":
                EnableCompactMode = args.Checked ?? false;
                break;
        }
    }

    private void MessageToolbarClicked(MessageToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss == "e-icons e-chat-forward")
        {
            var newMessageObj = new ChatMessage()
            {
                Text = args.Message.Text,
                ID = "chat-message-" + (ApiChatUI.Messages.Count + 1).ToString(),
                Author = args.Message.Author,
                MentionUsers = args.Message.MentionUsers,
                IsForwarded = true,
                Status = args.Message.Status,
                Timestamp = args.Message.Timestamp,
                TimestampFormat = args.Message.TimestampFormat,
                IsPinned = args.Message.IsPinned,
                RepliedTo = args.Message.RepliedTo
            };
            ApiChatUI.Messages.Add(newMessageObj);
        }
    }

    public class UserValue
    {
        public string Value { get; set; } = String.Empty;
    }

    public class TimeStampFormatValue: UserValue { }

    private List<TimeStampFormatValue> TimeStampFormatValueList = new List<TimeStampFormatValue>
    {
        new TimeStampFormatValue() { Value="MM/dd hh:mm tt" },
        new TimeStampFormatValue() { Value="dd/MM/yy hh:mm tt" },
        new TimeStampFormatValue() { Value="hh:mm tt" },
        new TimeStampFormatValue() { Value="MMMM hh:mm tt" }
    };

    private List<UserValue> UsersList = new List<UserValue>
    {
        new UserValue() { Value="Michale" },
        new UserValue() { Value="Laura" },
        new UserValue() { Value="Charlie" },
        new UserValue() { Value="Jordan"}
    };
    private List<string> selectingUsers = new List<string> { "Laura", "Charlie" };
    private async Task OnMentionUserSelected(SelectEventArgs<UserModel> args)
    {
        if (args?.ItemData != null && !MentionUsers.Any(user => user.ID == args.ItemData.ID))
        {
            MentionUsers.Add(args.ItemData);
            SelectedMentionUsers.Add(args.ItemData);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMentionUserRemoved(RemoveEventArgs<UserModel> args)
    {
        if (args?.ItemData?.ID != null)
        {
            MentionUsers = MentionUsers.Where(user => user.ID != args.ItemData.ID).ToList();
            SelectedMentionUsers = SelectedMentionUsers.Where(user => user.ID != args.ItemData.ID).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnTypingUserSelected(SelectEventArgs<UserValue> args)
    {
        if (args?.ItemData?.Value != null)
        {
            UserModel user = new UserModel()
            {
                User = args.ItemData.Value,
                AvatarBgColor = "#bacbe4"
            };
            if (selectingUsers.Contains(args.ItemData.Value))
            {
                user.AvatarBgColor = args.ItemData.Value == "Charlie" ? "#e6cdde" : "#dec287";
                user.AvatarUrl = $"{SampleService!.WebAssetsPath}images/chat-ui/{args.ItemData.Value.ToLower()}.png";
            }
            TypingUsers.Add(user);
        }
    }
    private void UpdateTimestamplFormat(ChangeEventArgs<string, TimeStampFormatValue> args)
    {
        if (args?.Value != null)
        {
            TimestampFormat = args.Value;
        }
    }
    private void OnTypingUserRemoved(RemoveEventArgs<UserValue> args)
    {
        if (args?.ItemData?.Value != null)
        {
            TypingUsers = TypingUsers.Where(user => user.User != args.ItemData.Value).ToList();
        }
    }
}
