@page "/ai-assistview/default-functionalities"
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.InteractiveChatDemo

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the default functionalities of the AI AssistView component. The AI AssistView creates an interface through which users can interact with AI-driven suggestions and prompts.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, the <code>BannerTemplate</code> customizes the banner content, and <code>AssistViewToolbar</code> adds custom toolbar items like a right-aligned <code>Refresh</code> button. The <code>PromptSuggestions</code> provides AI prompt suggestions, and <code>PromptRequested</code> handles prompt requests when triggered.
    </p>
</ActionDescription>

<div class="control-section">
    <div class="default-aiassistview">
        <SfAIAssistView @ref="sfAIAssistView" ID="aiAssistView" PromptSuggestions="@suggestions" PromptRequested="@PromptRequest">
            <AssistViews>
                <AssistView>
                    <BannerTemplate>
                        <div class="banner-content">
                            <div class="e-icons e-assistview-icon"></div>
                            <h3>AI Assistance</h3>
                            <i>To get started, provide input or choose a suggestion.</i>
                        </div>
                    </BannerTemplate>
                </AssistView>
            </AssistViews>
            <AssistViewToolbar ItemClicked="ToolbarItemClicked">
                <AssistViewToolbarItem Type="ItemType.Spacer"></AssistViewToolbarItem>
                <AssistViewToolbarItem IconCss="e-icons e-refresh"></AssistViewToolbarItem>
            </AssistViewToolbar>
        </SfAIAssistView>
    </div>
</div>
@code {
    private SfAIAssistView sfAIAssistView = new SfAIAssistView();

    private List<string> suggestions = new PromptResponseData().GetAllSuggestionData();

    private List<PromptResponseData> prompts = new PromptResponseData().GetAllPromptResponseData();

    private async Task PromptRequest(AssistViewPromptRequestedEventArgs args)
    {
        await Task.Delay(3000);
        var promptData = prompts.FirstOrDefault(prompt => prompt.Prompt == args.Prompt);
        var defaultResponse = "For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.";
        args.Response = promptData?.Response ?? defaultResponse;
        args.PromptSuggestions = promptData?.SuggestionData.Count > 0 ? promptData.SuggestionData : suggestions;
    }

    private void ToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss == "e-icons e-refresh")
        {
            sfAIAssistView.Prompts.Clear();
        }
    }
}
<style>
    .default-aiassistview {
        height: 600px;
        width: 60vw;
        margin: 0 auto;
    }

    .default-aiassistview .banner-content .e-assistview-icon:before {
        font-size: 35px;
    }

    .default-aiassistview .banner-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        height: 330px;
        text-align: center;
    }

    @@media only screen and (max-width: 750px) {
        .default-aiassistview {
            width: 100%;
        }
    }
</style>
