@page "/ai-assistview/custom-views"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.Buttons
@using System.Text.RegularExpressions;
@using Syncfusion.Blazor.InteractiveChatDemo
@inject IJSRuntime JSRuntime

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager

@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the different view available for the AI AssistView component.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, the AI AssistView component is configured with three distinct views using the <code>views</code> property.</p>
    <p>
        Each view displays its own unique content:
        <ul>
            <li>The <code>prompt</code> view includes a textarea with a <code>Generate</code> button and displays a list of suggestions</li>
            <li>The <code>response</code> view shows the generated response with a copy option.</li>
            <li>The <code>custom</code> view allows to display the custom content.</li>
        </ul>
    </p>
</ActionDescription>

<div class="control-section">
    <div class="views-aiassistview">
        <SfAIAssistView ID="aiAssistView" @ref="AIAssistView" @bind-ActiveView="@activeIndex">
            <ChildContent>
                <AssistViews>
                    <AssistView Header="Prompt">
                        <ViewTemplate>
                            <div class="view-container">
                                <SfTextArea @bind-Value="@Value" ResizeMode="Syncfusion.Blazor.Inputs.Resize.None" RowCount="5" Placeholder="Enter your prompt..." @oninput="OnInput"></SfTextArea>
                                <SfButton CssClass="e-primary generate-btn" @onclick="GenerateContent" Disabled="@disable">Generate Prompt</SfButton>
                                <ul class="suggestions">
                                    @foreach (var suggestion in suggestions)
                                    {
                                        <li class="suggestion-item e-card" @onclick="() => clickHandler(suggestion)">@suggestion</li>
                                    }
                                </ul>
                            </div>
                        </ViewTemplate>
                    </AssistView>
                    <CustomView Header="Response" IconCss="e-icons e-comment-show">
                        <ViewTemplate>
                            <div class="view-container response-view">
                                @if (isDefaultResponse)
                                {
                                    <div class="responseItemContent default-response e-card">
                                        <span class="e-icons e-circle-info"></span>
                                        No prompt provided. Please enter a prompt and click 'Generate Prompt' to see the response.
                                    </div>
                                }
                                else
                                {
                                    @if (!string.IsNullOrEmpty(contentResponse))
                                    {
                                        <div class="responseItemContent e-card">
                                            <div class="response-header"><b>Prompt:</b> @currentPrompt</div>
                                            <hr style="height: 1px;margin: 0;">
                                            <div class="content">
                                                @((MarkupString)contentResponse)
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="options">
                                                    <button id="copyBtn" class="e-btn e-normal" @onclick="ChangeContent">@copyContent</button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="responseItemContent e-card">
                                            <div class="response-header"><b>Prompt:</b> @currentPrompt</div>
                                            <hr style="height: 1px;margin: 0;">
                                            <div class="content">
                                                <div class="e-skeleton e-shimmer-wave" style="width: 100%; height: 20px;"></div>
                                                <div class="e-skeleton e-shimmer-wave" style="width: 80%; height: 20px;"></div>
                                                <div class="e-skeleton e-shimmer-wave" style="width: 100%; height: 20px;"></div>
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="options">
                                                    <button id="copyBtn" class="e-btn e-normal e-skeleton e-shimmer-wave">Copy</button>
                                                </div>
                                            </div>
                                        </div>              
                                    }
                                    if (contentResponseList.Count != 0)
                                    {
                                        @for (int i = 0; i < contentResponseList.Count - 1; i++)
                                        {
                                            <div class="responseItemContent e-card">
                                                <div class="response-header"><b>Prompt:</b> @promptList[i]</div>
                                                <hr style="height: 1px;margin: 0;">
                                                <div class="content">
                                                    @((MarkupString)contentResponseList[i])
                                                    <hr style="height: 1px;margin: 0;">
                                                    <div class="options">
                                                        <button id="copyBtn" class="e-btn e-normal">Copy</button>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </ViewTemplate>
                    </CustomView>
                    <CustomView Header="Custom">
                        <ViewTemplate>
                            <div class="view-container"><h5>Custom view content</h5></div>
                        </ViewTemplate>
                    </CustomView>
                </AssistViews>
            </ChildContent>
        </SfAIAssistView>
    </div>
</div>

@code {
    private SfAIAssistView AIAssistView = new SfAIAssistView();
    private string Value = string.Empty;
    private int activeIndex;
    private List<string> Prompt = new List<string>();
    private List<string> copyClasses = new List<string>();
    private bool isDefaultResponse = true;
    private bool disable = true;
    private List<string> contentResponseList = new List<string>();
    private List<string> promptList = new List<string>();
    private string contentResponse = string.Empty;
    private string contentResponses = string.Empty;
    private string currentPrompt = string.Empty;
    private string copyContent = "Copy";
    private string promptResponse = string.Empty;

    private List<string> suggestions = new PromptResponseData().GetAllSuggestionData();

    private List<PromptResponseData> prompts = new PromptResponseData().GetAllPromptResponseData();

    private void OnInput(ChangeEventArgs e)
    {
        disable = string.IsNullOrEmpty(e?.Value?.ToString());
        InvokeAsync(StateHasChanged);
    }

    private void clickHandler(string content)
    {
        if (!string.IsNullOrEmpty(content))
        {
            Value = content;
            disable = false;
        }
    }

    private void GenerateContent ()
    {
        var promptValue = Value;
        promptList.Add(promptValue);
        contentResponse = string.Empty;
        if (!string.IsNullOrEmpty(promptValue))
        {
            Value = string.Empty;
            disable = true;
            activeIndex = 1;
            currentPrompt = promptValue;
            UpdateResponseView(promptValue);
        }
    }

    private async void UpdateResponseView(string aiprompt)
    {
        isDefaultResponse = false;
        var defaultResponse = "For real-time prompt processing, connect the AI AssistView control to your preferred AI service, such as OpenAI or Azure Cognitive Services. Ensure you obtain the necessary API credentials to authenticate and enable seamless integration.";
        var promptData = prompts.FirstOrDefault(prompt => prompt.Prompt == aiprompt);
        promptResponse = promptData?.Response ?? defaultResponse;
        contentResponseList.Add(promptResponse);
        contentResponses += promptResponse;
        await Task.Delay(3000);
        contentResponse = promptResponse;
        InvokeAsync(StateHasChanged).GetAwaiter();
    }

    private async void ChangeContent()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", new Regex("<.*?>", RegexOptions.Compiled).Replace(contentResponse, string.Empty));
        copyContent = "Copied!";
        contentResponse = promptResponse;
        StateHasChanged();
        await Task.Delay(1000);
        copyContent = "Copy";
        contentResponse = promptResponse;
        StateHasChanged();
    }
}
<style>

    .views-aiassistview {
        width: max(50%, 500px);
        margin: 30px auto;
    }

    .views-aiassistview .view-container {
        margin: 20px auto;
        width: 80%;
    }

    .views-aiassistview .view-container:not(.response-view) {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .views-aiassistview .view-container .generate-btn,
    .views-aiassistview .view-container .suggestions li {
        width: fit-content;
    }

    .views-aiassistview .view-container .suggestions {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .views-aiassistview .view-container .suggestions li {
        padding: 5px 10px;
        margin-top: 10px;
        cursor: pointer;
    }

    .views-aiassistview .response-view {
        flex-direction: column-reverse;
        max-height: 450px;
    }

    .views-aiassistview .view-container .responseItemContent {
        padding: 10px;
        margin-top: 10px;
        display: flex;
        gap: 10px;
        font-size: 14px;
        line-height: 28px;
    }

    .views-aiassistview .view-container .responseItemContent .response-header {
        font-style: italic;
    }

    .views-aiassistview .view-container .responseItemContent span {
        font-size: 20px;
        margin-top: 3px;
    }

    .views-aiassistview .view-container .responseItemContent:hover {
        background: none;
    }

    .views-aiassistview .view-container .default-response {
        flex-direction: row;
    }

    .views-aiassistview .options {
        padding-top: 10px;
    }

    @@media only screen and (max-width: 750px) {
        .views-aiassistview,
        .views-aiassistview .view-container .generate-btn,
        .views-aiassistview .view-container .suggestions li {
            width: 100%;
        }

        .views-aiassistview .view-container {
            width: 90%;
        }

        .views-aiassistview .view-container .suggestions li {
            padding: 0px 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            display: block;
        }
    }

</style>
