@page "/treeview/remote-data"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Spinner

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>The <a href="https://www.syncfusion.com/blazor-components/blazor-treeview" aria-label="Feature Tour of Blazor TreeView">Blazor TreeView</a> sample demonstrates the binding data to the <code>TreeView</code> from remote data source. On expanding the parent node, the spinner icon will be displayed until the child nodes are loaded into the parent node. Click on node to select it, and click on the expand/collapse icon or double click on node to expand/collapse it.</p>
</SampleDescription>
<ActionDescription>
    <p>
        <p>The <code>TreeView</code> component loads the data through the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.TreeViewFieldOptions-1.html#Syncfusion_Blazor_Navigations_TreeViewFieldOptions_1_DataSource">DataSource</a> property, where the data can be either local data or remote data. In case of remote data, the data can be loaded from any remote services though the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.SfDataManager.html" target="_blank" aria-label="Class reference of DataManager">DataManager</a>.</p>
        <p>The DataManager will act as an interface between the service endpoint and the <code>TreeView</code>, that requires the below minimal information to interact with the service endpoint.</p>
        <p>DataManager-><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Url" target="_blank" aria-label="Class reference of Url property in DataManager">Url</a> - Defines the service endpoint to fetch data. DataManager-><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Adaptor" target="_blank" aria-label="Class reference of Adaptor property in DataManager">Adaptor</a> - Defines the adaptor option. By default, <code>ODataV4Adaptor</code> is used for remote binding.</p>
        <p>In this demo, the <code>TreeView</code> is bound with the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.TreeViewFieldOptions-1.html#Syncfusion_Blazor_Navigations_TreeViewFieldOptions_1_DataSource">DataSource</a> from the Northwind remote service by using the DataManager instance.</p>
        <p>More information about <code>Treeview</code> can be found in this <a href="https://blazor.syncfusion.com/documentation/treeview/data-binding/#remote-data" target="_blank" aria-label="Blazor TreeView Data Binding documentation">documentation</a> section.</p>
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    @*Initialize the Spinner component*@
    <SfSpinner @ref="SpinnerRef" Size="40" Visible="true" CssClass="tree-spinner"></SfSpinner>
    <div class="control_wrapper">
        @*Initialize the TreeView component*@
        <SfTreeView TValue="TreeData">
            <TreeViewEvents TValue="TreeData" Created="OnCreated"></TreeViewEvents>
            <TreeViewFieldsSettings TValue="TreeData" Query="@employeeQuery" Id="EmployeeID" Text="FirstName" HasChildren="EmployeeID">
                <SfDataManager Url="https://services.odata.org/V3/Northwind/Northwind.svc" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain="true"></SfDataManager>
                <TreeViewFieldChild TValue="TreeData" Query="@orderQuery" Id="OrderID" Text="ShipName" ParentID="EmployeeID">
                    <SfDataManager Url="https://services.odata.org/V3/Northwind/Northwind.svc" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain="true"></SfDataManager>
                </TreeViewFieldChild>
            </TreeViewFieldsSettings>
        </SfTreeView>
    </div>
</div>
@code{
    // Specify the reference of Spinner element.
    private SfSpinner SpinnerRef { get; set; }
    
    // Specifies the event handler for Created event in TreeView component.
    public async Task OnCreated()
    {
        await Task.Delay(500);
        await SpinnerRef?.HideAsync();
        SpinnerRef?.Dispose();
    }
    // Specify the column value of employee table.
    public static List<string> EmployeeDetails = new List<string>() { "EmployeeID", "FirstName", "Title" };
    // Specify the query value of TreeView component.
    Query employeeQuery = new Query().From("Employees").Select(EmployeeDetails).Take(5);
    // Specify the column value of order table.
    public static List<string> OrderDetails = new List<string>() { "OrderID", "EmployeeID", "ShipName" };
    // Specify the query value of TreeView component.
    Query orderQuery = new Query().From("Orders").Select(OrderDetails).Take(5);
    public class TreeData
    {
        public int? EmployeeID { get; set; }
        public int OrderID { get; set; }
        public string ShipName { get; set; }
        public string FirstName { get; set; }
    }
}
<style>
    /* Sample specific styles */
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
        max-height: 420px;
        min-height: 230px;
        overflow: auto;
    }
    .tree-spinner {
        margin-top: -50px;
    }
</style>
