@page "/treeview/checkBox"

@using Syncfusion.Blazor.Navigations
@inject NavigationManager UriHelper
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
   <p> The <a href="https://www.syncfusion.com/blazor-components/blazor-treeview" target="_blank" aria-label="Feature Tour of Blazor TreeView">Blazor TreeView</a> sample demonstrates the checkbox functionalities of the <code>TreeView</code>. Click on any parent node's checkbox to check/uncheck the node and its child nodes. The parent node's checked state will be determined by its child node's checked state.</p> 
</SampleDescription>
<ActionDescription>
   <p>The <code>TreeView</code> component can be rendered with checkbox on the left side of each tree node. This allows the user to check more than one node, and this can be enabled by the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.SfTreeView-1.html#Syncfusion_Blazor_Navigations_SfTreeView_1_ShowCheckBox" target="_blank" aria-label="Class reference of ShowCheckBox property in TreeView">ShowCheckBox</a> property.</p>
   <p>In this demo, the <code>TreeView</code> is populated with checkbox enabled.</p>
   <p>For more information, you can refer to the <a href="https://blazor.syncfusion.com/documentation/treeview/check-box/" target="_blank" aria-label="Blazor TreeView Checkbox documentation">Checkboxes</a> section from the documentation.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="control_wrapper">
        @*Initialize the TreeView component*@
        <SfTreeView @ref="TreeRef" TValue="TreeItem" ShowCheckBox="true" @bind-CheckedNodes="@CheckedNodes">
            <TreeViewFieldsSettings DataSource="@TreeDataSource" ImageUrl="ImageUrl" Id="NodeId" Text="NodeText" Expanded="Expanded" Child="@("Child")" IconCss="Icon"></TreeViewFieldsSettings>
        </SfTreeView>
    </div>
</div>
<div class="col-lg-4 property-section property-custom">
    <div class="property-panel-section">
        <div class="property-panel-header">Checked Items</div>
        <div id="selecttable" class="property-panel-content">
            <table id="property" title="Properties" class="property-panel-table">
                <thead>
                    <tr>
                        <th style="width: 50%">Id</th>
                        <th style="width: 50%;">Text</th>
                    </tr>
                </thead>
                <tbody>
                    @if (TreeRef != null)
                    {
                        @for (int i = 0; i < CheckedNodes?.Length; i++)
                        {
                            List<TreeItem> tree = TreeRef.GetTreeData(CheckedNodes[i]);
                            <tr>
                                <td style="width: 30%">
                                    <div>@tree[0].NodeId</div>
                                </td>
                                <td style="width: 30%">
                                    <div>@tree[0].NodeText</div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@code{
    // Specifies the DataSource value for TreeView component.
    private List<TreeItem> TreeDataSource = new List<TreeItem>();
    // Specify the reference of TreeView element.
    private SfTreeView<TreeItem> TreeRef;
    // Specifies the CheckedNodes value for TreeView component.
    private string[] CheckedNodes = new string[] { "04-01" };
    
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        TreeDataSource.Add(new TreeItem
        {
            NodeId = "01",
            NodeText = "Documents",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "01-01", NodeText = "Environment Pollution.docx", Icon = "docx" },
                new TreeItem { NodeId = "01-02", NodeText = "Global Water, Sanitation, & Hygiene.docx", Icon = "docx" },
                new TreeItem { NodeId = "01-03", NodeText = "Global Warming.ppt", Icon = "ppt" },
                new TreeItem { NodeId = "01-04", NodeText = "Social Network.pdf", Icon = "pdf" },
                new TreeItem { NodeId = "01-05", NodeText = "Youth Empowerment.pdf", Icon = "pdf" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "02",
            NodeText = "Downloads",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "02-01", NodeText = "UI-Guide.pdf", Icon = "pdf" },
                new TreeItem { NodeId = "02-02", NodeText = "Tutorials.zip", Icon = "zip" },
                new TreeItem { NodeId = "02-03", NodeText = "Game.exe", Icon = "exe" },
                new TreeItem { NodeId = "02-04", NodeText = "TypeScript.7z", Icon = "zip" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "03",
            NodeText = "Music",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "03-01", NodeText = "Gouttes.mp3", Icon = "audio" }
            }
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "04",
            NodeText = "Pictures",
            Icon = "folder",
            Expanded = true,
            Child = new List<TreeItem>()
            {
                new TreeItem
                {
                    NodeId = "04-01", NodeText = "Camera Roll", Icon = "folder", Expanded = true,
                    Child = new List<TreeItem>()
                    {
                        new TreeItem { NodeId = "04-01-01", NodeText = "WIN_20160726_094117.JPG", ImageUrl = "https://cdn.syncfusion.com/blazor/images/demos/treeview/9.webp" },
                        new TreeItem { NodeId = "04-01-02", NodeText = "WIN_20160726_094118.JPG", ImageUrl = "https://cdn.syncfusion.com/blazor/images/demos/treeview/3.webp" },
                    }
                },
                new TreeItem { NodeId = "04-02", NodeText = "Wind.jpg", Icon = "images" },
                new TreeItem { NodeId = "04-03", NodeText = "Stone.jpg", Icon = "images" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "05",
            NodeText = "Videos",
            Icon = "folder",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "05-01", NodeText = "Naturals.mp4", Icon = "video" },
                new TreeItem { NodeId = "05-02", NodeText = "Wild.mpeg", Icon = "video" },
            },
        });
    }

    private class TreeItem
    {
        public string NodeId { get; set; }
        public string NodeText { get; set; }
        public string Icon { get; set; }
        public string ImageUrl { get; set; }
        public bool Expanded { get; set; }
        public List<TreeItem> Child;
    }
}

<style>
    /* Sample specific styles */
    .sb-right-pane .sb-content-section {
        min-height: 380px;
    }
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
        max-height: 470px;
        overflow: auto;
    }
    #selecttable {
        overflow: auto;
        max-height: 420px;
    }
    #selecttable div {
        padding-left: 0;
    }
    /* Loading sprite image for TreeView */
    .e-treeview .e-list-icon {
        background-repeat: no-repeat;
        background-image: url('@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/treeview/file-icons.png")');
        height: 20px;
        width: 20px;
    }
    .e-treeview .e-list-img {
        width: 25px;
        height: 25px;
    }
    /* Specify the Icon positions based upon the class name */
    .e-treeview .e-list-icon.folder {
        background-position: -194px -552px
    }
    .e-bigger .e-treeview .e-list-icon.folder {
        background-position: -194px -549px;
    }
    .e-treeview .e-list-icon.docx {
        background-position: -194px -20px
    }
    .e-treeview .e-list-icon.ppt {
        background-position: -194px -48px
    }
    .e-treeview .e-list-icon.pdf {
        background-position: -194px -104px
    }
    .e-treeview .e-list-icon.images {
        background-position: -194px -132px
    }
    .e-treeview .e-list-icon.zip {
        background-position: -194px -188px
    }
    .e-treeview .e-list-icon.audio {
        background-position: -194px -244px
    }
    .e-treeview .e-list-icon.video {
        background-position: -194px -272px
    }
    .e-treeview .e-list-icon.exe {
        background-position: -194px -412px
    }
</style>
