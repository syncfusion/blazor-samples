@page "/treeview/keyboard-navigation"

@using Syncfusion.Blazor.Navigations

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>The <a href="https://www.syncfusion.com/blazor-components/blazor-treeview" target="_blank" aria-label="Feature Tour of Blazor TreeView">Blazor TreeView</a>
        functionalities can be interactive with keyboard shortcuts. In the following sample, various key combinations
        can be used to interact with <code>TreeView</code>.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor <code>TreeView</code> has built-in keyboard support and allows you to access its functionalities using a keyboard
        alone. The supported keys are listed below.</p>
    <ul>
        <li>
            <b>Supported keys and user actions</b>
            <ul>

                <li>
                    <span class="key-class"><kbd>Alt</kbd> + <kbd>J</kbd></span>
                    <span> - Focuses on the first component of the demo.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Up arrow</kbd></span>
                    <span> - Focus goes to the previous node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Down arrow</kbd></span>
                    <span> - Focus goes to the next node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Right arrow</kbd></span>
                    <span> - Expands the current node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Left arrow</kbd></span>
                    <span> - Collapses the current node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Home</kbd></span>
                    <span> - Focus goes to the first node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>End</kbd></span>
                    <span> - Focus goes to the last node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>F2</kbd></span>
                    <span> - Edits the focused node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Esc</kbd></span>
                    <span> - Focuses out the edit state without saving the edited text.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Enter</kbd></span>
                    <span> - Selects the focused node/saves the edited text.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Space</kbd></span>
                    <span> - Checks the current node.</span>
                </li>
                <li>
                    <span class="key-class"><kbd>Ctrl</kbd> + <kbd>A</kbd></span>
                    <span> - Selects all nodes.</span>
                </li>
            </ul>
        </li>
    </ul>
</ActionDescription>


<div class="control-section">
    <div class="control_wrapper" aria-label="TreeView Navigation">
        @*Initialize the TreeView component*@
        <SfTreeView TValue="TreeItem" AllowMultiSelection="true" AllowEditing="true" ShowCheckBox="true">
            <TreeViewFieldsSettings DataSource="@TreeDataSource" Id="NodeId" Text="NodeText" Expanded="Expanded"
                Child="@("Child")"></TreeViewFieldsSettings>
        </SfTreeView>
    </div>
</div>

@code {
    // Specifies the DataSource value for TreeView component.
    private List<TreeItem> TreeDataSource = new List<TreeItem>();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "01",
            NodeText = "Laptops",
            Expanded = true,
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "01-01", NodeText = "Lenovo" },
                new TreeItem { NodeId = "01-02", NodeText = "Dell" },
                new TreeItem { NodeId = "01-03", NodeText = "Sony" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "02",
            NodeText = "Desktop",
            Expanded = true,
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "02-01", NodeText = "All in one Desktops" },
                new TreeItem { NodeId = "02-02", NodeText = "Monitors" },
                new TreeItem { NodeId = "02-03", NodeText = "RAM" },
                new TreeItem { NodeId = "02-04", NodeText = "Graphic card" },
            },
        });
        TreeDataSource.Add(new TreeItem
        {
            NodeId = "03",
            NodeText = "Pen drives",
            Child = new List<TreeItem>()
            {
                new TreeItem { NodeId = "03-01", NodeText = "8 GB" },
                new TreeItem { NodeId = "03-02", NodeText = "16 GB" },
                new TreeItem { NodeId = "03-03", NodeText = "32 GB" },
                new TreeItem { NodeId = "03-04", NodeText = "64 GB" },
            },
        });
    }

    public class TreeItem
    {
        public string NodeId { get; set; }
        public string NodeText { get; set; }
        public bool Expanded { get; set; }
        public List<TreeItem> Child { get; set; }
    }
}
<style>
    /* Sample specific styles */
    .control_wrapper {
        max-width: 500px;
        margin: auto;
        border: 1px solid #dddddd;
        border-radius: 3px;
        max-height: 470px;
        overflow: auto;
    }
    .key-class {
        display: inline-block;
        width: 130px;
    }
</style>
