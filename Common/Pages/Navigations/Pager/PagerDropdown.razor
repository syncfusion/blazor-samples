@page "/pager/pager-dropdown"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>
       This sample shows how to change the Page size dynamically using the drop down in the Pager component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, initially the Blazor Cards has been rendered based on the <code>PageSize</code> (5) defined in the Pager.  Using the <code>PageSizes</code> property you can define the customized page size list and it is displayed in the pager drop down. Now you can increase/decrease the Cards rendering count based on the page size selected in the pager drop down.</p>
    <p>
        More information about using pager drop downs in Blazor Pager component can be found in this  <a target="_blank" href="https://blazor.syncfusion.com/documentation/Pager/getting-started" aria-label="Navigate to the documentation for getting started with Blazor pager component.">documentation section</a>.
    </p>
</ActionDescription>

   <div class="control-card">
        <div class="pager-container">
        <SfPager @ref="@Page" PageSize=@pageSize ShowAllInPageSizes=true TotalItemsCount=@TotalCount PageSizes=@pagesizes ItemClick ="HandleNumericClick" PageSizeChanging="Change">
            
        </SfPager>
    </div>
    <div class="control-section col-lg-9 card-control-section tile_layout">
        <div class="e-card-layout" style="width: 750px;">
            <div class="contest-wrapper">
              @{ var carddetails = CardDatas.Skip(SkipValue).Take(TakeValue).ToList();
                @foreach (CardDataModel card in carddetails)
                {
                    <div class="col-lg-4 col-md-4 col-sm-6" style="padding: 15px 0px 15px 15px; width: 217px;">
                        <div id="card_sample_1" class="card_sample" style="width:200px;">
                            <SfCard ID="@card.Id" style="height: 319px;width: 195px;" >
                                <CardImage Image="@card.ImageUrl" />
                                <CardHeader Title="@card.Title" SubTitle="@card.SubTitle" />
                                <CardContent Content="@card.Content" />
                                <CardFooter>
                                    <CardFooterContent>
                                        <SfButton CssClass="e-btn e-outline e-primary" @onclick="@(e => NavigateToUrlAsync(@card.NavUrl))">Read More</SfButton>
                                    </CardFooterContent>
                                </CardFooter>
                            </SfCard>
                        </div>
                    </div>
                }
              }
            </div>
        </div>
    </div>
   
 </div>


@code{
    [Inject] public NavigationManager? NavigationManager { get; set; }
    [Inject] public IJSRuntime? JsRuntime { get; set; }
    SfPager? Page;


    public int pageSize { get; set; } = 5;
    public int TotalCount { get; set; }
    public List<int> pagesizes = new List<int> { 3, 5, 9 };
    public int SkipValue;
    public int TakeValue;

    protected override void OnInitialized()
    {
		
        LoadData();
        base.OnInitialized();
    }

    private void LoadData()
    {
        _cardDatas = this.GetCardDatas();
        TotalCount = _cardDatas.Count;
        TakeValue = pageSize;
    }

    public void HandleNumericClick(PagerItemClickEventArgs args)
    {
        if (Page != null)
        {
            SkipValue = (args.CurrentPage * Page.PageSize) - Page.PageSize;
            TakeValue = Page.PageSize;
        }
    }
    public void Change(PageSizeChangingArgs args)
    {
        if (args.SelectedPageSize == "All" && Page != null)
        {
           TakeValue = Page.TotalItemsCount;
        }
        else
        {
            TakeValue = int.Parse(args.SelectedPageSize);
        }
        SkipValue = 0;
    }

    public class CardDataModel
    {
        public string ImageUrl { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string SubTitle { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public string NavUrl { get; set; } = string.Empty;
        public string Tag { get; set; } = string.Empty;
        public string Id { get; set; } = string.Empty;
    }
    public List<CardDataModel> GetCardDatas()
    {
        var assetpath = SampleService.AssetsPath + "images/cards/";
        List<CardDataModel> CardData = new List<CardDataModel>();
        CardData.Add(new CardDataModel {Id = "1", ImageUrl = assetpath + "tile-one.png", Title = "ASP.NET MVC", SubTitle = "Nick Harrison", Content = "ASP.NET Model View Controller design pattern to keep the data, views, and logic clearly separated in apps.", NavUrl = "https://www.syncfusion.com/ebooks/ASPNET_MVC_Succinctly", Tag = "Server-side" });
        CardData.Add(new CardDataModel {Id = "2", ImageUrl = assetpath + "tile-two.png", Title = "Node.js", SubTitle = "Emanuele DelBono", Content = "Node.js is a wildly popular platform for writing web applications that has revolutionized web development in many ways.", NavUrl = "https://www.syncfusion.com/ebooks/nodejs", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "3", ImageUrl = assetpath + "tile-three.png", Title = "React.js", SubTitle = "Dmitri Nesteruk", Content = "React is a JavaScript library that has revolutionized how developers design and think about views in web applications.", NavUrl = "https://www.syncfusion.com/ebooks/reactjs_succinctly", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "4", ImageUrl = assetpath + "tile-four.png", Title = "TypeScript", SubTitle = "Steve Fenton", Content = "Microsoft TypeScript extends many familiar features of .NET programming to JavaScript.", NavUrl = "https://www.syncfusion.com/ebooks/typescript", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "5", ImageUrl = assetpath + "tile-five.png", Title = "PHP", SubTitle = "Jose Roberto Olivas Mendoza", Content = "Known for its straightforward simplicity, PHP is an open source, general-purpose scripting language oriented for web development.", NavUrl = "https://www.syncfusion.com/ebooks/php_succinctly", Tag = "Server-side" });
        CardData.Add(new CardDataModel {Id = "6", ImageUrl = assetpath + "tile-six.png", Title = "CSS3", SubTitle = "Peter Shaw", Content = "In CSS3 Succinctly, author Peter Shaw provides an overview of the latest features available for custom cascading style sheets.", NavUrl = "https://www.syncfusion.com/ebooks/css3", Tag = "Front-end" });
        CardData.Add(new CardDataModel {Id = "7", ImageUrl = assetpath + "tile-seven.png", Title = "ASP.NET Core", SubTitle = "Simone Chiaretta and Ugo Lattanzi", Content = "In ASP.NET Core Succinctly, seasoned authors Simone Chiaretta and Ugo Lattanzi update you on all the advances provided by Microsoftâ€™s landmark framework.", NavUrl = "https://www.syncfusion.com/ebooks/asp_net_core_succinctly", Tag = "Server-side" });
        CardData.Add(new CardDataModel {Id = "8", ImageUrl = assetpath + "tile-eight.png", Title = "Aurelia", SubTitle = "Matthew Duffield", Content = "Aurelia is a relatively new, open-source JavaScript library/framework that simplifies the creation of web-based applications.", NavUrl = "https://www.syncfusion.com/ebooks/aurelia_succinctly", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "9", ImageUrl = assetpath + "tile-nine.png", Title = "ECMAScript 6", SubTitle = "Matthew Duffield", Content = "ECMAScript 6 (ES6), also known as ECMAScript 2015, brings new functionality and features to the table that developers have been wanting for a long time.", NavUrl = "https://www.syncfusion.com/ebooks/ecmascript_6_succinctly", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "10", ImageUrl = assetpath + "tile-ten.png", Title = "JavaScript", SubTitle = "Cody Lindley", Content = "JavaScript Succinctly was written to give readers an accurate, concise examination of JavaScript objects and their supporting nuances.", NavUrl = "https://www.syncfusion.com/ebooks/javascript", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "11", ImageUrl = assetpath + "tile-eleven.png", Title = "Knockout.js", SubTitle = "Ryan Hodson", Content = "Knockout.js Succinctly is intended for professional web developers who need to build dynamic, scalable user interfaces with minimal code.", NavUrl = "https://www.syncfusion.com/ebooks/knockoutjs", Tag = "Client-side" });
        CardData.Add(new CardDataModel {Id = "12", ImageUrl = assetpath + "tile-twelve.png", Title = "Angular 2", SubTitle = "Joseph D.Booth", Content = "Angular 2 is a massively popular JavaScript framework built to take advantage of component development in web apps.", NavUrl = "https://www.syncfusion.com/ebooks/angular2_succinctly", Tag = "Client-side" });
        return CardData;
    }
    private List<CardDataModel>? _cardDatas;
    public List<CardDataModel> CardDatas
    {
        get {  return _cardDatas!; }
        set { _cardDatas = value; }
    } 
    
    public async Task NavigateToUrlAsync(string url)
    {
        if (JsRuntime != null)
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

}

<style>
    
    .control-section {
        display: flex;
        overflow: auto;
        height: 354px;
        border: 1px solid;
        border-color: #25212130;
        margin: 0em 0em 2em 5em;
        padding: 3px 3px 8px 3px;
        width: 685px;
    }

    .control-card{
        padding: 30px 44px 44px 44px;
        margin: 3em 0em 32em 0em;
    }

    .pager-container{
        width: 685px;
        margin: 0em 0em 0em 5em;
    }

    .tile_layout.card-control-section .e-card .e-card-image {
        height: 180px;
        width: inherit;
    }
    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 14px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }
    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }
    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 0px;
        height: 110px;
    }
    .e-card, e-card-image {
        width: 195px;
    }

    .e-card .e-card-content {
        font-size: 12px;
    }
</style>
