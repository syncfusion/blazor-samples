@page "/pager/paging-api"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the usage of Pager APIs. It allows to change the page size, page count, current page and total items count of the Pager. </p>
</SampleDescription>

<ActionDescription>
    <p> The Blazor Pager component has an option to split a data set into multiple pages for a great experience to view page by page using an intuitive UI. Here, navigation can be done with built-in numeric elements, drop down, and buttons that can also be customized with the help of rich APIs.</p>
    <p> In this demo,</p>
    <p> The Blazor Pager has an option to customize the default settings using rich API's</p>
    <p> PageSize &rarr; It allows to customize or control the number of items to be displayed in a single page..</p>
    <p> NumericItemsCount &rarr; Number of numeric elements need to be displayed for navigation</p>
    <p> CurrentPage &rarr; The page that needs to be viewed currently in the pager numeric element</p>
    <p> TotalItemsCount &rarr; Total number of items in the data set or data collection</p>

</ActionDescription>

<div class="col-lg-8 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="frame" style="margin-top: 90px;">
            <SfPager @ref="Pager" CurrentPage="@CurrentPage" TotalItemsCount=@TotalItemsCount NumericItemsCount=@PageCount PageSize=@PageSize ></SfPager>
            </div>
        </div>
    </div>
</div>

<div class="col-lg-3 property-section" style="left: 10px; margin-left: 30px">
    <table id="property" style="width: 100%; height: 300px;">
            <tr>
                <td class="left-side" style="padding-right:15px;"><h4>Properties</h4></td>
            </tr>
            <tr>
                <td class="left-side" style="padding-right:15px;">Page Count</td>
                <td>
                    <SfNumericTextBox TValue="int" @bind-Value="@PageCount" Width="117px" Min="1" Max="@MaxPageCount">
                        <NumericTextBoxEvents TValue="int" ValueChange="@PageCountChanged"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </td>
            </tr>
            <tr>
                <td class="left-side" style="padding-right:15px;">Page Size</td>
                <td>
                    <SfNumericTextBox TValue="int" @bind-Value="@PageSize" Width="117px" Min="1" Max="@MaxPageSize">
                        <NumericTextBoxEvents TValue="int" ValueChange="@PageSizeChanged"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </td>
            </tr>
            <tr>
                <td class="left-side" style="padding-right:15px;">Current Page</td>
                <td>
                    <SfNumericTextBox TValue="int" @bind-Value="@CurrentPage" Width="117px" Min="1" Max="@MaxCurrentPage">
                        <NumericTextBoxEvents TValue="int" ValueChange="@CurrentPageChanged"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </td>
            </tr>
            <tr>
                <td class="left-side" style="padding-right:15px;">Total Items </td>
                <td>
                    <SfNumericTextBox TValue="int" @bind-Value="@TotalItemsCount" Width="115px" Min="1">
                        <NumericTextBoxEvents TValue="int" ValueChange="@TotalItemsCountChanged"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </td>
            </tr>
    </table>
</div>

@code
{
    public SfPager? Pager { get; set; }
    public int TotalItemsCount { get; set; } = 20;
    public int CurrentPage { get; set; } = 1;
    public int PageSize { get; set; } = 1;
    public int PageCount { get; set; } = 4;
    public int MaxPageSize { get; set; } = 20;
    public int MaxPageCount { get; set; } = 5;
    public int MaxCurrentPage { get; set; } = 20;
    

    public void PageCountChanged(ChangeEventArgs<int> args)
    {
        PageCount = args.Value;
    }

    public void PageSizeChanged(ChangeEventArgs<int> args)
    {
        PageSize = PageSize > TotalItemsCount ? TotalItemsCount : args.Value;
        double calculatePages = (double)TotalItemsCount / (double)PageSize;
        int totalPages = (int)calculatePages;
        if (calculatePages.ToString().Contains("."))
        {
            totalPages = (int)calculatePages + 1;
        }
        MaxCurrentPage = totalPages;
        MaxPageCount = totalPages > 5 ? 5 : totalPages;
        CurrentPage = CurrentPage > totalPages ? totalPages : CurrentPage;
        PageCount = PageCount > totalPages ? totalPages : PageCount;
    }

    public void CurrentPageChanged(ChangeEventArgs<int> args)
    {
        CurrentPage = args.Value;
    }

    public void TotalItemsCountChanged(ChangeEventArgs<int> args)
    {
        TotalItemsCount = args.Value;
        double calculatePages = (double)TotalItemsCount / (double)PageSize;
        int totalPages = (int)calculatePages;
        if (calculatePages.ToString().Contains("."))
        {
            totalPages = (int)calculatePages + 1;
        }
        MaxCurrentPage = totalPages;
        MaxPageSize = TotalItemsCount;
        MaxPageCount = totalPages <= 5 ? totalPages : 5;
        CurrentPage = CurrentPage > totalPages ? totalPages : CurrentPage;
        PageCount = PageCount > totalPages ? totalPages : PageCount;
    } 
}

@*Hidden:Lines*@
<style>
    .frame {
    border: 1px solid #BBBCBB;
    border-radius: 10px;
    color: #5C5C5C;
    padding: 30px;
    display: block;
}
</style>
 @*End:Hidden*@
