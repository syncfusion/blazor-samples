@page "/file-manager/file-upload"

@using Syncfusion.Blazor.FileManager;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Popups;

@inject IJSRuntime JsRuntime;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the real-time use case of File Manager in a web application. Dialog and Uploader components are integrated with the File Manager. Click the browse button to open the File Manager inside the Dialog component and choose the file to upload.
    </p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, the integration of the Syncfusion FileManager and Uploader components is highlighted and showcases how files are browsed and selected in the FileManager component to upload through the Uploader component.</p>
    <p>Here we have preloaded files by using <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.UploaderUploadedFiles.html' aria-label="Navigate to the class reference for UploaderUploadedFiles">UploaderUploadedFiles</a> component's <code>Name</code>, <code>Size</code>,<code>Type</code> properties.</p>
</ActionDescription>

<div class="sample-container">
    <div id="uploadFileManager" class="file-upload">
        <SfButton id="open-button" OnClick="buttonClick">File Browser</SfButton>
        @if (IsFileSelected)
        {
            <SfUploader>
                <UploaderAsyncSettings SaveUrl="http://localhost:63028/api/FileUploader/Save" RemoveUrl="http://localhost:63028/api/FileUploader/Remove"></UploaderAsyncSettings>
                <UploaderFiles>
                    @foreach (var file in documentFiles)
                    {
                        <UploaderUploadedFiles Name="@file.FileName" Size="@file.FileSize" Type="@file.Type"></UploaderUploadedFiles>
                    }
                </UploaderFiles>
                <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
            </SfUploader>
        }
    </div>
    <div id="target" class="control-section">
        <SfDialog ID="dialog" Visible="@DialogVisible" Header="@DialogHeader" ShowCloseIcon="ShowCloseIcon" Target="#target" CssClass="dialog-element">
            <DialogEvents OnClose="OnDialogClose"></DialogEvents>
            @* Initialization of File Manager component *@
            <SfFileManager TValue="FileManagerDirectoryContent">
                <FileManagerAjaxSettings Url="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/FileOperations"
                                         UploadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Upload"
                                         DownloadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Download"
                                         GetImageUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/GetImage">
                </FileManagerAjaxSettings>
                <FileManagerEvents TValue="FileManagerDirectoryContent" OnFileOpen="OnFileOpen"></FileManagerEvents>
                <FileManagerToolbarSettings ToolbarItems="@Items"></FileManagerToolbarSettings>
                <FileManagerContextMenuSettings File="@FileItems" Layout="@LayoutItems" Visible="true"></FileManagerContextMenuSettings>
            </SfFileManager>
        </SfDialog>
    </div>
</div>

@code {
    public bool IsFileSelected = false;
    public bool DialogVisible = false;
    public string DialogHeader = "Select a file";
    public bool ShowCloseIcon = true;
    List<DocumentFile> documentFiles = new List<DocumentFile>();

    public void buttonClick()
    {
        DialogVisible = true;
        IsFileSelected = false;
    }

    public void OnDialogClose()
    {
        IsFileSelected = documentFiles.Count > 0 ? true : false;
    }

    public void OnFileRemove(RemovingEventArgs args)
    {
        documentFiles.RemoveAll(file =>
            file.FileSize == args.FilesData[0].Size &&
            file.Type == args.FilesData[0].Type
        );
        DialogVisible = false;
    }

    public void OnFileOpen(FileOpenEventArgs<FileManagerDirectoryContent> args)
    {
        var file = args.FileDetails;
        if (file.IsFile)
        {
            args.Cancel = true;
            if (file.Size <= 0)
            {
                file.Size = 10000;
            }
            DocumentFile newFile = new DocumentFile
            {
                FileName = args.FileDetails.Name,
                FileSize = args.FileDetails.Size,
                Type = args.FileDetails.Type
            };
            documentFiles.Add(newFile);
            IsFileSelected = true;
            DialogVisible = false;
        }
    }

    public List<ToolBarItemModel> Items = new List<ToolBarItemModel>()
    {
        new ToolBarItemModel() { Name = "NewFolder" },
        new ToolBarItemModel() { Name = "Cut" },
        new ToolBarItemModel() { Name = "Copy" },
        new ToolBarItemModel() { Name = "Paste" },
        new ToolBarItemModel() { Name = "Delete" },
        new ToolBarItemModel() { Name = "Download" },
        new ToolBarItemModel() { Name = "Rename" },
        new ToolBarItemModel() { Name = "SortBy" },
        new ToolBarItemModel() { Name = "Refresh" },
        new ToolBarItemModel() { Name = "Selection" },
        new ToolBarItemModel() { Name = "View" },
        new ToolBarItemModel() { Name = "Details" },
    };
    public string[] LayoutItems = new string[] { "SortBy", "View", "Refresh", "|", "Paste", "|", "NewFolder", "|", "Details", "|", "SelectAll" };
    public string[] FileItems = new string[] { "Cut", "Copy", "|", "Delete", "Download", "Rename", "|", "Details" };

    public class DocumentFile
    {
        public string FileName { get; set; }
        public double FileSize { get; set; }
        public string Type { get; set; }
    }
}

<style>
    .file-upload .e-upload-browse-btn, .file-upload .e-file-drop {
        display: none;
    }

    #open-button {
        position: absolute;
        top: 30px;
        left: 45%;
    }

    #uploadFileManager {
        max-width: 500px;
        margin: auto;
        padding-top: 20px;
    }

    .e-dialog.e-popup.dialog-element {
        width: 70%;
        left: 15% !important;
    }

    @@media(max-width:500px) {
        #open-button {
            left: 35%;
        }

        .e-dialog.e-popup.dialog-element {
            width: 100%;
            left: 0 !important;
        }
    }
</style>