@page "/file-manager/directory-upload"

@using Syncfusion.Blazor.FileManager;
@using Syncfusion.Blazor.SplitButtons;
@inject IJSRuntime JSRuntime
@implements IDisposable;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the folder (directory) upload feature. Select <code>Folder</code> from the <code>Upload</code> toolbar item to select and upload a folder in the File Manager component.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, a folder upload is enabled by setting <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.FileManager.FileManagerUploadSettings.html#Syncfusion_Blazor_FileManager_FileManagerUploadSettings_DirectoryUpload" aria-label="Class reference of DirectoryUpload property in File Manager">DirectoryUpload</a> to <code>true</code>. It allows users to select or drag and drop a folder to upload its contents including hierarchy folders and files in the File Manager component.</p>
    <p>The folder (directory) upload is supported for the following file system providers,
    </p>
    <ul>
    <li> Physical provider</li>
    <li> NodeJS provider</li>
    <li> Azure provider</li>
    <li> Amazon S3 provider</li>
    </ul>
    <p>To efficiently upload large files and folders to the server in manageable chunks, use the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.FileManager.FileManagerUploadSettings.html#Syncfusion_Blazor_FileManager_FileManagerUploadSettings_ChunkSize" aria-label="Class reference of ChunkSize property in File Manager">ChunkSize</a> property to specify the desired chunk size. File Manager’s upload functionality is restricted in the online demos for security reasons, please run the service provider locally to try out the upload functionality.</p>
    <p></p>
  </ActionDescription>

<div class="control-section">
    @* Initialization of File Manager component with Directory upload functionality *@
 <SfFileManager TValue="FileManagerDirectoryContent">
        <FileManagerAjaxSettings Url="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/FileOperations"
                                 UploadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Upload"
                                 DownloadUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/Download"
                                 GetImageUrl="https://ej2-aspcore-service.azurewebsites.net/api/FileManager/GetImage">
        </FileManagerAjaxSettings>
        <FileManagerUploadSettings DirectoryUpload="@IsDirectoryUpload" ></FileManagerUploadSettings>
        <FileManagerToolbarSettings ToolbarItems="@Items">
            <FileManagerCustomToolbarItems>
                <FileManagerCustomToolbarItem Name="Upload">
                    <Template>
                        <div class="directory-upload">
                            <SfDropDownButton IconCss="e-icons e-fe-upload" CssClass=" e-tbar-btn e-tbtn-txt  e-fe-popup" aria-label="Upload Options" @attributes="@(new Dictionary<string, object> { {"tabindex", -1 } })">
                                <span class="e-tbar-btn-text e-tbar-ddb-text">Upload</span>
                                <DropDownButtonEvents Opened="OnDropDownOpened"></DropDownButtonEvents>
                                <DropDownMenuItems>
                                    <DropDownMenuItem Id="Folder" Text="Folder"></DropDownMenuItem>
                                    <DropDownMenuItem Id="Files" Text="Files"></DropDownMenuItem>
                                </DropDownMenuItems>
                            </SfDropDownButton>
                        </div>
                    </Template>
                </FileManagerCustomToolbarItem>
            </FileManagerCustomToolbarItems>
        </FileManagerToolbarSettings>
        <FileManagerContextMenuSettings File="@FileItems" Visible="true"></FileManagerContextMenuSettings>
        <FileManagerEvents TValue="FileManagerDirectoryContent" ToolbarItemClicked="ItemClicked"></FileManagerEvents>
    </SfFileManager>
</div>

@code{
    public bool IsDirectoryUpload = true;
    private DotNetObjectReference<DirectoryUpload> dotnetObjectRef { get; set; }
    public List<ToolBarItemModel> Items = new List<ToolBarItemModel>()
    {
        new ToolBarItemModel() { Name = "NewFolder" },
        new ToolBarItemModel() { Name = "Upload" },
        new ToolBarItemModel() { Name = "Cut" },
        new ToolBarItemModel() { Name = "Copy" },
        new ToolBarItemModel() { Name = "Paste" },
        new ToolBarItemModel() { Name = "Delete" },
        new ToolBarItemModel() { Name = "Download" },
        new ToolBarItemModel() { Name = "Rename" },
        new ToolBarItemModel() { Name = "SortBy" },
        new ToolBarItemModel() { Name = "Refresh" },
        new ToolBarItemModel() { Name = "Selection" },
        new ToolBarItemModel() { Name = "View" },
        new ToolBarItemModel() { Name = "Details" },
    };
    public string[] FileItems = new string[] { "Cut", "Copy", "|", "Delete", "Download", "Rename", "|", "Details" };

    public void ItemClicked(ToolbarClickEventArgs<FileManagerDirectoryContent> args)
    {
        if (args.Item.Text == "Upload")
        {
            args.Cancel = true;
        }
    }

    [JSInvokable("SetUploadType")]
    public void SetUploadType(bool isFolder)
    {
        IsDirectoryUpload = isFolder;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        dotnetObjectRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("fileManagerInstance", dotnetObjectRef);
        }
    }

    public async Task OnDropDownOpened(OpenCloseMenuEventArgs args)
    {
        await JSRuntime.InvokeVoidAsync("bindUploadMenuEvents");
    }
    public void Dispose()
    {
        dotnetObjectRef?.Dispose();
    }
}

<style>
    .fluent  .directory-upload,
    .fluent-dark .directory-upload {
        padding-right: 5px;
    }
</style>
