@page "/ribbon/contextual"

@*Hidden:Lines*@

@using Syncfusion.Blazor.Ribbon;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.SplitButtons;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Notifications;
@using DisplayMode = Syncfusion.Blazor.Ribbon.DisplayMode;
@inherits SampleBaseComponent
@inject IJSRuntime JSRuntime

@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the Ribbon component's contextual tab feature, which provides additional tabs dynamically based on the application's context or user interaction.</p>
</SampleDescription>

<ActionDescription>
    <p>The Blazor <code>Ribbon</code> component supports contextual tabs that appear dynamically to display commands or tools relevant to the current context of the application. This feature is ideal for scenarios like editing a table or an image, where specific tools are required. These tabs can be shown or hidden programmatically or based on user actions, providing a streamlined and responsive user experience.</p>
</ActionDescription>

<div class="col-lg-12 control-section default-ribbon-section">
    <div id="ribbonContainer">
        <SfRibbon @ref=@ribbonRef @bind-SelectedTab=@selectedTab Created="RibbonCreated" ID="ribbon" LauncherIconClick="LauncherIconClick">
            <RibbonFileMenuSettings Visible=true MenuItems="@fileMenuItems" ItemSelecting="@HandleFilemenuSelection"></RibbonFileMenuSettings>
            <RibbonContextualTabs>
                <RibbonContextualTab @bind-Visible="@isTableContextualVisible">
                    <RibbonTabs>
                        <RibbonTab ID="TableDesign" HeaderText="Table Design">
                            <RibbonGroups>
                                <!-- Table Style Group -->
                                <RibbonGroup HeaderText="Table Style" GroupIconCss="e-icons e-field-settings">
                                    <RibbonCollections>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.DropDown" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonDropDownSettings Content="Table Style"
                                                    IconCss="e-icons e-field-settings"
                                                    Items="@tableStyleItems"
                                                    ItemSelecting="@(args => UpdateContent($"Table Style -> {args.Item.Text}"))" />
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                    </RibbonCollections>
                                </RibbonGroup>

                                <!-- Borders Style Group -->
                                <RibbonGroup HeaderText="Borders Style" GroupIconCss="e-icons e-field-settings">
                                    <RibbonCollections>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.DropDown" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonDropDownSettings Content="Borders"
                                                    IconCss="e-icons e-border-all"
                                                    Items="@bordersStyleItems"
                                                    ItemSelecting="@(args => UpdateContent($"Borders -> {args.Item.Text}"))"/>
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                    </RibbonCollections>
                                </RibbonGroup>
                            </RibbonGroups>
                        </RibbonTab>
                        <RibbonTab ID="TableLayout" HeaderText="Table Layout">
                            <RibbonGroups>
                                <!-- Data Group -->
                                <RibbonGroup HeaderText="Data" GroupIconCss="e-icons e-custom-sort">
                                    <RibbonCollections>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.Button" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonButtonSettings IconCss="e-icons e-sort-ascending"
                                                    Content="Sort Table Ascending"
                                                    OnClick="@(() => UpdateContent("Sort Table Ascending"))" />
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.Button" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonButtonSettings IconCss="e-icons e-sort-descending"
                                                    Content="Sort Table Descending"
                                                    OnClick="@(() => UpdateContent("Sort Table Descending"))" />
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                    </RibbonCollections>
                                </RibbonGroup>

                                <!-- Merge Group -->
                                <RibbonGroup HeaderText="Merge" GroupIconCss="e-icons e-merge-cells">
                                    <RibbonCollections>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.DropDown" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonDropDownSettings Content="Merge"
                                                    IconCss="e-icons e-merge-cells"
                                                    Items="@mergeItems"
                                                    ItemSelecting="@(args => UpdateContent($"Merge -> {args.Item.Text}"))" />
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                    </RibbonCollections>
                                </RibbonGroup>
                            </RibbonGroups>
                        </RibbonTab>
                    </RibbonTabs>
                </RibbonContextualTab>
                <RibbonContextualTab>
                    <RibbonTabs>
                        <RibbonTab ID="Format" HeaderText="Picture Format">
                            <RibbonGroups>
                                <RibbonGroup HeaderText="Background" GroupIconCss="e-icons e-image">
                                    <RibbonCollections>
                                        <RibbonCollection>
                                            <RibbonItems>
                                                <RibbonItem Type="RibbonItemType.Button" AllowedSizes="RibbonItemSize.Large">
                                                    <RibbonButtonSettings IconCss="e-icons e-image"
                                                    Content="Remove Background"
                                                    OnClick="@(() => UpdateContent("Remove Background"))" />
                                                </RibbonItem>
                                            </RibbonItems>
                                        </RibbonCollection>
                                    </RibbonCollections>
                                </RibbonGroup>
                            </RibbonGroups>
                        </RibbonTab>
                    </RibbonTabs>
                </RibbonContextualTab>
            </RibbonContextualTabs>
            <RibbonTabs>
                <RibbonTab HeaderText="Home">
                    <RibbonGroups>
                        <RibbonGroup HeaderText="Clipboard" ID="clipboard" GroupIconCss="e-icons e-paste" ShowLauncherIcon="true">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem @bind-Disabled="isDisabled" AllowedSizes=RibbonItemSize.Large Type=RibbonItemType.SplitButton ID="pastebtn">
                                            <RibbonSplitButtonSettings Content="Paste" IconCss="e-icons e-paste" Items="@formatItems" ItemSelected="@(args => UpdateContent($"Paste -> {args.Item.Text}"))" Clicked="@(() => UpdateContent("Paste"))"></RibbonSplitButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Cut" IconCss="e-icons e-cut" OnClick="@(() => EnablePaste("Cut"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Copy" IconCss="e-icons e-copy" OnClick="@(() => EnablePaste("Copy"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Format Painter" IconCss="e-icons e-format-painter" OnClick="@(() => UpdateContent("Format Painter"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup Orientation=Syncfusion.Blazor.Ribbon.Orientation.Row GroupIconCss="e-icons e-bold" PopupHeaderText="More Font Options" IsCollapsible="false" EnableGroupOverflow="true" HeaderText="Font" CssClass="font-group">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.ComboBox>
                                            <RibbonComboBoxSettings @bind-Index="@fontFamIndex" AllowFiltering=true DataSource="@fontFamilyItems" Width="115px" PopupWidth="150px" FieldSettings="@fieldSetings" Selecting="@HandleComboBoxSelection"></RibbonComboBoxSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.ComboBox>
                                            <RibbonComboBoxSettings @bind-Index="@fontSizeIndex" AllowFiltering=true DataSource="@fontSizeItems" Width="65px" PopupWidth="85px" FieldSettings="@fieldSetings" Selecting="@HandleComboBoxSelection"></RibbonComboBoxSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.GroupButton ID="formatGroup">
                                            <RibbonGroupButtonSettings HeaderText="Format Styles"
                                            Selection=GroupButtonSelection.Multiple
                                            Items="@formatGroupItems"
                                            ItemClick="HandleGroupBtnSelection">
                                            </RibbonGroupButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.ColorPicker AllowedSizes="RibbonItemSize.Small"
                                        DisplayOptions="@((DisplayMode)DisplayMode.Classic | DisplayMode.Simplified)">
                                            <RibbonColorPickerSettings @bind-Value="@colorValue" ValueChange="@(args => UpdateContent(args?.CurrentValue?.Hex + "color"))"></RibbonColorPickerSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup Orientation=Syncfusion.Blazor.Ribbon.Orientation.Row ID="paragraph" EnableGroupOverflow="true" GroupIconCss="e-icons e-align-center" HeaderText="Paragraph">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Small">
                                            <RibbonButtonSettings Content="Decrease Indent" IconCss="e-icons e-decrease-indent" OnClick="@(() => UpdateContent("Decrease Indent"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Small">
                                            <RibbonButtonSettings Content="Increase Indent" IconCss="e-icons e-increase-indent" OnClick="@(() => UpdateContent("Increase Indent"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Small">
                                            <RibbonButtonSettings Content="Paragraph" IconCss="e-icons e-paragraph" OnClick="@(() => UpdateContent("Paragraph Mark"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.GroupButton ID="alignmentGroup">
                                            <RibbonGroupButtonSettings HeaderText="Alignment"
                                            Selection=GroupButtonSelection.Single
                                            Items="@alignGroupItems"
                                            ItemClick="HandleGroupBtnSelection">
                                            </RibbonGroupButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup Orientation=Syncfusion.Blazor.Ribbon.Orientation.Column HeaderText="Editing" GroupIconCss="e-icons e-edit">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.SplitButton>
                                            <RibbonSplitButtonSettings Content="Find" IconCss="e-icons e-search" Items="@searchItems" ItemSelected="@(args => UpdateContent($"Find -> {args.Item.Text}"))" Clicked="@(() => UpdateContent("Find"))"></RibbonSplitButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Replace" IconCss="e-icons e-replace" OnClick="@(() => UpdateContent("Replace"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.SplitButton>
                                            <RibbonSplitButtonSettings Content="Select" IconCss="e-icons e-mouse-pointer" Items="@selectItems" ItemSelected="@(args => UpdateContent($"Select -> {args.Item.Text}"))" Clicked="@(() => UpdateContent("Select"))"></RibbonSplitButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup IsCollapsible="false" HeaderText="Voice" GroupIconCss="sf-icon-dictate">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.SplitButton AllowedSizes="RibbonItemSize.Large">
                                            <RibbonSplitButtonSettings Content="Dictate" IconCss="sf-icon-dictate" Items="@dictateItems" ItemSelected="@(args => UpdateContent($"Dictate -> {args.Item.Text}"))" Clicked="@(() => UpdateContent("Dictate"))"></RibbonSplitButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup IsCollapsible="false" HeaderText="Editor" GroupIconCss="sf-icon-editor">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Large">
                                            <RibbonButtonSettings Content="Editor" IconCss="sf-icon-editor" OnClick="@(() => UpdateContent("Editor"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup IsCollapsible="false" HeaderText="Reuse Files" GroupIconCss="sf-icon-reuse">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Large" Disabled="true">
                                            <RibbonButtonSettings Content="Reuse Files" IconCss="sf-icon-reuse" OnClick="@(() => UpdateContent("Reuse Files"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                    </RibbonGroups>
                </RibbonTab>
                <RibbonTab HeaderText="Insert">
                    <RibbonGroups>
                        <RibbonGroup HeaderText="Tables" IsCollapsible="false">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.DropDown AllowedSizes="RibbonItemSize.Large">
                                            <RibbonDropDownSettings Content="Table" IconCss="e-icons e-table" Items="@tableItems" ItemSelecting="@(args => UpdateContent($"Table -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup Orientation=Syncfusion.Blazor.Ribbon.Orientation.Row ID="illustration" EnableGroupOverflow="true" HeaderText="Illustrations" GroupIconCss="e-icons e-image" PopupHeaderText="Illustrations" ShowLauncherIcon="true">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.DropDown ID="pictureddl">
                                            <RibbonDropDownSettings Content="Pictures" IconCss="e-icons e-image" Items="@pictureItems" ItemSelecting="@(args => UpdateContent($"Pictures -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.DropDown>
                                            <RibbonDropDownSettings Content="Shapes" IconCss="sf-icon-shapes" Items="@shapeItems" ItemSelecting="@(args => UpdateContent($"Shapes -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="3D Models" IconCss="sf-icon-3d-model" OnClick="@(() => UpdateContent("3D Models"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="SmartArt" IconCss="sf-icon-smart-art" OnClick="@(() => UpdateContent("SmartArt"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Chart" IconCss="sf-icon-chart" OnClick="@(() => UpdateContent("Chart"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Screenshot" IconCss="sf-icon-screenshot" OnClick="@(() => UpdateContent("Screenshot"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup Orientation=Syncfusion.Blazor.Ribbon.Orientation.Column HeaderText="Header & Footer" GroupIconCss="e-icons e-table" ID="header_footer" ShowLauncherIcon="true">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.DropDown>
                                            <RibbonDropDownSettings Content="Header" IconCss="e-icons e-header" Items="@headerItems" ItemSelecting="@(args => UpdateContent($"Header -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.DropDown>
                                            <RibbonDropDownSettings Content="Footer" IconCss="e-icons e-footer" Items="@footerItems" ItemSelecting="@(args => UpdateContent($"Footer -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.DropDown>
                                            <RibbonDropDownSettings Content="Page Number" IconCss="e-icons e-page-numbering" Items="@pageItems" ItemSelecting="@(args => UpdateContent($"Page Numbering -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup IsCollapsible="false" HeaderText="Comments">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Large" Disabled="true">
                                            <RibbonButtonSettings Content="New Comment" IconCss="e-icons e-comment-add" OnClick="@(() => UpdateContent("New Comment"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup HeaderText="Links" IsCollapsible="false" GroupIconCss="e-icons e-link">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.DropDown AllowedSizes="RibbonItemSize.Large">
                                            <RibbonDropDownSettings Content="Link" IconCss="e-icons e-link" Items="@linkItems" ItemSelecting="@(args => UpdateContent($"Link -> {args.Item.Text}"))"></RibbonDropDownSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                    </RibbonGroups>
                </RibbonTab>
                <RibbonTab HeaderText="View">
                    <RibbonGroups>
                        <RibbonGroup HeaderText="Views" Orientation="Syncfusion.Blazor.Ribbon.Orientation.Row" GroupIconCss="e-icons e-print">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Read Mode" IconCss="sf-icon-read" OnClick="@(() => UpdateContent("Read Mode"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Print Layout" IconCss="e-print e-icons" OnClick="@(() => UpdateContent("Print Layout"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Web Layout" IconCss="sf-icon-web-layout" OnClick="@(() => UpdateContent("Web Layout"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup HeaderText="Zoom" Orientation="Syncfusion.Blazor.Ribbon.Orientation.Row" GroupIconCss="e-icons e-zoom-to-fit">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Zoom In" IconCss="e-icons e-zoom-in" OnClick="@(() => UpdateContent("Zoom In"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.Button>
                                            <RibbonButtonSettings Content="Zoom Out" IconCss="e-icons e-zoom-out" OnClick="@(() => UpdateContent("Zoom Out"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup HeaderText="Show" IsCollapsible="false">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.CheckBox>
                                            <RibbonCheckBoxSettings Label="Ruler" ValueChange="@(() => UpdateContent("Ruler"))"></RibbonCheckBoxSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.CheckBox>
                                            <RibbonCheckBoxSettings Label="Gridlines" ValueChange="@(() => UpdateContent("Gridlines"))"></RibbonCheckBoxSettings>
                                        </RibbonItem>
                                        <RibbonItem Type=RibbonItemType.CheckBox>
                                            <RibbonCheckBoxSettings Label="Navigation Pane" @bind-Checked="@checkedState" ValueChange="@(() => UpdateContent("Navigation Pane"))"></RibbonCheckBoxSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                        <RibbonGroup HeaderText="Dark Mode" IsCollapsible="false">
                            <RibbonCollections>
                                <RibbonCollection>
                                    <RibbonItems>
                                        <RibbonItem Type=RibbonItemType.Button AllowedSizes="RibbonItemSize.Large">
                                            <RibbonButtonSettings Content="Dark Mode" IconCss="sf-icon-mode" OnClick="@(() => UpdateContent("Dark Mode"))"></RibbonButtonSettings>
                                        </RibbonItem>
                                    </RibbonItems>
                                </RibbonCollection>
                            </RibbonCollections>
                        </RibbonGroup>
                    </RibbonGroups>
                </RibbonTab>
            </RibbonTabs>
        </SfRibbon>
        <div id="ribbonPlaceHolder">
            <div class="content2">
                <div class="table-content" style="background-color: white;">
                    <table border="1" class="ribbon-table">
                        <caption class="table-header">Click on the table or image to show contextual tabs.</caption>
                        <tbody class="table-body" @onclick=HandleTableClick>
                            @for (int i = 0; i < 3; i++)
                            {
                                string id = "tableRow" + (i + 1);
                                <tr id=@id>
                                    @for (int j = 0; j < 3; j++)
                                    {
                                        var row = i;
                                        var col = j;
                                        <td class="@GetCellClass(row, col)" @onclick="(e => HandleCellClick(row, col))"></td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                    <img id="ribbonImage" class="@GetImageClass()" src="@(SampleService!.WebAssetsPath + "images/ribbon/empire-state-building.png")" alt="building image" @onclick=HandleImageClick />
                </div>
            </div>
            <div id="toast">
                <SfToast @ref="toast">
                    <ToastPosition X="Right"></ToastPosition>
                    <ToastAnimationSettings>
                        <ToastShowAnimationSettings Effect="ToastEffect.FadeIn"></ToastShowAnimationSettings>
                        <ToastHideAnimationSettings Effect="ToastEffect.FadeOut"></ToastHideAnimationSettings>
                    </ToastAnimationSettings>
                </SfToast>
            </div>
        </div>
    </div>
</div>

@code {
    SfToast toast = new SfToast();
    SfRibbon ribbonRef = new SfRibbon();
    bool isDisabled = true;
    bool isPasteDisabled = true;
    bool isTableContextualVisible = true;
    private (int Row, int Col)? selectedCell; // Stores selected cell coordinates
    private bool isImageSelected;
    private int selectedTab = 0;
    private bool checkedState = true;
    private string colorValue = "#123456";
    private int? fontFamIndex = 3;
    private int? fontSizeIndex = 3;

    //To guarantee the availability of placeholder element in DOM, invoking the script in 'Created' event
    private async Task RibbonCreated() {
        await JSRuntime.InvokeVoidAsync("bindRibbonPlaceHolderClick", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task HandleRibbonPlaceHolderClick(string nodeName)
    {
        if (nodeName != "TD" && nodeName != "IMG")
        {
            await ribbonRef.HideTabAsync("TableDesign");
            await ribbonRef.HideTabAsync("TableLayout");
            await ribbonRef.HideTabAsync("Format");
            isImageSelected = false;
            selectedCell = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleTableClick(MouseEventArgs args)
    {
        await ribbonRef.HideTabAsync("Format");
        await ribbonRef.ShowTabAsync("TableDesign");
        await ribbonRef.ShowTabAsync("TableLayout");
        selectedTab = 3;
        isImageSelected = false;
    }

    private async Task HandleCellClick(int row, int col)
    {
        selectedCell = (row, col);
        isImageSelected = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleImageClick()
    {
        await ribbonRef.HideTabAsync("TableDesign");
        await ribbonRef.HideTabAsync("TableLayout");
        await ribbonRef.ShowTabAsync("Format");
        selectedTab = 5;
        isImageSelected = true;
        selectedCell = null;
    }

    private string GetCellClass(int row, int col)
    {
        return selectedCell.HasValue && selectedCell.Value == (row, col)
            ? "e-table-selected"
            : string.Empty;
    }

    private string GetImageClass()
    {
        return isImageSelected ? "e-image-selected" : string.Empty;
    }

    private async Task EnablePaste(string text)
    {
        await UpdateContent(text);
        if (!isPasteDisabled) return;
        ribbonRef?.EnableItem("pastebtn");
        isPasteDisabled = false;
    }

    private async Task UpdateContent(string text)
    {
        var toastModel = new ToastModel()
            {
                Target = "#ribbonPlaceHolder",
                CssClass = "e-toast-info",
                Height = "25",
                Width = "auto",
                Timeout = 2000,
                ShowCloseButton = true,
                NewestOnTop = true,
                Content = "Last clicked item is " + text
            };
        await this.toast.ShowAsync(toastModel);
    }

    private async void HandleFilemenuSelection(FileMenuItemSelectEventArgs args)
    {
        var id = args.Item.Id;
        var text = args.Item.Text;
        if (id == "word" || id == "word97" || id == "pdf")
        {
            await UpdateContent("File -> Save as -> " + text);
        }
        else
        {
            await UpdateContent("File -> " + text);
        }
    }

    private async void HandleComboBoxSelection(ComboBoxSelectEventArgs args)
    {
        if (args.ItemData != null)
        {
            var data = (ComboBoxItem)args.ItemData;
            await UpdateContent($"Font Style -> {data.Text}");
        }
    }

    private async Task LauncherIconClick(LauncherClickEventArgs args)
    {
        if (args.GroupId == "clipboard")
        {
            await UpdateContent("Clipboard LauncherIcon");
        }
        else if (args.GroupId == "illustration")
        {
            await UpdateContent("Illustration LauncherIcon");
        }
        else if (args.GroupId == "header_footer")
        {
            await UpdateContent("Header & Footer LauncherIcon");
        }
    }

    private async void HandleGroupBtnSelection(GroupButtonClickEventArgs args)
    {
        await UpdateContent(args.CurrentItem.Content);
    }

    private class ComboBoxItem
    {
        public string Text { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }

    FieldSettingsModel fieldSetings = new FieldSettingsModel
        {
            Text = "Text",
            Value = "Value"
        };

    List<ComboBoxItem> fontFamilyItems = new List<ComboBoxItem>
    {
        new ComboBoxItem { Text = "Algerian", Value = "Algerian" },
        new ComboBoxItem { Text = "Arial", Value = "Arial" },
        new ComboBoxItem { Text = "Calibri", Value = "Calibri" },
        new ComboBoxItem { Text = "Cambria", Value = "Cambria" },
        new ComboBoxItem { Text = "Cambria Math", Value = "Cambria Math" },
        new ComboBoxItem { Text = "Courier New", Value = "Courier New" },
        new ComboBoxItem { Text = "Candara", Value = "Candara" },
        new ComboBoxItem { Text = "Georgia", Value = "Georgia" },
        new ComboBoxItem { Text = "Impact", Value = "Impact" },
        new ComboBoxItem { Text = "Segoe Print", Value = "Segoe Print" },
        new ComboBoxItem { Text = "Segoe Script", Value = "Segoe Script" },
        new ComboBoxItem { Text = "Segoe UI", Value = "Segoe UI" },
        new ComboBoxItem { Text = "Symbol", Value = "Symbol" },
        new ComboBoxItem { Text = "Times New Roman", Value = "Times New Roman" },
        new ComboBoxItem { Text = "Verdana", Value = "Verdana" },
        new ComboBoxItem { Text = "Windings", Value = "Windings" }
    };

    List<ComboBoxItem> fontSizeItems = new List<ComboBoxItem>
    {
        new ComboBoxItem { Text = "8", Value = "8" },
        new ComboBoxItem { Text = "9", Value = "9" },
        new ComboBoxItem { Text = "10", Value = "10" },
        new ComboBoxItem { Text = "11", Value = "11" },
        new ComboBoxItem { Text = "12", Value = "12" },
        new ComboBoxItem { Text = "14", Value = "14" },
        new ComboBoxItem { Text = "16", Value = "16" },
        new ComboBoxItem { Text = "18", Value = "18" },
        new ComboBoxItem { Text = "20", Value = "20" },
        new ComboBoxItem { Text = "22", Value = "22" },
        new ComboBoxItem { Text = "24", Value = "24" },
        new ComboBoxItem { Text = "26", Value = "26" },
        new ComboBoxItem { Text = "28", Value = "28" },
        new ComboBoxItem { Text = "36", Value = "36" },
        new ComboBoxItem { Text = "48", Value = "48" },
        new ComboBoxItem { Text = "72", Value = "72" },
        new ComboBoxItem { Text = "96", Value = "96" }
    };

    @*Hidden:Lines*@
    #pragma warning disable BL0005
    @*End:Hidden*@

    List<GroupButtonItem> alignGroupItems = new List<GroupButtonItem>
    {
        new GroupButtonItem
        {
            IconCss = "e-icons e-align-left",
            Selected = true,
            Content = "Align Left"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-align-center",
            Content = "Align Center"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-align-right",
            Content = "Align Right"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-justify",
            Content = "Justify"
        }
    };

    List<GroupButtonItem> formatGroupItems = new List<GroupButtonItem>
    {
        new GroupButtonItem
        {
            IconCss = "e-icons e-bold",
            Selected = true,
            Content = "Bold"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-italic",
            Content = "Italic"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-underline",
            Content = "Underline"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-strikethrough",
            Content = "Strikethrough"
        },
        new GroupButtonItem
        {
            IconCss = "e-icons e-change-case",
            Content = "Change Case"
        },
    };

    private List<DropDownMenuItem> tableStyleItems = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "Header Row" },
        new DropDownMenuItem { Text = "Banded Rows" },
        new DropDownMenuItem { Text = "Banded Columns" }
    };

    private List<DropDownMenuItem> bordersStyleItems = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "Border Right", IconCss = "e-icons e-border-right" },
        new DropDownMenuItem { Text = "Border Left", IconCss = "e-icons e-border-left" },
        new DropDownMenuItem { Text = "Border Bottom", IconCss = "e-icons e-border-bottom" },
        new DropDownMenuItem { Text = "Border Top", IconCss = "e-icons e-border-top" }
    };

    private List<DropDownMenuItem> mergeItems = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "Merge Cells", IconCss = "e-icons e-merge-cells" },
        new DropDownMenuItem { Text = "Split Cells", IconCss = "e-icons e-split-horizontal" }
    };

    List<DropDownMenuItem> formatItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Keep Source Format" },
        new DropDownMenuItem{ Text = "Merge Format" },
        new DropDownMenuItem{ Text = "Keep Text Only" }
    };
    List<DropDownMenuItem> selectItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Select All" },
        new DropDownMenuItem{ Text = "Select Objects" }
    };
    List<DropDownMenuItem> dictateItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Chinese" },
        new DropDownMenuItem{ Text = "English" },
        new DropDownMenuItem{ Text = "German" },
        new DropDownMenuItem{ Text = "French" }
    };
    List<DropDownMenuItem> linkItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Insert Link", IconCss = "e-icons e-link" },
        new DropDownMenuItem{ Text = "Recent Links", IconCss = "e-icons e-clock" },
        new DropDownMenuItem{ Text = "Bookmarks", IconCss = "e-icons e-bookmark" }
    };
    List<DropDownMenuItem> searchItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Find", IconCss = "e-icons e-search" },
        new DropDownMenuItem{ Text = "Advanced Find", IconCss = "e-icons e-search" },
        new DropDownMenuItem{ Text = "Go To", IconCss = "e-icons e-arrow-right" }
    };

    List<DropDownMenuItem> tableItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Insert Table" },
        new DropDownMenuItem{ Text = "Draw Table" },
        new DropDownMenuItem{ Text = "Convert Table" },
        new DropDownMenuItem{ Text = "Excel SpreadSheet" }
    };
    List<DropDownMenuItem> pictureItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "This device" },
        new DropDownMenuItem{ Text = "Browse files" }
    };
    List<DropDownMenuItem> shapeItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Lines" },
        new DropDownMenuItem{ Text = "Rectangles" },
        new DropDownMenuItem{ Text = "Basic Arrows" },
        new DropDownMenuItem{ Text = "Basic Shapes" },
        new DropDownMenuItem{ Text = "FlowChart" },
    };
    List<DropDownMenuItem> headerItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Insert Header" },
        new DropDownMenuItem{ Text = "Edit Header" },
        new DropDownMenuItem{ Text = "Remove Header" }
    };
    List<DropDownMenuItem> footerItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Insert Footer" },
        new DropDownMenuItem{ Text = "Edit Footer" },
        new DropDownMenuItem{ Text = "Remove Footer" }
    };
    List<DropDownMenuItem> pageItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Insert Top of page" },
        new DropDownMenuItem{ Text = "Insert Bottom of page" },
        new DropDownMenuItem{ Text = "Format Page Number" },
        new DropDownMenuItem{ Text = "Remove Page Number" },
    };
    List<DropDownMenuItem> pasteItems = new List<DropDownMenuItem>()
    {
        new DropDownMenuItem{ Text = "Source format" },
        new DropDownMenuItem{ Text = "Text format" },
        new DropDownMenuItem{ Text = "Keep source only" }

    };
    List<MenuItem> fileMenuItems = new List<MenuItem>()
    {
        new MenuItem { Text = "New", IconCss = "e-icons e-file-new", Id = "new" },
        new MenuItem { Text = "Open", IconCss = "e-icons e-folder-open", Id = "open" },
        new MenuItem { Text = "Rename", IconCss = "e-icons e-rename", Id = "rename" },
        new MenuItem {
            Text = "Save",
            IconCss = "e-icons e-save",
            Id = "save",
            Items = new List<MenuItem>() {
                new MenuItem { Text = "Microsoft Word (.docx)", IconCss = "sf-icon-word", Id = "word" },
                new MenuItem { Text = "Microsoft Word 97-2003(.doc)", IconCss = "sf-icon-word", Id = "word97" },
                new MenuItem { Text = "Download as PDF", IconCss = "e-icons e-export-pdf", Id = "pdf" }
            }
        }
    };
    @*Hidden:Lines*@
    #pragma warning restore BL0005
    @*End:Hidden*@
}

<style>

    .e-table-selected {
        border: 1px solid #0078D6;
    }

    .table-content {
        width: 70%;
        display: flex;
        flex-direction: column;
        margin: 0 auto;
    }

    .ribbon-table {
        width: 50%;
        background-color: #fff;
        margin: 20px auto;
    }

    #ribbonImage {
        width: 50%;
        height: auto;
        margin: 0 auto 30px;
        padding: 1px;
        border: 2px solid;
        border-color: transparent;
    }

        #ribbonImage.e-image-selected {
            border-color: #0078D6;
        }

    .table-header {
        font-size: 1vw;
        text-align: center;
        color: black;
        padding-bottom: 15px;
    }

    #tableRow1, #tableRow2, #tableRow3 {
        height: 20px;
    }

    @@media screen and (max-width: 550px) {
        .table-header {
            font-size: 2vw;
        }
    }

    .e-ribbon-overall-overflow-popup,
    .e-ribbon-group-overflow-popup {
        display: none;
    }

    #pictureList {
        display: none;
        border: 1px;
        box-shadow: 0 0 2px;
    }

    #pictureddl-popup #pictureList {
        display: block;
    }

    .e-bigger #pictureList .e-list-header {
        background-color: white;
    }

    body[class*="dark"].e-bigger #pictureList .e-list-header,
    body[class*="high"].e-bigger #pictureList .e-list-header {
        background-color: #212529;
    }

    .e-bigger #pictureList ul {
        padding: 0px;
        margin-top: 0px;
    }

    #ribbonContainer {
        padding: 20px;
        background-color: #dbdadacc;
    }

    #ribbon {
        box-sizing: border-box;
    }

    #ribbonPlaceHolder .e-toast-close-icon {
        position: absolute;
        top: 50%;
        right: 2px;
        transform: translateY(-50%);
        margin: 0;
    }

    #ribbonPlaceHolder .e-toast-content {
        padding-right: 25px;
    }

    #ribbonPlaceHolder {
        background-color: transparent;
        box-sizing: border-box;
        margin-top: 15px;
    }

    #ribbonPlaceHolder .content2 {
        background-color: #9d9c9a;
        width: 100%;
        padding: 30px 0;
    }

    body[class*="dark"] #ribbonPlaceHolder,
    body[class*="high"] #ribbonPlaceHolder {
        background-color: #5b5958;
    }

    .font-group .e-ribbon-group-content {
        justify-content: center;
    }

    #header_footer .e-ribbon-group-overflow-ddb {
        min-width: 10ch;
    }

    @@font-face {
        font-family: 'ribbon';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    [class^="sf-icon-"], [class*=" sf-icon-"] {
        font-family: 'ribbon' !important;
        speak: none;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .sf-icon-3d-model:before {
        content: "\e700";
    }

    .sf-icon-shapes:before {
        content: "\e701";
    }

    .sf-icon-dictate:before {
        content: "\e702";
    }

    .sf-icon-chart:before {
        content: "\e703";
    }

    .sf-icon-screenshot:before {
        content: "\e704";
    }

    .sf-icon-smart-art:before {
        content: "\e706";
    }

    .sf-icon-share:before {
        content: "\e707";
    }

    .sf-icon-read:before {
        content: "\e708";
    }

    .sf-icon-web-layout:before {
        content: "\e709";
    }

    .sf-icon-mode:before {
        content: "\e70b";
    }

    .sf-icon-draft:before {
        content: "\e70c";
    }

    .sf-icon-reuse:before {
        content: "\e70f";
    }

    .sf-icon-editor:before {
        content: "\e70a";
    }

    .sf-icon-word:before {
        content: "\e70d";
    }
</style>
