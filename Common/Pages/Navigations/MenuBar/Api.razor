@page "/menu-bar/api"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>  This sample demonstrates the customization of Menu component by using its properties from the property pane. Select any combination of properties from the property pane to customize Menu component.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, default <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.SfMenu-1.html" aria-label="Menu">Menu</a></code> is rendered with minimal configuration.</p>
    <p>This sample can be customized further with the combination of <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.SfMenu-1.html" aria-label="Menu">Menu</a></code> properties from the property pane. For example,</p>
    <ul>
        <li>You can switch to <b>Vertical</b> and <b>Horizontal</b> mode by clicking and selecting the <b>Orientation</b> mode from <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.SfMenu-1.html#Syncfusion_Blazor_Navigations_SfMenu_1_Orientation" aria-label="Orientation">Orientation</a></code> dropdownlist.</li>
        <li>You can enable or disable menu items by clicking and selecting the item from <i>Enable/Disable item</i> dropdown list.</li>
        <li>You can also enable the show menu item on mouse click <b>ShowItemOnClick</b> property by checking the <i>Show Item On Click</i> checkbox.</li>
    </ul>
    <p>More information about Blazor Menu component can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/menu-bar/getting-started/"  aria-label="documentation section"> documentation </a>section.</p>
</ActionDescription>

<div class="control-section">
    <div class="col-lg-7 control-section">
        <div class="menu-control">
            <SfMenu @ref="menu" TValue="MenuItem" Orientation="@mode" ShowItemOnClick="@menuItemClick">
                <MenuItems>
                    @foreach(var item in menuItems)
                    {
                        <MenuItem Text="@item.Text" Disabled="@item.IsDisabled">
                            @if(item.SubItems != null)
                            {
                                <MenuItems>
                                    @foreach(var subItem in item.SubItems)
                                    {
                                        <MenuItem Text="@subItem.Text"></MenuItem>
                                    }
                                </MenuItems>
                            }
                        </MenuItem>
                    }
                </MenuItems>                
            </SfMenu>
        </div>
    </div>
    <div class="col-lg-5 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr>
                    <td style="width: 50%;padding-top:10px">
                        <div>Orientation</div>
                    </td>
                    <td style="width: 50%;padding-top:10px">
                        <div style="max-width: 200px">
                            <SfDropDownList DataSource="@dropDownListData" PopupHeight="200px" @bind-Value="horizontal" TValue="string" TItem="DataModel">
                                <DropDownListEvents TValue="string" TItem="DataModel" ValueChange="@change"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Text" Text="Text"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%;padding-top:10px">
                        <div>Enable / Disable item</div>
                    </td>
                    <td style="width: 50%;padding-top:10px">
                        <div style="max-width: 200px">
                            <SfMultiSelect DataSource="@headerData" PopupHeight="200px" Width="160px" Mode="Syncfusion.Blazor.DropDowns.VisualMode.CheckBox" ShowDropDownIcon="true" TValue="string[]" TItem="DataModel">
                                <MultiSelectFieldSettings Value="Text" Text="Text"></MultiSelectFieldSettings>
                                <MultiSelectEvents ValueChange="enableDisableChange" TValue="string[]" TItem="DataModel"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 50%;padding-top:15px">
                        <div>Show Item on Click</div>
                    </td>
                    <td style="width: 50%;padding-top:15px">
                        <SfCheckBox ValueChange="@checkboxChange" @bind-Checked="showButtonChange" TChecked="bool"> </SfCheckBox>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@code {
    private SfMenu<MenuItem> menu;
    private List<string> items = new List<string>() { "Events", "Movies", "Directory", "Queries", "Services" };
    private string horizontal = "Horizontal";
    private Orientation mode = Orientation.Horizontal;
    private bool menuItemClick;
    private bool showButtonChange;
    private List<DataModel> menuItems = new List<DataModel>();
    

    protected override Task OnInitializedAsync()
    {
        menuItems = getItems();
        return base.OnInitializedAsync();
    }

    private void change(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DataModel> args)
    {
        mode = args.Value == "Vertical" ? Orientation.Vertical : Orientation.Horizontal;
    }

    private void checkboxChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.menuItemClick = args.Checked;
    }

    private List<DataModel> headerData = new List<DataModel>()
    {
        new DataModel { Text = "Events" },
        new DataModel { Text = "Movies" },
        new DataModel { Text = "Directory" },
        new DataModel { Text = "Queries" },
        new DataModel { Text = "Services" }
    };

    private List<DataModel> dropDownListData = new List<DataModel>()
    {
        new DataModel { Text = "Horizontal" },
        new DataModel { Text = "Vertical" }
    };

    private void enableDisableChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<string[]> args)
    {
        menuItems = getItems();
        if (args.Value != null)
        {
            for (int i = 0; i < args.Value.Length; i++)
            {
                DataModel item = menuItems.Where(item => item.Text == args.Value[i]).FirstOrDefault();
                item.IsDisabled = true;
            }
        }
    }

    private List<DataModel> getItems()
    {
        List<DataModel> menuItems = new List<DataModel>()
        {
            new DataModel { Text = "Events", IsDisabled = false, SubItems = new List<DataModel> {
                new DataModel { Text="Conferences" },
                new DataModel { Text="Music" },
                new DataModel { Text="Workshops" }
            } },
            new DataModel { Text = "Movies", IsDisabled = false, SubItems = new List<DataModel> {
                new DataModel { Text="Now Showing" },
                new DataModel { Text="Coming Soon" }
            } },
            new DataModel { Text = "Directory", IsDisabled = false, SubItems = new List<DataModel> {
                new DataModel { Text="Media Gallery" },
                new DataModel { Text="Newsletters" }
            } },
            new DataModel { Text = "Queries", IsDisabled = false, SubItems = new List<DataModel> {
                new DataModel { Text="Our Policy" },
                new DataModel { Text="Site Map" },
                new DataModel { Text="24x7 Support" }
            } },
            new DataModel { Text = "Services", IsDisabled = false }
        };
        return menuItems;
    }

    public class DataModel
    {
        public string Text { get; set; }
        public List<DataModel> SubItems { get; set; }
        public bool IsDisabled { get; set; }
    }
}

<style>
    .menu-control {
        margin: 45px auto 0;
        text-align: center;
    }
</style>