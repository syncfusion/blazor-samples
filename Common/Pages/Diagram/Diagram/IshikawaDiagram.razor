@page "/diagram/ishikawadiagram"

@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample visually represents a simple Ishikawa diagram using the Syncfusion Blazor Diagram component. Diagram nodes and annotations define the structure of the Ishikawa diagram.</p>
</SampleDescription>
<ActionDescription>
    <p>This example demonstrates how to create an Ishikawa diagram with the Diagram component. Zoom and pan options are enabled, allowing for better navigation. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_InteractionController" aria-label="InteractionController">InteractionController</a></code> property of the Diagram control is used to enable or disable zoom and pan features. In this sample, read-only mode is enabled to restrict editing.</p>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-12 control-section">
    <div id="diagram-space" class="content-wrapper" style="height:650px">
        <SfDiagramComponent Height="650px" @ref="@DiagramInstance" InteractionController="@DiagramInteractions.ZoomPan" Nodes="@DiagramNodes" Connectors="@DiagramConnectors" Created="OnCreated">
            <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
        </SfDiagramComponent>
    </div>
</div>

@code{
    //Hidden:Lines
    SfDiagramComponent? DiagramInstance { get; set; }
    //End:Hidden
    //Defines Diagram's nodes collection
    public DiagramObjectCollection<Node>? DiagramNodes { get; set; }
    //Defines Diagram's connectors collection
    public DiagramObjectCollection<Connector>? DiagramConnectors { get; set; }
    protected override void OnInitialized()
    {
        
        DiagramNodes = new DiagramObjectCollection<Node>()
        {
            new Node()
            {
                ID = "Result",
                OffsetX = 840,
                OffsetY = 320,
                Height = 100,
                Width = 200,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content = "HIGH PETROL CONSUMPTION IN BIKE",
                        Style = new TextStyle()
                        {
                            Color = "White",
                            FontFamily = "Segoe UI",
                            FontSize = 16,
                            Bold = true
                        }
                    }
                },
                Style = new ShapeStyle()
                {
                    Fill = "#327FC7",
                    StrokeColor = "#327FC7"
                }
            }
        };
        DiagramObjectCollection<PathAnnotation> connector1Annotation = CreateAnnotations("MACHINERY", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -45, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector2Annotation = CreateAnnotations("METHOD", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -30, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector3Annotation = CreateAnnotations("PEOPLE", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -30, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector4Annotation = CreateAnnotations("MATERIAL", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -35, y: -25), AnnotationAlignment.After);
        DiagramObjectCollection<PathAnnotation> connector5Annotation = CreateAnnotations("MEASUREMENT", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -60, y: -25), AnnotationAlignment.After);
        DiagramObjectCollection<PathAnnotation> connector6Annotation = CreateAnnotations("ENVIRONMENT", "#327FC7", "Segoe UI", 16,"", true, TextDecoration.Underline, 0, new DiagramPoint(x: -45, y: -25), AnnotationAlignment.After);
        DiagramObjectCollection<PathAnnotation> connector7Annotation = CreateAnnotations("Wornout-Pistons", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector8Annotation = CreateAnnotations("Fast Driving", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector9Annotation = CreateAnnotations("Wrong Tire Pressure", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector10Annotation = CreateAnnotations("Wrong Gear", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector11Annotation = CreateAnnotations("Maintenance Habit", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector12Annotation = CreateAnnotations("Poor Quality Petrol", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector13Annotation = CreateAnnotations("Incorrect Lubricant", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector14Annotation = CreateAnnotations("Do Not Reset Odometer Properly", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector15Annotation = CreateAnnotations("Extreme Weather Condition", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: 0, y: -25), AnnotationAlignment.Before);
        DiagramObjectCollection<PathAnnotation> connector16Annotation = CreateAnnotations("No Owner Manual", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: -30, y: -25), AnnotationAlignment.After);
        DiagramObjectCollection<PathAnnotation> connector17Annotation = CreateAnnotations("Wrong Oil", "black", "Segoe UI", 11,"", false, TextDecoration.None, 0, new DiagramPoint(x: -15, y: -25), AnnotationAlignment.After);

        DiagramConnectors = new DiagramObjectCollection<Connector>();
        CreateConnector("connector0", "", "Result", new DiagramPoint() { X = 40, Y = 320 }, null, 1, new DiagramObjectCollection<PathAnnotation>());
        CreateConnector("connector1", "", "", new DiagramPoint() { X = 130, Y = 100 }, new DiagramPoint() { X = 240, Y = 320 }, 1, connector1Annotation);
        CreateConnector("connector2", "", "", new DiagramPoint() { X = 330, Y = 100 }, new DiagramPoint() { X = 440, Y = 320 }, 1, connector2Annotation);
        CreateConnector("connector3", "", "", new DiagramPoint() { X = 530, Y = 100 }, new DiagramPoint() { X = 640, Y = 320 }, 1, connector3Annotation);
        CreateConnector("connector4", "", "", new DiagramPoint() { X = 170, Y = 540 }, new DiagramPoint() { X = 280, Y = 320 }, 1, connector4Annotation);
        CreateConnector("connector5", "", "", new DiagramPoint() { X = 370, Y = 540 }, new DiagramPoint() { X = 480, Y = 320 }, 1, connector5Annotation);
        CreateConnector("connector6", "", "", new DiagramPoint() { X = 570, Y = 540 }, new DiagramPoint() { X = 680, Y = 320 }, 1, connector6Annotation);

        CreateConnector("connector7", "", "", new DiagramPoint() { X = 50, Y = 160 }, new DiagramPoint() { X = 160, Y = 160 }, 1, connector7Annotation);
        CreateConnector("connector8", "", "", new DiagramPoint() { X = 240, Y = 160 }, new DiagramPoint() { X = 360, Y = 160 }, 1, connector8Annotation);
        CreateConnector("connector9", "", "", new DiagramPoint() { X = 60, Y = 220 }, new DiagramPoint() { X = 190, Y = 220 }, 1, connector9Annotation);
        CreateConnector("connector10", "", "", new DiagramPoint() { X = 260, Y = 220 }, new DiagramPoint() { X = 390, Y = 220 }, 1, connector10Annotation);
        CreateConnector("connector11", "", "", new DiagramPoint() { X = 460, Y = 220 }, new DiagramPoint() { X = 590, Y = 220 }, 1, connector11Annotation);
        CreateConnector("connector12", "", "", new DiagramPoint() { X = 80, Y = 380 }, new DiagramPoint() { X = 250, Y = 380 }, 1, connector12Annotation);
        CreateConnector("connector13", "", "", new DiagramPoint() { X = 60, Y = 480 }, new DiagramPoint() { X = 200, Y = 480 }, 1, connector13Annotation);
        CreateConnector("connector14", "", "", new DiagramPoint() { X = 240, Y = 440 }, new DiagramPoint() { X = 420, Y = 440 }, 1, connector14Annotation);
        CreateConnector("connector15", "", "", new DiagramPoint() { X = 440, Y = 440 }, new DiagramPoint() { X = 620, Y = 440 }, 1, connector15Annotation);
        CreateConnector("connector16", "", "", new DiagramPoint() { X = 480, Y = 180 }, new DiagramPoint() { X = 540, Y = 220 }, 1, connector16Annotation);
        CreateConnector("connector17", "", "", new DiagramPoint() { X = 120, Y = 440 }, new DiagramPoint() { X = 160, Y = 480 }, 1, connector17Annotation);

    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance!.FitToPage(mobileoptions);
    }
    // Method is used to create a Connector for the diagram.
    private void CreateConnector(string id, string source, string target, DiagramPoint sourcePoint, DiagramPoint? targetPoint, int lineWidth, DiagramObjectCollection<PathAnnotation> pathAnnotations)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = source,
            TargetID = target,
            SourcePoint = sourcePoint,
            TargetPoint = targetPoint,
            Style = new ShapeStyle { StrokeColor = "black", StrokeWidth = lineWidth },
            Annotations  = pathAnnotations,
            TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.Arrow,Style = new ShapeStyle() { Fill = "#327FC7",StrokeColor = "#327FC7" } },
        };

        DiagramConnectors!.Add(connector);
    }

    // Method is used to create a Annotations for the connectors.
    private DiagramObjectCollection<PathAnnotation> CreateAnnotations(string content1, string color, string fontFamily, int fontSize,string fill, bool bold, TextDecoration decoration, double offset, DiagramPoint displacement,AnnotationAlignment alignment )
    {
        DiagramObjectCollection<PathAnnotation> Annotations = new DiagramObjectCollection<PathAnnotation>()
        {
            new PathAnnotation() { Content = content1, Style = new TextStyle() { Bold = bold, Color= color, FontFamily = fontFamily, FontSize = fontSize, TextDecoration = decoration , TextWrapping = TextWrap.NoWrap, Fill = fill },Offset = offset, Displacement = displacement, Alignment = alignment,}
        };
        return Annotations;
    }
    
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }
    }
    @*End:Hidden*@
}