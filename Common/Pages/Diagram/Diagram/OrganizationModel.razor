@page "/diagram/organization-model"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable;
@*End:Hidden*@
<SampleDescription>
    <p>This sample illustrates a simple business management structure generated from an external data source. A hierarchical tree layout algorithm is utilized to create organizational charts.</p>
</SampleDescription>
<ActionDescription>
    <p>This example demonstrates how to generate an organizational chart from an external data source. The spacing between objects in the chart can be customized using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_HorizontalSpacing" aria-label="HorizontalSpacing">HorizontalSpacing</a></code> and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_VerticalSpacing" aria-label="VerticalSpacing">VerticalSpacing</a></code> properties of the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html" aria-label="Layout">Layout</a></code>. Additionally, the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_Orientation" aria-label="Orientation">Orientation</a></code> property can be used to change the chart's orientation.</p>
</ActionDescription>
<style>
    #diagram {
        display: block;
    }

    .image-pattern-style {
        background-color: white;
        background-size: contain;
        background-repeat: no-repeat;
        height: 75px;
        width: calc((100% - 18px) / 3);
        cursor: pointer;
        border: 1px solid #D5D5D5;
        background-position: center;
        float: left;
    }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

    .row {
        margin-left: 0px;
        margin-right: 0px;
        display: block;
    }

    .property-panel-header {
        padding-top: 15px;
        padding-bottom: 5px;
        font-weight: 600;
        font-size: 15px;
    }

    .row-header {
        font-size: 13px;
        font-weight: 600;
    }

    .row-header1 {
        font-size: 12px;
        padding-left: 2px;
        font-weight: 400;
    }

    .e-selected-orientation-style {
        border-color: #006CE6;
        border-width: 2px;
    }


    .e-selected-pattern-style {
        border-color: #006CE6;
        border-width: 2px;
    }

    .textboxstyle {
        padding-left: 0px;
        padding-right: 0px;
        float: left;
        width: 120px;
    }

    .e-checkbox-wrapper .e-label {
        font-size: 12px;
    }

    .col-xs-6 {
        padding-left: 0px;
        padding-right: 0px;
    }

    .e-orgchart-template-div-style {
        position: absolute;
        width: 177px;
        height: 54px;
        border: 1px solid #EEEEEE;
        background: #FFFFFF;
        box-sizing: border-box;
        border-radius: 5px;
    }

    .e-orgchart-template-image-style {
        width: 52px;
        height: 52px;
        left: 552px;
        top: 154px;
        float: left;
        background-size: 100% 100%;
    }

    .e-orgchart-template-name-style {
        font-family: Roboto;
        font-style: normal;
        font-weight: 500;
        font-size: 14px;
        line-height: 14px;
        letter-spacing: 0.1px;
        color: #363636;
        margin-top: 8px;
        height: 8px
    }

    .e-orgchart-template-role-style {
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        font-size: 10px;
        line-height: 14px;
        letter-spacing: 0.1px;
        color: #6b6565;
    }
</style>
@*End:Hidden*@
<div class="col-lg-9 control-section sb-property-border">
    <div id="diagram-space" class="content-wrapper">
        <SfDiagramComponent @ref="@Diagram" Height="690px" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating" InteractionController="@DiagramInteractions.ZoomPan">
            <ScrollSettings @bind-ScrollLimit="@scrollLimit"></ScrollSettings>
            <DataSourceSettings ID="Id" ParentID="Manager" DataSource="DataSource"></DataSourceSettings>
            <Layout @bind-Type="@Type" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-Orientation="@OrientationType" @bind-VerticalSpacing="@VerticalSpacing" @bind-HorizontalAlignment="@HorizontalAlignment" @bind-VerticalAlignment="@VerticalAlignment" GetLayoutInfo="GetLayoutInfo">
                <LayoutMargin @bind-Top="@Top" @bind-Bottom="@Bottom" @bind-Right="@Right" @bind-Left="@Left"></LayoutMargin>
            </Layout>
            <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
            <DiagramTemplates>
                <NodeTemplate>
                    @{
                        Node node1 = (context as Node);
                        string Name = (node1.Data as OrganizationalDetails)!.Name!;
                        string Role = (node1.Data as OrganizationalDetails)!.Role!;
                        string Imageurl = (node1.Data as OrganizationalDetails)!.Imageurl!;
                        <div class="e-orgchart-template-div-style">
                            <div id="image" class="e-orgchart-template-image-style" style="background-image: url(@(SampleService!.WebAssetsPath + @Imageurl));">
                            </div>
                            <div style="height:75%;float: right;margin-right: 20px">
                                <p class="e-orgchart-template-name-style">@Name</p>
                                <p class="e-orgchart-template-role-style">@Role</p>
                            </div>
                        </div>
                    }
                </NodeTemplate>
            </DiagramTemplates>
        </SfDiagramComponent>
    </div>
</div>
@*Hidden:Lines*@
<div class="col-lg-3 property-section">
    <div class="property-panel-header">
        Properties
    </div>
    <div class="row property-panel-content" id="appearance">
        <div class="row" style="padding-top: 10px;">
            <div class="row row-header">
                Orientation
            </div>
            <div id="orientation">
                <div class="row" style="padding-top: 8px">
                    <div title="Top to bottom Orientation" class="@dict!["topToBottom"]" @onclick="ToptoBottomClick" id="topToBottom" style="background-image: url(@(SampleService!.WebAssetsPath + "images/diagram/common-orientation/top-to-bottom.png"));
        margin-right: 3px">
                    </div>
                    <div title="Bottom to top Orientation" class="@dict["bottomToTop"]" id="bottomToTop" @onclick="BottomtoTopClick" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/common-orientation/bottom-to-top.png"));
        margin: 0px 3px">
                    </div>
                    <div title="Left to right Orientation" class="@dict["leftToRight"]" id="leftToRight" @onclick="LefttoRightClick" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/common-orientation/left-to-right.png")); margin-right:0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div title="Right to left Orientation" class="@dict["rightToLeft"]" id="rightToLeft" @onclick="RighttoLeftClick" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/common-orientation/right-to-left.png"));
        margin: 0px 3px">
                    </div>
                </div>
            </div>
            <div class="row row-header" style="padding-top: 10px">
                Subtree Alignment
            </div>
            <div id="pattern">
                <div class="row" style="padding-top: 8px;">
                    <div title="Sub tree alignment  : Alternate" class="@PatternDictionary!["pattern1"]" @onclick="AlternateOrientationVertical20" id="pattern1" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/vertical-alternate.png"));
        margin-right: 3px">
                    </div>
                    <div title="Sub tree alignment  : Left" class="@PatternDictionary["pattern2"]" @onclick="LeftOrientationVertical20" id="pattern2" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/vertical-left.png"));
        margin: 0px 3px">
                    </div>
                    <div title="Sub tree alignment  : Left" class="@PatternDictionary["pattern3"]" @onclick="LeftOrientationVertical50" id="pattern3" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/positive-vertical-left.png"));
        margin: 0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div title="Sub tree alignment  : Right" class="@PatternDictionary["pattern4"]" id="pattern4" @onclick="RightOrientationVertical50" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/negative-vertical-right.png"));
        margin: 0px 3px">
                    </div>
                    <div title="Sub tree alignment  : Right" class="@PatternDictionary["pattern5"]" id="pattern5" @onclick="RightOrientationVertical20" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/vertical-right.png"));
        margin-right: 3px">
                    </div>
                    <div title="Sub tree alignment  : Balanced" class="@PatternDictionary["pattern6"]" id="pattern6" @onclick="BalancedOrientationHorizontal20" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/horizontal-balanced.png"));
        margin: 0px 3px">
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div title="Sub tree alignment  : Center" class="@PatternDictionary["pattern7"]" id="pattern7" @onclick="CenterOrientationHorizontal50" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/horizontal-center.png"));
        margin: 0px 3px">
                    </div>
                    <div title="Sub tree alignment  : Left" class="@PatternDictionary["pattern8"]" id="pattern8" @onclick="LeftOrientationHorizontal20" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/horizontal-left.png"));
        margin: 0px 3px">
                    </div>
                    <div title="Sub tree alignment  : Right" class="@PatternDictionary["pattern9"]" id="pattern9" @onclick="RightOrientationHorizontal20" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/organization-model/horizontal-right.png"));
        margin: 0px 3px">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row property-panel-content" style="padding-top: 10px">
        <div class="row row-header">
            Layout Spacing
        </div>
        <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 30px;" class="textboxstyle">
                <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
            </div>
            <div class="textboxstyle" style="padding-left:10px">
                <SfNumericTextBox TValue="int?" ID="hSpacing" Format="###.##" Width="100%" Min="20" Max="60" Step="2" Value="@HorizontalValue">
                    <NumericTextBoxEvents TValue="int?" ValueChange="@HSpacingChange"></NumericTextBoxEvents>
                </SfNumericTextBox>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div style="display: table;height: 30px;" class="textboxstyle">
                <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
            </div>
            <div class="textboxstyle" style="padding-left:10px">
                <SfNumericTextBox TValue="int?" ID="vSpacing" Format="###.##" Width="100%" Min="20" Max="60" Step="2" Value="@VerticalValue">
                    <NumericTextBoxEvents TValue="int?" ValueChange="VSpacingChange"></NumericTextBoxEvents>
                </SfNumericTextBox>
            </div>
        </div>
    </div>
</div>
@*End:Hidden*@
@code
{
    private const string selecteditem = "image-pattern-style  e-selected-orientation-style";
    private const string unselecteditem = "image-pattern-style";
    private const string selectedPattenitem = "image-pattern-style  e-selected-pattern-style";
    ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Diagram;
    private Orientation subTreeOrientation = Orientation.Vertical;
    private SubTreeAlignmentType subTreeAlignment = SubTreeAlignmentType.Right;
    private int rows = 0;
    private string? pattern;
    private double offset = 20;
    private Dictionary<string, string>? dict = new Dictionary<string, string>() {
        { "topToBottom", selecteditem },
        { "bottomToTop", unselecteditem },
        { "leftToRight", unselecteditem },
        { "rightToLeft", unselecteditem }
    };
    private Dictionary<string, string>? PatternDictionary = new Dictionary<string, string>() {
       { "pattern1", unselecteditem },
       { "pattern2", unselecteditem },
       { "pattern3", unselecteditem },
       { "pattern4", unselecteditem },
       { "pattern5", selectedPattenitem },
       { "pattern6", unselecteditem },
       { "pattern7", unselecteditem },
       { "pattern8", unselecteditem },
       { "pattern9", unselecteditem }
    };

    public SfDiagramComponent? Diagram;
    public LayoutOrientation OrientationType = LayoutOrientation.TopToBottom;
    public int? HorizontalValue { get; set; } = 30;
    public int? VerticalValue { get; set; } = 30;
    public LayoutType Type = LayoutType.OrganizationalChart;
    public HorizontalAlignment HorizontalAlignment = HorizontalAlignment.Auto;
    public VerticalAlignment VerticalAlignment = VerticalAlignment.Auto;
    public int HorizontalSpacing = 30;
    public int VerticalSpacing = 30;
    public double Top = 50;
    public double Bottom = 50;
    public double Right = 50;
    public double Left = 50;
    

    // Defines default values for Node object
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        if (node!.Data is System.Text.Json.JsonElement)
        {
            node.Data = System.Text.Json.JsonSerializer.Deserialize<OrganizationalDetails>(node.Data.ToString()!);
        }
        OrganizationalDetails? organizationData = node.Data as OrganizationalDetails;
        node.Width = 177;
        node.Height = 54;

        node.Shape = new Shape()
        {
            Type = Syncfusion.Blazor.Diagram.NodeShapes.HTML,
        };

    }
    // Defines default values for Connector object
    private void OnConnectorCreating(IDiagramObject connector1)
    {
        Connector? connector = (connector1 as Connector);
        connector!.Type = ConnectorSegmentType.Orthogonal;
        connector.CornerRadius = 10;
        connector.Style = new ShapeStyle()
        {
            StrokeWidth = 1,
            StrokeDashArray = "1,1"
        };
        connector.TargetDecorator!.Shape = DecoratorShape.None;
        connector.SourceDecorator!.Shape = DecoratorShape.None;
    }

    public class OrganizationalDetails
    {
        public string? Id { get; set; }
        public string? Role { get; set; }
        public string? Color { get; set; }
        public string? Manager { get; set; }
        public string? ChartType { get; set; }
        public string? Name { get; set; }
        public string? Imageurl { get; set; }
    }
    //DataSource Items.
    public List<OrganizationalDetails> DataSource = new List<OrganizationalDetails>()
    {
        new OrganizationalDetails() { Id= "parent", Role= "CEO", Color = "#71AF17", Manager = "", ChartType = "", Name="Liam James", Imageurl="images/diagram/overview/image34.png" },
        new OrganizationalDetails() { Id = "2", Role= "Product Manager", Color = "#1859B7", Manager =  "parent", ChartType = "right", Name="Maria Andres", Imageurl="images/diagram/overview/image30.png"},
        new OrganizationalDetails() { Id = "3", Role= "Software Engineer", Color = "#2E95D8", Manager = "2", ChartType ="", Name="John Steel", Imageurl="images/diagram/overview/image3.png"},
        new OrganizationalDetails() { Id = "4", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "2",ChartType = "", Name="Carlos Nagy", Imageurl="images/diagram/overview/image5.png"},
        new OrganizationalDetails() { Id = "5", Role= "Software Engineer", Color = "#2E95D8", Manager =  "2", ChartType ="", Name="Yoshi Wilson", Imageurl="images/diagram/overview/image22.png"},
        new OrganizationalDetails() { Id = "6", Role= "Software Engineer", Color = "#2E95D8", Manager =  "2", ChartType ="", Name="Thomas Hardy", Imageurl="images/diagram/overview/image31.png"},
        new OrganizationalDetails() { Id = "7", Role= "Software Engineer", Color = "#2E95D8", Manager =  "2", ChartType ="", Name="Peter Citeaux", Imageurl="images/diagram/overview/image21.png"},
        new OrganizationalDetails() { Id = "8", Role= "Product Manager", Color = "#1859B7", Manager =  "parent", ChartType ="right", Name="Pedro Afonso", Imageurl="images/diagram/overview/image26.png"},
        new OrganizationalDetails() { Id = "9", Role= "Software Engineer",Color =  "#2E95D8",  Manager = "8", ChartType ="", Name="Roland Mendel", Imageurl="images/diagram/overview/image24.png"},
        new OrganizationalDetails() { Id = "10", Role= "Software Engineer",Color =  "#2E95D8", Manager =  "8", ChartType = "", Name="Diego Roel", Imageurl="images/diagram/overview/image18.png"},
        new OrganizationalDetails() { Id = "11", Role= "Software Engineer", Color = "#2E95D8",  Manager = "8", ChartType = "", Name="Martine Rancé", Imageurl="images/diagram/overview/image11.png"},
        new OrganizationalDetails() { Id = "12", Role= "Software Engineer", Color = "#2E95D8",  Manager = "8", ChartType = "", Name="Maria Larsson", Imageurl="images/diagram/overview/image15.png"},
        new OrganizationalDetails() { Id = "13", Role= "Software Engineer", Color = "#2E95D8",  Manager = "8", ChartType = "", Name="Paolo Accorti", Imageurl="images/diagram/overview/image28.png"},
        new OrganizationalDetails() { Id = "14", Role= "Product manager", Color =  "#1859B7", Manager =  "parent", ChartType ="right", Name="Helen Bennett", Imageurl="images/diagram/overview/image7.png"},
        new OrganizationalDetails() { Id = "15", Role= "Software Engineer", Color =  "#2E95D8",  Manager = "14", ChartType = "", Name="Renate Jose", Imageurl="images/diagram/overview/image9.png"},
        new OrganizationalDetails() { Id = "16", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "14", ChartType ="", Name="Jaime Yorres", Imageurl="images/diagram/overview/image1.png"},
        new OrganizationalDetails() { Id = "17", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "14", ChartType ="", Name="Alex Feuer", Imageurl="images/diagram/overview/image23.png"},
        new OrganizationalDetails() { Id = "18", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "14", ChartType ="", Name="Helen Marie", Imageurl="images/diagram/overview/image12.png"},
        new OrganizationalDetails() { Id = "19", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "14", ChartType ="", Name="Yoshi Kenna", Imageurl="images/diagram/overview/image14.png"},
        new OrganizationalDetails() { Id = "20", Role= "Product Manager", Color = "#1859B7", Manager =  "parent", ChartType ="right", Name="Joseph Kaff", Imageurl="images/diagram/overview/image16.png"},
        new OrganizationalDetails() { Id = "21", Role= "Software Engineer", Color =  "#2E95D8", Manager =  "20", ChartType ="", Name="Sergio roel", Imageurl="images/diagram/overview/image33.png"},
        new OrganizationalDetails() { Id = "22", Role= "Software Engineer", Color = "#2E95D8",  Manager = "20", ChartType ="", Name="Paula Wilson", Imageurl="images/diagram/overview/image6.png"},
        new OrganizationalDetails() { Id = "23", Role= "Software Engineer", Color =  "#2E95D8",  Manager = "20",ChartType = "", Name="Mauri Moroni", Imageurl="images/diagram/overview/image53.png"},
        new OrganizationalDetails() { Id = "24", Role= "Software Engineer", Color = "#2E95D8",  Manager = "20", ChartType ="", Name="Janete Limeira", Imageurl="images/diagram/overview/image56.png"},
        new OrganizationalDetails() { Id = "25", Role= "Software Engineer", Color = "#2E95D8",  Manager = "20", ChartType ="", Name="Michael Holz", Imageurl="images/diagram/overview/image19.png"}
    };
    private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
    {
        if (rows == 0)
        {
            if (rows == 0 && options.Rows != null)
                options.Rows = null;
            Node? node = obj as Node;
            if (pattern == "LeftOrientationVertical50" || pattern == "RightOrientationVertical50")
            {
                options.Offset = -50;
            }

            if (!options.HasSubTree)
            {
                options.AlignmentType = subTreeAlignment;
                options.Orientation = subTreeOrientation;
                options.AlignmentType = subTreeAlignment;
            }
        }
        else
        {
            if (!options.HasSubTree)
            {
                options.AlignmentType = subTreeAlignment;
                options.Orientation = subTreeOrientation;
                options.Offset = offset;
            }
        }
        return options;
    }

    public void LeftToRight()
    {
        OrientationType = LayoutOrientation.LeftToRight;
    }

    public class ImageFields
    {
        public string? Text { get; set; }
    }

    private void HSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        HorizontalValue = (int)args.Value!;
        HorizontalSpacing = int.Parse(args.Value.ToString()!);

    }
    private void VSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        VerticalValue = (int)args.Value!;
        VerticalSpacing = int.Parse(args.Value.ToString()!);
    }

    private void ToptoBottomClick()
    {
        OrientationType = LayoutOrientation.TopToBottom;
        UpdateSelection("topToBottom");
    }
    private void LefttoRightClick()
    {
        OrientationType = LayoutOrientation.LeftToRight;
        UpdateSelection("leftToRight");
    }
    private void RighttoLeftClick()
    {
        OrientationType = LayoutOrientation.RightToLeft;
        UpdateSelection("rightToLeft");
    }
    private void BottomtoTopClick()
    {
        OrientationType = LayoutOrientation.BottomToTop;
        UpdateSelection("bottomToTop");
    }
    private async Task AlternateOrientationVertical20()
    {
        pattern = "AlternateOrientationVertical20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Alternate;
        subTreeOrientation = Orientation.Vertical;
        offset = 20;
        UpdatePatternSelection("pattern1");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task LeftOrientationVertical20()
    {
        pattern = "LeftOrientationVertical20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Left;
        subTreeOrientation = Orientation.Vertical;
        offset = 20;
        UpdatePatternSelection("pattern2");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task LeftOrientationVertical50()
    {
        pattern = "LeftOrientationVertical50";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Left;
        subTreeOrientation = Orientation.Vertical;
        offset = -50;
        UpdatePatternSelection("pattern3");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task RightOrientationVertical50()
    {
        pattern = "RightOrientationVertical50";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Right;
        subTreeOrientation = Orientation.Vertical;
        offset = -50;
        UpdatePatternSelection("pattern4");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task RightOrientationVertical20()
    {
        pattern = "RightOrientationVertical20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Right;
        subTreeOrientation = Orientation.Vertical;
        offset = 20;
        UpdatePatternSelection("pattern5");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task BalancedOrientationHorizontal20()
    {
        pattern = "BalancedOrientationHorizontal20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Balanced;
        subTreeOrientation = Orientation.Horizontal;
        offset = 20;
        UpdatePatternSelection("pattern6");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task CenterOrientationHorizontal50()
    {
        pattern = "CenterOrientationHorizontal50";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Center;
        subTreeOrientation = Orientation.Horizontal;
        offset = -50;
        UpdatePatternSelection("pattern7");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task LeftOrientationHorizontal20()
    {
        pattern = "LeftOrientationHorizontal20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Left;
        subTreeOrientation = Orientation.Horizontal;
        offset = 20;
        UpdatePatternSelection("pattern8");
        _ = Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private async Task RightOrientationHorizontal20()
    {
        pattern = "RightOrientationHorizontal20";
        Diagram!.BeginUpdate();
        subTreeAlignment = SubTreeAlignmentType.Right;
        subTreeOrientation = Orientation.Horizontal;
        offset = 20;
        UpdatePatternSelection("pattern9");
        await Diagram.EndUpdateAsync();
        await Diagram.DoLayoutAsync();
    }
    private void UpdatePatternSelection(string id)
    {
        for (int i = 0; i < PatternDictionary!.Count; i++)
        {
            var value = PatternDictionary.Values.ElementAt(i);
            var key = PatternDictionary.Keys.ElementAt(i);
            if (PatternDictionary.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            PatternDictionary.Remove(key);
            PatternDictionary.Add(key, value);
        }
    }
    // Method is used to apply the selection to the prroperty panel.
    private void UpdateSelection(string id)
    {
        for (int i = 0; i < dict!.Count; i++)
        {
            var value = dict.Values.ElementAt(i);
            var key = dict.Keys.ElementAt(i);
            if (dict.ContainsKey(id) && key == id)
            {
                value = selectedPattenitem;
            }
            else
            {
                value = unselecteditem;
            }
            dict.Remove(key);
            dict.Add(key, value);
        }
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (dict != null)
        {
            dict.Clear();
            dict = null;
        }
        if (PatternDictionary != null)
        {
            PatternDictionary.Clear();
            PatternDictionary = null;
        }
        Diagram = null;
        pattern = null;
    }
    @*End:Hidden*@
}
