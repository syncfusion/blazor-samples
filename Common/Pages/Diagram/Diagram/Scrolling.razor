@page "/diagram/scrollsettings"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@*End:Hidden*@
@using NodeShape = Syncfusion.Blazor.Diagram.NodeShapes
@using SymbolExpandMode = Syncfusion.Blazor.Navigations.ExpandMode
@*Hidden:Lines*@
@inject NavigationManager NavigationManager


@*End:Hidden*@


@*Hidden:Lines*@
<SampleDescription>
    <p>This example illustrates how to scroll a diagram using vertical and horizontal scrollbars. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_ScrollLimit' aria-label="ScrollLimit">ScrollLimit</a></code> property helps limit the scrolling area. The auto-scroll feature automatically scrolls the diagram whenever the node or connector is moved beyond its boundaries. Auto-scroll is enabled during node dragging, node resizing, multiple-selection operations, connector dragging and end thumb dragging.</p>
</SampleDescription>
<ActionDescription>
    <p> The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_ScrollLimit' aria-label="ScrollLimit">ScrollLimit</a></code> property allows you to define the scrollable region of the diagram. You may scroll inside the designated region if the scroll limit mode is set to limited. When the limit mode is set to diagram, you can scroll within all the diagram content.</p>
    <p> The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_EnableAutoScroll" aria-label="EnableAutoScroll">EnableAutoScroll</a></code> property controls whether the diagram will auto-scroll or not. Setting the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_AutoScrollPadding" aria-label="AutoScrollPadding">AutoScrollPadding</a></code> property will change the padding used to initiate auto-scrolling at the edge. When auto-scrolling is enabled, if a user drags a node or connector to the viewport's edge, the diagram viewport will automatically scroll in the direction of the mouse movement. The auto-scrolling region is limited by the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_ScrollLimit' aria-label="ScrollLimit">ScrollLimit</a></code> property of the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html" aria-label="ScrollSettings">ScrollSettings</a></code> class.</p>
    <p> The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ScrollSettings.html#Syncfusion_Blazor_Diagram_ScrollSettings_ScrollPadding" aria-label="ScrollPadding">ScrollPadding</a></code> property defines the spacing between diagram elements and the edges of the viewport. It extends the content area of the diagram to include the element's padding. For example, if the right padding is set to 50 pixels, the scroll padding start region will be 50 pixels from the inner edge of the right viewport edge.</p>
</ActionDescription>
@*End:Hidden*@

<div class="control-section">
    @*Hidden:Lines*@
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <style>

            @@font-face {
                font-family: 'e-ddb-icons';
                src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
                font-weight: normal;
                font-style: normal;
            }

            .e-ddb-icons {
                font-family: 'e-ddb-icons';
                speak: none;
                font-size: 16px;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .col-xs-6 {
                padding-left: 0px;
                padding-right: 0px;
                padding-top: 5px;
            }

            .texstyle {
                display: table;
                height: 35px;
                padding-right: 4px;
                padding-left: 0px;
                width: 50%;
                padding-top: 15px;
                float: left;
                position: relative;
                min-height: 1px;
            }

            .row {
                margin-left: 0px;
                margin-right: 0px;
                display: block;
            }

            .e-basic::before {
                content: "\e726";
            }

            .e-flow::before {
                content: "\e724";
            }

            .e-connector::before {
                content: "\e725";
            }

            .e-control e-symbolpalette e-lib e-draggable {
                display: block;
                width: 80%;
                margin: 0 auto;
                padding: 20px;
            }

            #diagramEventsControlSection .sb-mobile-palette {
                width: 210px;
                height: 100%;
                float: left;
            }

            #diagramEventsControlSection .sb-mobile-palette-bar {
                display: none;
            }

            #diagramEventsControlSection .sb-mobile-diagram {
                width: calc(100% - 212px);
                height: 100%;
                float: left;
                border: 1px solid #d9dedd;
            }

            .material #diagramEventsControlSection #palette-space .e-accordion {
                border: none;
            }

            .material #diagramEventsControlSection #palette-space {
                border: 1px solid rgba(0, 0, 0, 0.12);
            }

            @@media (max-width: 550px) {
                #diagramEventsControlSection .sb-mobile-palette {
                    z-index: 19;
                    position: absolute;
                    display: none;
                    transition: transform 300ms linear, visibility 0s linear 300ms;
                    width: 45%;
                    height: 100%;
                }

                #diagramEventsControlSection .sb-mobile-palette-bar {
                    display: block;
                    width: 100%;
                    background: #fafafa;
                    padding: 14px 10px;
                    border: 0.5px solid #e0e0e0;
                    min-height: 54px;
                }

                #diagramEventsControlSection .sb-mobile-diagram {
                    width: 100%;
                    height: 100%;
                    float: left;
                    left: 0px;
                }

                #diagramEventsControlSection #palette-icon {
                    font-size: 20px;
                }
            }

            #diagramEventsControlSection .sb-mobile-palette-open {
                position: absolute;
                display: block;
                right: 15px;
            }

            @@font-face {
                font-family: "e-ddb-icons1";
                src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format("truetype");
                font-weight: normal;
                font-style: normal;
            }

            .e-ddb-icons1 {
                font-family: "e-ddb-icons1";
                speak: none;
                font-size: 16px;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            #diagramEventsControlSection .e-toggle-palette::before {
                content: "\e700";
            }


            #diagramEventsPropertySection .event-tracer {
                width: 240px;
                height: 700px;
                min-height: 700px;
                float: left;
            }

            #diagramEventsPropertySection .heading {
                color: #807f7f;
                font-size: 15px;
                height: 50px;
                width: 100%;
                border-bottom: 1px solid #d9dedd;
                padding: 10px;
            }

            .property-section {
                padding-bottom: 20px;
                height: 740px;
                padding-right: 0px;
                display:inline-block;
            }

            #diagramEventsPropertySection .evtbtn {
                float: right;
            }

            .scroll {
                font-weight: 600;
                display: table;
                height: 35px;
                padding-right: 4px;
                padding-left: 0px;
                width: 50%;
                padding-top: 20px;
                float: left;
                position: relative;
                min-height: 1px;
            }

            #diagramEventsPropertySection .listbox {
                width: 100%;
                height: 50%;
            }
        </style>
        <div id="diagramEventsControlSection" class="content-wrapper" style="background: white;margin-top:-21px;margin-left:-14px">
            @*End:Hidden*@
            @*Hidden:Lines*@
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            @*End:Hidden*@
            <div id="palette-space" class="sb-mobile-palette">

                <SfSymbolPaletteComponent @ref="@PaletteInstance" Width="100%" Height="850px" Palettes="@palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
                </SfSymbolPaletteComponent>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <SfDiagramComponent @ref="diagram" Height="850px" Nodes="@nodes" Connectors="@connectors" DragDrop="DragDropEvent" GetCustomTool="@GetCustomTool" SelectionSettings="@selectionSettings">
                     <RulerSettings>
                        <HorizontalRuler>
                          </HorizontalRuler>
                        <VerticalRuler >
                          </VerticalRuler>
                    </RulerSettings>
                    <ScrollSettings @ref="@ScrollSettings" AutoScrollPadding="@autoScrollBorder" ScrollPadding="@scrollBorder" EnableAutoScroll=@canEnable ScrollLimit="@scrollLimit" ScrollableArea="@scrollableArea">
                    </ScrollSettings>

                </SfDiagramComponent>
            </div>
            @*Hidden:Lines*@
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header property-panel-table">
            Properties
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="texstyle">
                Scroll Limit
            </div>
            <div class="col-xs-6">
                <SfDropDownList TValue="string" TItem="Games" Placeholder="Infinity" @bind-Value="@scrollValue" DataSource="@LocalData" Width="100%">
                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="string" TItem="Games" ValueChange="OnScrollLimitChange"></DropDownListEvents>
                </SfDropDownList>
            </div>
        </div>

        <div Enabled="@clipBounds">
            <div style="font-weight:600;font-size:15px; padding-top: 20px;">
                Scrollable Area
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    X
                </div>
                <div class="col-xs-6">
                    <SfNumericTextBox TValue="double" Value="@x" Enabled="@clipBounds" Format="n0" Decimals=0 Min=0 Step=5 Width="100%">
                        <NumericTextBoxEvents TValue="double" ValueChange="xvalueChanged" />
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Y
                </div>
                <div class="col-xs-6">
                    <SfNumericTextBox TValue="double" Value="@y" Format="n0" Decimals=0 Enabled="@clipBounds" Min=0 Step=5 Width="100%">
                        <NumericTextBoxEvents TValue="double" ValueChange="yvalueChanged" />
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Width
                </div>
                <div class="col-xs-6">
                    <SfNumericTextBox TValue="double" Value="@PageWidth" Format="n0" Decimals=0 Enabled="@clipBounds" Min=0 Step=5 Width="100%">
                        <NumericTextBoxEvents TValue="double" ValueChange="widthvalueChanged" />
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Height
                </div>
                <div class="col-xs-6">
                    <SfNumericTextBox TValue="double" Value="@PageHeight" Format="n0" Decimals=0 Enabled="@clipBounds" Min=0 Step=5 Width="100%">
                        <NumericTextBoxEvents TValue="double" ValueChange="heightvalueChanged" />
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="scroll">
                    Enable AutoScroll
                </div>
                <div class="col-xs-6" style="padding-top: 15px">
                    <SfCheckBox ID="headericon" Checked="@canEnable" ValueChange="IconChange" TChecked="bool"></SfCheckBox>
                </div>
            </div>
            <div Enabled="@EnableBorder">
                <div style="font-weight:600;font-size:15px; padding-top: 20px;">
                    AutoScrollPadding
                </div>
                <div class="row" style="padding-top: 15px">
                    <div class="texstyle">
                        Top
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox TValue="double" Value="@top" Enabled="@EnableBorder" Format="n0" Decimals=0 Min=20 Step=5 Width="100%">
                            <NumericTextBoxEvents TValue="double" ValueChange="TopvalueChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Bottom
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox TValue="double" Value="@bottom" Enabled="@EnableBorder" Format="n0" Decimals=0 Min=20 Step=5 Width="100%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BottomvalueChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Left
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox TValue="double" Value="@left" Enabled="@EnableBorder" Format="n0" Decimals=0 Min=20 Step=5 Width="100%">
                            <NumericTextBoxEvents TValue="double" ValueChange="LeftChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Right
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox TValue="double" Value="@right" Enabled="@EnableBorder" Format="n0" Decimals=0 Min=20 Step=5 Width="100%">
                            <NumericTextBoxEvents TValue="double" ValueChange="RightChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
        </div>
        <div style="font-weight:600;font-size:15px; padding-top: 20px;">
            ScrollPadding
        </div>
        <div class="row" style="padding-top: 15px">
            <div class="texstyle">
                Top
            </div>
            <div class="col-xs-6">
                <SfNumericTextBox TValue="double" Value="@topScroll" Format="n0" Decimals=0 Step=5 Min=0 Max=200 Width="100%">
                    <NumericTextBoxEvents TValue="double" ValueChange="TopScrollValueChanged" />
                </SfNumericTextBox>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="texstyle">
                Bottom
            </div>
            <div class="col-xs-6">
                <SfNumericTextBox TValue="double" Value="@bottomScroll" Format="n0" Decimals=0 Step=5 Min=0 Max=200 Width="100%">
                    <NumericTextBoxEvents TValue="double" ValueChange="BottomScrollValueChanged" />
                </SfNumericTextBox>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="texstyle">
                Left
            </div>
            <div class="col-xs-6">
                <SfNumericTextBox TValue="double" Value="@leftScroll" Format="n0" Decimals=0 Step=5 Min=0 Max=200 Width="100%">
                    <NumericTextBoxEvents TValue="double" ValueChange="LeftScrollValueChanged" />
                </SfNumericTextBox>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="texstyle">
                Right
            </div>
            <div class="col-xs-6">
                <SfNumericTextBox TValue="double" Value="@rightScroll" Format="n0" Decimals=0 Step=5 Min=0 Max=200 Width="100%">
                    <NumericTextBoxEvents TValue="double" ValueChange="RightScrollValueChanged" />
                </SfNumericTextBox>
            </div>
        </div>
    </div>
    @*End:Hidden*@
</div>

@code {

    @*Hidden:Lines*@
    #pragma warning disable BL0005
    
    string scrollValue = "Game3";
    double x = 0;
    double y = 0;
    double top = 30;
    double bottom = 30;
    double right = 30;
    double left = 30;
    double topScroll = 50;
    double bottomScroll = 50;
    double rightScroll = 50;
    double leftScroll = 50;
    bool clipBounds = false;
    bool EnableBorder = true;
    double PageWidth = 300;
    double PageHeight = 300;
    string change = "EnableAutoScroll";
    @*End:Hidden*@
    ScrollSettings? ScrollSettings;
    bool canEnable = true;
    DiagramMargin autoScrollBorder = new DiagramMargin() { Left = 30, Right = 30, Top = 30, Bottom = 30 };
    DiagramMargin scrollBorder = new DiagramMargin() { Left = 50, Right = 50, Top = 50, Bottom = 50 };
    DiagramRect scrollableArea = new DiagramRect() { X = 0, Y = 0, Width = 300, Height = 300 };
    ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
    public SfDiagramComponent? diagram;
    public SfSymbolPaletteComponent? PaletteInstance;

    public DiagramSize? SymbolPreview;
    public SymbolMargin? SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();

    //Defines Diagram's Nodes collection
    private DiagramObjectCollection<Node>? nodes = new DiagramObjectCollection<Node>();
    //Defines Diagram's Connectors collection
    private DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();


    //Define palattes collection
    private DiagramObjectCollection<Palette>? palettes = new DiagramObjectCollection<Palette>();

    // Defines palette's basic-shape collection
    private DiagramObjectCollection<NodeBase>? basicShapeSymbols = new DiagramObjectCollection<NodeBase>();

    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> flowShapes = new DiagramObjectCollection<NodeBase>();

    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase>  connectorSymbols = new DiagramObjectCollection<NodeBase>();
 

    // Defines interval values for GridLines
    public double[]? GridLineIntervals { get; set; }

    [Inject]
    protected IJSRuntime? jsRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
        PaletteInstance!.Targets = new DiagramObjectCollection<SfDiagramComponent?>
        {
            diagram
        };
    }

    protected override void OnInitialized()
    {
        
        GridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        InitPaletteModel();

    }
    @*Hidden:Lines*@
    private void IconChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            canEnable = true;
            change = "DisableAutoScroll";
            EnableBorder = true;
        }
        else
        {
            canEnable = false;
            change = "EnableAutoScroll";
            EnableBorder = false;
        }
    }

    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0.5);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        handles.Add(deleteHandle);
        handles.Add(drawHandle);
        selectionSettings.UserHandles = handles;
    }

    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = offset,
                Side = direction,
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        return handle;
    }
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase? tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(diagram!);
        }
        else
        {
            tool = new AddDeleteTool(diagram!);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        Node? deleteObject = null;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings!.Nodes!.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs? args)
        {
            if (deleteObject != null)
            {
                sfDiagram.StartGroupAction();
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes!.Remove(deleteObject);
                _ = sfDiagram.EndUpdateAsync();
                sfDiagram.EndGroupAction();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }

    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector? newConnector = null;
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
                {
                    ID = "OrthogonalConnector",
                    SourceID = sfDiagram.SelectionSettings!.Nodes![0].ID,
                    Type = ConnectorSegmentType.Orthogonal,
                };
            @*Hidden:Lines*@
#pragma warning disable BL0005
            @*End:Hidden*@
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
            @*Hidden:Lines*@
#pragma warning restore BL0005
            @*End:Hidden*@
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs? args)
        {
            base.OnMouseUp(args);
        }
    }
    private void widthvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        PageWidth = args.Value;
        scrollableArea = new DiagramRect() { X = x, Y = y, Width = PageWidth, Height = PageHeight };
    }
    private void heightvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        PageHeight = args.Value;
        scrollableArea = new DiagramRect() { X = x, Y = y, Width = PageWidth, Height = PageHeight };
    }
    private void xvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        x = args.Value;
        scrollableArea = new DiagramRect() { X = x, Y = y, Width = PageWidth, Height = PageHeight };
    }
    private void yvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        y = args.Value;
        scrollableArea = new DiagramRect() { X = x, Y = y, Width = PageWidth, Height = PageHeight };
    }

    private void OnScrollLimitChange(ChangeEventArgs<string, Games> args)
    {
        if (args.ItemData!.Text == "Diagram")
        {
            scrollLimit = ScrollLimitMode.Diagram;
            clipBounds = false;
        }
        if (args.ItemData.Text == "Limited")
        {
            scrollLimit = ScrollLimitMode.Limited;
            clipBounds = true;
            scrollableArea = new DiagramRect() { X = x, Y = y, Width = PageWidth, Height = PageHeight };
        }
        if (args.ItemData.Text == "Infinity")
        {
            scrollLimit = ScrollLimitMode.Infinity;
            clipBounds = false;
        }
    }
#pragma warning disable BL0005
    private void TopvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        top = args.Value;
        autoScrollBorder = new DiagramMargin() { Left = left, Right = right, Top = top, Bottom = bottom };

    }
    private void BottomvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        bottom = args.Value;
        autoScrollBorder = new DiagramMargin() { Left = left, Right = right, Top = top, Bottom = bottom };
    }
    private void RightChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        right = args.Value;
        autoScrollBorder = new DiagramMargin() { Left = left, Right = right, Top = top, Bottom = bottom };
    }
    private void LeftChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        left = args.Value;
        autoScrollBorder = new DiagramMargin() { Left = left, Right = right, Top = top, Bottom = bottom };
    }
    private void TopScrollValueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        topScroll = args.Value;
        scrollBorder = new DiagramMargin() { Left = leftScroll, Right = rightScroll, Top = topScroll, Bottom = bottomScroll };

    }
    private void BottomScrollValueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        bottomScroll = args.Value;
        scrollBorder = new DiagramMargin() { Left = leftScroll, Right = rightScroll, Top = topScroll, Bottom = bottomScroll };
    }
    private void RightScrollValueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        rightScroll = args.Value;
        scrollBorder = new DiagramMargin() { Left = leftScroll, Right = rightScroll, Top = topScroll, Bottom = bottomScroll };
    }
    private void LeftScrollValueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        leftScroll = args.Value;
        scrollBorder = new DiagramMargin() { Left = leftScroll, Right = rightScroll, Top = topScroll, Bottom = bottomScroll };
    }
#pragma warning restore BL0005
    private void CanAutoScroll()
    {
        if (change == "EnableAutoScroll")
        {
            canEnable = true;
            change = "DisableAutoScroll";
        }
        else if (change == "DisableAutoScroll")
        {
            canEnable = false;
            change = "EnableAutoScroll";
        }
    }
    @*End:Hidden*@
    private void DragDropEvent(DropEventArgs args)
    {
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector && connector.Tooltip != null)
        {
            connector.Tooltip = null;
            connector.Constraints &= ~ConnectorConstraints.Tooltip;
        }
    }
    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
            {
                Width = 100,
                Height = 100
            };

        basicShapeSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeBasicShapes.Rectangle, "Rectangle");
        CreatePaletteNode(NodeBasicShapes.Ellipse, "Ellipse");
        CreatePaletteNode(NodeBasicShapes.Triangle, "Triangle");
        CreatePaletteNode(NodeBasicShapes.Plus, "Plus");
        CreatePaletteNode(NodeBasicShapes.Star, "Star");
        CreatePaletteNode(NodeBasicShapes.Pentagon, "Pentagon");
        CreatePaletteNode(NodeBasicShapes.Hexagon, "Hexagon");
        CreatePaletteNode(NodeBasicShapes.Heptagon, "Heptagon");
        CreatePaletteNode(NodeBasicShapes.Octagon, "Octagon");
        CreatePaletteNode(NodeBasicShapes.Trapezoid, "Trapezoid");
        CreatePaletteNode(NodeBasicShapes.Decagon, "Decagon");
        CreatePaletteNode(NodeBasicShapes.RightTriangle, "RightTriangle");

        // Palette which contains flow shape nodes
        flowShapes = new DiagramObjectCollection<NodeBase>()
        {
            CreateFlowNode("Terminator",NodeFlowShapes.Terminator),
            CreateFlowNode("Process",NodeFlowShapes.Process),
            CreateFlowNode("Sort",NodeFlowShapes.Sort),
            CreateFlowNode("Document",NodeFlowShapes.Document),
            CreateFlowNode("Predefined Process",NodeFlowShapes.PreDefinedProcess),
            CreateFlowNode("Punched Tape",NodeFlowShapes.PaperTap),
            CreateFlowNode("Direct Data",NodeFlowShapes.DirectData),
            CreateFlowNode("Sequential Data",NodeFlowShapes.SequentialData),
        };
        // palette which contains connectors
        connectorSymbols = new DiagramObjectCollection<NodeBase>()
        {
            CreateConnector("link1",ConnectorSegmentType.Orthogonal,DecoratorShape.Arrow),
            CreateConnector("link2",ConnectorSegmentType.Orthogonal,DecoratorShape.None),
            CreateConnector("link3",ConnectorSegmentType.Straight,DecoratorShape.Arrow),
            CreateConnector("link4",ConnectorSegmentType.Straight,DecoratorShape.None),
            CreateConnector("link5",ConnectorSegmentType.Bezier,DecoratorShape.None),
            CreateConnector("link6",ConnectorSegmentType.Bezier, DecoratorShape.Arrow)

        };
        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = basicShapeSymbols, Title = "Basic Shapes", ID = "Basic Shapes"},
            new Palette() {Symbols = flowShapes, Title = "Flow Shapes", ID = "Flow Shapes"},
            new Palette() {Symbols = connectorSymbols, Title = "Connectors", ID = "Connectors"}
            #pragma warning restore BL0005
        };
    }

    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        node!.Style!.Fill = "#357BD2";
        if (!(node.ID!.StartsWith("Annotation")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }

    // Method to create flow shape node
    private Node CreateFlowNode(string id, NodeFlowShapes type)
    {
        string NodeID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            NodeID = id.Replace(" ", "");
        }
        Node node = new Node()
        {
            ID = NodeID,
            Shape = new FlowShape()
            {
                Type = NodeShape.Flow,
                Shape = type
            },
            Style = new ShapeStyle() { Fill = "#357BD2", StrokeWidth = 1, StrokeColor = "#757575" }
        };
        if (isSpace)
        {
            node.Tooltip = new DiagramTooltip()
                {
                    Content = id,
                };
            node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
        }
        return node;
    }


    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector? node = obj as Connector;
        node!.Style!.Fill = "#357BD2";
        node.Style.StrokeColor = "#357BD2";
        node.Style.Opacity = 1;
        node.TargetDecorator!.Style.Fill = "#357BD2";
        node.TargetDecorator.Style.StrokeColor = "#357BD2";
    }

    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeBasicShapes basicShape, string id)
    {
        Node diagramNode = new Node()
            {
                ID = id,
            Shape = new BasicShape() { Type = NodeShape.Basic, Shape = basicShape },
                Style = new ShapeStyle() { Fill = "#6495ed", StrokeColor = "#757575", StrokeWidth = 1 },
            };
        basicShapeSymbols!.Add(diagramNode);
    }
    // Method to create connector
    private Connector CreateConnector(string id, ConnectorSegmentType type, DecoratorShape shape)
    {
        Connector connector = new Connector()
            {
                ID = id,
                Type = type,
                SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
                TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = shape,
                    Style = new ShapeStyle() { StrokeColor = "#357BD2", Fill = "#357BD2" }
                },
               Style = new ShapeStyle()
               {
                Fill = "#357BD2",
                StrokeWidth = 2,
                StrokeColor = "#357BD2"
               },
            };
        return connector;
    }

    // Method is used to create a node for the diagram.
    private void CreateDiagramNode(string id, int width, int height, int x, int y, NodeFlowShapes flowShape, string content)
    {
        Node diagramNode = new Node()
            {
                ID = id,
                Width = width,
                Height = height,
                OffsetX = x,
                OffsetY = y,
            Shape = new FlowShape() { Type = NodeShape.Flow, Shape = flowShape },

                Annotations = new DiagramObjectCollection<ShapeAnnotation> { new ShapeAnnotation { Content = content, Style = new TextStyle() { Color = "White", Fill = "transparent" } } }
            };
        nodes!.Add(diagramNode);
    }
    public class Games
    {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }
    List<Games> LocalData = new List<Games> {
    new Games() { ID= "Game1", Text= "Limited" },
    new Games() { ID= "Game2", Text= "Diagram" },
    new Games() { ID= "Game3", Text= "Infinity" },

  };

    public async Task ShowHideSymbolPalette()
    {
        await jsRuntime!.InvokeAsync<object>("openPalette");

    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }

        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        diagram = null;
        PaletteInstance = null;
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
#pragma warning restore BL0005

#pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                palettes[i].IconCss = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
#pragma warning restore BL0005
        if (basicShapeSymbols != null)
        {
            basicShapeSymbols.Clear();
            basicShapeSymbols = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }

    }
    @*End:Hidden*@
}
