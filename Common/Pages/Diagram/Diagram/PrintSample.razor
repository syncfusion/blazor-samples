@page "/diagram/print"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.PdfExport;
@using System.Text.Json;
@using System.IO;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@using System.Text.Json.Serialization;
@inject IJSRuntime JS;
@*End:Hidden*@
@*Hidden:Lines*@
@inject NavigationManager NavigationManager


@*End:Hidden*@
@*Hidden:Lines*@
<SampleDescription>
    <p>This sample demonstrates printing the Diagram as an image.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to print the Diagram. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html?&_ga=2.256402696.220667007.1679910873-428174700.1673441120#Syncfusion_Blazor_Diagram_SfDiagramComponent_PrintAsync_Syncfusion_Blazor_Diagram_DiagramPrintSettings' aria-label="PrintAsync">PrintAsync</a></code> method can be used to print diagrams. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PageSettings.html#Syncfusion_Blazor_Diagram_PageSettings_MultiplePage' aria-label="MultiplePage">MultiplePage</a></code> property is used to enable or disable multiple pages. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PageSettings.html#Syncfusion_Blazor_Diagram_PageSettings_Orientation' aria-label="Orientation">Orientation</a></code> property is used to specify the page orientation in the Diagram, such as portrait or landscape. By using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PageSettings.html#Syncfusion_Blazor_Diagram_PageSettings_ShowPageBreaks' aria-label="ShowPageBreaks">ShowPageBreaks</a></code> property, enable or disable page break lines.</p>
</ActionDescription>
@*End:Hidden*@

<div>
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <SfDiagramComponent @ref="@diagram" Height="640px"
                            Nodes="@nodes"
                            Connectors="@connectors" Created="OnCreated">
            <PageSettings MultiplePage="true" Width="@width" Height="@height" Orientation="@orientation" ShowPageBreaks="@showPageBreak">
                <BackgroundStyle Background="white"></BackgroundStyle>
                <PageMargin Left="@left" Right="@right" Top="@top" Bottom="@bottom"></PageMargin>
            </PageSettings>
            
        </SfDiagramComponent>
    </div>

    @*Hidden:Lines*@

    <style>

        .texstyle {
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 45%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .e-radio + label .e-label {
            font-size: 12px;
        }

        .texstyle1 {
            display: table;
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            position: relative;
            min-height: 1px;
        }

        .e-custom {
            border-radius: 5px;
            height: 38px;
            border-color: transparent;
            width: 90px;
            font-family: 'Segoe UI';
            font-weight: normal;
            font-size: 12px;
            margin-top: 15px;
        }

            .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
                background-color: #E0E0E0;
                color: black;
            }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-input-group.e-corner {
            border-radius: 4px;
        }
    </style>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header">
            Print Setup
        </div>
        <div class="row property-panel-content">

            <div class="row">
                <div class="texstyle">
                    Paper Size
                </div>
                <div class="col-xs-5" style="margin-left:8px">
                    <SfDropDownList TValue="@string" Width="110px" @bind-Enabled="file" TItem="@PaperSize" @bind-Value="@paperValue" ID="position" PopupHeight="120" PopupWidth="150" Placeholder="Letter" CssClass="textboxstyle" DataSource="@PaperSizeLists">
                        <DropDownListEvents TItem="PaperSize" TValue="string" ValueChange="@OnPageSizeValueChanged"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle" style="padding-top: 20px;">
                    Multiple/Single Page
                </div>
                <div class="col-xs-5" style="width:45%">
                    <div style="padding-top: 10px; font-size: 12px; padding-left: 10px; width: 400px;">
                        <SfRadioButton Label="Multiple Page" Name="options" Value="multiple" Checked="@stringCheckedValue" @onclick="@OnMultiplePage"></SfRadioButton>
                    </div>
                    <div style="padding-top: 8px; font-size:12px; padding-left: 10px; width: 400px;">
                        <SfRadioButton Label="Single Page" Name="options" Value="single" Checked="@stringCheckedValue" @onclick="@OnSinglePage"></SfRadioButton>
                    </div>
                </div>
            </div>
            <div class="row" style="padding-top:20px">
                <div class="texstyle" style="padding-top: 20px;">
                    Orientation
                </div>
                <div class="col-xs-5" style="width:45%">
                    <div style="padding-top: 10px; font-size: 12px; width: 400px; padding-left: 10px;">
                        <SfRadioButton Label="Portrait" Name="orientation" Value="portrait" Checked="@stringChecked" @onclick="@Portrait"></SfRadioButton>
                    </div>
                    <div style="padding-top: 8px; font-size: 12px; width: 400px; padding-left: 10px;">
                        <SfRadioButton Label="Landscape" Name="orientation" Value="land" Checked="@stringChecked" @onclick="@Landscape"></SfRadioButton>
                    </div>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    ShowPageBreaks
                </div>
                <div class="col-xs-5" style="width:45%">
                    <div style="padding-top: 10px; width: 400px; padding-left: 8px;">
                        <input value="showPagebreak" style="margin-left: 3px;" checked="checked" type="checkbox" @onchange="@OnShowPagebreak" />
                    </div>
                </div>
            </div>
            <div class="row">
                <SfButton OnClick="@OnPrint" CssClass="e-custom">Print</SfButton>
            </div>

        </div>
    </div>

    @*End:Hidden*@
</div>

@code
 {
    @*Hidden:Lines*@
    
    string paperValue = "Custom";
    private string stringCheckedValue = "multiple";
    private string stringChecked = "portrait";
    bool file = true;
    double left = 10;
    double top = 10;
    double right = 10;
    double bottom = 10;
    @*End:Hidden*@

    double width = 410;
    double height = 550;
    bool multiplePage = true;
    bool showPageBreak = true;
    DiagramPrintExportRegion region = DiagramPrintExportRegion.PageSettings;
    PageOrientation orientation = PageOrientation.Portrait;
    //Refer to diagram
    SfDiagramComponent? diagram;

    //define node's collection
    public DiagramObjectCollection<Node>? nodes
    {
        get;
        set;
    }
    //define connector's collection
    public DiagramObjectCollection<Connector>? connectors
    {
        get;
        set;
    }
    @*Hidden:Lines*@
    public void Portrait(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        orientation = PageOrientation.Portrait;
    }
    public void Landscape(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        orientation = PageOrientation.Landscape;
    }
    public class FileFormat
    {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }
    List<FileFormat> diagramregios = new List<FileFormat>
{
    new FileFormat() { ID= "PageSettings", Text= "PageSettings" },
    new FileFormat() { ID= "Content", Text= "Content" },
    new FileFormat() { ID= "ClipBounds", Text= "ClipBounds" },
    };
    List<FileFormat> Orientation = new List<FileFormat> {
    new FileFormat() { ID= "Landscape", Text= "Landscape" },
    new FileFormat() { ID= "Portrait", Text= "Portrait" },
    };
    @*End:Hidden*@

    protected override void OnInitialized()
    {

        
        nodes = new DiagramObjectCollection<Node>();
        CreateNode("sourceNode1", 80, 160, "Source document");
        CreateNode("censusNode2", 80, 260, "Census \n record");
        CreateNode("booksNode3", 80, 375, "Books and magazine");
        CreateNode("recordNode4", 270, 260, "Record template");
        CreateNode("traditionalNode5", 270, 385, "Traditional template");
        CreateNode("nontraditionalNode6", 80, 485, "Non traditional");
        CreateNode("radial1", 610, 342, "Health fitness");
        CreateNode("radial2", 610, 202, "Diet");
        CreateNode("radial3", 750, 258, "Flexibility");
        CreateNode("radial4", 730, 442, "Muscular endurance");
        CreateNode("radial5", 470, 258, "Cardiovascular strength");
        CreateNode("radial6", 490, 442, "Muscular strength");

        connectors = new DiagramObjectCollection<Connector>();
        CreateConnector("connector1", "sourceNode1", "censusNode2", "");
        CreateConnector("connector2", "censusNode2", "booksNode3", "No");
        CreateConnector("connector3", "booksNode3", "nontraditionalNode6", "Yes");
        CreateConnector("connector4", "censusNode2", "recordNode4", "Yes");
        CreateConnector("connector5", "booksNode3", "traditionalNode5", "No");
        CreateConnector("connector6", "radial1", "radial2", "");
        CreateConnector("connector7", "radial1", "radial3", "No");
        CreateConnector("connector8", "radial1", "radial4", "Yes");
        CreateConnector("connector9", "radial1", "radial5", "No");
        CreateConnector("connector10", "radial1", "radial6", "Yes");
    }

    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService!.IsDevice)
        {
            diagram!.FitToPage(mobileoptions);

        }
    }
    private void CreateNode(string id, double x, double y, string label)
    {
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = label };
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Height = 50,
            Width = 100,
            Style = new ShapeStyle() { Fill = "#90ee90", StrokeColor = "#666666" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
        };
        if (id == "radial1" || id == "radial2" || id == "radial3" || id == "radial4" || id == "radial5" || id == "radial6")
        {
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#ffb6c1", StrokeColor = "#666666" };
        }
        if (id == "radial1")
        {
            diagramNode.Height = 50;
            diagramNode.Style = new ShapeStyle() { Fill = "#fffcc8", StrokeColor = "#666666" };
        }
        if (id == "censusNode2" || id == "booksNode3")
        {
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#87ceeb", StrokeColor = "#666666" };
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Diamond };
        }
        if (id == "sourceNode1" || id == "censusNode2")
        {
            diagramNode.Annotations[0].Margin = new DiagramThickness() { Left = 15, Top = 15, Right = 15, Bottom = 15 };
        }
        nodes!.Add(diagramNode);
    }

    private void CreateConnector(string id, string sourceID, string targetID, string label)
    {
        PathAnnotation pathAnnotation = new PathAnnotation() { Content = label, Style = new TextStyle() { Fill = "White" } };
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = sourceID,
            TargetID = targetID,
            Style = new ShapeStyle() { StrokeColor = "Black" },
            Annotations = new DiagramObjectCollection<PathAnnotation>() { pathAnnotation },
        };
        connectors!.Add(connector);
    }
    @*Hidden:Lines*@
    private void OnShowPagebreak(ChangeEventArgs args)
    {
        showPageBreak = (bool)args.Value!;
    }
    private void OnMultiplePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        multiplePage = true;
    }
    private void OnSinglePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        multiplePage = false;
    }
    public class PaperSize
    {
        public string? Name { get; set; }
    }
    private List<PaperSize> PaperSizeLists = new List<PaperSize>() {
        new PaperSize() { Name ="Custom"},
        new PaperSize() { Name ="Letter"},
        new PaperSize() { Name ="Folio" },
        new PaperSize() { Name ="Legal"},
        new PaperSize() { Name ="Ledger"},
        new PaperSize() { Name ="A0"},
        new PaperSize() { Name ="A1" },
        new PaperSize() { Name ="A2"},
        new PaperSize() { Name ="A3"},
        new PaperSize() { Name ="A4"},
        new PaperSize() { Name ="A5"},
        new PaperSize() { Name ="ANSI A"},
        new PaperSize() { Name ="ANSI B"},
        new PaperSize() { Name ="ANSI C"},
        new PaperSize() { Name ="ANSI D"},
        new PaperSize() { Name ="ANSI E"},
    };
    private void OnPageSizeValueChanged(ChangeEventArgs<string, PaperSize> args)
    {
        string content = args.Value!.ToString();
        if (content != null)
        {
            if (orientation == PageOrientation.Portrait)
            {
                switch (content)
                {
                    case "Letter":
                        width = 816;
                        height = 1056;
                        break;
                     case "Custom":
                        width = 410;
                        height = 550;
                        break;
                    case "Legal":
                        width = 816;
                        height = 1344;
                        break;
                    case "Folio":
                        width = 816;
                        height = 1296;
                        break;
                    case "Ledger":
                        width = 1056;
                        height = 1632;
                        break;
                    case "A0":
                        width = 3179;
                        height = 4494;
                        break;
                    case "A1":
                        width = 2245;
                        height = 3179;
                        break;
                    case "A2":
                        width = 1587;
                        height = 2245;
                        break;
                    case "A3":
                        width = 1123;
                        height = 1587;
                        break;
                    case "A4":
                        width = 794;
                        height = 1123;
                        break;
                    case "A5":
                        width = 559;
                        height = 794;
                        break;
                    case "ANSI A":
                        width = 816;
                        height = 1056;
                        break;
                    case "ANSI B":
                        width = 1056;
                        height = 1632;
                        break;
                    case "ANSI C":
                        width = 1632;
                        height = 2112;
                        break;
                    case "ANSI D":
                        width = 2112;
                        height = 3264;
                        break;
                    case "ANSI E":
                        width = 3264;
                        height = 4226;
                        break;
                }
            }
            else
            {
                switch (content)
                {
                    case "Letter":
                        height = 816;
                        width = 1056;
                        break;
                     case "Custom":
                        width = 550;
                        height = 410;
                        break;
                    case "Legal":
                        height = 816;
                        width = 1344;
                        break;
                    case "Folio":
                        height = 816;
                        width = 1296;
                        break;
                    case "Ledger":
                        height = 1056;
                        width = 1632;
                        break;
                    case "A0":
                        height = 3179;
                        width = 4494;
                        break;
                    case "A1":
                        height = 2245;
                        width = 3179;
                        break;
                    case "A2":
                        height = 1587;
                        width = 2245;
                        break;
                    case "A3":
                        height = 1123;
                        width = 1587;
                        break;
                    case "A4":
                        height = 794;
                        width = 1123;
                        break;
                    case "A5":
                        height = 559;
                        width = 794;
                        break;
                    case "ANSI A":
                        height = 816;
                        width = 1056;
                        break;
                    case "ANSI B":
                        height = 1056;
                        width = 1632;
                        break;
                    case "ANSI C":
                        height = 1632;
                        width = 2112;
                        break;
                    case "ANSI D":
                        height = 2112;
                        width = 3264;
                        break;
                    case "ANSI E":
                        height = 3264;
                        width = 4226;
                        break;
                }
            }
        }
    }
    @*End:Hidden*@
    private async Task OnPrint()
    {
        DiagramPrintSettings print = new DiagramPrintSettings();
        print.PageWidth = width;
        print.PageHeight = height;
        print.Region = region;
        print.FitToPage = !multiplePage;
        print.Orientation = orientation;
        print.Margin = new DiagramThickness() { Left = left, Top = top, Right = right, Bottom = bottom };
        await diagram!.PrintAsync(print);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@

}

