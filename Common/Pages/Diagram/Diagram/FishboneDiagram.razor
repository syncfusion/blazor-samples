@page "/diagram/fishbone-diagram"

@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample demonstrates a basic fishbone (Ishikawa) diagram using Syncfusion Blazor Diagram. The diagram nodes and annotations are used to construct the fishbone structure.</p>
</SampleDescription>
<ActionDescription>
    <p>This sample demonstrates how to build a fishbone (Ishikawa) diagram with the Diagram component. Zoom and pan functionalities are enabled. You can control these interactions through the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_InteractionController">InteractionController</a></code> property of the Diagram control. The diagram is displayed in read-only mode.</p>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-12 control-section">
    <div id="diagram-space" class="content-wrapper" style="height:650px">
        <SfDiagramComponent @ref="DiagramInstance" Height="650px" InteractionController="@DiagramInteractions.ZoomPan" Nodes="@DiagramNodes" Connectors="@DiagramConnectors" Created="OnCreated">
            <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
        </SfDiagramComponent>
    </div>
</div>

@code{
    //Defines Diagram's nodes collection
    public DiagramObjectCollection<Node>? DiagramNodes { get; set; }
    //Defines Diagram's connectors collection
    public DiagramObjectCollection<Connector>? DiagramConnectors { get; set; }
    @*Hidden:Lines*@
    
    private NodeShapes BasicShape { get; set; } = NodeShapes.Basic;
    private NodeShapes PathShape { get; set; } = NodeShapes.Path;
    private string FishBonePath { get; set; } = "M0 50H140L160 25L140 0H0L20 25L0 50Z";
    private string TailPath { get; set; } = "M0 0H60L80 25L60 50H0V25V0Z";
    private string HeadPath { get; set; } = "M0 0H115.5L132 25L115.5 50H0V25V0Z";
    private SfDiagramComponent? DiagramInstance { get; set; }
    @*End:Hidden*@
    protected override void OnInitialized()
    {
        
        DiagramNodes = new DiagramObjectCollection<Node>();
        DiagramObjectCollection<PointPort> Ports = new DiagramObjectCollection<PointPort>()
        {
            new PointPort()
            {
                ID="port1",
                Offset =new DiagramPoint(){X=1,Y=0.5},
                Visibility = PortVisibility.Hidden
            }
        };
        DiagramObjectCollection<ShapeAnnotation> equipmentAnnotation = CreateAnnotations("Equipment", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> environmentAnnotation = CreateAnnotations("Environment", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> personAnnotation = CreateAnnotations("Person", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> materialsAnnotation = CreateAnnotations("Materials", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> machineAnnotation = CreateAnnotations("Machine", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> methodAnnotation = CreateAnnotations("Method", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> productivityAnnotation = CreateAnnotations("Productivity \n Increase", "white", "Segoe UI", 16, true);
        DiagramObjectCollection<ShapeAnnotation> textAnnotation = CreateAnnotations("Text Programs", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> ventilatorsAnnotation = CreateAnnotations("Ventilators Sound", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> educationAnnotation = CreateAnnotations("Education", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> dataBooksAnnotation = CreateAnnotations("DataBooks", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> fixturesAnnotation = CreateAnnotations("Fixtures", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> noiseAnnotation = CreateAnnotations("Noise", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> motivationAnnotation = CreateAnnotations("Motivation", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> tirednessAnnotation = CreateAnnotations("Tiredness", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> storerAnnotation = CreateAnnotations("Storer", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> computerAnnotation = CreateAnnotations("Computer", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> qualityAnnotation = CreateAnnotations("Quality of Element", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> orderAnnotation = CreateAnnotations("Order", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> softwareAnnotation = CreateAnnotations("Software", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> procurementAnnotation = CreateAnnotations("Procurement", "Black", "Roboto");
        DiagramObjectCollection<ShapeAnnotation> standardizationAnnotation = CreateAnnotations("Standardization", "Black", "Segoe UI");
        CreateNode("Equipment", 250, 80, 160, 50, "#3941C4", "#3941C4", 1, PathShape, FishBonePath, equipmentAnnotation, Ports);
        CreateNode("Environment", 506, 80, 160, 50, "#9F771E", "#9F771E", 1, PathShape, FishBonePath, environmentAnnotation, Ports);
        CreateNode("Person", 762, 80, 160, 50, "#742D2A", "#742D2A", 1, PathShape, FishBonePath, personAnnotation, Ports);
        CreateNode("Materials", 250, 560, 160, 50, "#299090", "#299090", 1, PathShape, FishBonePath, materialsAnnotation, Ports);
        CreateNode("Machine", 506, 560, 160, 50, "#327FC7", "#327FC7", 1, PathShape, FishBonePath, machineAnnotation, Ports);
        CreateNode("Methods", 762, 560, 160, 50, "#5F3890", "#5F3890", 1, PathShape, FishBonePath, methodAnnotation, Ports);
        CreateNode("ellipse1", 359, 130, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse2", 387, 183, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse3", 416, 237, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse4", 614, 130, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse5", 641, 182, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse6", 870, 130, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse7", 896, 179, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse8", 917, 221, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse9", 940, 264, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse10", 392, 440, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse11", 874, 500, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse12", 905, 440, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse13", 618, 500, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse14", 649, 440, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("ellipse15", 360, 500, 9, 9, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("Colorellipse1", 968, 319, 15, 15, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("Colorellipse2", 712, 319, 15, 15, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("Colorellipse3", 456, 319, 15, 15, "#464646", "#464646", 1, BasicShape, "Ellipse");
        CreateNode("Colorellipse4", 100, 319, 80, 50, "#475B6B", "#475B6B", 1, PathShape, TailPath);
        CreateNode("Colorellipse5", 1100, 319, 132, 50, "#475B6B", "#475B6B", 1, PathShape, HeadPath, productivityAnnotation);
        CreateNode("TextPrograms", 260, 130, 80, 20, "transparent", "", 0, BasicShape, "", textAnnotation);
        CreateNode("Ventilatorssound", 496, 130, 96, 20, "transparent", "", 0, BasicShape, "", ventilatorsAnnotation);
        CreateNode("Education", 770, 130, 55, 20, "transparent", "", 0, BasicShape, "", educationAnnotation);
        CreateNode("DataBooks", 289, 183, 60, 20, "transparent", "", 0, BasicShape, "", dataBooksAnnotation);
        CreateNode("Fixtures", 316, 237, 44, 20, "transparent", "", 0, BasicShape, "", fixturesAnnotation);
        CreateNode("Noise", 539, 182, 32, 20, "transparent", "", 0, BasicShape, "", noiseAnnotation);
        CreateNode("Motivation", 797, 179, 58, 20, "transparent", "", 0, BasicShape, "", motivationAnnotation);
        CreateNode("Tiredness", 817, 221, 60, 20, "transparent", "", 0, BasicShape, "", tirednessAnnotation);
        CreateNode("Storer", 841, 264, 33, 20, "transparent", "", 0, BasicShape, "", storerAnnotation);
        CreateNode("Computer", 290, 440, 70, 20, "transparent", "", 0, BasicShape, "", computerAnnotation);
        CreateNode("Quality", 527, 440, 100, 20, "transparent", "", 0, BasicShape, "", qualityAnnotation);
        CreateNode("Order", 804, 440, 30, 20, "transparent", "", 0, BasicShape, "", orderAnnotation);
        CreateNode("Software", 260, 500, 70, 20, "transparent", "", 0, BasicShape, "", softwareAnnotation);
        CreateNode("Procurement", 517, 500, 71, 20, "transparent", "", 0, BasicShape, "", procurementAnnotation);
        CreateNode("Standardization", 774, 500, 86, 20, "transparent", "", 0, BasicShape, "", standardizationAnnotation);
        DiagramConnectors = new DiagramObjectCollection<Connector>();
        CreateConnector("equipellise", "5,5", "Equipment", "ellipse1", "#3941C4", 1, "port1");
        CreateConnector("connect12", "5,5", "ellipse1", "ellipse2", "#3941C4", 1);
        CreateConnector("connect13", "5,5", "ellipse2", "ellipse3", "#3941C4", 1);
        CreateConnector("connect14", "5,5", "ellipse3", "Colorellipse3", "#3941C4", 1);
        CreateConnector("connect15", "5,5", "Environment", "ellipse4", "#B67D00", 1, "port1");
        CreateConnector("connect16", "5,5", "ellipse4", "ellipse5", "#B67D00", 1);
        CreateConnector("connect17", "5,5", "ellipse4", "ellipse5", "#B67D00", 1);
        CreateConnector("connect18", "5,5", "ellipse5", "Colorellipse2", "#B67D00", 1);
        CreateConnector("connect19", "5,5", "Person", "ellipse6", "#742D2A", 1, "port1");
        CreateConnector("connect20", "5,5", "ellipse6", "ellipse7", "#742D2A", 1);
        CreateConnector("connect21", "5,5", "ellipse7", "ellipse8", "#742D2A", 1);
        CreateConnector("connect22", "5,5", "ellipse8", "ellipse9", "#742D2A", 1);
        CreateConnector("connect23", "5,5", "ellipse9", "Colorellipse1", "#742D2A", 1);
        CreateConnector("connect24", "5,5", "Materials", "ellipse15", "#299090", 1, "port1");
        CreateConnector("connect25", "5,5", "ellipse15", "ellipse10", "#299090", 1);
        CreateConnector("connect26", "5,5", "ellipse10", "Colorellipse3", "#299090", 1);
        CreateConnector("connect27", "5,5", "Machine", "ellipse13", "#2B762C", 1, "port1");
        CreateConnector("connect28", "5,5", "ellipse13", "ellipse14", "#2B762C", 1);
        CreateConnector("connect29", "5,5", "ellipse14", "Colorellipse2", "#2B762C", 1);
        CreateConnector("connect30", "5,5", "Methods", "ellipse11", "#5F3890", 1, "port1");
        CreateConnector("connect31", "5,5", "ellipse11", "ellipse12", "#5F3890", 1);
        CreateConnector("connect32", "5,5", "ellipse12", "Colorellipse1", "#5F3890", 1);
        CreateConnector("connect33", "", "Colorellipse4", "Colorellipse3", "#464646", 1);
        CreateConnector("connect34", "", "Colorellipse3", "Colorellipse2", "#464646", 1);
        CreateConnector("connect35", "", "Colorellipse2", "Colorellipse1", "#464646", 1);
        CreateConnector("connect36", "", "Colorellipse1", "Colorellipse5", "#464646", 1);
        CreateConnector("connect37", "", "TextPrograms", "ellipse1", "#464646", 1, "", 10);
        CreateConnector("connect38", "", "DataBooks", "ellipse2", "#464646", 1, "", 10);
        CreateConnector("connect39", "", "Fixtures", "ellipse3", "#464646", 1, "", 10);
        CreateConnector("connect40", "", "Ventilatorssound", "ellipse4", "#464646", 1, "", 10);
        CreateConnector("connect41", "", "Noise", "ellipse5", "#464646", 1, "", 10);
        CreateConnector("connect42", "", "Education", "ellipse6", "#464646", 1, "", 10);
        CreateConnector("connect43", "", "Motivation", "ellipse7", "#464646", 1, "", 10);
        CreateConnector("connect44", "", "Tiredness", "ellipse8", "#464646", 1, "", 10);
        CreateConnector("connect45", "", "Storer", "ellipse9", "#464646", 1, "", 10);
        CreateConnector("connect46", "", "Software", "ellipse15", "#464646", 1, "", 10);
        CreateConnector("connect47", "", "Computer", "ellipse10", "#464646", 1, "", 10);
        CreateConnector("connect48", "", "Procurement", "ellipse13", "#464646", 1, "", 10);
        CreateConnector("connect49", "", "Quality", "ellipse14", "#464646", 1, "", 10);
        CreateConnector("connect50", "", "Order", "ellipse12", "#464646", 1, "", 10);
        CreateConnector("connect51", "", "Standardization", "ellipse11", "#464646", 1, "", 10);
    }

    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance!.FitToPage(mobileoptions);
    }
    // Method is used to create a Connector for the DiagramInstance.
    private void CreateConnector(string id, string lineDashArray, string source, string target, string lineColor, int lineWidth, string? portId = null, int padding = 0)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = source,
            TargetID = target,
            Style = new ShapeStyle { StrokeColor = lineColor, StrokeWidth = lineWidth, StrokeDashArray = lineDashArray },
            TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.None },
            SourcePadding = padding
        };
        if (id != "connect33" && id != "connect34" && id != "connect35" && id != "connect36")
        {
            connector.TargetDecorator.Style = new ShapeStyle() { StrokeColor = "#A52A2A", Fill = "#A52A2A" };
        }
        if (portId != null && portId != "")
            connector.SourcePortID = portId;
        DiagramConnectors!.Add(connector);
    }
    // Method is used to create a Node for the diagram.
    private void CreateNode(string id, double x, double y, double width, double height, string fill, string strokeColor, int strokeWidth, Syncfusion.Blazor.Diagram.NodeShapes shape, string? pathData = null, DiagramObjectCollection<ShapeAnnotation>? annotations = null, DiagramObjectCollection<PointPort>? ports = null)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = width,
            Height = height,
            Style = new ShapeStyle { Fill = fill, StrokeColor = strokeColor, StrokeWidth = strokeWidth }
        };
        if (shape == Syncfusion.Blazor.Diagram.NodeShapes.Basic)
        {
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };
        }
        else
        {
            diagramNode.Shape = new PathShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Path, Data = pathData };
        }
        if (annotations != null)
            diagramNode.Annotations = annotations;
        if (ports != null)
            diagramNode.Ports = ports;
        DiagramNodes!.Add(diagramNode);
    }
    // Method is used to create an annotation for the diagram.
    private DiagramObjectCollection<ShapeAnnotation> CreateAnnotations(string content1, string color, string fontFamily, int fontSize = 12, bool bold = false)
    {
        DiagramObjectCollection<ShapeAnnotation> Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation() { Content = content1, Style = new TextStyle() { Bold = bold, Color= color, FontFamily = fontFamily, FontSize = fontSize }}
        };
        return Annotations;
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }
    }
    @*End:Hidden*@
}