@page "/diagram/linerouting"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable
@inject NavigationManager NavigationManager

<SampleDescription>
    <p>This sample visualizes the process of support maintenance, highlighting the use of line routing features to prevent connectors from overlapping with nodes in the diagram. The diagram efficiently guides the handling of client queries through decision points and actions, facilitating the seamless resolution of issues while prioritizing client satisfaction. </p>
</SampleDescription>
<ActionDescription>
    <p>This sample illustrates how connectors dynamically adjust their routes based on the placement or movement of nearby shapes. This functionality is achieved by setting the Routing enum value to the constraints property of both the diagram and connectors, ensuring fluid and responsive layout adjustments.</p>
</ActionDescription>
@*End:Hidden*@
<SfDiagramComponent @ref="@diagram" Created="OnCreated" Constraints="@diagramConstraints" Connectors="@ConnectorCollection" Height="680px" Nodes="@NodeCollection">
    <SnapSettings Constraints="@snapConstraints">
    </SnapSettings>
</SfDiagramComponent>

@code
{
    SfDiagramComponent? diagram;
    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node>? NodeCollection = new DiagramObjectCollection<Node>();
    public DiagramObjectCollection<Connector>? ConnectorCollection = new DiagramObjectCollection<Connector>();
    DiagramConstraints diagramConstraints = DiagramConstraints.Default | DiagramConstraints.Routing;
    SnapConstraints snapConstraints = SnapConstraints.All & ~SnapConstraints.ShowLines;

    protected override void OnInitialized()
    {
        InitDiagramModel();
    }

    private void InitDiagramModel()
    {
        CreateNode("node1", 120, 80, 120, 40, NodeFlowShapes.Terminator, "Client requested\na query");
        CreateNode("node2", 120, 205, 120, 80, NodeFlowShapes.Decision, "Check for\nKnowledge\nBase");
        CreateNode("node3", 310, 205, 100, 50, NodeFlowShapes.Process, "Share relevant\nKB article");
        CreateNode("node4", 490, 205, 100, 50, NodeFlowShapes.Process, "Client\nconfirmation");
        CreateNode("node5", 490, 80, 100, 40, NodeFlowShapes.Terminator, "Close");
        CreateNode("node6", 120, 345, 120, 80, NodeFlowShapes.Decision, "Known\nissue?");
        CreateNode("node7", 310, 345, 100, 50, NodeFlowShapes.Process, "Respond to\nClient");
        CreateNode("node8", 120, 470, 100, 50, NodeFlowShapes.Process, "Test the issue");
        CreateNode("node9", 310, 470, 120, 80, NodeFlowShapes.Decision, "Issue\nreproduced?");
        CreateNode("node10", 310, 595, 120, 50, NodeFlowShapes.Document, "File bug");
        CreateNode("node11", 670, 345, 100, 50, NodeFlowShapes.Process, "Get more\ninformation");
        CreateNode("node12", 670, 80, 120, 50, NodeFlowShapes.Process, "Client\nCommunications");
        CreateNode("node13", 490, 595, 100, 50, NodeFlowShapes.Process, "Feasibility\nanalysis");
        CreateNode("node14", 670, 595, 100, 50, NodeFlowShapes.Process, "Fix and Test");
        CreateNode("node15", 670, 471, 120, 80, NodeFlowShapes.Decision, "Issue\nresolved?");
        CreateNode("node16", 850, 345, 100, 50, NodeFlowShapes.Process, "Provide update");
        CreateNode("node17", 850, 205, 120, 80, NodeFlowShapes.Decision, "Is Client\nsatisfied?");
        CreateNode("node18", 850, 80, 100, 40, NodeFlowShapes.Terminator, "Close");
        CreateNode("node19", 1040, 205, 120, 50, NodeFlowShapes.Process, "Provide additional\nassistance");
        CreateNode("node20", 1040, 345, 120, 80, NodeFlowShapes.Decision, "Query\nresolved?");
        CreateNode("node21", 1040, 470, 120, 50, NodeFlowShapes.Process, "Escalate to Next Level");

        CreateConnector("connector1", "node1", "node2", sourcePort: "port4", targetPort: "port2");
        CreateConnector("connector2", "node2", "node3", "Exists", "port3", "port1");
        CreateConnector("connector3", "node3", "node4", sourcePort: "port3", targetPort: "port1");
        CreateConnector("connector4", "node4", "node5", sourcePort: "port2", targetPort: "port4");
        CreateConnector("connector5", "node2", "node6", "None", "port4", "port2");
        CreateConnector("connector6", "node6", "node7", "Yes", "port3", "port1");
        CreateConnector("connector7", "node7", "node4", sourcePort: "port3", targetPort: "port4");
        CreateConnector("connector8", "node6", "node8", "No", "port4", "port2");
        CreateConnector("connector9", "node8", "node9", sourcePort: "port3", targetPort: "port1");
        CreateConnector("connector10", "node9", "node10", "Yes", "port4", "port2");
        CreateConnector("connector11", "node9", "node11", "No", "port3", "port4");
        CreateConnector("connector12", "node11", "node9", sourcePort: "port1", targetPort: "port2");
        CreateConnector("connector13", "node11", "node12", sourcePort: "port2", targetPort: "port4");
        CreateConnector("connector14", "node10", "node13", sourcePort: "port3", targetPort: "port1");
        CreateConnector("connector15", "node13", "node14", sourcePort: "port3", targetPort: "port1");
        CreateConnector("connector24", "node14", "node15", sourcePort: "port2", targetPort: "port4");
        CreateConnector("connector16", "node15", "node13", "No", "port1", "port2");
        CreateConnector("connector17", "node15", "node16", "Yes", "port3", "port4");
        CreateConnector("connector18", "node16", "node17", sourcePort: "port2", targetPort: "port4");
        CreateConnector("connector19", "node17", "node18", "Yes", "port2", "port4");
        CreateConnector("connector20", "node17", "node19", "No", "port3", "port1");
        CreateConnector("connector21", "node19", "node20", sourcePort: "port4", targetPort: "port2");
        CreateConnector("connector22", "node20", "node18", "Yes", "port3", "port3");
        CreateConnector("connector23", "node20", "node21", "No", "port4", "port2");
    }

    private void CreateNode(string id, double x, double y, double width, double height, NodeFlowShapes shape, string label)
    {
        ShapeStyle shapeStyle = new ShapeStyle { Fill = "#357BD2", StrokeColor = "White" };
        TextStyle textStyle = new TextStyle { Color = "White", Fill = "transparent" };

        if (shape == NodeFlowShapes.Decision || shape == NodeFlowShapes.Terminator)
        {
            shapeStyle = new ShapeStyle { Fill = "#32678f", StrokeColor = "White" };
        }
        else if (shape == NodeFlowShapes.Document)
        {
            shapeStyle = new ShapeStyle { Fill = "White", StrokeColor = "#357BD2" };
            textStyle = new TextStyle { Color = "#357BD2", Fill = "transparent" };
        }

        ShapeAnnotation annotation = new ShapeAnnotation
            {
                Content = label,
                Style = textStyle
            };

        PointPort port1 = new PointPort { ID = "port1", Offset = new DiagramPoint { X = 0, Y = 0.5 }, Visibility = PortVisibility.Connect };
        PointPort port2 = new PointPort { ID = "port2", Offset = new DiagramPoint { X = 0.5, Y = 0 }, Visibility = PortVisibility.Connect };
        PointPort port3 = new PointPort { ID = "port3", Offset = new DiagramPoint { X = 1, Y = 0.5 }, Visibility = PortVisibility.Connect };
        PointPort port4 = new PointPort { ID = "port4", Offset = new DiagramPoint { X = 0.5, Y = 1 }, Visibility = PortVisibility.Connect };

        Node diagramNode = new Node
            {
                ID = id,
                OffsetX = x,
                OffsetY = y,
                Width = width,
                Height = height,
                Style = shapeStyle,
                Shape = new FlowShape { Type = NodeShapes.Flow, Shape = shape },
                Annotations = new DiagramObjectCollection<ShapeAnnotation> { annotation },
                Ports = new DiagramObjectCollection<PointPort> { port1, port2, port3, port4 }
            };

        NodeCollection!.Add(diagramNode);
    }

    private void CreateConnector(string id, string sourceId, string targetId, string? label = null, string? sourcePort = null, string? targetPort = null)
    {
        Connector diagramConnector = new Connector
            {
                ID = id,
                SourceID = sourceId,
                TargetID = targetId,
                SourcePortID = sourcePort ?? string.Empty,
                TargetPortID = targetPort ?? string.Empty,
                Type = ConnectorSegmentType.Orthogonal,
                Segments = new DiagramObjectCollection<ConnectorSegment> { new OrthogonalSegment() },
                Style = new ShapeStyle { StrokeColor = "#357BD2", Fill = "#357BD2" },
                TargetDecorator = new DecoratorSettings { Shape = DecoratorShape.Arrow, Style = new ShapeStyle { Fill = "#357BD2", StrokeColor = "transparent" } }
            };
        if (!string.IsNullOrEmpty(label))
        {
            PathAnnotation annotation = new PathAnnotation
                {
                    Content = label,
                    Style = new TextStyle { Color = "#357BD2", Fill = "White" }
                };
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation> { annotation };
        }
        ConnectorCollection!.Add(diagramConnector);
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Width, Region = DiagramRegion.Content };
        diagram!.FitToPage(mobileoptions);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (NodeCollection != null)
        {
            NodeCollection.Clear();
            NodeCollection = null;
        }
        if (ConnectorCollection != null)
        {
            ConnectorCollection.Clear();
            ConnectorCollection = null;
        }
    }
    @*End:Hidden*@
}