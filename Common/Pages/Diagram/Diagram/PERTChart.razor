@page "/diagram/pertchart"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel

@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable;
@inject NavigationManager NavigationManager

<SampleDescription>
    <p>This sample demonstrates how to visualize a project development process using the Program Evaluation and Review Technique (PERT) chart. The chart is generated from an external data source and organized with a complex hierarchical tree algorithm to clearly depict the project’s sequential steps and dependencies.</p>
</SampleDescription>
<ActionDescription>
    <p>
        This example demonstrates how to generate a PERT chart using an external data source. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_DataSourceSettings" aria-label="dataSourceSettings">DataSourceSettings</a></code> property maps the external data source to the diagram control, while the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Layout" aria-label="layout">Layout</a></code> property automatically positions the nodes in the diagram. In this example, nodes are arranged from left to right. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_Orientation" aria-label="orientation">Orientation</a></code> property further customizes the layout direction, allowing for flexible arrangement of chart elements based on the specified orientation.
    </p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div style="text-align:center">
        @*End:Hidden*@
        <SfDiagramComponent @ref="Diagram" Height="700px" ConnectorCreating="connectorcreating" SetNodeTemplate="@SetNodeTemplate" InteractionController="@DiagramInteractions.ZoomPan" Created="OnCreated">
            <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
            <DataSourceSettings ID="ID" ParentID="Category" DataSource="@DataSource"></DataSourceSettings>
            <Layout Type="LayoutType.ComplexHierarchicalTree" Orientation="LayoutOrientation.LeftToRight" HorizontalSpacing="100" VerticalSpacing="70">
            </Layout>
        </SfDiagramComponent>
        @*Hidden:Lines*@
    </div>
</div>
<style>
    .row {
        display: block;
    }

    #container {
        display: block;
    }
</style>

@*End:Hidden*@


@code
{
    SfDiagramComponent? Diagram;

    private void connectorcreating(IDiagramObject obj)
    {
        Connector? connector = obj as Connector;
        connector!.Style!.StrokeColor = "#979797";
        connector.TargetDecorator!.Width = 10;
        connector.TargetDecorator.Height = 10;
        connector.TargetDecorator.Style = new ShapeStyle()
        {
            Fill = "#979797",
            StrokeColor = "#979797"
        };
    }

    //SetNode Template method
    private CommonElement SetNodeTemplate(IDiagramObject node)
    {
        {
            Node? newnode = node as Node;
            var table = new StackPanel();
            table.Style!.Fill = "#0069d9";
            table.Orientation = Orientation.Vertical;
            var stack = new StackPanel();
            stack.Children = new ObservableCollection<CommonElement>();
            stack.Height = 25;
            stack.Orientation = Orientation.Horizontal;
            stack.Style!.Fill = "white";
            stack.HorizontalAlignment = HorizontalAlignment.Stretch;
            addRows(stack, node);
            table.Children = new ObservableCollection<CommonElement>();
            table.Children.Add(getTextElement((newnode!.Data as HierarchicalDetails)!.ID!, HorizontalAlignment.Stretch, 170, VerticalAlignment.Stretch));
            table.Children.Add(stack);
            (table.Children[0].Style as TextStyle)!.Color = "white";
            (table.Children[0].Style as TextStyle)!.FontSize = 14;

            return table;
        }
    }
    private void addRows(StackPanel column, IDiagramObject node)
    {
        Node? node1 = node as Node;
        var nodeInfo = node1!.Data as HierarchicalDetails;
        column.Children!.Add(getTextElement(nodeInfo!.StartDate!, HorizontalAlignment.Left, 70, VerticalAlignment.Center));
        column.Children.Add(getTextElement(nodeInfo.Duration!, HorizontalAlignment.Center, 30, VerticalAlignment.Center));
        column.Children.Add(getTextElement(nodeInfo.EndDate!, HorizontalAlignment.Right, 70, VerticalAlignment.Center));
    }
    private TextElement getTextElement(string text, HorizontalAlignment alignment, int width, VerticalAlignment valignment)
    {
        TextElement textElement = new TextElement();
        textElement.Width = width;
        textElement.Height = 25;
        textElement.Content = text;
        textElement.VerticalAlignment = valignment;
        textElement.HorizontalAlignment = alignment;
        textElement.RelativeMode = RelativeMode.Object;
        textElement.Style = new TextStyle() { Color = "#3c3c3c", Fill = "transparent" };
        return textElement;
    }
    public class HierarchicalDetails
    {
        public string? ID { get; set; }
        public string? Duration { get; set; }
        public List<string>? Category { get; set; }
        public string? StartDate { get; set; }
        public string? EndDate { get; set; }
        public string? Branch { get; set; }
    }
    //Create the data source with node name and fill color values.
    public List<HierarchicalDetails>? DataSource = new List<HierarchicalDetails>()
{
        new HierarchicalDetails(){ ID="Start Project",Duration="4",Branch="root",StartDate="04/19/2018",EndDate="08/19/2018"},
        new HierarchicalDetails(){ID="Design",Duration="2",Category=new List<string>(){"Start Project"},StartDate="08/20/2018",EndDate="10/20/2018"},
        new HierarchicalDetails(){ID="Formalize Specification",Duration="2",Category=new List<string>(){"Start Project"},StartDate="10/21/2018",EndDate="12/22/2018"},
        new HierarchicalDetails(){ID="Write Documentation",Duration="1",Category=new List<string>(){"Start Project"},StartDate="12/23/2018",EndDate="01/22/2019"},
        new HierarchicalDetails(){ID="Release Prototype",Duration="1",Category=new List<string>(){"Design"},StartDate="01/23/2019",EndDate="02/23/2019"},
        new HierarchicalDetails(){ID="Testing",Duration="2",Category=new List<string>(){"Formalize Specification","Release Prototype"},StartDate="02/24/2019",EndDate="04/22/2019"},
        new HierarchicalDetails(){ID="Release Project",Duration="1",Category=new List<string>(){"Release Prototype"},StartDate="04/23/2019",EndDate="05/24/2019"},
        new HierarchicalDetails(){ID="Review Changes",Duration="1",Category=new List<string>(){"Write Documentation"},StartDate="05/25/2019",EndDate="06/26/2019"},
        new HierarchicalDetails(){ID="Publish Documentation",Duration="1",Category=new List<string>(){"Review Changes"},StartDate="06/21/2019",EndDate="07/22/2019"},
        new HierarchicalDetails(){ID="Finish",Duration="1",Category=new List<string>(){"Publish Documentation","Release Project"},StartDate="07/23/2019",EndDate="08/24/2019"},
    };

    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        Diagram!.FitToPage(mobileoptions);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        DataSource = null;
    }
    @*End:Hidden*@
}