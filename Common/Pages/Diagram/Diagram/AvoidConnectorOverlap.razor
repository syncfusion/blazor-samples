@page "/diagram/avoid-connector-overlap"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable
@inject NavigationManager NavigationManager

<SampleDescription>
    <p>This sample visualizes the connectors that automatically adjust to minimize visual overlap, ensuring clear and distinct representations of connections within the diagram. </p>
</SampleDescription>
<ActionDescription>
    <p>
        This example showcases a circuit diagram created using the Syncfusion® Blazor Diagram control. It demonstrates the Avoid Line Overlapping feature, which enhances the readability of diagrams by automatically adjusting connector segments to prevent visual overlap. To enable this feature, set the <code>AvoidLineOverlapping</code> flag in the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Constraints" aria-label="Constraints">Constraints</a></code> property of the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html" aria-label="SfDiagramComponent">SfDiagramComponent</a></code>.
    </p>
</ActionDescription>
@*End:Hidden*@
<SfDiagramComponent @ref="@diagram" Created="OnCreated" Constraints="@diagramConstraints" @bind-InteractionController="@DiagramInteractionTools" Connectors="@ConnectorCollection" Height="680px" Nodes="@NodeCollection">
    <SnapSettings Constraints=SnapConstraints.None></SnapSettings>
    <ScrollSettings ScrollLimit="ScrollLimitMode.Diagram"></ScrollSettings>
</SfDiagramComponent>

@code
{
    SfDiagramComponent? diagram;
    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node>? NodeCollection = new DiagramObjectCollection<Node>();
    public DiagramObjectCollection<Connector>? ConnectorCollection = new DiagramObjectCollection<Connector>();
    DiagramConstraints diagramConstraints = DiagramConstraints.Default | DiagramConstraints.Routing | DiagramConstraints.AvoidLineOverlapping;
    DiagramInteractions DiagramInteractionTools { get; set; } = DiagramInteractions.ZoomPan;

    protected override void OnInitialized()
    {
        InitDiagramModel();
    }

    private void InitDiagramModel()
    {
        Create1to16Node("node1", 180, 165, 80, 240);
        Create1to16Node("node2", 180, 460, 80, 240);
        Create9to5Node("node3", 420, 108, 100, 135);
        Create9to5Node("node4", 420, 338, 100, 135);
        Create9to5Node("node5", 615, 165, 100, 135);
        Create9to5Node("node6", 615, 472, 100, 135);
        Create16to1Node("node7", 820, 240, 80, 240);
        CreateInputNode("node8", 70, 40, 80, 30, "Cin");
        CreateInputNode("node9", 70, 165, 80, 30, "A");
        CreateInputNode("node10", 70, 460, 80, 30, "B");
        CreateOutputNode("node11", 950, 240, 80, 30, "S");
        CreateOutputNode("node12", 950, 367.5, 80, 30, "Cout");
        CreateConnector("connector01", "node8", "node3", 0, 8, "lightGreen");
        CreateConnector("connector02", "node9", "node1", 0, 0, "orange");
        CreateConnector("connector03", "node10", "node2", 0, 0, "orange");
        CreateConnector("connector04", "node7", "node11", 0, 0, "orange");
        CreateConnector("connector05", "node6", "node12", 4, 0);
        CreateConnector("connector06", "node3", "node5", 4, 8);
        CreateConnector("connector07", "node5", "node4", 4, 8, "lightGreen");
        CreateConnector("connector08", "node4", "node6", 4, 8);

        CreateConnector("connector1", "node1", "node3", 0, 0);
        CreateConnector("connector2", "node1", "node3", 1, 1);
        CreateConnector("connector3", "node1", "node3", 2, 2);
        CreateConnector("connector4", "node1", "node3", 3, 3);
        CreateConnector("connector5", "node1", "node5", 4, 0, "lightGreen");

        CreateConnector("connector6", "node1", "node5", 5, 1);
        CreateConnector("connector7", "node1", "node5", 6, 2);
        CreateConnector("connector8", "node1", "node5", 7, 3, "lightGreen");
        CreateConnector("connector9", "node1", "node4", 8, 0, "lightGreen");
        CreateConnector("connector10", "node1", "node4", 9, 1, "lightGreen");
        CreateConnector("connector11", "node1", "node4", 10, 2);
        CreateConnector("connector12", "node1", "node4", 11, 3, "lightGreen");

        CreateConnector("connector13", "node1", "node6", 12, 0);
        CreateConnector("connector14", "node1", "node6", 13, 1, "lightGreen");
        CreateConnector("connector15", "node1", "node6", 14, 2, "lightGreen");
        CreateConnector("connector16", "node1", "node6", 15, 3);
        CreateConnector("connector17", "node2", "node3", 0, 4, "lightGreen");
        CreateConnector("connector18", "node2", "node3", 1, 5, "lightGreen");
        CreateConnector("connector19", "node2", "node3", 2, 6);
        CreateConnector("connector20", "node2", "node3", 3, 7);
        CreateConnector("connector25", "node2", "node4", 8, 4);
        CreateConnector("connector26", "node2", "node4", 9, 5, "lightGreen");
        CreateConnector("connector27", "node2", "node4", 10, 6);
        CreateConnector("connector28", "node2", "node4", 11, 7);
        CreateConnector("connector24", "node2", "node5", 7, 7, "lightGreen");
        CreateConnector("connector23", "node2", "node5", 6, 6, "lightGreen");
        CreateConnector("connector22", "node2", "node5", 5, 5, "lightGreen");
        CreateConnector("connector21", "node2", "node5", 4, 4, "lightGreen");
        CreateConnector("connector29", "node2", "node6", 12, 4, "lightGreen");
        CreateConnector("connector30", "node2", "node6", 13, 5);
        CreateConnector("connector31", "node2", "node6", 14, 6);
        CreateConnector("connector32", "node2", "node6", 15, 7);
        CreateConnector("connector33", "node3", "node7", 0, 0);
        CreateConnector("connector34", "node3", "node7", 1, 1);
        CreateConnector("connector35", "node3", "node7", 2, 2, "lightGreen");
        CreateConnector("connector36", "node3", "node7", 3, 3);
        CreateConnector("connector37", "node5", "node7", 0, 4);
        CreateConnector("connector38", "node5", "node7", 1, 5);
        CreateConnector("connector39", "node5", "node7", 2, 6);
        CreateConnector("connector40", "node5", "node7", 3, 7, "lightGreen");
        CreateConnector("connector41", "node4", "node7", 0, 8);
        CreateConnector("connector42", "node4", "node7", 1, 9);
        CreateConnector("connector43", "node4", "node7", 2, 10, "lightGreen");
        CreateConnector("connector44", "node4", "node7", 3, 11);
        CreateConnector("connector45", "node6", "node7", 0, 12);
        CreateConnector("connector46", "node6", "node7", 1, 13);
        CreateConnector("connector47", "node6", "node7", 2, 14);
        CreateConnector("connector48", "node6", "node7", 3, 15, "lightGreen");
    }


    public void Create1to16Node(string id, double x, double y, double width, double height)
    {
        Node node = CreateNode(id, x, y, width, height);
        AddShape(node, 1, 16);
        var inPorts = AddPorts(node, 1, "in");
        var outPorts = AddPorts(node, 16, "out");
        AddPortsLabels(node, 16, "out");
    }

    public void Create16to1Node(string id, double x, double y, double width, double height)
    {
        Node node = CreateNode(id, x, y, width, height);
        AddShape(node, 16, 1);

        var inPorts = AddPorts(node, 16, "in");
        var outPorts = AddPorts(node, 1, "out");

        AddPortsLabels(node, 16, "in");
    }

    public void Create9to5Node(string id, double x, double y, double width, double height)
    {
        List<string> leftLabels = new List<string> { "A_0", "A_1", "A_2", "A_3", "B_0", "B_1", "B_2", "B_3", "Cin" };
        List<string> rightLabels = new List<string> { "S_0", "S_1", "S_2", "S_3", "Cout" };

        Node node = CreateNode(id, x, y, width, height, "4 Bit\nRCA");
        AddShape(node, 9, 5);

        var inPorts = AddPorts(node, 9, "in");
        var outPorts = AddPorts(node, 5, "out", 9);


        AddPortsLabels(node, 9, "in", leftLabels);
        AddPortsLabels(node, 5, "out", rightLabels, 9);
    }

    public void CreateInputNode(string id, double x, double y, double width, double height, string label)
    {
        Node node = CreateNode(id, x, y, width, height, label);
        AddShape(node, 0, 1);

        var outPorts = AddPorts(node, 1, "out");

        if (node.Annotations!.Count > 0)
        {
            var annotation = node.Annotations[0];
            annotation.Offset = new DiagramPoint
            {
                X = (width - 25) / (2 * width),
                Y = 0.5
            };
        }
    }

    public void CreateOutputNode(string id, double x, double y, double width, double height, string label)
    {
        Node node = CreateNode(id, x, y, width, height, label);
        AddShape(node, 1, 0);

        var inPorts = AddPorts(node, 1, "in");

        if (node.Annotations!.Count > 0)
        {
            var annotation = node.Annotations[0];
            annotation.Offset = new DiagramPoint
            {
                X = 1 - ((width - 25) / (2 * width)),
                Y = 0.5
            };
        }
    }

    public void AddShape(Node node, int inCount, int outCount)
    {
        int maxCount = Math.Max(inCount, outCount);
        double? rightX = outCount == 0 ? node.Width : node.Width - 25;
        string pathData = $"M {rightX} 0 ";

        if (outCount > 1)
        {
            for (int i = 1; i <= outCount; i++)
            {
                double? portY = ((i / (double)maxCount) - (1 / (2.0 * maxCount))) * node.Height;
                pathData += $"L {rightX} {portY} L {node.Width} {portY} L {rightX} {portY} ";
            }
        }
        else if (outCount == 1)
        {
            pathData += $"L {rightX} {node.Height * 0.5} L {node.Width} {node.Height * 0.5} L {rightX} {node.Height * 0.5} ";
        }

        double leftX = inCount == 0 ? 0 : 25;
        pathData += $"L {rightX} {node.Height} L {leftX} {node.Height} ";

        if (inCount > 1)
        {
            for (int i = inCount; i >= 1; i--)
            {
                double? portY = ((i / (double)maxCount) - (1 / (2.0 * maxCount))) * node.Height;
                pathData += $"L {leftX} {portY} L 0 {portY} L {leftX} {portY} ";
            }
        }
        else if (inCount == 1)
        {
            pathData += $"L {leftX} {node.Height * 0.5} L 0 {node.Height * 0.5} L {leftX} {node.Height * 0.5} ";
        }

        pathData += $"L {leftX} 0 Z";
        node.Shape = new PathShape { Type = NodeShapes.Path, Data = pathData };

    }

    public DiagramObjectCollection<PointPort> AddPorts(Node node, int count, string side, double factor = 0)
    {

        if (factor == 0)
        {
            factor = count;
        }
        DiagramObjectCollection<PointPort> Ports = new DiagramObjectCollection<PointPort>();


        if (count > 1)
        {
            for (int i = 1; i <= count; i++)
            {
                var port = new PointPort
                {
                    ID = $"{node.ID}{side}{i - 1}",
                    Offset = new DiagramPoint
                    {
                        X = side == "out" ? 1 : 0,
                        Y = (i / (double)factor) - (1 / (2.0 * factor))
                    },
                    Visibility = PortVisibility.Visible,
                    Shape = PortShapes.Circle,
                    Style = new ShapeStyle { Fill = "black" },
                    Width = 8,
                    Height = 8
                };
                node.Ports!.Add(port);
            }
        }
        else
        {
            var port = new PointPort
            {
                ID = $"{node.ID}{side}0",
                Offset = new DiagramPoint
                {
                    X = side == "out" ? 1 : 0,
                    Y = 0.5
                },
                Visibility = PortVisibility.Visible,
                Shape = PortShapes.Circle,
                Style = new ShapeStyle { Fill = "black" },
                Width = 8,
                Height = 8,

            };
            node.Ports!.Add(port);
        }

        return Ports;
    }

    public void AddPortsLabels(Node node, int count, string side, List<string>? labels = null, double factor = 0)
    {
        if (factor == 0)
        {
            factor = count;
        }
        DiagramObjectCollection<ShapeAnnotation> Annotations = new DiagramObjectCollection<ShapeAnnotation>();

        double width = node.Width ?? 0.0; // Provide a default value to avoid null
        double x = side == "out" ? (width - 25 * 0.5) / width : (25 * 0.5) / width;

        for (int i = 1; i <= count; i++)
        {
            var label = new ShapeAnnotation
            {
                Content = labels != null ? labels[i - 1] : $"{i - 1}",
                Offset = new DiagramPoint
                {
                    X = x,
                    Y = (i / (double)factor) - (1 / (2.0 * factor))
                },
                Style = new TextStyle { FontSize = 7 },
                VerticalAlignment = VerticalAlignment.Bottom,
                Margin = new DiagramThickness { Bottom = 2 }
            };
            node.Annotations!.Add(label);
        }
    }

    public Node CreateNode(string id, double x, double y, double width, double height, string? label = null)
    {
        var shapeStyle = new ShapeStyle { StrokeColor = "black", StrokeWidth = 2 };

        var diagramNode = new Node
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = width,
            Height = height,
            Style = shapeStyle,
            Shape = new BasicShape { Type = NodeShapes.Basic },
        };

        if (!string.IsNullOrEmpty(label))
        {
            var annotation = new ShapeAnnotation
            {
                Content = label,
                Style = new TextStyle { FontSize = 14 }
            };
            diagramNode.Annotations!.Add(annotation);
        }

        NodeCollection!.Add(diagramNode);
        return diagramNode;
    }

    public void CreateConnector(string id, string sourceId, string targetId, int sourcePortIndex, int targetPortIndex, string? strokeColor = null)
    {
        string color = !string.IsNullOrEmpty(strokeColor) ? strokeColor : "green";
        if (color == "lightGreen")
        {
            color = "#1AD81A";
        }
        else if (color == "green")
        {
            color = "#005100";
        }

        var diagramConnector = new Connector
        {
            ID = id,
            CornerRadius = 5,
            SourceID = sourceId,
            TargetID = targetId,
            SourcePortID = sourceId + "out" + sourcePortIndex,
            TargetPortID = targetId + "in" + targetPortIndex,
            Type = ConnectorSegmentType.Orthogonal,
            Style = new ShapeStyle { StrokeColor = color, StrokeWidth = 2 },
            TargetDecorator = new DecoratorSettings { Shape = DecoratorShape.None }
        };
        ConnectorCollection!.Add(diagramConnector);
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Width, Region = DiagramRegion.Content };
        diagram!.FitToPage(mobileoptions);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (NodeCollection != null)
        {
            NodeCollection.Clear();
            NodeCollection = null;
        }
        if (ConnectorCollection != null)
        {
            ConnectorCollection.Clear();
            ConnectorCollection = null;
        }
    }
    @*End:Hidden*@
}