@page "/diagram/export"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.PdfExport;
@using System.IO;
@inject IJSRuntime JS;
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample demonstrates how to export a Diagram as an image.</p>
</SampleDescription>
<ActionDescription>
    <p>
        This example shows how to export the Diagram in image formats (*.jpeg, *.png) and SVG format. Use the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramExportFormat.html" aria-label="DiagramExportFormat">DiagramExportFormat</a></code> property to specify the desired export format. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_ExportAsync_Syncfusion_Blazor_Diagram_DiagramExportFormat_Syncfusion_Blazor_Diagram_DiagramExportSettings_" aria-label="ExportAsync">ExportAsync</a></code> method enables exporting by accepting options such as file formats, export mode, and the region to export. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PageSettings.html#Syncfusion_Blazor_Diagram_PageSettings_MultiplePage" aria-label="MultiplePage">MultiplePage</a></code> property allows multi-page export control, while the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.html#Syncfusion_Blazor_Diagram_IDiagramPrintExportSettings_ClipBounds" aria-label="ClipBounds">ClipBounds</a></code> property in DiagramExportSettings defines the specific region to export.
    </p>
</ActionDescription>
@*End:Hidden*@

<div>
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <SfDiagramComponent @ref="@DiagramInstance" Height="640px"
                            Nodes="@DiagramNodes"
                            Connectors="@DiagramConnectors" Created="OnCreated">
            <PageSettings MultiplePage="true" Width="@PageWidth" Height="@PageHeight" Orientation="@orientation" ShowPageBreaks="@DisplayPageBreaks">
                <BackgroundStyle Background="white"></BackgroundStyle>
                <PageMargin Left="@MarginLeft" Right="@MarginRight" Top="@MarginTop" Bottom="@MarginBottom"></PageMargin>
            </PageSettings>
        </SfDiagramComponent>
    </div>
    @*Hidden:Lines*@
    <style>

        .texstyle {
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 45%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .texstyle1 {
            display: table;
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            position: relative;
            min-height: 1px;
        }

        .e-radio + label .e-label {
            font-size: 12px;
        }

        .e-custom {
            border-radius: 5px;
            height: 38px;
            border-color: transparent;
            width: 90px;
            font-family: 'Segoe UI';
            font-weight: normal;
            font-size: 12px;
            margin-top: 15px;
        }

        .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
            background-color: #E0E0E0;
            color: black;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-input-group.e-corner {
            border-radius: 4px;
        }
    </style>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header" style="padding-bottom:0px">
            Export Settings
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">

            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    File Format
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="120px" @bind-Enabled="IsFileEnabled" TItem="@FileFomatItem" @bind-Value="@SelectedFileFormat" ID="fileformat" PopupHeight="120" PopupWidth="150" CssClass="textboxstyle" DataSource="@FileFomatLists">
                        <DropDownListEvents TItem="FileFomatItem" TValue="string" ValueChange="@FileFormateChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Export Mode
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="120px" TItem="@ExportMode" @bind-Value="@SelectedExportMode" ID="position" PopupHeight="120" PopupWidth="150" CssClass="textboxstyle" DataSource="@ExportModeLists">
                        <DropDownListEvents TItem="ExportMode" TValue="string" ValueChange="@ExportModeChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Multiple/Single Page
                </div>
                <div class="col-xs-6">
                    <div style="padding-top: 10px">
                        <SfRadioButton Label="MultiplePage" Name="options" Value="multiple" Checked="@SelectedPageOption" @onclick="@OnMultiplePage"></SfRadioButton>
                    </div>
                    <div style="padding-top: 10px">
                        <SfRadioButton Label="SinglePage" Name="options" Value="single" Checked="@SelectedPageOption" @onclick="@OnSinglePage"></SfRadioButton>
                    </div>
                </div>
            </div>
            <div class="texstyle1" style="font-weight:bold">
                Clip
            </div>
            <div class="row" style="padding-top: 8px">

                <div class="texstyle">
                    X
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@IsClipBoundsEnabled" ValueChanged="@xvalueChanged" Value="@ClipX" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Y
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@IsClipBoundsEnabled" ValueChanged="@yvalueChanged" Value="@ClipY" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Width
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@IsClipBoundsEnabled" Value="@ClipWidth" ValueChanged="@widthvalueChanged" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Height
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@IsClipBoundsEnabled" Value="@ClipHeight" ValueChanged="@heightvalueChanged" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
        </div>
        <div class="col-xs-6" style="padding-top: 8px;margin-left:-19px">
            <SfButton OnClick="@OnExport" CssClass="e-custom">Export</SfButton>
        </div>
    </div>
    @*End:Hidden*@
</div>

@code
 {
    @*Hidden:Lines*@
    private string SelectedFileFormat { get; set; } = "PNG";
    private bool IsClipBoundsEnabled { get; set; }=false;
    private string SelectedExportMode { get; set; } = "PageSettings";
    private bool IsFileEnabled { get; set; } = true;
    private string SelectedPageOption { get; set; } = "multiple";
    private string ClipX { get; set; } = "0";
    private string ClipY { get; set; } = "0";
    private string ClipWidth { get; set; } = "0";
    private string ClipHeight { get; set; } = "0";
    private double MarginLeft { get; set; } = 0;
    private double MarginTop { get; set; } = 0;
    private double MarginRight { get; set; } = 0;
    private double MarginBottom { get; set; } = 0;
    private DiagramExportFormat ExportFormat { get; set; } = DiagramExportFormat.PNG;
    @*End:Hidden*@
    private double PageWidth { get; set; } = 410;
    private double PageHeight { get; set; } = 550;
    private bool IsMultiplePage { get; set; } = true;
    private bool DisplayPageBreaks { get; set; } = true;
    private DiagramPrintExportRegion PrintExportRegion { get; set; } = DiagramPrintExportRegion.PageSettings;
    private PageOrientation orientation = PageOrientation.Portrait;

    //Refer to diagram
    public SfDiagramComponent? DiagramInstance { get; set; }
    //Define node's collection
    public DiagramObjectCollection<Node>? DiagramNodes { get; set; }
    //Define connector's collection
    public DiagramObjectCollection<Connector>? DiagramConnectors { get; set; }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService!.IsDevice)
        {
            DiagramInstance!.FitToPage(mobileoptions);

        }
    }
    @*Hidden:Lines*@
    private void PageWidthvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        PageWidth = args.Value;
    }
    private void PageHeightvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        PageHeight = args.Value;
    }
    private void xvalueChanged(string value)
    {
        ClipX = value;
    }
    private void yvalueChanged(string value)
    {
        ClipY = value;
    }
    private void widthvalueChanged(string value)
    {
        ClipWidth = value;
    }
    private void heightvalueChanged(string value)
    {
        ClipHeight = value;
    }
    public void FileFormateChange(ChangeEventArgs<string, FileFomatItem> args)
    {
        ExportFormat = args.Value!.ToString() == "PNG" ? DiagramExportFormat.PNG : args.Value.ToString() == "JPEG" ? DiagramExportFormat.JPEG : args.Value.ToString() == "SVG" ? DiagramExportFormat.SVG : DiagramExportFormat.PNG;
    }
    public void ExportModeChange(ChangeEventArgs<string, ExportMode> args)
    {
        PrintExportRegion = args.Value!.ToString() == "PageSettings" ? DiagramPrintExportRegion.PageSettings : args.Value.ToString() == "Content" ? DiagramPrintExportRegion.Content : args.Value.ToString() == "ClipBounds" ? DiagramPrintExportRegion.ClipBounds : DiagramPrintExportRegion.PageSettings;
        if (PrintExportRegion == DiagramPrintExportRegion.Content || PrintExportRegion == DiagramPrintExportRegion.PageSettings)
        {
            ClipWidth = "0";
            ClipHeight = "0";
            ClipY = "0";
            ClipX = "0";
        }
        IsClipBoundsEnabled = PrintExportRegion.ToString() == "ClipBounds" ? true : false;

    }
    public void ContentChange(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        PrintExportRegion = DiagramPrintExportRegion.Content;
    }
    private void OnMultiplePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        IsMultiplePage = true;
    }
    private void OnSinglePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        IsMultiplePage = false;
    }
    @*End:Hidden*@
    protected override void OnInitialized()
    {

    
        DiagramNodes = new DiagramObjectCollection<Node>();
        CreateNode("sourceNode1", 80, 160, "Source document");
        CreateNode("censusNode2", 80, 260, "Census \n record");
        CreateNode("booksNode3", 80, 375, "Books and magazine");
        CreateNode("recordNode4", 270, 260, "Record template");
        CreateNode("traditionalNode5", 270, 385, "Traditional template");
        CreateNode("nontraditionalNode6", 80, 485, "Non traditional");
        CreateNode("radial1", 610, 342, "Health fitness");
        CreateNode("radial2", 610, 202, "Diet");
        CreateNode("radial3", 750, 258, "Flexibility");
        CreateNode("radial4", 730, 442, "Muscular endurance");
        CreateNode("radial5", 470, 258, "Cardiovascular strength");
        CreateNode("radial6", 490, 442, "Muscular strength");

        DiagramConnectors = new DiagramObjectCollection<Connector>();
        CreateConnector("connector1", "sourceNode1", "censusNode2");
        CreateConnector("connector2", "censusNode2", "booksNode3");
        CreateConnector("connector3", "booksNode3", "nontraditionalNode6");
        CreateConnector("connector4", "censusNode2", "recordNode4");
        CreateConnector("connector5", "booksNode3", "traditionalNode5");
        CreateConnector("connector6", "radial1", "radial2");
        CreateConnector("connector7", "radial1", "radial3");
        CreateConnector("connector8", "radial1", "radial4");
        CreateConnector("connector9", "radial1", "radial5");
        CreateConnector("connector10", "radial1", "radial6");
    }
    private void CreateNode(string id, double x, double y, string label)
    {
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = label };
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Height = 50,
            Width = 100,
            Style = new ShapeStyle() { Fill = "#90ee90", StrokeColor = "#666666" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
        };
        if (id == "radial1" || id == "radial2" || id == "radial3" || id == "radial4" || id == "radial5" || id == "radial6")
        {
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#ffb6c1", StrokeColor = "#666666" };
        }
        if (id == "radial1")
        {
            diagramNode.Height = 50;
            diagramNode.Style = new ShapeStyle() { Fill = "#fffcc8", StrokeColor = "#666666" };
        }
        if (id == "censusNode2" || id == "booksNode3")
        {
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#87ceeb", StrokeColor = "#666666" };
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Diamond };
        }
        if (id == "sourceNode1" || id == "censusNode2")
        {
            diagramNode.Annotations[0].Margin = new DiagramThickness() { Left = 15, Top = 15, Right = 15, Bottom = 15 };
        }
        DiagramNodes!.Add(diagramNode);
    }

    private void CreateConnector(string id, string sourceID, string targetID)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = sourceID,
            TargetID = targetID,
            Style = new ShapeStyle() { StrokeColor = "Black" },
        };
        DiagramConnectors!.Add(connector);
    }
    @*Hidden:Lines*@
    public class FileFomatItem
    {
        public string? Name { get; set; }
    }
    private List<FileFomatItem> FileFomatLists = new List<FileFomatItem>() {
        new FileFomatItem() { Name ="PNG"},
        new FileFomatItem() { Name ="JPEG" },
        new FileFomatItem() { Name ="SVG"},
        new FileFomatItem() { Name ="PDF"},
    };
    public class ExportMode
    {
        public string? Name { get; set; }
    }
    private List<ExportMode> ExportModeLists = new List<ExportMode>() {
        new ExportMode() { Name ="PageSettings"},
        new ExportMode() { Name ="Content" },
        new ExportMode() { Name ="ClipBounds"},

    };
    @*End:Hidden*@
    private async Task OnExport()
    {
        DiagramExportSettings print = new DiagramExportSettings();
        print.Region = PrintExportRegion;
        print.PageWidth = PageWidth;
        print.PageHeight = PageHeight;
        print.Orientation = orientation;
        print.FitToPage = !IsMultiplePage;
        print.Margin = new DiagramThickness() { Left = MarginLeft, Top = MarginTop, Right = MarginRight, Bottom = MarginBottom };
        print.ClipBounds = new DiagramRect() { X = double.Parse(ClipX), Y = double.Parse(ClipY), Width = double.Parse(ClipWidth), Height = double.Parse(ClipHeight) };
        ExportFormat = SelectedFileFormat == "PNG" ? DiagramExportFormat.PNG : SelectedFileFormat == "JPEG" ? DiagramExportFormat.JPEG : SelectedFileFormat == "SVG" ? DiagramExportFormat.SVG : DiagramExportFormat.PNG;
        if (SelectedFileFormat == "PDF")
        {
            await OnExportEntry();
        }
        else
        {
            //To export the diagram
            await DiagramInstance!.ExportAsync("diagram", ExportFormat, print);
        }
    }

    private async Task<string[]> OnExportEntry()
    {
        DiagramExportSettings print = new DiagramExportSettings();
        print.Region = PrintExportRegion;
        print.PageWidth = PageWidth;
        print.PageHeight = PageHeight;
        print.Orientation = orientation;
        print.FitToPage = !IsMultiplePage;
        print.Margin = new DiagramThickness() { Left = MarginLeft, Top = MarginTop, Right = MarginRight, Bottom = MarginBottom };
        print.ClipBounds = new DiagramRect() { X = double.Parse(ClipX), Y = double.Parse(ClipY), Width = double.Parse(ClipWidth), Height = double.Parse(ClipHeight) };
        //To export the diagram into base64
        var images = await DiagramInstance!.ExportAsync(ExportFormat, print);
        var pdforientation = orientation == PageOrientation.Landscape ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        await ExportToPdf("diagram", pdforientation, true, images!);
        return images!;
    }

    private async Task<string> ExportToPdf(string fileName, PdfPageOrientation orientation, bool allowDownload, string[] images)
    {
        PdfDocument document = new PdfDocument();
        document.PageSettings.Orientation = orientation;
        document.PageSettings.Margins = new PdfMargins() { Left = 0, Right = 0, Top = 0, Bottom = 0 };
        string base64String;
        var dict = images;
        for (int i = 0; i < dict.Count(); i++)
        {
            base64String = dict[i];
            using (MemoryStream initialStream = new MemoryStream(Convert.FromBase64String(base64String.Split("base64,")[1])))
            {
                Stream stream = initialStream as Stream;
                PdfPage page = document.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                #pragma warning disable CA2000
                PdfBitmap image = new PdfBitmap(stream);
                #pragma warning restore CA2000
                graphics.DrawImage(image, 0, 0);
            }
        }
        using (MemoryStream memoryStream = new MemoryStream())
        {
            document.Save(memoryStream);
            memoryStream.Position = 0;
            base64String = Convert.ToBase64String(memoryStream.ToArray());
            if (allowDownload)
            {
                await JSRuntimeExtensions.InvokeAsync<string>(JS, "downloadPdf", new object[] { base64String, fileName });
                base64String = string.Empty;
            }
            else
            {
                base64String = "data:application/pdf;base64," + base64String;
            }
            document.Dispose();
        }
        return base64String;
    }



    @*Hidden:Lines*@
    public void Dispose()
    {
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }
    }
    @*End:Hidden*@
}

