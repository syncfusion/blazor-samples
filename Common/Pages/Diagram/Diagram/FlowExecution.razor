@page "/diagram/flow-execution"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
<SampleDescription>
    <p>This sample demonstrates how to retrieve and process consecutive nodes and connectors within a diagram.</p>
</SampleDescription>
<ActionDescription>
    <p>Retrieve inward and outward connections of a node using its <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_InEdges" aria-label="InEdges">InEdges</a></code> and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_OutEdges" aria-label="OutEdges">OutEdges</a></code> properties. Identify nodes connected to a specific connector using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Connector.html#Syncfusion_Blazor_Diagram_Connector_SourceID" aria-label="SourceID">SourceID</a></code> and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Connector.html#Syncfusion_Blazor_Diagram_Connector_TargetID" aria-label="TargetID">TargetID</a></code> properties of the connector. To retrieve detailed information about a node, use the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_GetObject_System_String_" aria-label="GetObject">GetObject</a></code> method of the diagram component.</p>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
    <div id="diagram-space" class="content-wrapper">
        <SfDiagramComponent Height="590px" @ref="@DiagramInstance" Nodes="@DiagramNodes" SelectionChanged="OnSelectionChanged" Connectors="@DiagramConnectors" Created="OnCreated">
            <SnapSettings @bind-Constraints="@Constraints"></SnapSettings>
        </SfDiagramComponent>
    </div>
</div>
@*Hidden:Lines*@
<div class="col-lg-3 property-section">
    <style>
        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .col-xs-7 {
            width: 298px;
            padding-left: 0px;
            padding-right: 0px;
        }

        .spacing{
            padding-top: 8px;
        }

        @@media screen and (min-width: 1200px){
            .col-xs-7{
                width: 210px;
            }

            .spacing{
                padding-top: 24px;
            }
        }

    </style>
    <div class="property-panel-header">
        Choose a flow
    </div>

    <div class="row property-panel-content">
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="None" Name="radio" Value="UnhighlightAll" @bind-Checked="IsRadiobuttoChecked" ValueChange="OnCheckedItemChange" @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming connections" Name="radio" @bind-Checked="IsRadiobuttoChecked" Value="LinksInto" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Outgoing connections" Name="radio" @bind-Checked="IsRadiobuttoChecked" Value="LinksOutOf" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming and outgoing connections" @bind-Checked="IsRadiobuttoChecked" Name="radio" Value="LinksConnected" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row spacing">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming nodes" Name="radio" @bind-Checked="IsRadiobuttoChecked" Value="NodesInto" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Outgoing nodes" Name="radio" @bind-Checked="IsRadiobuttoChecked" Value="NodesOutOf" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming and outgoing nodes" @bind-Checked="IsRadiobuttoChecked" Name="radio" Value="NodesConnected" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row spacing">
            <div class="col-xs-7">
                <SfRadioButton Label="Flow of execution" Name="radio" @bind-Checked="IsRadiobuttoChecked" Value="NodesReachable" ValueChange="OnCheckedItemChange"  @bind-Disabled="@IsDisabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
    </div>
</div>
@*End:Hidden*@

@code
{
    private int DiagramConnectorCount { get; set; }
    private string? currentButton = "NodesReachable";
    private string? IsRadiobuttoChecked { get; set; } = "NodesReachable";
    private bool IsDisabled { get; set; } = false;
    private List<Connector>? HighLightedConnector { get; set; } = new List<Connector>();
    private List<Node>? HighLightedNode { get; set; } = new List<Node>();
    private List<Connector>? ReachableConnectors { get; set; } = new List<Connector>();

    public SnapConstraints Constraints { get; set; } = SnapConstraints.None;

    // Reference to diagram
    public SfDiagramComponent? DiagramInstance { get; set; }
    // Defines diagram's nodes collection
    public DiagramObjectCollection<Node>? DiagramNodes { get; set; }
    // Defines diagram's connector collection
    public DiagramObjectCollection<Connector>? DiagramConnectors { get; set; }

    private void OnCreated()
    {
        DiagramInstance!.Select(new ObservableCollection<IDiagramObject>() { DiagramInstance.Nodes![2] });
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance.FitToPage(mobileoptions);
    }
    /// <summary>
    /// Initializing the objects
    /// </summary>
    protected override void OnInitialized()
    {
        InitDiagramModel();
    }
    private async Task OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if (DiagramInstance != null)
        {
            if (DiagramInstance.SelectionSettings!.Nodes!.Count > 0 || DiagramInstance.SelectionSettings.Connectors!.Count > 0)
            {
                IsDisabled = false;
            }
            else
            {
                IsDisabled = true;
            }
            await ApplyChanges(currentButton!);
        }
    }
    private void InitDiagramModel()
    {
        DiagramNodes = new DiagramObjectCollection<Node>();
        DiagramConnectors = new DiagramObjectCollection<Connector>();

        CreateNode("node1", 100, 125, NodeFlowShapes.Terminator, "Begin");
        CreateNode("node2", 300, 125, NodeFlowShapes.Process, "Specify collection");
        CreateNode("node3", 500, 125, NodeFlowShapes.Decision, "Particulars \n required?");
        CreateNode("node4", 730, 125, NodeFlowShapes.Process, "Specify particulars");
        CreateNode("node5", 500, 225, NodeFlowShapes.Process, "Design collection");
        CreateNode("node6", 500, 320, NodeFlowShapes.Process, "Cluster of events");
        CreateNode("node7", 500, 420, NodeFlowShapes.Process, "Start the process");
        CreateNode("node8", 730, 320, NodeFlowShapes.Process, "Record and analyze \n results");
        CreateNode("node9", 730, 420, NodeFlowShapes.Terminator, "End");

        OrthogonalSegment segment1 = new OrthogonalSegment()
        {
            Type = ConnectorSegmentType.Orthogonal,
            Length = 75,
            Direction = Direction.Bottom
        };

        CreateConnector("node1", "node2");
        CreateConnector("node2", "node3");
        CreateConnector("node3", "node4", "Yes");
        CreateConnector("node3", "node5", "No");
        CreateConnector("node5", "node6");
        CreateConnector("node6", "node7");
        CreateConnector("node8", "node6");
        CreateConnector("node7", "node9");
        CreateConnector("node4", "node5", default(string)!, segment1);
    }

    private void CreateNode(string id, double x, double y, NodeFlowShapes shape, string label)
    {
        ShapeAnnotation annotation = new ShapeAnnotation() { Content = label };

        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = 150,
            Height = 50,
            Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = shape },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { annotation },
            Style = new ShapeStyle() { Fill = "#FBF6E1", StrokeColor = "#E8DFB6", StrokeWidth = 2 }
        };
        if (id == "node3")
        {
            diagramNode.Height = 60;
        }
        DiagramNodes!.Add(diagramNode);
    }

    private void CreateConnector(string sourceId, string targetId, string label = default(string)!, OrthogonalSegment? segment = null)
    {
        Connector diagramConnector = new Connector()
        {
            ID = string.Format("connector{0}", ++DiagramConnectorCount),
            SourceID = sourceId,
            TargetID = targetId,
            Style = new ShapeStyle() { StrokeWidth = 2, StrokeColor = "#8D8D8D" },
            TargetDecorator = new DecoratorSettings()
            {
                Style = new ShapeStyle() { StrokeColor = "#8D8D8D", Fill = "#8D8D8D" }
            }
        };

        if (label != default(string))
        {
            var annotation = new PathAnnotation()
            {
                Content = label,
                Style = new TextStyle()
                {
                    Fill = "white"
                }
            };
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation>() { annotation };
        }

        if (segment != null)
        {
            diagramConnector.Type = ConnectorSegmentType.Orthogonal;
            diagramConnector.Segments = new DiagramObjectCollection<ConnectorSegment>() { segment };
        }
        DiagramConnectors!.Add(diagramConnector);
    }

    private async Task OnCheckedItemChange(ChangeArgs<string> args)
    {
        currentButton = args.Value;
        await ApplyChanges(currentButton);
    }

    public async Task ApplyChanges(string selectedButton)
    {
        DiagramInstance!.BeginUpdate();
        UnHighLight();
        switch (selectedButton)
        {
            case "LinksInto":
                LinkedConnector(false);
                break;
            case "LinksOutOf":
                LinkedConnector(true);
                break;
            case "LinksConnected":
                LinkedConnector(false);
                LinkedConnector(true);
                break;
            case "NodesInto":
                LinkedNode(false);
                break;
            case "NodesOutOf":
                LinkedNode(true);
                break;
            case "NodesConnected":
                LinkedNode(false);
                LinkedNode(true);
                break;
            case "NodesReachable":
                await ChildrenFlow();
                break;
        }
        await DiagramInstance.EndUpdateAsync();
    }

    public void LinkedConnector(bool isOutEdge)
    {
        if (DiagramInstance!.SelectionSettings!.Nodes!.Count > 0)
        {
            Node nodeId = this.DiagramInstance.SelectionSettings.Nodes[0];
            List<string> inEdges = nodeId.InEdges!;
            List<string> outEdge = nodeId.OutEdges!;
            List<string> edges = new List<string>();
            if (isOutEdge)
            {
                foreach (string s in outEdge)
                {
                    edges.Add(s);
                }
            }
            else
            {
                foreach (string s in inEdges)
                {
                    edges.Add(s);
                }
            }

            foreach (string edge in edges)
            {
                IDiagramObject obj = DiagramInstance.GetObject(edge)!;
                Connector? connector = obj as Connector;
                HighLightedConnector!.Add(connector!);
                if (connector != null)
                {
                    connector.Style!.StrokeColor = "#1413F8";
                    connector.TargetDecorator!.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.Fill = "#1413F8";
                }
            }
        }
    }

    public void LinkedNode(bool isOutEdge)
    {
        if (DiagramInstance!.SelectionSettings!.Nodes!.Count > 0)
        {
            Node nodeId = this.DiagramInstance.SelectionSettings.Nodes[0];
            List<string> inEdges = nodeId.InEdges!;
            List<string> outEdge = nodeId.OutEdges!;
            List<string> edges = new List<string>();
            if (!isOutEdge)
            {
                foreach (string s in inEdges)
                {
                    edges.Add(s);
                }
            }
            else
            {
                foreach (string s in outEdge)
                {
                    edges.Add(s);
                }
            }

            //string[] edges = await DiagramInstance.GetEdges(nodeId, isOutEdge);
            foreach (string edge in edges)
            {
                IDiagramObject obj = DiagramInstance.GetObject(edge)!;
                Connector? connector = obj as Connector;
                Node? node = null;
                if (isOutEdge)
                {
                    if (connector != null)
                    {
                        IDiagramObject obj1 = DiagramInstance.GetObject(connector.TargetID)!;
                        Node? objj = obj1 as Node;
                        node = objj;
                    }
                }
                else
                {
                    if (connector != null)
                    {
                        IDiagramObject? obj1 = DiagramInstance.GetObject(connector.SourceID) as IDiagramObject;
                        Node? objj = obj1 as Node;
                        node = objj;
                    }
                }

                HighLightedNode!.Add(node!);
                if (node != null) node.Style!.StrokeColor = "#1413F8";
            }
        }
    }

    public async Task ChildrenFlow()
    {
        if (DiagramInstance!.SelectionSettings!.Nodes!.Count > 0)
        {
            string nodeId = this.DiagramInstance.SelectionSettings.Nodes[0].ID!;
            await FindReachable(nodeId);
            if (ReachableConnectors!.Count > 0)
            {
                foreach (Connector connector in ReachableConnectors)
                {
                    HighLightedConnector!.Add(connector);
                    connector.Style!.StrokeColor = "#1413F8";
                    connector.TargetDecorator!.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.Fill = "#1413F8";
                }

                ReachableConnectors.Clear();
            }
        }
    }

    public async Task<List<Connector>> FindReachable(string nodeId)
    {
        IDiagramObject node = DiagramInstance!.GetObject(nodeId)!;
        if (node is Node nodes)
        {
            List<string> outEdge = nodes.OutEdges!;
            List<string> edges = new List<string>();
            foreach (string s in outEdge)
            {
                edges.Add(s);
            }

            foreach (string edge in edges)
            {
                IDiagramObject obj = DiagramInstance.GetObject(edge)!;
                Connector? connector = obj as Connector;
                if (ReachableConnectors!.Contains(connector!))
                {
                    continue;
                }

                if (connector != null && (connector.Annotations == null || connector.Annotations.Count == 0 || connector.Annotations[0].Content != "No"))
                {
                    ReachableConnectors!.Add(connector);
                    await FindReachable(connector.TargetID!);
                }
            }
        }
        return ReachableConnectors!;
    }

    public void UnHighLight()
    {
        foreach (Node node in HighLightedNode!)
        {
            node.Style!.StrokeColor = "#E8DFB6";
        }

        foreach (Connector connector in HighLightedConnector!)
        {
            connector.Style!.StrokeColor = "#8D8D8D";
            connector.TargetDecorator!.Style.StrokeColor = "#8D8D8D";
            connector.TargetDecorator.Style.Fill = "#8D8D8D";
        }

        HighLightedNode.Clear();
        HighLightedConnector.Clear();
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        currentButton = null;
        IsRadiobuttoChecked = null;
        if (HighLightedConnector != null)
        {
            HighLightedConnector.Clear();
            HighLightedConnector = null;
        }
        if (HighLightedNode != null)
        {
            HighLightedNode.Clear();
            HighLightedNode = null;
        }
        if (ReachableConnectors != null)
        {
            ReachableConnectors.Clear();
            ReachableConnectors = null;
        }
        DiagramInstance = null;
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }
    }
    @*End:Hidden*@
}

