@page "/diagram/local-data"

@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
<SampleDescription>
    <p>This sample demonstrates visualizing species classifications using a hierarchical tree layout algorithm, with data binding enabled through Data Manager support.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to generate a diagram from external data. Use the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DataSourceSettings.html" aria-label="DataSourceSettings">DataSourceSettings</a></code> property to map an external data source to the Diagram component. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DataSourceSettings.html#Syncfusion_Blazor_Diagram_DataSourceSettings_ID" aria-label="ID">ID</a></code> property defines a unique field in the data, while the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DataSourceSettings.html#Syncfusion_Blazor_Diagram_DataSourceSettings_ParentID" aria-label="ParentID">ParentID</a></code> property specifies the relationships among data objects.</p>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-12 control-section content-wrapper" style="width: 100%">
    <div>
        <SfDiagramComponent @ref="DiagramInstance" Created="OnCreated" Height="400px" InteractionController="@DiagramInteractions.ZoomPan" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating">
            <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
            <DataSourceSettings Id="Name" ParentId="Category" DataSource="@DataSource">
            </DataSourceSettings>
            <Layout @bind-Type="@DiagramLayoutType" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-VerticalSpacing="@VerticalSpacing">
                <LayoutMargin @bind-Left="@MarginLeft" @bind-Right="@MarginRight" @bind-Top="@MarginTop"></LayoutMargin>
            </Layout>
        </SfDiagramComponent>
    </div>
</div>

@code
{
    public LayoutType DiagramLayoutType { get; set; } = LayoutType.HierarchicalTree;
    public int HorizontalSpacing { get; set; } = 15;
    public int VerticalSpacing { get; set; } = 50;
    public double MarginLeft { get; set; } = 10;
    public double MarginRight { get; set; } = 10;
    public double MarginTop { get; set; } = 10;
    private SfDiagramComponent? DiagramInstance { get; set; }
    // Defines default values for Node object
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        if (node!.Data is System.Text.Json.JsonElement)
        {
            node.Data = System.Text.Json.JsonSerializer.Deserialize<DataModel>(node.Data.ToString()!);
        }

        DataModel? data = node.Data as DataModel;
        node.Width = 95;
        node.Height = 30;

        node.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle };
        node.Style = new ShapeStyle() { StrokeWidth = 1, Fill = "#6A51CB", StrokeColor = "#433285" };
        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                ID = "label1",
                Content = data!.Name,
                Style = new TextStyle() { Color = "White",Fill="Transparent" }
            }
        };
        node.Ports = new DiagramObjectCollection<PointPort>()
        {
            new PointPort()
            {   ID="port1",
                Offset =new DiagramPoint(){X=0,Y=0.5},
                Width=10,
                Height=10,
                Visibility = PortVisibility.Hidden,
                Style = new ShapeStyle(){ Fill="Black"}
            },
            new PointPort()
            {
                ID="port2",
                Offset =new DiagramPoint(){X=1,Y=0.5},
                Width=10,
                Height=10,
                Visibility = PortVisibility.Hidden,
                Style = new ShapeStyle(){ Fill="Black"}
            },
        };
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance!.FitToPage(mobileoptions);
    }
    // Defines default values for Connector object
    private void OnConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector)!.Type = ConnectorSegmentType.Orthogonal;
        (connector as Connector)!.TargetDecorator!.Shape = DecoratorShape.None;
        (connector as Connector)!.SourceDecorator!.Shape = DecoratorShape.None;
        (connector as Connector)!.Style = new ShapeStyle() { StrokeColor = "#4d4d4d" };
    }

    public class DataModel
    {
        public string? Name { get; set; }
        public string? Category { get; set; }
        public string? Content { get; set; }
    };

    public List<DataModel>? DataSource = new List<DataModel>()
    {
        new DataModel{ Name = "Species" },
        new DataModel{ Name = "Plants", Category = "Species" },
        new DataModel{ Name = "Fungi", Category = "Species" },
        new DataModel{ Name = "Lichens", Category = "Species" },
        new DataModel{ Name = "Animals", Category = "Species" },
        new DataModel{ Name = "Mosses", Category = "Plants" },
        new DataModel{ Name = "Ferns", Category = "Plants" },
        new DataModel{ Name = "Gymnosperms", Category = "Plants" },
        new DataModel{ Name = "Dicotyledens", Category = "Plants" },
        new DataModel{ Name = "Monocotyledens", Category = "Plants" },
        new DataModel{ Name = "Invertebrates", Category = "Animals" },
        new DataModel{ Name = "Vertebrates", Category = "Animals" },
        new DataModel{ Name = "Insects", Category = "Invertebrates" },
        new DataModel{ Name = "Molluscs", Category = "Invertebrates" },
        new DataModel{ Name = "Crustaceans", Category = "Invertebrates" },
        new DataModel{ Name = "Others", Category = "Invertebrates" },
        new DataModel{ Name = "Fish", Category = "Vertebrates" },
        new DataModel{ Name = "Amphibians", Category = "Vertebrates" },
        new DataModel{ Name = "Reptiles", Category = "Vertebrates" },
        new DataModel{ Name = "Birds", Category = "Vertebrates" },
        new DataModel{ Name = "Mammals", Category = "Vertebrates" }
    };

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (DataSource != null)
        {
            DataSource.Clear();
            DataSource = null;
        }
    }
    @*End:Hidden*@
}