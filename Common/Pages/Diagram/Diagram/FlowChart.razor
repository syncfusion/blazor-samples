
@page "/diagram/flowchart"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Inputs
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable
<SampleDescription>
    <p>This Blazor Diagram example visualizes the order processing workflow for credit card purchases using built-in flow shapes in the Syncfusion Blazor Diagram component.</p>
</SampleDescription>
<ActionDescription>
    <p>This example demonstrates how to create a basic flowchart using the Diagram component. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html" aria-label="Node">Node</a></code> class defines the various stages of the process, and the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Connector.html" aria-label="Connector">Connector</a></code> class represents the flow between stages.</p>
    <p>To simplify flowchart creation, several predefined shapes are available in the symbol palette. You can drag and drop these shapes into the drawing area, and the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SymbolPalette.Palette.html#Syncfusion_Blazor_Diagram_SymbolPalette_Palette_Symbols" aria-label="Symbols">Symbols</a></code> property allows you to add more symbols to the palette.</p>
    <p>Undo and redo functionalities are enabled in this example, with keyboard shortcuts (Ctrl+Z for undo, Ctrl+Y for redo). A search feature also allows users to find symbols by ID or search tags.</p>
    <p>The toolbar menu provides options to save and load diagrams, draw nodes and connectors, execute z-order commands, zoom in/out, and print. Additionally, alignment commands, flip actions, and pan/pointer tool toggles are available.</p>
</ActionDescription>
@*End:Hidden*@


<div class="control-section">
    @*Hidden:Lines*@
    <style>
     @@font-face {
         font-family: 'All icons Metrop';
         src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
         font-weight: normal;
         font-style: normal;
     }
     [class^="sf-icon-"], [class*=" sf-icon-"] {
     font-family: 'All icons Metrop' !important;
     speak: none;
     font-size: 55px;
     font-style: normal;
     font-weight: normal;
     font-variant: normal;
     text-transform: none;
     line-height: 1;
     -webkit-font-smoothing: antialiased;
     -moz-osx-font-smoothing: grayscale;
     }
     .sf-icon-BringForward:before { content: "\e704"; }
     .sf-icon-ConnectorMode:before { content: "\e705"; }
     .sf-icon-DistributeHorizontal:before { content: "\e729"; }
     .sf-icon-AilgnTop:before { content: "\e70b"; }
     .sf-icon-DistributeVertical:before { content: "\e70f"; }
     .sf-icon-AlignHorizontally:before { content: "\e710"; }
     .sf-icon-AlignBottom:before { content: "\e723"; }
     .sf-icon-AlignLeft:before { content: "\e72d"; }
     .sf-icon-AlignRight:before { content: "\e72f"; }
     .sf-icon-AlignVertically:before { content: "\e730"; }
     .sf-icon-BeizerLine:before { content: "\e74a"; }

     </style>
       <style>
        @@font-face {
            font-family: 'e-ddb-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        .e-ddb-icons {
            font-family: 'e-ddb-icons';
            speak: none;
            font-size: 16px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .e-basic::before {
            content: "\e726";
        }

        .e-flow::before {
            content: "\e724";
        }

        .e-connector::before {
            content: "\e725";
        }

        #container {
            display: block;
        }

        #symbolPalette {
            display: block;
        }
    </style>
    <style>
        @@font-face {
            font-family: 'e-ddb-icons1';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        .e-ddb-icons1 {
            font-family: 'e-ddb-icons1';
            speak: none;
            font-size: 16px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .sb-mobile-palette {
            width: 240px;
            height: 100%;
            float: left;
        }

        .sb-mobile-palette-bar {
            display: none;
        }

        .sb-mobile-diagram {
            width: calc(100% - 242px);
            height: 100%;
            float: left;
        }

        @@media (max-width: 550px) {
            .sb-mobile-palette {
                z-index: 19;
                position: absolute;
                display: none;
                transition: transform 300ms linear, visibility 0s linear 300ms;
                width: 30%;
                height: 100%;
            }

            .sb-mobile-palette-bar {
                display: block;
                width: 100%;
                background: #fafafa;
                padding: 14px 10px;
                border: 0.5px solid #e0e0e0;
                min-height: 54px;
            }

            .sb-mobile-diagram {
                width: 100%;
                height: 100%;
                float: left;
                left: 0px;
            }

            #palette-icon {
                font-size: 20px;
            }
        }

        .sb-mobile-palette-open {
            position: absolute;
            display: block;
            right: 15px;
        }

        .e-toggle-palette::before {
            content: "\e700"
        }
        #properties {
            width: 100%;
            float: left;
        }
    </style>
    @*End:Hidden*@
    <div style="width: 100%">
        @*Hidden:Lines*@
        <div class="sb-mobile-palette-bar">
            <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
        </div>
        @*End:Hidden*@

        <SfToolbar>
            <ToolbarEvents Clicked="@ToolbarEditorClick"></ToolbarEvents>
            <ToolbarItems>
                <ToolbarItem TooltipText="New Diagram" PrefixIcon="e-icons e-circle-add"></ToolbarItem>
                <ToolbarItem TooltipText="Open Diagram" PrefixIcon="e-icons e-folder-open"></ToolbarItem>
                <ToolbarItem TooltipText="Save Diagram" PrefixIcon="e-icons e-save"></ToolbarItem>
                <ToolbarItem TooltipText="Print Diagram" PrefixIcon="e-icons e-print"></ToolbarItem>
                <ToolbarItem>
                    <Template>
                        <SfDropDownButton IconCss="e-icons e-export">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="JPG"></DropDownMenuItem>
                                <DropDownMenuItem Text="PNG"></DropDownMenuItem>
                                <DropDownMenuItem Text="SVG"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator" Align="ItemAlign.Center"></ToolbarItem>
                <ToolbarItem TooltipText="Cut" PrefixIcon="e-icons e-cut" Disabled="@IsEnableCutButton"></ToolbarItem>
                <ToolbarItem TooltipText="Copy" PrefixIcon="e-icons e-copy" Disabled="@IsEnableCopyButton"></ToolbarItem>
                <ToolbarItem TooltipText="Paste" PrefixIcon="e-icons e-paste" Disabled="@IsEnablePasteButton"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-undo" TooltipText="Undo" Disabled="@IsEnableUndoButton"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-redo" TooltipText="Redo" Disabled="@IsEnableRedoButton"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-pan" TooltipText="Pan"> </ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-mouse-pointer" TooltipText="Select"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-trash e-icons" Disabled="IsDeleteDisable" TooltipText="Delete"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-lock" Disabled="IsLockDisable" TooltipText="Lock"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-caption e-icons" TooltipText="Text Tool"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Draw Connectors">
                    <Template>
                        <SfDropDownButton ID="btnDrawConnector" IconCss="e-btn-icon e-ddb-icons e-connector e-icons">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-menu-icon e-line e-icons" Text="Straight"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="sf-icon-ConnectorMode" Text="Orthogonal"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="sf-icon-BeizerLine" Text="Bezier"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Draw Shapes">
                    <Template>
                        <SfDropDownButton ID="btnDrawConnector1" IconCss="e-btn-icon e-shapes e-icons">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-menu-icon e-rectangle e-icons" Text="Rectangle"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-menu-icon  e-circle e-icons" Text="Ellipse"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-menu-icon e-line e-icons" Text="Polygon"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem Disabled="@IsMultipleNode" TooltipText="Align Objects">
                    <Template>
                        <SfDropDownButton ID="btnDrawConnector3" IconCss="e-icons sf-icon-AlignHorizontally tb-icons">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AlignLeft tb-icons" Text="Align Left"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AlignHorizontally tb-icons" Text="Align Center"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AlignRight tb-icons" Text="Align Right"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AilgnTop tb-icons" Text="Align Top"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AlignVertically tb-icons" Text="Align Middle"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-AlignBottom tb-icons" Text="Align Bottom"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem Disabled="@IsMultipleNode" TooltipText="Distribute Objects">
                    <Template>
                        <SfDropDownButton ID="btnDrawConnector4" IconCss="e-icons sf-icon-DistributeVertical tb-icons">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons sf-icon-DistributeVertical tb-icons e-icons e-btn-icon" CssClass="tb-item-end tb-item-space-category" Text="Distribute Objects Vertically"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons sf-icon-DistributeHorizontal tb-icons e-icons e-btn-icon" CssClass="tb-item-middle tb-item-space-category" Text="Distribute Objects Horizontally"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Order" Disabled="@IsSingleNode">
                    <Template>
                        <SfDropDownButton IconCss="e-icons e-order">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons e-send-to-back" Text="Send To Back"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-bring-to-front" Text="Bring To Front"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-send-backward" Text="Send Backward"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-bring-forward" Text="Bring Forward"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Group/Ungroup" Disabled="@IsMultipleNode">
                    <Template>
                        <SfDropDownButton IconCss="e-icons e-group-1">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons e-group-1" Text="Group"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-ungroup-1" Text="Ungroup"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Rotate" Disabled="@IsSingleNode">
                    <Template>
                        <SfDropDownButton IconCss="e-icons e-repeat">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons e-transform-right" Text="Rotate Clockwise"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-transform-left" Text="Rotate Counter-Clockwise"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Flip" Disabled="@IsSingleNode">
                    <Template>
                        <SfDropDownButton IconCss="e-icons e-flip-vertical">
                            <DropDownButtonEvents ItemSelected="@SelectedItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem IconCss="e-icons e-flip-vertical" Text="Flip Horizontal"></DropDownMenuItem>
                                <DropDownMenuItem IconCss="e-icons e-flip-horizontal" Text="Flip Vertical"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem>
                    <Template>
                        <SfDropDownButton Content="@ZoomItemDropdownContent">
                            <DropDownButtonEvents ItemSelected="@SelectedZoomItem"></DropDownButtonEvents>
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Zoom In"></DropDownMenuItem>
                                <DropDownMenuItem Text="Zoom Out"></DropDownMenuItem>
                                <DropDownMenuItem Text="Zoom to Fit"></DropDownMenuItem>
                                <DropDownMenuItem Text="Zoom to 50%"></DropDownMenuItem>
                                <DropDownMenuItem Text="Zoom to 100%"></DropDownMenuItem>
                                <DropDownMenuItem Text="Zoom to 200%"></DropDownMenuItem>
                            </DropDownMenuItems>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <div id="palette-space" class="sb-mobile-palette">
            <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" ShowSearchTextBox="true" SymbolDragPreviewSize="@SymbolPreview" Palettes="@DiagramPalettes" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent>
        </div>
        <div id="diagram-space" class="sb-mobile-diagram">
            <div class="content-wrapper" style="border: 1px solid #D7D7D7">
            <SfDiagramComponent @ref="@DiagramInstance" @bind-Connectors="@DiagramConnectors" HistoryChanged="@OnHistoryChange"  Created="OnCreated" SelectionChanged="@OnSelectionChanged" Height="687px" GetCustomTool="@GetCustomTool" @bind-Nodes="@DiagramNodes" SelectionSettings="@SelectionSettings" NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating" DragDrop="DragDropEvent" @bind-InteractionController="@DiagramTool" @bind-DrawingObject="@DiagramDrawingObject">
                <RulerSettings>
                    <HorizontalRuler>
                      </HorizontalRuler>
                    <VerticalRuler >
                      </VerticalRuler>
                </RulerSettings>
                <SnapSettings>
                        <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                        </HorizontalGridLines>
                        <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                        </VerticalGridLines>
                    </SnapSettings>
                    <PageSettings MultiplePage="true">
                    </PageSettings>
                    <ContextMenuSettings Show="true"></ContextMenuSettings>
                </SfDiagramComponent>
            </div>
        </div>
    </div>
    <div style="display: none;visibility: hidden;">
    <SfUploader @ref="@UploadFiles" ID="UploadFiles" ShowFileList="false" AllowedExtensions="@ExtensionType">
            <UploaderEvents OnUploadStart="@OnUploadFileSelected"></UploaderEvents>
            <UploaderAsyncSettings SaveUrl="http://localhost:63028/api/FileUploader/Save"
             RemoveUrl="http://localhost:63028/api/FileUploader/Remove"></UploaderAsyncSettings>
        </SfUploader>
    </div>
</div>

@code {
    private int ConnectorCount { get; set; } = 0;
    public DiagramSelectionSettings SelectionSettings { get; set; } = new DiagramSelectionSettings();
    public DiagramSize? SymbolPreview { get; set; }
    public SymbolMargin? SymbolMargin { get; set; } = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };
    public SfDiagramComponent? DiagramInstance { get; set; }
    public SfSymbolPaletteComponent? PaletteInstance { get; set; }
    public string ZoomItemDropdownContent { get; set; } = "100 %";
    public enum PdfPageOrientation
    {
        Portrait,
        Landscape
    }
    public string? data;
    public bool IsEnablePasteButton { get; set; } = true;
    public bool IsEnableCutButton { get; set; } = true;
    public bool IsEnableCopyButton { get; set; } = true;
    public bool IsEnableUndoButton { get; set; } = true;
    public bool IsEnableRedoButton { get; set; } = true;
    public string ExtensionType { get; set; } = ".json";
    public bool IsDeleteDisable { get; set; } = true;
    public bool IsLockDisable { get; set; } = true;
    public bool IsMultipleNode { get; set; } = true;
    public bool IsSingleNode { get; set; } = true;
    private IDiagramObject? DiagramDrawingObject { get; set; }
    private DiagramInteractions DiagramTool { get; set; } = DiagramInteractions.Default;
    public DiagramObjectCollection<UserHandle> UserHandles { get; set; } = new DiagramObjectCollection<UserHandle>();
    //Defines DiagramInstance's nodes collection
    private DiagramObjectCollection<Node>? DiagramNodes { get; set; } = new DiagramObjectCollection<Node>();
    //Defines Diagram's connectors collection
    private DiagramObjectCollection<Connector>? DiagramConnectors { get; set; } = new DiagramObjectCollection<Connector>();
    //Define DiagramPalettes collection
    private DiagramObjectCollection<Palette>? DiagramPalettes { get; set; } = new DiagramObjectCollection<Palette>();
    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase>? PalettesFlowShapes { get; set; } = new DiagramObjectCollection<NodeBase>();
    // Defines interval values for GridLines
    public double[]? GridLineIntervals { get; set; }
    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase>? PalettesConnectorSymbols { get; set; } = new DiagramObjectCollection<NodeBase>();
    //Reference to uploder
    public SfUploader? UploadFiles { get; set; }
    [Inject]
    protected IJSRuntime? jsRuntime { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
        PaletteInstance!.Targets = new DiagramObjectCollection<SfDiagramComponent?>
        {
            DiagramInstance
        };
    }
    List<string> undoStack = new List<string>();
    List<string> redoStack = new List<string>();

    private void OnHistoryChange(HistoryChangedEventArgs arg)
    {
        if (arg.ActionTrigger == HistoryChangedAction.CustomAction)
        {
            if (redoStack.Count > 0)
            {
                redoStack.Clear();
            }
            string entryLog = arg.EntryType.ToString();
            undoStack.Add(entryLog);
        }
        else if (arg.ActionTrigger == HistoryChangedAction.Redo && redoStack.Count > 0)
        {
            undoStack.Add(redoStack[^1]);
            redoStack.RemoveAt(redoStack.Count - 1);
        }
        else if (arg.ActionTrigger == HistoryChangedAction.Undo && undoStack.Count > 0)
        {
            redoStack.Add(undoStack[^1]);
            undoStack.RemoveAt(undoStack.Count - 1);
        }

        IsEnableUndoButton = undoStack.Count == 0;
        IsEnableRedoButton = redoStack.Count == 0;
    }

    private void DragDropEvent(DropEventArgs args)
    {
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector && connector.Tooltip != null)
        {
            connector.Tooltip = null;
            connector.Constraints &= ~ConnectorConstraints.Tooltip;
        }
    }
    private void UpdateToolbarItems()
    {
        int? nodeCount = DiagramInstance?.SelectionSettings!.Nodes!.Count;
        int? ConnectorCount = DiagramInstance?.SelectionSettings!.Connectors!.Count;
        if (nodeCount + ConnectorCount == 0)
        {
            IsEnableCopyButton = true;
            IsEnableCutButton = true;
        }
        else
        {
            IsEnableCopyButton = false;
            IsEnableCutButton = false;
        }
        if (nodeCount > 0)
        {
            IsSingleNode = false;
            IsLockDisable = false;
            IsDeleteDisable = false;

            if (nodeCount >= 2)
            {
                IsMultipleNode = false;
            }
        }
        else
        {
            IsSingleNode = true;
            IsLockDisable = true;
            IsDeleteDisable = true;
            IsMultipleNode = true;
        }
    }
    private void OnSelectionChanged(Syncfusion.Blazor.Diagram.SelectionChangedEventArgs args)
    {
        this.UpdateToolbarItems();
        if (args.NewValue!.Count > 0 && args.NewValue[0] is Node)
        {
            DiagramInstance!.SelectionSettings!.Constraints = DiagramInstance.SelectionSettings.Constraints | SelectorConstraints.UserHandle;
        }
        else if (args.NewValue.Count > 0)
        {
            DiagramInstance!.SelectionSettings!.Constraints = DiagramInstance.SelectionSettings.Constraints & ~SelectorConstraints.UserHandle;
        }
    }

    private void OnCreated()
    {
        DiagramInstance!.Select(new ObservableCollection<IDiagramObject>() { DiagramInstance.Nodes![0] });
        FitOptions options = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance.FitToPage(options);
    }

    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase? tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(DiagramInstance!);
        }
        else
        {
            tool = new AddDeleteTool(DiagramInstance!);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        Node? deleteObject = null;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings!.Nodes!.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs? args)
        {
            if (deleteObject != null)
            {
                sfDiagram.StartGroupAction();
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes!.Remove(deleteObject);
                _ = sfDiagram.EndUpdateAsync();
                sfDiagram.EndGroupAction();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }

    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector? newConnector = null;
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
            {
                ID = "OrthogonalConnector",
                SourceID = sfDiagram.SelectionSettings!.Nodes![0].ID,
                Type = ConnectorSegmentType.Orthogonal,
            };
            @*Hidden:Lines*@
#pragma warning disable BL0005
            @*End:Hidden*@
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
            @*Hidden:Lines*@
#pragma warning restore BL0005
            @*End:Hidden*@
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs? args)
        {
            base.OnMouseUp(args);
        }
    }

    protected override void OnInitialized()
    {

        GridLineIntervals = new double[] {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
    };
        InitDiagramModel();
        InitPaletteModel();

    }
    // Create Nodes and Connectors for the diagram.
    private void InitDiagramModel()
    {
        CreateNode("node1", 300, 80, NodeFlowShapes.Terminator, "Place order");
        CreateNode("node2", 300, 160, NodeFlowShapes.Process, "Start transaction");
        CreateNode("node3", 300, 240, NodeFlowShapes.Process, "Verification");
        CreateNode("node4", 300, 330, NodeFlowShapes.Decision, "Credit card valid?");
        CreateNode("node5", 300, 430, NodeFlowShapes.Decision, "Funds available?");
        CreateNode("node6", 530, 330, NodeFlowShapes.Process, "Enter payment method");
        CreateNode("node7", 300, 530, NodeFlowShapes.Process, "Complete transaction");
        CreateNode("node8", 110, 530, NodeFlowShapes.Data, "Send e-mail");
        CreateNode("node9", 475, 530, NodeFlowShapes.DirectData, "Customer \n database");
        CreateNode("node10", 300, 630, NodeFlowShapes.Terminator, "Log transaction");
        CreateNode("node11", 480, 630, NodeFlowShapes.Process, "Reconcile the entries");
        CreateConnector("node1", "node2");
        CreateConnector("node2", "node3");
        CreateConnector("node3", "node4");
        CreateConnector("node4", "node5", "Yes");
        CreateConnector("node4", "node6", "No", false, "port3", "port1");
        CreateConnector("node5", "node6", "No", false, "port3", "port4");
        CreateConnector("node5", "node7", "Yes");
        CreateConnector("node6", "node2", default(string)!, false, "port2", "port3");
        CreateConnector("node7", "node8");
        CreateConnector("node7", "node9");
        CreateConnector("node7", "node10");
        CreateConnector("node10", "node11", default(string)!, true);
    }
    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        DiagramPalettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
        {
            Width = 100,
            Height = 100
        };
        PalettesFlowShapes = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeFlowShapes.Terminator, "Terminator");
        CreatePaletteNode(NodeFlowShapes.Process, "Process");
        CreatePaletteNode(NodeFlowShapes.Decision, "Decision");
        CreatePaletteNode(NodeFlowShapes.Document, "Document");
        CreatePaletteNode(NodeFlowShapes.PreDefinedProcess, "Pre-Defined Process");
        CreatePaletteNode(NodeFlowShapes.PaperTap, "Punched Tape");
        CreatePaletteNode(NodeFlowShapes.DirectData, "Direct Data");
        CreatePaletteNode(NodeFlowShapes.SequentialData, "Sequential Data");
        CreatePaletteNode(NodeFlowShapes.Sort, "Sort");
        CreatePaletteNode(NodeFlowShapes.MultiDocument, "Multi-Document");
        CreatePaletteNode(NodeFlowShapes.Collate, "Collate");
        CreatePaletteNode(NodeFlowShapes.SummingJunction, "Summing Junction");
        CreatePaletteNode(NodeFlowShapes.Or, "OR");
        CreatePaletteNode(NodeFlowShapes.InternalStorage, "Internal Storage");
        CreatePaletteNode(NodeFlowShapes.Extract, "Extract");
        CreatePaletteNode(NodeFlowShapes.SequentialAccessStorage, "Sequential Access Storage");
        CreatePaletteNode(NodeFlowShapes.Annotation, "Annotation");
        CreatePaletteNode(NodeFlowShapes.Data, "Data");
        CreatePaletteNode(NodeFlowShapes.Card, "Card");
        CreatePaletteNode(NodeFlowShapes.Delay, "Delay");

        PalettesConnectorSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteConnector("Orthogonal With Arrow", ConnectorSegmentType.Orthogonal, DecoratorShape.Arrow);
        CreatePaletteConnector("Orthogonal", ConnectorSegmentType.Orthogonal, DecoratorShape.None);
        CreatePaletteConnector("Straight With Arrow", ConnectorSegmentType.Straight, DecoratorShape.Arrow);
        CreatePaletteConnector("Straight", ConnectorSegmentType.Straight, DecoratorShape.None);
        CreatePaletteConnector("Bezier", ConnectorSegmentType.Bezier, DecoratorShape.None);

        DiagramPalettes = new DiagramObjectCollection<Palette>()
        {
    @*Hidden:Lines*@
            #pragma warning disable BL0005
    @*End:Hidden*@
            new Palette() {Symbols = PalettesFlowShapes, Title = "Flow Shapes", ID = "FlowShapes", IconCss = "e-ddb-icons e-flow"},
            new Palette() {Symbols = PalettesConnectorSymbols, Title = "Connectors",ID="Connectors", IsExpanded = true, IconCss = "e-ddb-icons e-connector"},
    @*Hidden:Lines*@
            #pragma warning restore BL0005
    @*End:Hidden*@
    };
    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        node!.Style!.Fill = "#357BD2";
        if (!(node.ID!.StartsWith("Annotation") || node.ID.StartsWith("SequentialData")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector? connector = obj as Connector;
        connector!.Style!.Fill = "black";
        connector.Style.StrokeColor = "black";
        connector.Style.Opacity = 1;
        connector.TargetDecorator!.Style.Fill = "black";
        connector.TargetDecorator.Style.StrokeColor = "black";
    }
    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeFlowShapes flowShape, string id)
    {
        string NodeID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            NodeID = id.Replace(" ", "");
        }
        Node diagramNode = new Node()
        {
            ID = NodeID,
            Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = flowShape },
            Style = new ShapeStyle() { StrokeColor = "#757575", StrokeWidth = 1 },
                SearchTags = new List<string>() { "flow" },
        };
        if (isSpace)
        {
            diagramNode.Tooltip = new DiagramTooltip()
                {
                    Content = id,
                };
            diagramNode.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
        }
        if (id == "Terminator" || id == "Process")
        {
            diagramNode.Width = 80;
            diagramNode.Height = 40;
        }
        else if (id == "Decision" || id == "Document" || id == "PreDefined Process" ||
          id == "Punched Tape" || id == "Direct Data" || id == "MultiDocument" || id == "Data")
        {
            diagramNode.Width = 50;
            diagramNode.Height = 40;
        }
        else
        {
            diagramNode.Width = 50;
            diagramNode.Height = 50;
        }
        double oldWidth = Convert.ToDouble(diagramNode.Width);
        double oldHeight = Convert.ToDouble(diagramNode.Height);
        double ratio = 100 / oldWidth;
        diagramNode.Width = 100;
        diagramNode.Height *= ratio;
        PalettesFlowShapes!.Add(diagramNode);
    }

    // used to create a Port.
    private DiagramObjectCollection<PointPort> CreatePort()
    {
        DiagramObjectCollection<PointPort> defaultsPorts = new DiagramObjectCollection<PointPort>();
        PointPort port1 = new PointPort()
        {
            ID = "port1",
            Shape = PortShapes.Circle,
            Offset = new DiagramPoint() { X = 0, Y = 0.5 }
        };
        PointPort port2 = new PointPort()
        {
            ID = "port2",
            Shape = PortShapes.Circle,
            Offset = new DiagramPoint() { X = 0.5, Y = 0 }
        };
        PointPort port3 = new PointPort()
        {
            ID = "port3",
            Shape = PortShapes.Circle,
            Offset = new DiagramPoint() { X = 1, Y = 0.5 }
        };
        PointPort port4 = new PointPort()
        {
            ID = "port4",
            Shape = PortShapes.Circle,
            Offset = new DiagramPoint() { X = 0.5, Y = 1 }
        };
        defaultsPorts.Add(port1);
        defaultsPorts.Add(port2);
        defaultsPorts.Add(port3);
        defaultsPorts.Add(port4);
        return defaultsPorts;
    }
    // Method is used to create a Connector for the diagram.
    private void CreateConnector(string sourceId, string targetId, string label = default(string)!, bool isDashLine = false, string sport = "", string tport = "")
    {
        Connector diagramConnector = new Connector()
        {
            ID = string.Format("connector{0}", ++ConnectorCount),
            SourceID = sourceId,
            TargetID = targetId,
            SourcePortID = sport,
            TargetPortID = tport,
        };
        if (isDashLine)
        {
            diagramConnector.Style = new ShapeStyle() { StrokeDashArray = "2,2" };
        }
        if (label != default(string))
        {
            var annotation = new PathAnnotation()
            {
                Content = label,
                Style = new TextStyle() { Fill = "white" }
            };
            if ((sourceId == "node5" && targetId == "node6") || label == "Yes" || label == "No")
            {
                annotation.Height = 10;
                annotation.Width = 15;
            }
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation>() { annotation };
        }
        diagramConnector.Type = ConnectorSegmentType.Orthogonal;

        DiagramConnectors!.Add(diagramConnector);
    }
    // Method is used to create a node for the diagram.
    private void CreateNode(string id, double x, double y, NodeFlowShapes shape, string label)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = 145,
            Ports = CreatePort(),
            Height = 60,
            Style = new ShapeStyle { Fill = "#357BD2", StrokeColor = "White" },

            Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = shape },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>
        {
            new ShapeAnnotation
            {
                Content = label,
                Style = new TextStyle()
                {
                    Color="White", Fill = "transparent"
                }
            }
        }
        };
        DiagramNodes!.Add(diagramNode);
    }
    // Method is used to create a Connector for the palette.
    private void CreatePaletteConnector(string id, ConnectorSegmentType type, DecoratorShape decoratorShape)
    {
        string connectorID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            connectorID = id.Replace(" ", "");
        }
        Connector diagramConnector = new Connector()
        {
            ID = connectorID,
            Type = type,
            SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
            TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
            Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575" },
            SearchTags = new List<string>() { "connector" },
            TargetDecorator = new DecoratorSettings()
            {
                Shape = decoratorShape,
                Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575", Fill = "#757575" }
            }
        };
        if (isSpace)
        {
            diagramConnector.Tooltip = new DiagramTooltip()
                {
                    Content = id,
                };
            diagramConnector.Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip;
        }
        PalettesConnectorSymbols!.Add(diagramConnector);
    }
    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0.5);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        UserHandles.Add(deleteHandle);
        UserHandles.Add(drawHandle);
        SelectionSettings.UserHandles = UserHandles;
    }

    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
        {
            Name = name,
            Visible = true,
            Offset = offset,
            Side = direction,
            Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
        };
        if (path == "delete")
        {
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        return handle;
    }
    public async Task ShowHideSymbolPalette()
    {
        await jsRuntime!.InvokeAsync<object>("openPalette");

    }
    private async Task ToolbarEditorClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var value = args.Item.TooltipText;
        switch (value)
        {
            case "New Diagram":
                DiagramInstance!.Clear();
                SetElements();
                break;
            case "Open Diagram":
                _ = LoadDiagram();
                break;
            case "Save Diagram":
                string fileName = "Flow Chart";
                await Download(fileName);
                break;
            case "Print Diagram":
                DiagramPrintSettings print = new DiagramPrintSettings();
                print.PageWidth = 700;
                print.PageHeight = 1200;
                await DiagramInstance!.PrintAsync(print);
                break;
            case "Cut":
                DiagramInstance!.Cut();
                IsEnablePasteButton = false;
                break;
            case "Copy":
                DiagramInstance!.Copy();
                IsEnablePasteButton = false;
                break;
            case "Paste":
                DiagramInstance!.Paste();
                break;
            case "Undo":
                DiagramInstance!.Undo();
                this.UpdateToolbarItems();
                break;
            case "Redo":
                DiagramInstance!.Redo();
                break;
            case "Pan":
                DiagramTool = DiagramInteractions.ZoomPan;
                break;
            case "Select":
                DiagramTool = DiagramInteractions.SingleSelect | DiagramInteractions.MultipleSelect;
                break;
            case "Delete":
                DiagramInstance!.Delete();
                break;
            case "Lock":
                OnLockItemClick();
                break;
            case "Text Tool":
                DiagramDrawingObject = new Node() { Shape = new TextShape() { Type = NodeShapes.Text } };
                DiagramTool = DiagramInteractions.ContinuousDraw;
                break;
        }
    }
    private void SelectedItem(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        var value = args.Item.Text;
        switch (value)
        {
            case "Send To Back":
                DiagramInstance!.SendToBack();
                break;
            case "Bring To Front":
                DiagramInstance!.BringToFront();
                break;
            case "Bring Forward":
                DiagramInstance!.BringForward();
                break;
            case "Send Backward":
                DiagramInstance!.SendBackward();
                break;
            case "Group":
                if (DiagramInstance!.SelectionSettings!.Nodes!.Count + DiagramInstance.SelectionSettings.Connectors!.Count > 1)
                {
                    DiagramInstance.Group();
                }
                break;
            case "Ungroup":
                if (DiagramInstance!.SelectionSettings!.Nodes!.Count + DiagramInstance.SelectionSettings.Connectors!.Count > 0)
                {
                    DiagramInstance.Ungroup();
                }
                IsSingleNode = true;
                IsLockDisable = true;
                IsDeleteDisable = true;
                IsMultipleNode = true;
                break;
            case "Flip Horizontal":
                 FlipAll(FlipDirection.Horizontal);
                break;
            case "Flip Vertical":
               FlipAll(FlipDirection.Vertical);
                break;
            case "Rotate Clockwise":
                DiagramInstance!.Rotate(DiagramInstance.SelectionSettings, 90);
                break;
            case "Rotate Counter-Clockwise":
                DiagramInstance!.Rotate(DiagramInstance.SelectionSettings, -90);
                break;
            case "JPG":
            case "PNG":
            case "SVG":
                _ = Export(value);
                break;
            case "Straight":
                DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Straight };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Orthogonal":
                DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Orthogonal };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Bezier":
                DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Bezier };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Rectangle":
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle } };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Ellipse":
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse } };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Polygon":
                DiagramDrawingObject = new Node() { Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Polygon } };
                DiagramTool = DiagramInteractions.DrawOnce;
                break;
            case "Align Left":
                DiagramInstance!.SetAlign(AlignmentOptions.Left);
                break;
            case "Align Center":
                DiagramInstance!.SetAlign(AlignmentOptions.Center);
                break;
            case "Align Right":
                DiagramInstance!.SetAlign(AlignmentOptions.Right);
                break;
            case "Align Top":
                DiagramInstance!.SetAlign(AlignmentOptions.Top);
                break;
            case "Align Middle":
                DiagramInstance!.SetAlign(AlignmentOptions.Middle);
                break;
            case "Align Bottom":
                DiagramInstance!.SetAlign(AlignmentOptions.Bottom);
                break;
            case "Distribute Objects Vertically":
                DiagramInstance!.SetDistribute(DistributeOptions.BottomToTop);
                break;
            case "Distribute Objects Horizontally":
                DiagramInstance!.SetDistribute(DistributeOptions.RightToLeft);
                break;
        }
    }
    private void SelectedZoomItem(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        var value = args.Item.Text;
        var currentZoom = DiagramInstance!.ScrollSettings!.CurrentZoom;
        switch (value)
        {
            case "Zoom In":
            case "Zoom Out":
                var ZoomFactor = 0.2;
                ZoomFactor = value == "Zoom Out" ? 1 / (1 + ZoomFactor) : (1 + ZoomFactor);
                DiagramInstance.Zoom(ZoomFactor, null);
                break;
            case "Zoom to Fit":
                FitOptions fitoption = new FitOptions()
                    {
                        Mode = FitMode.Both,
                        Region = DiagramRegion.PageSettings,
                    };
                DiagramInstance.FitToPage(fitoption);
                break;
            case "Zoom to 50%":
                ZoomFactor = 0.5 / currentZoom;
                DiagramInstance.Zoom(ZoomFactor, null);
                break;
            case "Zoom to 100%":
                ZoomFactor = 1 / currentZoom;
                DiagramInstance.Zoom(ZoomFactor, null);
                break;
            case "Zoom to 200%":
                ZoomFactor = 2 / currentZoom;
                DiagramInstance.Zoom(ZoomFactor, null);
                break;
        }
        ZoomItemDropdownContent = FormattableString.Invariant($"{Math.Round(DiagramInstance.ScrollSettings.CurrentZoom * 100)}") + "%";
    }
    public void SetElements()
    {
        IsSingleNode = true;
        IsLockDisable = true;
        IsDeleteDisable = true;
        IsMultipleNode = true;
        DiagramInstance!.ClearHistory();
        DiagramInstance.ResetZoom();
        StateHasChanged();
    }
    public async Task Download(string fileName)
    {
        string data = DiagramInstance!.SaveDiagram();
        await FileUtil.SaveAs(jsRuntime!, data, fileName);
    }
    private async Task Export(string? value)
    {
        DiagramExportSettings export = new DiagramExportSettings();
        export.FitToPage = true;
        if(value=="JPG")
            await DiagramInstance!.ExportAsync("Diagram", DiagramExportFormat.JPEG, export);
        else if(value=="PNG")
            await DiagramInstance!.ExportAsync("DiagramInstance", DiagramExportFormat.PNG, export);
        else if(value=="SVG")
            await DiagramInstance!.ExportAsync("Diagram", DiagramExportFormat.SVG, export);
    }
    public async Task LoadDiagram()
    {
        DiagramInstance!.BeginUpdate();
        ExtensionType = ".json";
        await FileUtil.Click(jsRuntime!);
        await DiagramInstance.EndUpdateAsync();
    }
    public async Task OnUploadFileSelected(UploadingEventArgs args)
    {
        if (args.FileData!.Type == "json")
        {
            string json = await FileUtil.LoadFile(jsRuntime!, args.FileData);
            json = json.Replace(System.Environment.NewLine, string.Empty);
            await DiagramInstance!.LoadDiagramAsync(json.ToString());
            FitOptions options = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
            DiagramInstance.FitToPage(options);
            await UploadFiles!.ClearAllAsync();
        }
    }
    public void FlipAll(FlipDirection direction)
    {
        if (DiagramInstance!.SelectionSettings!.Nodes!.Count > 0)
        {
            for (int i = 0; i < DiagramInstance.SelectionSettings.Nodes.Count; i++)
            {
                DiagramInstance.SelectionSettings.Nodes[i].FlipMode = DiagramFlipMode.All;
                if (DiagramInstance.SelectionSettings.Nodes[i].Flip.HasFlag(direction))
                {
                    DiagramInstance.SelectionSettings.Nodes[i].Flip &= ~direction;
                }
                else
                {
                    DiagramInstance.SelectionSettings.Nodes[i].Flip |= direction;
                }
            }
        }
    }

    private void ScrollChanged(ScrollChangedEventArgs args)
    {
        ZoomItemDropdownContent = FormattableString.Invariant($"{Math.Round(DiagramInstance!.ScrollSettings!.CurrentZoom * 100)}") + "%";
    }
    private void OnLockItemClick()
    {
#pragma warning disable CS0219
        bool isLock = false;
#pragma warning restore CS0219
        bool isPreventPropertyChange = false;
        for (var i = 0; i < DiagramInstance!.SelectionSettings!.Nodes!.Count; i++)
        {
            var node = DiagramInstance.SelectionSettings.Nodes[i];
            if (node.Constraints.HasFlag(NodeConstraints.Default))
            {
                if (!isPreventPropertyChange)
                {
                    node.Constraints = node.Constraints & ~(NodeConstraints.Resize | NodeConstraints.Drag | NodeConstraints.Rotate);
                    node.Constraints = node.Constraints | NodeConstraints.ReadOnly;
                    if (node.Ports!.Count > 0)
                    {
                        for (var k = 0; k < node.Ports.Count; k++)
                        {
                            var port = node.Ports[k];
                            port.Constraints = port.Constraints & ~(PortConstraints.Draw);
                        }
                    }
                    isLock = true;
                }
            }
            else
            {
                if (!isPreventPropertyChange)
                {
                    node.Constraints = NodeConstraints.Default;
                    if (node.Ports!.Count > 0)
                    {
                        for (var k = 0; k < node.Ports.Count; k++)
                        {
                            var port = node.Ports[k];
                            port.Constraints = port.Constraints | PortConstraints.Draw;
                        }
                    }
                }
                else
                    isLock = true;
            }
        }
        for (var j = 0; j < DiagramInstance.SelectionSettings.Connectors!.Count; j++)
        {
            var connector = DiagramInstance.SelectionSettings.Connectors[j];
            if (connector.Constraints.HasFlag(ConnectorConstraints.Default))
            {
                if (!isPreventPropertyChange)
                {
                    connector.Constraints = (connector.Constraints & ~(ConnectorConstraints.DragSourceEnd
            | ConnectorConstraints.DragTargetEnd | ConnectorConstraints.DragSegmentThumb)) | ConnectorConstraints.ReadOnly;
                    isLock = true;
                }
            }
            else
            {
                if (!isPreventPropertyChange)
                {
                    connector.Constraints = ConnectorConstraints.Default;
                }
                else
                    isLock = true;
            }
        }
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }
        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        DiagramInstance = null;
        PaletteInstance = null;
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }
#pragma warning disable BL0005
        if (DiagramPalettes != null)
        {
            for (int i = 0; i < DiagramPalettes.Count; i++)
            {
                DiagramPalettes[i].ID = null;
                DiagramPalettes[i].Title = null;
                DiagramPalettes[i].IconCss = null;
                if (DiagramPalettes[i].Symbols != null)
                {
                    for (int j = 0; j < DiagramPalettes[i].Symbols.Count; j++)
                    {
                        DiagramPalettes[i].Symbols[j] = null;
                    }
                    DiagramPalettes[i].Symbols.Clear();
                    DiagramPalettes[i].Symbols = null;
                }
            }
            DiagramPalettes.Clear();
            DiagramPalettes = null;
        }
#pragma warning restore BL0005
        if (PalettesFlowShapes != null)
        {
            PalettesFlowShapes.Clear();
            PalettesFlowShapes = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }
        if (PalettesConnectorSymbols != null)
        {
            PalettesConnectorSymbols.Clear();
            PalettesConnectorSymbols = null;
        }
    }
    @*End:Hidden*@
}
