@page "/diagram/TournamentResult"

@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@inject NavigationManager NavigationManager

<SampleDescription>
    <p>
        This sample interactively visualizes a UEFA Champions League tournament bracket using the Syncfusion<sup>Â®</sup> Blazor Diagram component, showcasing team progression through match results, winning teams, flip-card animations, and informative tooltip.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This visually engaging UEFA Champions League bracket uses custom HTML nodes to display match details, including teams and scores. Flip-card animations reveal match results, clearly highlighting the winning teams. Animated connectors dynamically illustrate team progression, while interactive tooltip provide comprehensive match statistics. The ultimate champion is distinctly marked with a custom node and dynamic animations.
    </p>
</ActionDescription>
@*End:Hidden*@
<style>
    .tournament-result-container {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        height: 100vh;
        overflow: hidden;
        font-family: 'Verdana', sans-serif;
        background: linear-gradient(135deg, #001122 0%, #003366 25%, #004488 50%, #003366 75%, #001122 100%);
        position: relative;
    }

        /* UEFA Champions League themed animated background */
        .tournament-result-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 20% 80%, rgba(0, 51, 102, 0.6) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%), radial-gradient(circle at 40% 40%, rgba(0, 68, 136, 0.4) 0%, transparent 50%);
            pointer-events: none;
        }

        /* UEFA Stars Pattern */
        .tournament-result-container::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: radial-gradient(2px 2px at 20px 30px, rgba(255,255,255,0.3), transparent), radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.2), transparent), radial-gradient(1px 1px at 90px 40px, rgba(255,255,255,0.4), transparent), radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.3), transparent);
            background-repeat: repeat;
            background-size: 150px 100px;
            animation: starTwinkle 8s ease-in-out infinite;
            pointer-events: none;
        }

    @@keyframes starTwinkle {
        0%, 100% {
            opacity: 0.3;
        }

        50% {
            opacity: 0.8;
        }
    }

    .tournament-result-container .sample-section {
        height: 100vh;
        display: flex;
        flex-direction: column;
        position: relative;
        z-index: 1;
    }

    .tournament-result-container #footballResultDiagram {
        flex: 1;
        width: 100%;
        background: transparent;
    }

    .tournament-result-container #footballResultDiagram_content {
        overflow: hidden !important;
        animation: zoomOutEffect 3s ease-out;
    }

    @@keyframes zoomOutEffect {
        0% {
            transform: scale(1.3);
            opacity: 0.8;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    /* Enhanced Tournament node styles with UEFA theme */
    .tournament-result-container .tournament-node {
        cursor: pointer;
        width: 100%;
        height: 100%;
        border-radius: 12px;
        overflow: hidden;
        position: relative;
        min-width: 110px;
        min-height: 55px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(255, 255, 255, 0.2);
    }

        .tournament-result-container .tournament-node:hover {
            transform: translateY(-8px) scale(1.08);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.6), 0 0 40px rgba(0, 102, 204, 0.5), inset 0 1px 0 rgba(255, 255, 255, 0.3);
            transition: all .4s cubic-bezier(0.4, 0, 0.2, 1);
            border-color: rgba(0, 102, 204, 0.8);
        }

    /* Enhanced flip card animation */
    .tournament-result-container .flip-card {
        width: 100%;
        height: 100%;
        position: relative;
        perspective: 1200px;
    }

    .tournament-result-container .flip-card-inner {
        width: 100%;
        height: 100%;
        transition: transform 0.9s cubic-bezier(0.4,0,0.2,1);
        transform-style: preserve-3d;
        position: relative;
        transform: rotateY(0deg); /* Start showing front */
        animation: delayedFlip 0.6s cubic-bezier(0.4,0,0.2,1) both; /* Reduced from 0.9s */
    }

        .tournament-result-container .flip-card-inner .flip-card-front,
        .tournament-result-container .flip-card-inner .flip-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            backface-visibility: hidden;
            display: flex;
            flex-direction: column;
            justify-content: center;
            overflow: hidden;
        }

        .tournament-result-container .flip-card-inner .flip-card-front {
            z-index: 2;
            background: linear-gradient(135deg, rgba(0, 51, 102, 0.9) 0%, rgba(0, 68, 136, 0.9) 100%);
        }

        .tournament-result-container .flip-card-inner .flip-card-back {
            transform: rotateY(180deg);
            z-index: 1;
            background: linear-gradient(135deg, rgba(0, 51, 102, 0.95) 0%, rgba(0, 68, 136, 0.95) 100%);
        }

    /* UEFA Champions League themed team sections */
    .tournament-result-container .team-section {
        height: 50%;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        font-weight: 700;
        font-size: 14px;
        color: white;
        padding: 0 15px;
        text-shadow: 0 2px 6px rgba(0, 0, 0, 0.7);
        position: relative;
        border: none;
        background: linear-gradient(90deg, rgba(255,255,255,0.1) 0%, transparent 100%);
    }

        .tournament-result-container .team-section .team-name {
            flex: 1 1 auto;
            text-align: left;
            font-weight: 800;
            letter-spacing: 0.8px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding-right: 40px;
            text-transform: uppercase;
        }

        .tournament-result-container .team-section .team-score.score-right {
            position: absolute;
            right: 15px;
            font-size: 16px;
            font-weight: 900;
            color: #fff !important;
            text-shadow: 0 2px 4px rgba(0,0,0,0.5);
            min-width: 25px;
            text-align: right;
            z-index: 2;
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
        }

        /* Enhanced Winner highlighting with UEFA colors */
        .tournament-result-container .team-section.winner {
            background: linear-gradient(135deg, #FFD700 0%, #FFA500 50%, #FF8C00 100%) !important;
            color: #1a1a1a !important;
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.6), inset 0 2px 0 rgba(255, 255, 255, 0.4), inset 0 -1px 0 rgba(0, 0, 0, 0.2);
            font-weight: 900;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            animation: winnerGlow 2s ease-in-out infinite alternate;
        }

            .tournament-result-container .team-section.winner .team-name,
            .tournament-result-container .team-section.winner .team-score {
                text-shadow: 0 1px 2px rgba(67, 55, 0, 0.5);
                font-weight: 900;
            }

    @@keyframes winnerGlow {
        0% {
            box-shadow: 0 0 20px rgba(255, 215, 0, 0.6), inset 0 2px 0 rgba(255, 255, 255, 0.4);
        }

        100% {
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.9), inset 0 2px 0 rgba(255, 255, 255, 0.6);
        }
    }

    /* UEFA themed gradient colors for different rounds */
    .tournament-result-container .round16-node .team-section.team-top {
        background: linear-gradient(135deg, #003366 0%, #0066cc 100%);
    }

    .tournament-result-container .round16-node .team-section.team-bottom {
        background: linear-gradient(135deg, #004488 0%, #0077dd 100%);
    }

    .tournament-result-container .quarterfinal-node .team-section.team-top {
        background: linear-gradient(135deg, #001a33 0%, #004080 100%);
    }

    .tournament-result-container .quarterfinal-node .team-section.team-bottom {
        background: linear-gradient(135deg, #002244 0%, #0055aa 100%);
    }

    .tournament-result-container .semifinal-node .team-section.team-top {
        background: linear-gradient(135deg, #000d1a 0%, #003366 100%);
    }

    .tournament-result-container .semifinal-node .team-section.team-bottom {
        background: linear-gradient(135deg, #001122 0%, #004488 100%);
    }

    .tournament-result-container .final-node .team-section.team-top {
        background: linear-gradient(135deg, #000611 0%, #002244 100%);
    }

    .tournament-result-container .final-node .team-section.team-bottom {
        background: linear-gradient(135deg, #000a1a 0%, #003366 100%);
    }

    /* Enhanced Champion Node with UEFA styling */
    .tournament-result-container .champion-node {
        background: linear-gradient(135deg, #001122 0%, #003366 50%, #0066cc 100%);
        border: 4px solid #FFD700;
        border-radius: 20px;
        position: relative;
        overflow: visible;
        animation: championGlow 3s ease-in-out infinite;
        box-shadow: 0 20px 50px rgba(0, 102, 204, 0.5), 0 0 40px rgba(255, 215, 0, 0.4), inset 0 2px 0 rgba(255, 255, 255, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .tournament-result-container .champion-container {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 25px 20px;
    }

    .tournament-result-container .champion-badge {
        background: linear-gradient(135deg, #FFD700 0%, #FFA500 50%, #FF8C00 100%);
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), inset 0 2px 0 rgba(255, 255, 255, 0.6), 0 0 20px rgba(255, 215, 0, 0.5);
        flex-shrink: 0;
        border: 3px solid #fff;
    }

    .tournament-result-container .champion-trophy {
        font-size: 38px;
        animation: trophyBounce 2s ease-in-out infinite;
        transform-origin: center bottom;
    }

    @@keyframes trophyBounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0) scale(1);
        }

        40% {
            transform: translateY(-10px) scale(1.1);
        }

        60% {
            transform: translateY(-5px) scale(1.05);
        }
    }

    .tournament-result-container .champion-title {
        font-family: 'Verdana', sans-serif;
        font-size: 18px;
        font-weight: 900;
        color: #FFD700;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
        margin-bottom: 10px;
        letter-spacing: 3px;
        line-height: 1.2;
        text-transform: uppercase;
    }

    .tournament-result-container .champion-team {
        font-family: 'Verdana', sans-serif;
        font-size: 20px;
        font-weight: 900;
        color: #ffffff;
        text-shadow: 0 2px 6px rgba(0, 0, 0, 0.8);
        letter-spacing: 1.5px;
        line-height: 1.1;
        margin-bottom: 6px;
        text-transform: uppercase;
    }

    .tournament-result-container .champion-year {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.9);
        font-weight: 700;
        letter-spacing: 2px;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.6);
    }

    .tournament-result-container .team-score.score-right {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Enhanced Champion Animations */
    @@keyframes championGlow {
        0%, 100% {
            box-shadow: 0 20px 50px rgba(0, 102, 204, 0.5), 0 0 40px rgba(255, 215, 0, 0.4), inset 0 2px 0 rgba(255, 255, 255, 0.3);
            border-color: #FFD700;
        }

        50% {
            box-shadow: 0 25px 60px rgba(0, 102, 204, 0.7), 0 0 60px rgba(255, 215, 0, 0.7), inset 0 2px 0 rgba(255, 255, 255, 0.5);
            border-color: #FFA500;
        }
    }

    /* Progressive flip animation delays */
    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(1) {
        animation-delay: 0.3s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(2) {
        animation-delay: 0.4s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(3) {
        animation-delay: 0.5s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(4) {
        animation-delay: 0.6s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(5) {
        animation-delay: 0.7s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(6) {
        animation-delay: 0.8s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(7) {
        animation-delay: 0.9s;
    }

    .tournament-result-container .round16-node .flip-card-inner:nth-of-type(8) {
        animation-delay: 1.0s;
    }

    .tournament-result-container .quarterfinal-node .flip-card-inner:nth-of-type(1) {
        animation-delay: 1.3s;
    }

    .tournament-result-container .quarterfinal-node .flip-card-inner:nth-of-type(2) {
        animation-delay: 1.4s;
    }

    .tournament-result-container .quarterfinal-node .flip-card-inner:nth-of-type(3) {
        animation-delay: 1.5s;
    }

    .tournament-result-container .quarterfinal-node .flip-card-inner:nth-of-type(4) {
        animation-delay: 1.6s;
    }

    .tournament-result-container .semifinal-node .flip-card-inner:nth-of-type(1) {
        animation-delay: 1.9s;
    }

    .tournament-result-container .semifinal-node .flip-card-inner:nth-of-type(2) {
        animation-delay: 2.0s;
    }

    .tournament-result-container .final-node .flip-card-inner {
        animation-delay: 2.6s;
    }

    .tournament-result-container .champion-node .champion-info {
        animation: championReveal 0.8s ease-in-out 2.8s both; /* Reduced from 5.2s */
    }

    @@keyframes championReveal {
        0% {
            opacity: 0;
            transform: scale(0.8);
        }

        100% {
            opacity: 1;
            transform: scale(1);
        }
    }

    @@keyframes delayedFlip {
        0% {
            transform: rotateY(0deg);
        }

        100% {
            transform: rotateY(180deg);
        }
    }

    .tournament-result-container .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #FFD700;
        font-size: 22px;
        letter-spacing: 2px;
        font-family: 'Verdana', sans-serif;
        text-align: center;
        text-shadow: 0 3px 6px rgba(0,0,0,0.7);
        font-weight: 700;
        text-transform: uppercase;
    }

    /* Enhanced node decorations */
    .tournament-result-container .tournament-node::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        z-index: 1;
    }

    /* Tooltip Styles */
    /* Hide tooltip background */
    .e-tooltip-wrap.e-popup {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
    }

        .e-tooltip-wrap.e-popup.e-diagram-tooltip:has(.football-results-tooltip-content) {
            background-color: transparent !important;
            border: none !important;
            box-shadow: none !important;
        }

    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-tip-content {
        padding: 0px !important;
    }

    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-inner.e-tip-right,
    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-inner.e-tip-left,
    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-inner.e-tip-bottom,
    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-inner.e-tip-top {
        color: #001122 !important;
    }

    Outer arrow tips for different positions - only for football tooltips
    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-outer.e-tip-top {
        border-bottom-color: #001122 !important;
    }

    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-outer.e-tip-bottom {
        border-top-color: #001122 !important;
    }

    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-outer.e-tip-left {
        border-right-color: #001122 !important;
    }

    .e-tooltip-wrap:has(.football-results-tooltip-content) .e-arrow-tip-outer.e-tip-right {
        border-left-color: #001122 !important;
    }

    /* Responsive design */
    @@media (max-width: 1200px) {
        .tournament-result-container .tournament-node {
            border-radius: 12px;
        }

        .tournament-result-container .team-section {
            font-size: 10px;
            padding: 0 12px;
        }

        .tournament-result-container .champion-title {
            font-size: 13px;
        }

        .tournament-result-container .champion-team {
            font-size: 16px;
        }

        .tournament-result-container .champion-badge {
            width: 50px;
            height: 50px;
        }

        .tournament-result-container .champion-trophy {
            font-size: 24px;
        }
    }

    @@media (max-width: 768px) {
        .tournament-result-container .team-section {
            font-size: 9px;
            padding: 0 10px;
        }

            .tournament-result-container .team-section .team-score.score-right {
                font-size: 14px;
                right: 10px;
            }

        .tournament-result-container .champion-title {
            font-size: 12px;
        }

        .tournament-result-container .champion-team {
            font-size: 15px;
        }

        .tournament-result-container .champion-badge {
            width: 45px;
            height: 45px;
        }

        .tournament-result-container .champion-trophy {
            font-size: 22px;
        }
    }

    .e-diagram {
        background-color: transparent !important;
    }

    /* Define the stroke color change animation */
    @@keyframes pathStrokeActivate {
        0% {
            stroke: #0066cc; /* Original color */
        }

        100% {
            stroke: #d2e8ff; /* Target color */
        }
    }

    /* Round of 16 to Quarter-final paths - matching flip delays */
    #quarter1_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.3s both;
    }

    #quarter1_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.4s both;
    }

    #quarter2_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.5s both;
    }

    #quarter2_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.6s both;
    }

    #quarter3_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.7s both;
    }

    #quarter3_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.8s both;
    }

    #quarter4_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 0.9s both;
    }

    #quarter4_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.0s both;
    }

    /* Quarter-final to Semi-final paths - matching flip delays */
    #semi1_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.3s both;
    }

    #semi1_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.4s both;
    }

    #semi2_1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.5s both;
    }

    #semi2_2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.6s both;
    }

    /* Semi-final to Final paths - matching flip delays */
    #final1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 1.9s both;
    }

    #final2_path {
        animation: pathStrokeActivate 0.3s ease-in-out 2.0s both;
    }

    /* Final to Champion path - matching flip delay */
    #champ1_path {
        animation: pathStrokeActivate 0.3s ease-in-out 2.6s both;
    }

    /* Optional: Add hover effects for enhanced interactivity */
    .tournament-result-container svg path:hover {
        stroke-width: 3;
        transition: stroke-width 0.2s ease;
    }

    .e-tooltip-wrap {
        border-radius: 12px !important;
    }
</style>

<div class="tournament-result-container">
    <div class="sample-section">
        <SfDiagramComponent ID="footballResultDiagram" @ref="Diagram" Width="100%" Height="100%" @bind-Nodes="@nodes" @bind-Connectors="@connectors" InteractionController="DiagramInteractions.ZoomPan" Constraints="@Constraints"
                            ConnectorCreating="@OnConnectorCreating" NodeCreating="@OnNodeCreating" Created="OnCreated">
            <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
            <DiagramTemplates>
                <NodeTemplate>
                    @{
                        if (context is Node node)
                        {
                            var data = GetTournamentData(node.ID!);

                            if (node.ID == "champion")
                            {
                                <div class="tournament-node champion-node">
                                    <div class="champion-container">
                                        <div class="champion-badge">
                                            <div class="champion-trophy">ð</div>
                                        </div>
                                        <div class="champion-title">CHAMPION</div>
                                        <div class="champion-team">@(data.Winner ?? "TBD")</div>
                                        <div class="champion-year">@(data.Year ?? "2024")</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                // Determine winner classes for styling
                                var team1Class = data.Winner == data.Team1 ? "winner" : "";
                                var team2Class = data.Winner == data.Team2 ? "winner" : "";

                                // Get round display name
                                var roundDisplayName = data.MatchType switch
                                {
                                    "round16" => "ROUND OF 16",
                                    "quarterfinal" => "QUARTER-FINAL",
                                    "semifinal" => "SEMI-FINAL",
                                    "final" => "FINAL",
                                    _ => "MATCH"
                                };

                                <div class="tournament-node @(data.MatchType)-node">
                                    <div class="flip-card">
                                        <div class="flip-card-inner">
                                            <div class="flip-card-front">
                                                <div style="height: 100%; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, rgba(0, 51, 102, 0.9) 0%, rgba(0, 68, 136, 0.9) 100%);">
                                                    <div style="text-align: center; color: #cbe5feff; font-weight: 600; font-size: 16px; letter-spacing: 2px; text-shadow: 0 2px 4px rgba(0, 14, 87, 0.7);">
                                                        @roundDisplayName
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="flip-card-back">
                                                <div class="team-section @team1Class">
                                                    <span class="team-name">@(data.Team1 ?? "TBD")</span>
                                                    <span class="team-score score-right">@(data.Score1?.ToString() ?? "")</span>
                                                </div>
                                                <div class="team-section @team2Class">
                                                    <span class="team-name">@(data.Team2 ?? "TBD")</span>
                                                    <span class="team-score score-right">@(data.Score2?.ToString() ?? "")</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </NodeTemplate>
                <TooltipTemplate>
                    @{
                        if (context is Node node && node.ID != "champion")
                        {
                            var data = GetTournamentData(node.ID!);
                            if (data != null)
                            {
                                // Format match type display text
                                var matchTypeDisplay = data.MatchType switch
                                {
                                    "round16" => "ROUND OF 16",
                                    "quarterfinal" => "QUARTER-FINAL",
                                    "semifinal" => "SEMI-FINAL",
                                    "final" => "FINAL",
                                    "champion" => "CHAMPION",
                                    _ => data.MatchType?.ToUpper() ?? "MATCH"
                                };

                                // Check for penalty shootout data
                                var hasShootout = !string.IsNullOrEmpty(data.ShootoutTeam1) && !string.IsNullOrEmpty(data.ShootoutTeam2);

                                // Apply winner styling
                                var team1WinnerStyle = data.Winner == data.Team1 ? "color: #FFD700; font-weight: bold;" : "";
                                var team2WinnerStyle = data.Winner == data.Team2 ? "color: #FFD700; font-weight: bold;" : "";

                                <div class="football-results-tooltip-content" style="background: linear-gradient(135deg, #001122 0%, #003366 100%); border-radius: 12px; padding: 16px; color: white; font-family: 'Verdana', sans-serif; min-width: 300px; max-width: 380px; box-shadow: 0 10px 30px rgba(0,0,0,0.5); position: relative; z-index: 1000;">
                                    <div style="text-align: center;">
                                        <div style="font-size: 11px; font-weight: bold; color: #FFD700; margin-bottom: 6px; letter-spacing: 1px;">UEFA CHAMPIONS LEAGUE</div>
                                        <div style="font-size: 10px; color: #87CEEB; margin-bottom: 12px; font-weight: 600;">@matchTypeDisplay</div>
                                        <div style="background: rgba(255,255,255,0.1); border-radius: 8px; padding: 12px; margin-bottom: 10px;">
                                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                                <div style="flex: 1; text-align: left;">
                                                    <div style="font-size: 14px; font-weight: bold; @team1WinnerStyle">@(data.Team1 ?? "TBD")</div>
                                                </div>
                                                <div style="font-size: 20px; font-weight: bold; color: #fff; margin: 0 15px;">@(data.Score1?.ToString() ?? "")</div>
                                            </div>
                                            <div style="text-align: center; margin: 8px 0;">
                                                <div style="height: 1px; background: linear-gradient(90deg, transparent, #FFD700, transparent);"></div>
                                                <div style="font-size: 10px; color: #87CEEB; margin: 4px 0;">VS</div>
                                                <div style="height: 1px; background: linear-gradient(90deg, transparent, #FFD700, transparent);"></div>
                                            </div>
                                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                                <div style="flex: 1; text-align: left;">
                                                    <div style="font-size: 14px; font-weight: bold; @team2WinnerStyle">@(data.Team2 ?? "TBD")</div>
                                                </div>
                                                <div style="font-size: 20px; font-weight: bold; color: #fff; margin: 0 15px;">@(data.Score2?.ToString() ?? "")</div>
                                            </div>
                                            @if (hasShootout)
                                            {
                                                <div style="font-size: 11px; color: #87CEEB; margin-top: 8px; text-align: center;">
                                                    <span style="color: #FFD700;">Penalty Shootout:</span> @data.ShootoutTeam1 - @data.ShootoutTeam2
                                                </div>
                                            }
                                        </div>
                                        <div style="background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%); color: #001122; padding: 8px 12px; border-radius: 6px; font-weight: bold; font-size: 12px;">
                                            WINNER: @(data.Winner ?? "TBD")
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </TooltipTemplate>
            </DiagramTemplates>
        </SfDiagramComponent>
    </div>
</div>

@code
{
    public SfDiagramComponent? Diagram;
    public DiagramObjectCollection<Node>? nodes = new DiagramObjectCollection<Node>();
    public DiagramObjectCollection<Connector>? connectors = new DiagramObjectCollection<Connector>();
    DiagramConstraints Constraints = DiagramConstraints.Default & ~DiagramConstraints.UndoRedo;

    public int AngleTiltAmountForRound16ToQuarter = 60;
    public int AngleTiltAmountForQuarterToSemi = 130;

    // Node Sizes
    public int ChampionNodeWidth = 280;
    public int ChampionNodeHeight = 200;
    public int TournamentNodeWidth = 180;
    public int TournamentNodeHeight = 100;

    // Offsets
    public int FinalNodeOffsetX;
    public int ChampionNodeOffsetY;

    // Other offsets (if needed elsewhere)
    public int OffsetXIncreaseAmount;
    public int LeftRound16NodesOffsetX;
    public int LeftQuarterFinalNodesOffsetX;
    public int LeftSemiFinalNodesOffsetX;
    public int RightSemiFinalNodesOffsetX;
    public int RightQuarterFinalNodesOffsetX;
    public int RightRound16NodesOffsetX;

    public int OffsetYIncreaseAmount;
    public int Round16TopOffsetY;
    public int Round16UpperMiddleOffsetY;
    public int Round16LowerMiddleOffsetY;
    public int Round16BottomOffsetY;
    public int QuarterFinalTopOffsetY;
    public int QuarterFinalBottomOffsetY;
    public int SemiFinalOffsetY;
    public int FinalNodeOffsetY;

    public void InitializePosition()
    {
        OffsetXIncreaseAmount = 280;
        LeftRound16NodesOffsetX = OffsetXIncreaseAmount;
        LeftQuarterFinalNodesOffsetX = LeftRound16NodesOffsetX + OffsetXIncreaseAmount;
        LeftSemiFinalNodesOffsetX = LeftQuarterFinalNodesOffsetX + OffsetXIncreaseAmount;
        FinalNodeOffsetX = LeftSemiFinalNodesOffsetX + OffsetXIncreaseAmount;
        RightSemiFinalNodesOffsetX = FinalNodeOffsetX + OffsetXIncreaseAmount;
        RightQuarterFinalNodesOffsetX = RightSemiFinalNodesOffsetX + OffsetXIncreaseAmount;
        RightRound16NodesOffsetX = RightQuarterFinalNodesOffsetX + OffsetXIncreaseAmount;

        OffsetYIncreaseAmount = 190;
        Round16TopOffsetY = OffsetYIncreaseAmount;
        Round16UpperMiddleOffsetY = Round16TopOffsetY + OffsetYIncreaseAmount;
        Round16LowerMiddleOffsetY = Round16UpperMiddleOffsetY + OffsetYIncreaseAmount;
        Round16BottomOffsetY = Round16LowerMiddleOffsetY + OffsetYIncreaseAmount;

        QuarterFinalTopOffsetY = (Round16TopOffsetY + Round16UpperMiddleOffsetY) / 2;
        QuarterFinalBottomOffsetY = (Round16LowerMiddleOffsetY + Round16BottomOffsetY) / 2;

        SemiFinalOffsetY = (QuarterFinalTopOffsetY + QuarterFinalBottomOffsetY) / 2;
        FinalNodeOffsetY = SemiFinalOffsetY;
        ChampionNodeOffsetY = FinalNodeOffsetY - 350;
    }

    protected override void OnInitialized()
    {
        InitializePosition(); // Make sure offsets are set before using them
        CreateNodes();
        CreateConnectors();
    }
    public void CreateNodes()
    {
        #region Nodes
        Node championNode = new Node()
        {
            ID = "champion",
            OffsetX = FinalNodeOffsetX,
            OffsetY = ChampionNodeOffsetY,
            Width = ChampionNodeWidth,
            Height = ChampionNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            }
        };

        nodes!.Add(championNode);


        Node finalNode = new Node()
        {
            ID = "final",
            OffsetX = FinalNodeOffsetX,
            OffsetY = FinalNodeOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.TopCenter,
            }
        };
        nodes.Add(finalNode);

        Node semi1Node = new Node()
        {
            ID = "semi1",
            OffsetX = LeftSemiFinalNodesOffsetX,
            OffsetY = SemiFinalOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.TopCenter,
            }
        };
        nodes.Add(semi1Node);

        Node semi2Node = new Node()
        {
            ID = "semi2",
            OffsetX = RightSemiFinalNodesOffsetX,
            OffsetY = SemiFinalOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.TopCenter,
            }
        };
        nodes.Add(semi2Node);

        Node quarter1Node = new Node()
        {
            ID = "quarter1",
            OffsetX = LeftQuarterFinalNodesOffsetX,
            OffsetY = QuarterFinalTopOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(quarter1Node);

        Node quarter2Node = new Node()
        {
            ID = "quarter2",
            OffsetX = LeftQuarterFinalNodesOffsetX,
            OffsetY = QuarterFinalBottomOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(quarter2Node);

        Node quarter3Node = new Node()
        {
            ID = "quarter3",
            OffsetX = RightQuarterFinalNodesOffsetX,
            OffsetY = QuarterFinalTopOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(quarter3Node);

        Node quarter4Node = new Node()
        {
            ID = "quarter4",
            OffsetX = RightQuarterFinalNodesOffsetX,
            OffsetY = QuarterFinalBottomOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(quarter4Node);
        Node round16_1 = new Node()
        {
            ID = "round16_1",
            OffsetX = LeftRound16NodesOffsetX,
            OffsetY = Round16TopOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(round16_1);

        Node round16_2 = new Node()
        {
            ID = "round16_2",
            OffsetX = LeftRound16NodesOffsetX,
            OffsetY = Round16UpperMiddleOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(round16_2);

        Node round16_3 = new Node()
        {
            ID = "round16_3",
            OffsetX = LeftRound16NodesOffsetX,
            OffsetY = Round16LowerMiddleOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(round16_3);

        Node round16_4 = new Node()
        {
            ID = "round16_4",
            OffsetX = LeftRound16NodesOffsetX,
            OffsetY = Round16BottomOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.RightCenter,
            }
        };
        nodes.Add(round16_4);
        Node round16_5 = new Node()
        {
            ID = "round16_5",
            OffsetX = RightRound16NodesOffsetX,
            OffsetY = Round16TopOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(round16_5);

        Node round16_6 = new Node()
        {
            ID = "round16_6",
            OffsetX = RightRound16NodesOffsetX,
            OffsetY = Round16UpperMiddleOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(round16_6);

        Node round16_7 = new Node()
        {
            ID = "round16_7",
            OffsetX = RightRound16NodesOffsetX,
            OffsetY = Round16LowerMiddleOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(round16_7);

        Node round16_8 = new Node()
        {
            ID = "round16_8",
            OffsetX = RightRound16NodesOffsetX,
            OffsetY = Round16BottomOffsetY,
            Width = TournamentNodeWidth,
            Height = TournamentNodeHeight,
            Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            },
            Tooltip = new DiagramTooltip()
            {
                Position = Syncfusion.Blazor.Popups.Position.LeftCenter,
            }
        };
        nodes.Add(round16_8);
        #endregion
    }

    public void CreateConnectors()
    {
        #region Connectors
        Connector champ1 = new Connector()
        {
            ID = "champ1",
            SourceID = "final",
            TargetID = "champion",
            Type = ConnectorSegmentType.Straight
        };
        connectors!.Add(champ1);
        Connector final1 = new Connector()
        {
            ID = "final1",
            SourceID = "semi1",
            TargetID = "final",
            Type = ConnectorSegmentType.Straight
        };
        connectors.Add(final1);

        Connector final2 = new Connector()
        {
            ID = "final2",
            SourceID = "semi2",
            TargetID = "final",
            Type = ConnectorSegmentType.Straight
        };
        connectors.Add(final2);
        Connector semi1_1 = new Connector()
        {
            ID = "semi1_1",
            SourceID = "quarter1",
            TargetID = "semi1",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftSemiFinalNodesOffsetX - AngleTiltAmountForQuarterToSemi,
                        Y = QuarterFinalTopOffsetY
                    }
                }
            }
        };
        connectors.Add(semi1_1);

        Connector semi1_2 = new Connector()
        {
            ID = "semi1_2",
            SourceID = "quarter2",
            TargetID = "semi1",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftSemiFinalNodesOffsetX - AngleTiltAmountForQuarterToSemi,
                        Y = QuarterFinalBottomOffsetY
                    }
                }
            }
        };
        connectors.Add(semi1_2);

        Connector semi2_1 = new Connector()
        {
            ID = "semi2_1",
            SourceID = "quarter3",
            TargetID = "semi2",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightSemiFinalNodesOffsetX + AngleTiltAmountForQuarterToSemi,
                        Y = QuarterFinalTopOffsetY
                    }
                }
            }
        };
        connectors.Add(semi2_1);

        Connector semi2_2 = new Connector()
        {
            ID = "semi2_2",
            SourceID = "quarter4",
            TargetID = "semi2",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightSemiFinalNodesOffsetX + AngleTiltAmountForQuarterToSemi,
                        Y = QuarterFinalBottomOffsetY
                    }
                }
            }
        };
        connectors.Add(semi2_2);


        // Add these connectors to your CreateConnectors() method, after the existing connectors:

        // Round 16 to Quarter Finals connectors
        Connector quarter1_1 = new Connector()
        {
            ID = "quarter1_1",
            SourceID = "round16_1",
            TargetID = "quarter1",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftQuarterFinalNodesOffsetX - AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16TopOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter1_1);

        Connector quarter1_2 = new Connector()
        {
            ID = "quarter1_2",
            SourceID = "round16_2",
            TargetID = "quarter1",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftQuarterFinalNodesOffsetX - AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16UpperMiddleOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter1_2);

        Connector quarter2_1 = new Connector()
        {
            ID = "quarter2_1",
            SourceID = "round16_3",
            TargetID = "quarter2",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftQuarterFinalNodesOffsetX - AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16LowerMiddleOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter2_1);

        Connector quarter2_2 = new Connector()
        {
            ID = "quarter2_2",
            SourceID = "round16_4",
            TargetID = "quarter2",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = LeftQuarterFinalNodesOffsetX - AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16BottomOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter2_2);

        Connector quarter3_1 = new Connector()
        {
            ID = "quarter3_1",
            SourceID = "round16_5",
            TargetID = "quarter3",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightQuarterFinalNodesOffsetX + AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16TopOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter3_1);

        Connector quarter3_2 = new Connector()
        {
            ID = "quarter3_2",
            SourceID = "round16_6",
            TargetID = "quarter3",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightQuarterFinalNodesOffsetX + AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16UpperMiddleOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter3_2);

        Connector quarter4_1 = new Connector()
        {
            ID = "quarter4_1",
            SourceID = "round16_7",
            TargetID = "quarter4",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightQuarterFinalNodesOffsetX + AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16LowerMiddleOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter4_1);

        Connector quarter4_2 = new Connector()
        {
            ID = "quarter4_2",
            SourceID = "round16_8",
            TargetID = "quarter4",
            Segments = new DiagramObjectCollection<ConnectorSegment>()
{
                new StraightSegment()
                {
                    Type = ConnectorSegmentType.Straight,
                    Point = new DiagramPoint()
                    {
                        X = RightQuarterFinalNodesOffsetX + AngleTiltAmountForRound16ToQuarter ,
                        Y = Round16BottomOffsetY
                    }
                }
            }
        };
        connectors.Add(quarter4_2);
        #endregion
    }
    public void OnNodeCreating(IDiagramObject obj)
    {
        if (obj is Node node)
        {
            if (node.ID == "champion")
            {
                node.Constraints = NodeConstraints.Default & ~(NodeConstraints.Tooltip | NodeConstraints.Select);
            }
            else
            {
                node.Constraints = (NodeConstraints.Default & ~NodeConstraints.Select) | NodeConstraints.Tooltip;
            }
            node.Style = new ShapeStyle() { Fill = "transparent", StrokeColor = "transparent" };
        }
    }

    public void OnConnectorCreating(IDiagramObject args)
    {
        if (args is Connector connector)
        {
            connector.SourcePadding = 10;
            connector.TargetPadding = 10;
            connector.Constraints = ConnectorConstraints.None;
            connector.Style = new ShapeStyle() { StrokeColor = "#0066cc", StrokeWidth = 2 };
            connector.TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.None };
            connector.SourceDecorator = new DecoratorSettings() { Shape = DecoratorShape.None };
        }
    }

    public TournamentMatch GetTournamentData(string nodeId)
    {
        return TournamentData.FirstOrDefault(item => item.Id == nodeId) ?? new TournamentMatch(nodeId, "TBD", null, "TBD", null, "", "TBD");
    }

    public void OnCreated()
    {
        Diagram?.FitToPage(new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content, CanZoomIn = true, });
    }
    public class TournamentMatch
    {
        public string Id { get; set; }
        public string Team1 { get; set; }
        public int? Score1 { get; set; }
        public string Team2 { get; set; }
        public int? Score2 { get; set; }
        public string Winner { get; set; }
        public string MatchType { get; set; }
        public string? ShootoutTeam1 { get; set; }
        public string? ShootoutTeam2 { get; set; }
        public string? Year { get; set; }

        public TournamentMatch(string id, string team1, int? score1, string team2, int? score2, string winner, string matchType, string? shootoutTeam1 = null, string? shootoutTeam2 = null, string? year = null)
        {
            Id = id;
            Team1 = team1;
            Score1 = score1;
            Team2 = team2;
            Score2 = score2;
            Winner = winner;
            MatchType = matchType;
            ShootoutTeam1 = shootoutTeam1;
            ShootoutTeam2 = shootoutTeam2;
            Year = year;
        }
    }

    public List<TournamentMatch> TournamentData = new List<TournamentMatch>()
{
        new TournamentMatch("round16_1", "BAYERN MUNCHEN", 3, "LAZIO", 1, "BAYERN MUNCHEN", "round16"),
        new TournamentMatch("round16_2", "ARSENAL", 1, "PORTO", 1, "ARSENAL", "round16", "4", "2"),
        new TournamentMatch("round16_3", "COPENHAGEN", 2, "MANCHESTER CITY", 6, "MANCHESTER CITY", "round16"),
        new TournamentMatch("round16_4", "LEIPZIG", 1, "REAL MADRID", 2, "REAL MADRID", "round16"),
        new TournamentMatch("round16_5", "BORUSSIA DORTMUND", 3, "PSV EINDHOVEN", 1, "BORUSSIA DORTMUND", "round16"),
        new TournamentMatch("round16_6", "ATLETICO MADRID", 2, "INTER MILAN", 2, "ATLETICO MADRID", "round16", "3", "2"),
        new TournamentMatch("round16_7", "REAL SOCIEDAD", 1, "PARIS SAINT-GERMAIN", 4, "PARIS SAINT-GERMAIN", "round16"),
        new TournamentMatch("round16_8", "BARCELONA", 4, "NAPOLI", 2, "BARCELONA", "round16"),
        new TournamentMatch("quarter1", "BAYERN MUNCHEN", 3, "ARSENAL", 2, "BAYERN MUNCHEN", "quarterfinal"),
        new TournamentMatch("quarter2", "MANCHESTER CITY", 4, "REAL MADRID", 4, "REAL MADRID", "quarterfinal", "3", "4"),
        new TournamentMatch("quarter3", "BORUSSIA DORTMUND", 5, "ATLETICO MADRID", 4, "BORUSSIA DORTMUND", "quarterfinal"),
        new TournamentMatch("quarter4", "BARCELONA", 4, "PARIS SAINT-GERMAIN", 6, "PARIS SAINT-GERMAIN", "quarterfinal"),
        new TournamentMatch("semi1", "BAYERN MUNCHEN", 3, "REAL MADRID", 4, "REAL MADRID", "semifinal"),
        new TournamentMatch("semi2", "PARIS SAINT-GERMAIN", 0, "BORUSSIA DORTMUND", 2, "BORUSSIA DORTMUND", "semifinal"),
        new TournamentMatch("final", "REAL MADRID", 2, "BORUSSIA DORTMUND", 0, "REAL MADRID", "final"),
        new TournamentMatch("champion", "REAL MADRID", 2, "BORUSSIA DORTMUND", 0, "REAL MADRID", "champion", null, null, "2023-24")
    };
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}