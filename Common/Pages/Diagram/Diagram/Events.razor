@page "/diagram/events"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using NodeShape = Syncfusion.Blazor.Diagram.NodeShapes
@using ClickEventArgs = Syncfusion.Blazor.Diagram.ClickEventArgs
@using DragStartEventArgs = Syncfusion.Blazor.Diagram.DragStartEventArgs
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This Blazor Diagram example demonstrates the available events in the diagram component.</p>
</SampleDescription>
<ActionDescription>
    <p>Events are actions that trigger specific operations, and event arguments provide information about these actions. For instance, you might want to perform an operation when a user clicks on a node. This can be achieved using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Click" aria-label="Click event documentation">Click</a></code> event of the diagram. This example illustrates how to utilize various diagram events and handle their arguments effectively.</p>
</ActionDescription>
@*End:Hidden*@

<div class="control-section">
    @*Hidden:Lines*@
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <style>
            #diagramEventsControlSection .sb-mobile-palette {
                width: 239px;
                height: 100%;
                float: left;
            }

            #diagramEventsControlSection .sb-mobile-palette-bar {
                display: none;
            }

            #diagramEventsControlSection .sb-mobile-diagram {
                width: calc(100% - 240px);
                height: 100%;
                float: left;
                border: 1px solid #d9dedd;
            }

            .material #diagramEventsControlSection #palette-space .e-accordion {
                border: none;
            }

            .material #diagramEventsControlSection #palette-space {
                border: 1px solid rgba(0, 0, 0, 0.12);
            }

            @@media (max-width: 550px) {
                #diagramEventsControlSection .sb-mobile-palette {
                    z-index: 19;
                    position: absolute;
                    display: none;
                    transition: transform 300ms linear, visibility 0s linear 300ms;
                    width: 45%;
                    height: 100%;
                }

                #diagramEventsControlSection .sb-mobile-palette-bar {
                    display: block;
                    width: 100%;
                    background: #fafafa;
                    padding: 14px 10px;
                    border: 0.5px solid #e0e0e0;
                    min-height: 54px;
                }

                #diagramEventsControlSection .sb-mobile-diagram {
                    width: 100%;
                    height: 100%;
                    float: left;
                    left: 0px;
                }

                #diagramEventsControlSection #palette-icon {
                    font-size: 20px;
                }
                 .property-section {
                     width:100%;
                 }


            }

            #diagramEventsControlSection .sb-mobile-palette-open {
                position: absolute;
                display: block;
                right: 15px;
            }

            @@font-face {
                font-family: "e-ddb-icons1";
                src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format("truetype");
                font-weight: normal;
                font-style: normal;
            }

            .e-ddb-icons1 {
                font-family: "e-ddb-icons1";
                speak: none;
                font-size: 16px;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            #diagramEventsControlSection .e-toggle-palette::before {
                content: "\e700";
            }

            #diagramEventsPropertySection .event-tracer {
                width: 240px;
                height: 700px;
                min-height: 700px;
                float: left;
            }

            #diagramEventsPropertySection .heading {
                color: #807f7f;
                font-size: 15px;
                height: 50px;
                width: 100%;
                border-bottom: 1px solid #d9dedd;
                padding: 10px;
            }

            .property-section {
                padding-bottom: 20px;
                height: 740px;
                padding-right: 0px;
                display:inline-block;
            }

            #diagramEventsPropertySection .evtbtn {
                float: none;
                margin-left: 45%;
                margin-top: 25px;
            }

            #diagramEventsPropertySection .listbox {
                width: 100%;
                height: 100%;
            }

            #diagramEventsPropertySection .event-tracer .prop-grid {
                width: 100%;
                height: 50%;
            }

            #diagramEventsPropertySection #EventLog {
                height: 550px;
                padding: 15px;
                overflow: auto;
                width: 90%;
                border-top: 1px solid #e0e0e0;
                border-left: 1px solid #e0e0e0;
                border-bottom: 1px solid #e0e0e0;
                border-right: 1px solid #e0e0e0;
                margin-left: 14px;
                margin-top: 15px;
            }

            #EventLog b {
                color: #388e3c;
            }

            hr {
                margin: 1px 10px 1px 0px;
                border-top: 1px solid #eee;
            }

            .e-custom .e-label {
                font-weight: bold;
            }
        </style>
        <div id="diagramEventsControlSection" class="content-wrapper" style="width:100%;background: white">
            @*Hidden:Lines*@
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            @*End:Hidden*@
            @*End:Hidden*@
            <div id="palette-space" class="sb-mobile-palette">
                <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" Palettes="@DiagramPalettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
                </SfSymbolPaletteComponent>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <SfDiagramComponent @ref="@DiagramInstance" Height="700px" Connectors="@DiagramConnectors" Nodes="@DiagramNodes" Created="OnCreated"
                                    NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating"
                                    DragDrop="OnDragDrop" DragStart="OnDragStart" Dragging="OnDragging"
                                    SelectionChanged="OnSelectionChanged" PositionChanged="OnPositionChanged"
                                    SourcePointChanged="OnSourcePointChanged" TargetPointChanged="OnTargetPointChanged"
                                    CollectionChanged="OnCollectionChanged" TextChanged="OnTextChanged" RotationChanged="OnRotationChanged"
                                    RotationChanging="OnRotationChanging" SelectionChanging="OnSelectionChanging"
                                    PositionChanging="OnPositionChanging" CollectionChanging="OnCollectionChanging"
                                    Click="OnClick" SizeChanged="OnSizeChanged" SizeChanging="OnSizeChanging"
                                    MouseEnter="OnMouseEnter" MouseHover="OnMouseHover" MouseLeave="OnMouseLeave"
                                    HistoryChanged="OnHistoryChanged" ConnectionChanged="OnConnectionChanged" ConnectionChanging="OnConnectionChanging">
                    <SnapSettings>
                        <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                        </HorizontalGridLines>
                        <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                        </VerticalGridLines>
                    </SnapSettings>
                </SfDiagramComponent>
            </div>
            @*Hidden:Lines*@
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <div id="diagramEventsPropertySection" style="height:100%;border: 1px solid #e0e0e0">
            <div class="listbox">
                <div class="heading" style="height:40px"><span>Options</span></div>
                <div style="height:calc(100% - 40px);overflow-y:auto;overflow-x:hidden">
                    <SfTab LoadOn="ContentLoad.Init" @bind-SelectedItem="@SelectedTab">
                        <TabItems>
                            <TabItem>
                                <HeaderTemplate>Log</HeaderTemplate>
                                <ContentTemplate>
                                    <div class="prop-grid content" style="height:50%; border-top: 1px solid #e0e0e0">
                                        <div id="EventLog">
                                            @{
                                                foreach (string eventDetails in EventValue)
                                                {
                                                    <p><b>@eventDetails</b> event is triggered.</p>
                                                    <hr />
                                                }
                                            }
                                        </div>
                                        <div class="evtbtn">
                                            <SfButton OnClick="@OnClearEventTracker" Content="Clear"></SfButton>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <HeaderTemplate>Events</HeaderTemplate>
                                <ContentTemplate>
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="NodeEvents" @bind-Checked="@NodeEvents" TChecked="bool" @onchange="onChangeNodeEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="RotationChanging" @bind-Checked="@rotationChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="RotationChanged" @bind-Checked="@rotationChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SizeChanging" @bind-Checked="@sizeChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SizeChanged" @bind-Checked="@sizeChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="ConnectorEvents" @bind-Checked="@ConnectorEvents" TChecked="bool" @onchange="onChangeConnectorEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SourcePointChanged" @bind-Checked="@sourcePointChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="TargetPointChanged" @bind-Checked="@targetPointChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="ConnectionChanging" @bind-Checked="@connectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="ConnectionChanged" @bind-Checked="@connectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="DiagramEvents" @bind-Checked="@DiagramEvents" TChecked="bool" @onchange="onChangeDiagramEvents" CssClass="e-custom" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SelectionChanging" @bind-Checked="@selectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SelectionChanged" @bind-Checked="@selectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="PositionChanging" @bind-Checked="@positionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="PositionChanged" @bind-Checked="@positionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="CollectionChanging" @bind-Checked="@collectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="CollectionChanged" @bind-Checked="@collectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="Click" @bind-Checked="@clickEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseEnter" @bind-Checked="@mouseEnterEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseHover" @bind-Checked="@mouseHoverEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseLeave" @bind-Checked="@mouseLeaveEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="HistoryChanged" @bind-Checked="@historyChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="PaletteEvents" @bind-Checked="@PaletteEvents" TChecked="bool" @onchange="onChangePaletteEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DragStart" @bind-Checked="@dragStartEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DragOver" @bind-Checked="@dragOverEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DropEvent" @bind-Checked="@dropEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="TextChangedEvent" @bind-Checked="@textChangedEvent" TChecked="bool" CssClass="e-custom" />
                                    </div>
                                    <hr />
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </div>
            </div>
        </div>
    </div>
    @*End:Hidden*@
</div>

@code{
    
    bool dropEvent = false;
    bool dragStartEvent = false;
    bool dragOverEvent = false;
    bool selectionChangedEvent = true;
    bool selectionChangingEvent = false;
    bool positionChangedEvent = true;
    bool positionChangingEvent = false;
    bool sourcePointChangedEvent = false;
    bool targetPointChangedEvent = false;
    bool collectionChangedEvent = true;
    bool collectionChangingEvent = false;
    bool rotationChangedEvent = true;
    bool rotationChangingEvent = false;
    bool textChangedEvent = true;
    bool clickEvent = false;
    bool mouseEnterEvent = false;
    bool mouseLeaveEvent = false;
    bool mouseHoverEvent = false;
    bool sizeChangedEvent = true;
    bool sizeChangingEvent = false;
    bool historyChangedEvent = true;
    bool connectionChangedEvent = true;
    bool connectionChangingEvent = false;
    public DiagramSize? SymbolPreview;
    public SymbolMargin? SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
    public SfDiagramComponent? DiagramInstance;
    public SfSymbolPaletteComponent? PaletteInstance;
    @*Hidden:Lines*@
    private int SelectedTab { get; set; } = 0;
    private bool ConnectorEvents { get; set; } = false;
    private bool DiagramEvents { get; set; } = false;
    private bool NodeEvents { get; set; } = false;
    private bool PaletteEvents { get; set; } = false;
    @*End:Hidden*@

    List<string> EventValue = new List<string>();

    //Defines Diagram's Nodes collection
    private DiagramObjectCollection<Node>? DiagramNodes { get; set; } = new DiagramObjectCollection<Node>();

    //Defines Diagram's Connectors collection
    private DiagramObjectCollection<Connector>? DiagramConnectors { get; set; } = new DiagramObjectCollection<Connector>();

    //Define palattes collection
    private DiagramObjectCollection<Palette>? DiagramPalettes { get; set; } = new DiagramObjectCollection<Palette>();

    // Defines palette's basic-shape collection
    private DiagramObjectCollection<NodeBase>? PalettesShapeSymbols { get; set; } = new DiagramObjectCollection<NodeBase>();

    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> PalettesFlowShapes { get; set; } = new DiagramObjectCollection<NodeBase>();

    // Defines interval values for GridLines
    public double[]? GridLineIntervals { get; set; }

    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase>? DiagramConnectorSymbols { get; set; } = new DiagramObjectCollection<NodeBase>();
    [Inject]
    protected IJSRuntime? jsRuntime { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        PaletteInstance!.Targets = new DiagramObjectCollection<SfDiagramComponent?>
        {
            DiagramInstance
        };
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance!.FitToPage(mobileoptions);
    }
    protected override void OnInitialized()
    {
        
        GridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        InitPaletteModel();
        CreateDiagramNode("Diagramnode1", 145, 60, 200, 180, NodeFlowShapes.Process, "Lamp doesn't work" );
        CreateDiagramNode("Diagramnode2", 145, 70, 200, 290, NodeFlowShapes.Decision, "Lamp plugged in?" );
        CreateDiagramNode("Diagramnode3", 145, 70, 200, 400, NodeFlowShapes.Decision, "Bulb burned out?" );
        CreateDiagramNode("Diagramnode4", 145, 60, 200, 510, NodeFlowShapes.Process, "Buy new lamp" );
        CreateDiagramNode("Diagramnode5", 145, 60, 400, 290, NodeFlowShapes.Process, "plugged in lamp" );
        CreateDiagramNode("Diagramnode6", 145, 60, 400, 400, NodeFlowShapes.Process, "Replace bulb" );
        CreateDiagramConnector("Diagramconnector1", "Diagramnode1", "Diagramnode2", ConnectorSegmentType.Straight, "");
        CreateDiagramConnector("Diagramconnector2", "Diagramnode2", "Diagramnode3", ConnectorSegmentType.Straight, "Yes");
        CreateDiagramConnector("Diagramconnector3", "Diagramnode3", "Diagramnode4", ConnectorSegmentType.Straight, "No");
        CreateDiagramConnector("Diagramconnector4", "Diagramnode2", "Diagramnode5", ConnectorSegmentType.Straight, "No");
        CreateDiagramConnector("Diagramconnector5", "Diagramnode3", "Diagramnode6", ConnectorSegmentType.Straight, "Yes"); 
    }

    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        DiagramPalettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
        {
            Width = 100,
            Height = 100
        };

        PalettesShapeSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeBasicShapes.Rectangle, "Rectangle");
        CreatePaletteNode(NodeBasicShapes.Ellipse, "Ellipse");
        CreatePaletteNode(NodeBasicShapes.Triangle, "Triangle");
        CreatePaletteNode(NodeBasicShapes.Plus, "Plus");
        CreatePaletteNode(NodeBasicShapes.Star, "Star");
        CreatePaletteNode(NodeBasicShapes.Pentagon, "Pentagon");
        CreatePaletteNode(NodeBasicShapes.Hexagon, "Hexagon");
        CreatePaletteNode(NodeBasicShapes.Heptagon, "Heptagon");
        CreatePaletteNode(NodeBasicShapes.Octagon, "Octagon");
        CreatePaletteNode(NodeBasicShapes.Trapezoid, "Trapezoid");
        CreatePaletteNode(NodeBasicShapes.Decagon, "Decagon");
        CreatePaletteNode(NodeBasicShapes.RightTriangle, "RightTriangle");

        // Palette which contains flow shape nodes
        PalettesFlowShapes = new DiagramObjectCollection<NodeBase>()
        {
            CreateFlowNode("Terminator",NodeFlowShapes.Terminator),
            CreateFlowNode("Process",NodeFlowShapes.Process),
            CreateFlowNode("Sort",NodeFlowShapes.Sort),
            CreateFlowNode("Document",NodeFlowShapes.Document),
            CreateFlowNode("Predefined Process",NodeFlowShapes.PreDefinedProcess),
            CreateFlowNode("Punched Tape",NodeFlowShapes.PaperTap),
            CreateFlowNode("Direct Data",NodeFlowShapes.DirectData),
            CreateFlowNode("Sequential Data",NodeFlowShapes.SequentialData),
        };

        DiagramConnectorSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteConnector("Orthogonal With Arrrow", ConnectorSegmentType.Orthogonal, DecoratorShape.Arrow);
        CreatePaletteConnector("Orthogonal", ConnectorSegmentType.Orthogonal, DecoratorShape.None);
        CreatePaletteConnector("Straight With Arrow", ConnectorSegmentType.Straight, DecoratorShape.Arrow);
        CreatePaletteConnector("Straight", ConnectorSegmentType.Straight, DecoratorShape.None);
        CreatePaletteConnector("Bezier", ConnectorSegmentType.Bezier, DecoratorShape.None);

        DiagramPalettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = PalettesShapeSymbols, Title = "Basic Shapes", ID = "Basic Shapes"},
            new Palette() {Symbols = PalettesFlowShapes, Title = "Flow Shapes", ID = "Flow Shapes"},
            new Palette() {Symbols = DiagramConnectorSymbols, Title = "Connectors", IsExpanded = true},
            #pragma warning restore BL0005
        };
    }

    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        node!.Style!.Fill = "#357BD2";
        if (!(node.ID!.StartsWith("Annotation")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }

    // Method to create flow shape node
    private Node CreateFlowNode(string id, NodeFlowShapes type)
    {
        string NodeID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            NodeID = id.Replace(" ", "");
        }
        Node node = new Node()
        {
            ID = NodeID,
            Shape = new FlowShape()
            {
                Type = NodeShape.Flow,
                Shape = type
            },
            Style = new ShapeStyle() { Fill = "#357BD2", StrokeWidth = 1, StrokeColor = "#757575" }
        };
        if (isSpace)
        {
            node.Tooltip = new DiagramTooltip()
            {
                Content = id,
            };
            node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
        }
        return node;
    }

    @*Hidden:Lines*@
    private void onChangeNodeEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (NodeEvents)
        {
            sizeChangedEvent = true;
            sizeChangingEvent = true;
            rotationChangingEvent = true;
            rotationChangedEvent = true;
        }
        else
        {
            sizeChangedEvent = false;
            sizeChangingEvent = false;
            rotationChangingEvent = false;
            rotationChangedEvent = false;
        }
    }

    private void onChangeConnectorEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (ConnectorEvents)
        {
            sourcePointChangedEvent = true;
            targetPointChangedEvent = true;
            connectionChangedEvent = true;
            connectionChangingEvent = true;
        }
        else
        {
            sourcePointChangedEvent = false;
            targetPointChangedEvent = false;
            connectionChangedEvent = false;
            connectionChangingEvent = false;
        }
    }
    private void onChangeDiagramEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (DiagramEvents)
        {
            selectionChangingEvent = true;
            selectionChangedEvent = true;
            positionChangingEvent = true;
            positionChangedEvent = true;
            collectionChangingEvent = true;
            collectionChangedEvent = true;
            clickEvent = true;
            mouseEnterEvent = true;
            mouseHoverEvent = true;
            mouseLeaveEvent = true;
            historyChangedEvent = true;
        }
        else
        {
            selectionChangingEvent = false;
            selectionChangedEvent = false;
            positionChangingEvent = false;
            positionChangedEvent = false;
            collectionChangingEvent = false;
            collectionChangedEvent = false;
            clickEvent = false;
            mouseEnterEvent = false;
            mouseHoverEvent = false;
            mouseLeaveEvent = false;
            historyChangedEvent = false;
        }
    }

    private void onChangePaletteEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (PaletteEvents)
        {
            dropEvent = true;
            dragStartEvent = true;
            dragOverEvent = true;
        }
        else
        {
            dropEvent = false;
            dragStartEvent = false;
            dragOverEvent = false;
        }
    }
    @*End:Hidden*@

    private void OnDragDrop(DropEventArgs args)
    {
        if (dropEvent)
        {
            EventValue.Add("\n DragDrop");
        }
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector && connector.Tooltip != null)
        {
            connector.Tooltip = null;
            connector.Constraints &= ~ConnectorConstraints.Tooltip;
        }
    }

    private void OnDragStart(DragStartEventArgs args)
    {
        if (dragStartEvent)
        {
            EventValue.Add("\n DragStart");
        }
    }

    private void OnDragging(DraggingEventArgs args)
    {
        if (dragOverEvent)
        {
            EventValue.Add("\n Dragging");
        }
    }

    private void OnHistoryChanged(HistoryChangedEventArgs args)
    {
        if (historyChangedEvent)
        {
            EventValue.Add("\n HistoryChanged");
        }
    }

    private void OnConnectionChanging(ConnectionChangingEventArgs args)
    {
        if (connectionChangingEvent)
        {
            EventValue.Add("\n ConnectionChanging");
        }
    }

    private void OnConnectionChanged(ConnectionChangedEventArgs args)
    {
        if (connectionChangedEvent)
        {
            EventValue.Add("\n ConnectionChanged");
        }
    }

    private void OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if (selectionChangedEvent)
        {
            EventValue.Add("\n SelectionChanged");
        }
    }

    private void OnSelectionChanging(SelectionChangingEventArgs args)
    {
        if (selectionChangingEvent)
        {
            EventValue.Add("\n SelectionChanging");
        }
    }

    private void OnPositionChanged(PositionChangedEventArgs args)
    {
        if (positionChangedEvent)
        {
            EventValue.Add("\n PositionChanged");
        }
    }

    private void OnPositionChanging(PositionChangingEventArgs args)
    {
        if (positionChangingEvent)
        {
            EventValue.Add("\n PositionChanging");
        }
    }

    private void OnSourcePointChanged(EndPointChangedEventArgs args)
    {
        if (sourcePointChangedEvent)
        {
            EventValue.Add("\n SourcePointChanged");
        }
    }

    private void OnTargetPointChanged(EndPointChangedEventArgs args)
    {
        if (targetPointChangedEvent)
        {
            EventValue.Add("\n TargetPointChanged");
        }
    }

    private void OnCollectionChanged(CollectionChangedEventArgs args)
    {
        if (collectionChangedEvent)
        {
            EventValue.Add("\n CollectionChanged");
        }
    }

    private void OnCollectionChanging(CollectionChangingEventArgs args)
    {
        if (collectionChangingEvent)
        {
            EventValue.Add("\n CollectionChanging");
        }
    }

    private void OnRotationChanged(RotationChangedEventArgs args)
    {
        if (rotationChangedEvent)
        {
            EventValue.Add("\n RotationChanged");
        }
    }

    private void OnRotationChanging(RotationChangingEventArgs args)
    {
        if (rotationChangingEvent)
        {
            EventValue.Add("\n RotationChanging");
        }
    }

    private void OnTextChanged(TextChangeEventArgs args)
    {
        if (textChangedEvent)
        {
            EventValue.Add("\n TextChanged");
        }
    }

    private void OnMouseEnter(DiagramElementMouseEventArgs args)
    {
        if (mouseEnterEvent)
        {
            EventValue.Add("\n MouseEnter");
        }
    }

    private void OnMouseHover(DiagramElementMouseEventArgs args)
    {
        if (mouseHoverEvent)
        {
            EventValue.Add("\n MouseHover");
        }
    }

    private void OnMouseLeave(DiagramElementMouseEventArgs args)
    {
        if (mouseLeaveEvent)
        {
            EventValue.Add("\n MouseLeave");
        }
    }

    private void OnClick(ClickEventArgs args)
    {
        if (clickEvent)
        {
            EventValue.Add("\n Click");
        }
    }

    private void OnSizeChanging(SizeChangingEventArgs args)
    {
        if (sizeChangingEvent)
        {
            EventValue.Add("\n SizeChanging");
        }
    }

    private void OnSizeChanged(SizeChangedEventArgs args)
    {
        if (sizeChangedEvent)
        {
            EventValue.Add("\n SizeChanged");
        }
    }

    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector? node = obj as Connector;
        node!.Style!.Fill = "#357BD2";
        node.Style.StrokeColor = "#357BD2";
        node.Style.Opacity = 1;
        node.TargetDecorator!.Style.Fill = "#357BD2";
        node.TargetDecorator.Style.StrokeColor = "#357BD2";
    }

    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeBasicShapes basicShape, string id)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            Shape = new BasicShape() { Type = NodeShape.Basic, Shape = basicShape },
            Style = new ShapeStyle() { Fill = "#357BD2", StrokeColor = "#757575", StrokeWidth = 1 },
        };
        PalettesShapeSymbols!.Add(diagramNode);
    }

    @*Hidden:Lines*@
    private void OnClearEventTracker()
    {
        EventValue.Clear();
    }
    @*End:Hidden*@

    // Method is used to create a Connector for the palette.
    private void CreatePaletteConnector(string id, ConnectorSegmentType type, DecoratorShape decoratorShape)
    {

        string connectorID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            connectorID = id.Replace(" ", "");
        }
        Connector diagramConnector = new Connector()
        {
            ID = connectorID,
            Type = type,
            SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
            TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
            Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#357BD2" },
            TargetDecorator = new DecoratorSettings()
            {
                Shape = decoratorShape,
                Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#357BD2", Fill = "#357BD2" }
            }
        };
        if (isSpace)
        {
            diagramConnector.Tooltip = new DiagramTooltip()
                {
                    Content = id,
                };
            diagramConnector.Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip;
        }
        DiagramConnectorSymbols!.Add(diagramConnector);
    }

    // Method is used to create a node for the diagram.
    private void CreateDiagramNode(string id, int width, int height, int x, int y, NodeFlowShapes flowShape, string content )
    {
        Node diagramNode = new Node()
        {
            ID = id,
            Width = width,
            Height = height,
            OffsetX = x,
            OffsetY = y,
            Shape = new FlowShape() { Type = NodeShape.Flow, Shape = flowShape },
            Annotations = new DiagramObjectCollection<ShapeAnnotation> { new ShapeAnnotation { Content = content, Style = new TextStyle() { Color = "White", Fill = "transparent" } } }
        };
        DiagramNodes!.Add(diagramNode);
    }

    // Method is used to create a connector for the diagram.
    private void CreateDiagramConnector(string id, string source, string target, ConnectorSegmentType segmentType, string content )
    {
        Connector diagramConnector = new Connector()
        {
            ID = id,
            SourceID = source,
            TargetID = target,
            Type = segmentType,
            Annotations = new DiagramObjectCollection<PathAnnotation> { new PathAnnotation { Content = content } }
        };
        DiagramConnectors!.Add(diagramConnector);
    }
    public async void ShowHideSymbolPalette()
    {
        await jsRuntime!.InvokeAsync<object>("openPalette");

    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }

        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        DiagramInstance = null;
        PaletteInstance = null;
        if (DiagramNodes != null)
        {
            DiagramNodes.Clear();
            DiagramNodes = null;
        }
        if (DiagramConnectors != null)
        {
            DiagramConnectors.Clear();
            DiagramConnectors = null;
        }

        #pragma warning disable BL0005
        if (DiagramPalettes != null)
        {
            for (int i = 0; i < DiagramPalettes.Count; i++)
            {
                DiagramPalettes[i].ID = null;
                DiagramPalettes[i].Title = null;
                DiagramPalettes[i].IconCss = null;
                if (DiagramPalettes[i].Symbols != null)
                {
                    for (int j = 0; j < DiagramPalettes[i].Symbols.Count; j++)
                    {
                        DiagramPalettes[i].Symbols[j] = null;
                    }
                    DiagramPalettes[i].Symbols.Clear();
                    DiagramPalettes[i].Symbols = null;
                }
            }
            DiagramPalettes.Clear();
            DiagramPalettes = null;
        }
        #pragma warning restore BL0005
        if (PalettesShapeSymbols != null)
        {
            PalettesShapeSymbols.Clear();
            PalettesShapeSymbols = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }
        if (DiagramConnectorSymbols != null)
        {
            DiagramConnectorSymbols.Clear();
            DiagramConnectorSymbols = null;
        }
    }
    @*End:Hidden*@
}
