@page "/diagram/shapes"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable
@inject NavigationManager NavigationManager



<SampleDescription>
    <p>This sample demonstrates the basic built-in shapes, such as basic and flow shapes.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to define built-in shapes that are used to visualize geometric information, workflow, or business flow diagrams. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Shape.html#Syncfusion_Blazor_Diagram_Shape_Type' aria-label="Type">Type</a></code> property of the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.NodeShapes.html' aria-label="Shape">Shape</a></code> allows you to choose the type of shape.</p>
</ActionDescription>
@*End:Hidden*@
<SfDiagramComponent @ref="@diagram"  Height="530px" Created="OnCreated" Nodes="@NodeCollection" @bind-Constraints="@diagramConstraints">
    <SnapSettings Constraints=SnapConstraints.None>
    </SnapSettings>
</SfDiagramComponent>

@code
{
    SfDiagramComponent? diagram;
    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node>? NodeCollection = new DiagramObjectCollection<Node>();
    DiagramConstraints diagramConstraints = DiagramConstraints.None;
    

    protected override void OnInitialized()
    {
        
        NodeCollection = new DiagramObjectCollection<Node>();

        #region Basic Shapes
        AddShapeText("Basic Shapes", NodeConstraints.PointerEvents);
        AddBasicShapes("rectLabel", "Rectangle", NodeBasicShapes.Rectangle, false);
        AddBasicShapes("ellipseLabel", "Ellipse", NodeBasicShapes.Ellipse, true);
        AddBasicShapes("triLabel", "Triangle", NodeBasicShapes.Triangle, true);
        AddBasicShapes("plusLabel", "Plus", NodeBasicShapes.Plus, true);
        AddBasicShapes("starLabel", "Star", NodeBasicShapes.Star, true);
        AddBasicShapes("pentLabel", "Pentagon", NodeBasicShapes.Pentagon, true);
        AddBasicShapes("heptLabel", "Heptagon", NodeBasicShapes.Heptagon, true);
        AddBasicShapes("octLabel", "Octagon", NodeBasicShapes.Octagon, true);
        AddBasicShapes("trapLabel", "Trapezoid", NodeBasicShapes.Trapezoid, false);
        AddBasicShapes("decLabel", "Decagon", NodeBasicShapes.Decagon, true);
        AddBasicShapes("rightLabel", "Right Triangle", NodeBasicShapes.RightTriangle, true);
        AddBasicShapes("paraLabel", "Parallelogram", NodeBasicShapes.Parallelogram, true);
        #endregion

        #region FlowShapeType
        AddShapeText("Flow Shapes", NodeConstraints.PointerEvents);
        AddFlowShapes("terminateLabel", "Terminator", NodeFlowShapes.Terminator);
        AddFlowShapes("processLabel", "Process", NodeFlowShapes.Process);
        AddFlowShapes("decisionLabel", "Decision", NodeFlowShapes.Decision);
        AddFlowShapes("documentLabel", "Document", NodeFlowShapes.Document);
        AddFlowShapes("preLabel", "PreDefined Process", NodeFlowShapes.PreDefinedProcess);
        AddFlowShapes("directLabel", "Direct Data", NodeFlowShapes.DirectData);
        AddFlowShapes("seqLabel", "Sequential Data", NodeFlowShapes.SequentialData);
        AddFlowShapes("sortLabel", "Sort", NodeFlowShapes.Sort);
        AddFlowShapes("multiLabel", "Multi-Document", NodeFlowShapes.MultiDocument);
        AddFlowShapes("collateLabel", "Collate", NodeFlowShapes.Collate);
        AddFlowShapes("summingLabel", "Summing Junction", NodeFlowShapes.SummingJunction);
        AddFlowShapes("or", "Or", NodeFlowShapes.Or);
        AddFlowShapes("internalLabel", "Internal Storage", NodeFlowShapes.InternalStorage);
        AddFlowShapes("extractLabel", "Extract", NodeFlowShapes.Extract);
        AddFlowShapes("manualLabel", "Manual Operation", NodeFlowShapes.ManualOperation);
        AddFlowShapes("mergeLabel", "Merge", NodeFlowShapes.Merge);
        AddFlowShapes("offLabel", "Off-Page Reference", NodeFlowShapes.OffPageReference);
        AddFlowShapes("seqAccess", "Sequential Access Storage", NodeFlowShapes.SequentialAccessStorage);
        AddFlowShapes("dataLabel", "Data", NodeFlowShapes.Data);
        AddFlowShapes("cardLabel", "Card", NodeFlowShapes.Card);
        AddFlowShapes("Preparation", "Preparation", NodeFlowShapes.Preparation);
        #endregion
        UpdateValues();
    }
    private void AddShapeText(string textContent, NodeConstraints constraints)
    {
        Node node = new Node()
        {
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation
                {
                    Content = textContent,
                }
            },
            Style = new TextStyle() { FontSize = 16, Fill = "None", FontFamily = "sans-serif", Bold = true, StrokeWidth = 0 },
            Constraints = constraints
        };
        NodeCollection!.Add(node);
    }
    private void AddBasicShapes(string id, string shapeText, NodeBasicShapes shapes, bool CheckAspectRatio)
    {
        Node node = new Node()
        {

            Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = shapes },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation
                {
                    Content = shapeText, ID = id,
                }
            },

        };
        if (CheckAspectRatio)
        {
            node.Constraints = node.Constraints | NodeConstraints.AspectRatio;
        }
        NodeCollection!.Add(node);
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        diagram!.FitToPage(mobileoptions);
    }
    private void UpdateValues()
    {
        int offsetx = 60;
        int offsety = 50;
        int count = 1;

        for (int i = 0; i < NodeCollection!.Count; i++)
        {
            Node node = NodeCollection[i];
            node.Width = 40;
            node.Height = 40;
            node.Constraints = NodeConstraints.None;
            if (node.Shape!.Type == Syncfusion.Blazor.Diagram.NodeShapes.Flow)
            {
                if (node.Shape is FlowShape)
                {
                    FlowShape? shapeType = node.Shape as FlowShape;
                    if (shapeType!.Shape == NodeFlowShapes.Process || shapeType.Shape == NodeFlowShapes.Terminator)
                    {
                        node.Height = 20;
                    }
                    else if (shapeType.Shape == NodeFlowShapes.Decision)
                    {
                        node.Height = 35;
                    }
                    else if (shapeType.Shape == NodeFlowShapes.Document || shapeType.Shape == NodeFlowShapes.DirectData ||
                      shapeType.Shape == NodeFlowShapes.MultiDocument || shapeType.Shape == NodeFlowShapes.PreDefinedProcess)
                    {
                        node.Height = 30;
                    }
                }
            }

            if (node.Annotations![0].Content != "Basic Shapes" && node.Annotations[0].Content != "Flow Shapes")
            {
                if (node.Annotations.Count > 0)
                {
                    node.Annotations[0].VerticalAlignment = VerticalAlignment.Top;
                    node.Annotations[0].Offset = new DiagramPoint() { X = 0.5, Y = 1 };
                    node.Annotations[0].Margin = new DiagramThickness() { Top = 10 };
                }
                node.OffsetX = offsetx;
                node.OffsetY = offsety;
                offsetx = offsetx + 90;
                if (count % 12 == 0)
                {
                    offsety = offsety + 100;
                    offsetx = 60;
                }
                count++;
            }

            if (node.Annotations[0].Content == "Basic Shapes" || node.Annotations[0].Content == "Flow Shapes")
            {
                node.Annotations[0].Style!.Bold = true;
                node.Annotations[0].Style!.FontSize = 16;

                offsetx = 60;
                offsety += 20;
                node.OffsetX = offsetx;
                node.OffsetY = offsety;
                offsety = offsety + 50;
                count = 1;
                node.Width = 150;
                node.Height = 50;
                node.OffsetX = 90;
            }
        }
    }

    private void AddFlowShapes(string id, string shapeText, NodeFlowShapes shapes)
    {
        Node terminatNode = new Node()
        {
            Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = shapes },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() 
            {
                new ShapeAnnotation { Content = shapeText,ID = id }
            }
        };
        NodeCollection!.Add(terminatNode);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if(NodeCollection != null)
        {
            NodeCollection.Clear();
            NodeCollection = null;
        }
    }
    @*End:Hidden*@
}