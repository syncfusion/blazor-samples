@page "/diagram/nodecontent"

@using Syncfusion.Blazor.Diagram
@using Node = Syncfusion.Blazor.Diagram.Node
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable;
@inject NavigationManager NavigationManager

<SampleDescription>
    <p>This sample demonstrates how the node content can be updated using various shapes, including ellipses, rectangles, HTML, and path shapes.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramTemplates.html#Syncfusion_Blazor_Diagram_DiagramTemplates_NodeTemplate" aria-label="NodeTemplate">NodeTemplate</a></code> property allows you to define a specific UI segment to be rendered for a node. To create distinct templates for each node, differentiate the nodes using the ID property. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Shape.html" aria-label="Shape">Shape</a></code> property enables you to specify the type of node. For path nodes, set the shape to Path, and use the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PathShape.html#Syncfusion_Blazor_Diagram_PathShape_Data" aria-label="Data">Data</a></code> property to define the path to be drawn.
    </p>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-12 control-section">
<SfDiagramComponent @ref="DiagramInstance" Height="630px" Nodes="@DiagramNodes" Connectors="@DiagramConnectors" InteractionController="@DiagramInteractions.ZoomPan" Created="OnCreated" >
    <SnapSettings Constraints=SnapConstraints.None>
    </SnapSettings>
    <DiagramTemplates>
        <NodeTemplate>
            @{
                    string id = (context as Node).ID!;
                    if ((context as Node).Shape!.Type == NodeShapes.SVG && ((context as Node).ID == "node5"))
                    {
                         <svg width="110" height="124" viewBox="0 0 110 124" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M110 62.9489C110 66.7867 99.7025 69.8978 87 69.8978C74.2975 69.8978 64 66.7867 64 62.9489C64 59.1111 74.2975 56 87 56C99.7025 56 110 59.1111 110 62.9489Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M87 74.3401C99.7025 74.3401 110 71.0179 110 66.9197V80.0482C110 84.1464 99.7025 87.4686 87 87.4686C74.2975 87.4686 64 84.1464 64 80.0482V66.9197C64 71.0179 74.2975 74.3401 87 74.3401ZM106.32 80.619C107.59 80.619 108.62 79.3412 108.62 77.765C108.62 76.1887 107.59 74.9109 106.32 74.9109C105.05 74.9109 104.02 76.1887 104.02 77.765C104.02 79.3412 105.05 80.619 106.32 80.619Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M87 110.872C99.7025 110.872 110 107.549 110 103.451V116.58C110 120.678 99.7025 124 87 124C74.2975 124 64 120.678 64 116.58V103.451C64 107.549 74.2975 110.872 87 110.872ZM106.32 117.15C107.59 117.15 108.62 115.873 108.62 114.296C108.62 112.72 107.59 111.442 106.32 111.442C105.05 111.442 104.02 112.72 104.02 114.296C104.02 115.873 105.05 117.15 106.32 117.15Z" fill="#646464" />
                                <path d="M80 13C80 20.1797 62.0914 26 40 26C17.9086 26 0 20.1797 0 13C0 5.8203 17.9086 0 40 0C62.0914 0 80 5.8203 80 13Z" fill="#0199EE" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M40 33C62.0914 33 80 27.1797 80 20V43C80 50.1797 62.0914 56 40 56C17.9086 56 0 50.1797 0 43V20C0 27.1797 17.9086 33 40 33ZM73.6 44C75.8091 44 77.6 41.7614 77.6 39C77.6 36.2386 75.8091 34 73.6 34C71.3909 34 69.6 36.2386 69.6 39C69.6 41.7614 71.3909 44 73.6 44Z" fill="#0199EE" />
                                <path d="M59 63.4427C53.348 64.436 46.8766 65 40 65C17.9086 65 0 59.1797 0 52V75C0 82.1797 17.9086 88 40 88C46.8766 88 53.348 87.436 59 86.4427V63.4427Z" fill="#0199EE" />
                                <path d="M59 95.4427V118.443C53.348 119.436 46.8766 120 40 120C17.9086 120 0 114.18 0 107V84C0 91.1797 17.9086 97 40 97C46.8766 97 53.348 96.436 59 95.4427Z" fill="#0199EE" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M110 85.1854C110 89.2836 99.7025 92.6058 87 92.6058C74.2975 92.6058 64 89.2836 64 85.1854V98.3139C64 102.412 74.2975 105.734 87 105.734C99.7025 105.734 110 102.412 110 98.3139V85.1854ZM106.32 98.8847C107.59 98.8847 108.62 97.6069 108.62 96.0307C108.62 94.4544 107.59 93.1766 106.32 93.1766C105.05 93.1766 104.02 94.4544 104.02 96.0307C104.02 97.6069 105.05 98.8847 106.32 98.8847Z" fill="#646464" />
                          </svg>
                           
                    }
                    if ((context as Node).Shape!.Type == NodeShapes.SVG && (context as Node).ID == "node6")
                    {
                            <svg width="200" height="146" viewBox="0 0 200 146" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M92.5 0C59.87 0 33.3748 25.6038 33.0039 57.3255C14.3782 59.7716 0 75.7067 0 95C0 115.987 17.0132 133 38 133H105L122 132.274V88.0494C122 80.509 126.657 73.581 133.983 71.7943C146.452 68.7532 159.423 68.3712 171.779 73.8687C177.183 76.2731 180 82.0309 180 87.9454V128.475C191.907 122.058 200 109.474 200 95C200 94.266 199.979 93.5368 199.938 92.8131C199.979 92.0473 200 91.2761 200 90.5C200 67.0279 180.972 48 157.5 48C155.359 48 153.255 48.1583 151.2 48.4638C146.534 20.9684 122.029 0 92.5 0Z" fill="#0199EE" />
                                <path d="M174 84.4489C174 88.2867 163.703 91.3978 151 91.3978C138.297 91.3978 128 88.2867 128 84.4489C128 80.6111 138.297 77.5 151 77.5C163.703 77.5 174 80.6111 174 84.4489Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M151 95.8401C163.703 95.8401 174 92.5179 174 88.4197V101.548C174 105.646 163.703 108.969 151 108.969C138.297 108.969 128 105.646 128 101.548V88.4197C128 92.5179 138.297 95.8401 151 95.8401ZM170.32 102.119C171.59 102.119 172.62 100.841 172.62 99.265C172.62 97.6887 171.59 96.4109 170.32 96.4109C169.05 96.4109 168.02 97.6887 168.02 99.265C168.02 100.841 169.05 102.119 170.32 102.119Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M151 132.372C163.703 132.372 174 129.049 174 124.951V138.08C174 142.178 163.703 145.5 151 145.5C138.297 145.5 128 142.178 128 138.08V124.951C128 129.049 138.297 132.372 151 132.372ZM170.32 138.65C171.59 138.65 172.62 137.373 172.62 135.796C172.62 134.22 171.59 132.942 170.32 132.942C169.05 132.942 168.02 134.22 168.02 135.796C168.02 137.373 169.05 138.65 170.32 138.65Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M174 106.685C174 110.784 163.703 114.106 151 114.106C138.297 114.106 128 110.784 128 106.685V119.814C128 123.912 138.297 127.234 151 127.234C163.703 127.234 174 123.912 174 119.814V106.685ZM170.32 120.385C171.59 120.385 172.62 119.107 172.62 117.531C172.62 115.954 171.59 114.677 170.32 114.677C169.05 114.677 168.02 115.954 168.02 117.531C168.02 119.107 169.05 120.385 170.32 120.385Z" fill="#646464" />
                            </svg>
                        
                         
                    }
                    if ((context as Node).Shape!.Type == NodeShapes.SVG && (context as Node).ID == "node7")
                    {
                            <svg width="80" height="120" viewBox="0 0 80 120" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M80 13C80 20.1797 62.0914 26 40 26C17.9086 26 0 20.1797 0 13C0 5.8203 17.9086 0 40 0C62.0914 0 80 5.8203 80 13Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M40 33C62.0914 33 80 27.1797 80 20V43C80 50.1797 62.0914 56 40 56C17.9086 56 0 50.1797 0 43V20C0 27.1797 17.9086 33 40 33ZM73.6 44C75.8091 44 77.6 41.7614 77.6 39C77.6 36.2386 75.8091 34 73.6 34C71.3909 34 69.6 36.2386 69.6 39C69.6 41.7614 71.3909 44 73.6 44Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M40 65C62.0914 65 80 59.1797 80 52V75C80 82.1797 62.0914 88 40 88C17.9086 88 0 82.1797 0 75V52C0 59.1797 17.9086 65 40 65ZM73.6 76C75.8091 76 77.6 73.7614 77.6 71C77.6 68.2386 75.8091 66 73.6 66C71.3909 66 69.6 68.2386 69.6 71C69.6 73.7614 71.3909 76 73.6 76Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M40 65C62.0914 65 80 59.1797 80 52V75C80 82.1797 62.0914 88 40 88C17.9086 88 0 82.1797 0 75V52C0 59.1797 17.9086 65 40 65ZM73.6 76C75.8091 76 77.6 73.7614 77.6 71C77.6 68.2386 75.8091 66 73.6 66C71.3909 66 69.6 68.2386 69.6 71C69.6 73.7614 71.3909 76 73.6 76Z" fill="#646464" />
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M40 97C62.0914 97 80 91.1797 80 84V107C80 114.18 62.0914 120 40 120C17.9086 120 0 114.18 0 107V84C0 91.1797 17.9086 97 40 97ZM73.6 108C75.8091 108 77.6 105.761 77.6 103C77.6 100.239 75.8091 98 73.6 98C71.3909 98 69.6 100.239 69.6 103C69.6 105.761 71.3909 108 73.6 108Z" fill="#646464" />
                            </svg>
                    }
                    if ((context as Node).Shape!.Type == NodeShapes.HTML && ((context as Node).ID == "node1"))
                    {

                        <div style="border:1px solid lightgrey;width:130px;padding-left:4px;margin-Left:1px;height:107px">
                            <input type="text" placeholder="TextBox" style="width:118px;padding-left:4px;margin-Left:1px;padding-top:4px;padding-bottom:4px;margin-top:5px; color: black;" />

                            <select name="ComboBox" style="width:118px;padding-left:1px;margin-Left:1px;padding-top:4px;padding-bottom:4px;margin-top:4px; color: black;">
                                <option value="A">#ComboBox</option>
                                <option value="B">#Item1</option>
                                <option value="C">#Item2</option>
                            </select>
                            <input type="button" value="Submit" style="background-color:#0199EE;width:118px;padding-left:4px;margin-Left:1px;padding-top:4px;padding-bottom:4px;margin-top:7px;border:1px solid #13c6ff" />
                        </div>

                    }
                    if ((context as Node).Shape!.Type == NodeShapes.HTML && ((context as Node).ID == "node3"))
                    {
                        <div style=" width: 100px;
                                                    height: 100px;
                                                    left: 12px;
                                                    right: 12px;
                                                    /* top: 154px; */
                                                    float: left;
                                                    background-size: 100% 100%;background-image: url(@( SampleService!.WebAssetsPath + "/images/diagram/annotation/login.png"))"></div>
                    }
                }
            </NodeTemplate>
        </DiagramTemplates>
    </SfDiagramComponent>
    </div>
    @code {
        public SfDiagramComponent? DiagramInstance { get; set; }
        DiagramObjectCollection<Node>? DiagramNodes { get; set; } = new DiagramObjectCollection<Node>();
        DiagramObjectCollection<Connector>? DiagramConnectors { get; set; } = new DiagramObjectCollection<Connector>();

        protected override void OnInitialized()
        {

            DiagramNodes = new DiagramObjectCollection<Node>()
            {
                new Node()
                {
                    ID = "node1",
                    Width = 130,
                    Height = 120,
                    OffsetX = 200,
                    OffsetY = 100,
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port1",
                            Visibility = PortVisibility.Visible,
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Height = 1, Width = 1,
                            Constraints = PortConstraints.OutConnect,
                            Style = new ShapeStyle()
                            {
                                Fill = "#0079d6",

                            },
                        }
                    },
                    Shape = new Shape()
                    {
                        Type = NodeShapes.HTML,
                    },
                    Style = new ShapeStyle() { Fill = "#f2f2f2", StrokeColor = "#f2f2f2" },
                },
                new Node()
                {
                    ID = "node2",
                    Width = 115,
                    Height = 115,
                    OffsetX = 200,
                    OffsetY = 300,
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port14",
                            Visibility = PortVisibility.Hidden,
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Height = 1, Width = 1,
                            Constraints = PortConstraints.OutConnect,
                            Style = new ShapeStyle()
                            {
                                Fill = "#0079d6",

                            },
                        }
                    },
                    Shape = new BasicShape()
                    {
                        Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse
                    },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "Application",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 0.5 },
                            Style = new TextStyle()
                            {
                                Color = "white",
                            }
                        }
                    },
                    Style = new ShapeStyle() { Fill = "#0199EE", StrokeColor = "#0199EE" }
                },
                new Node()
                {
                    ID = "node3",
                    Width = 100,
                    Height = 100,
                    OffsetX = 200,
                    OffsetY = 500,
                    Style = new ShapeStyle() { Fill = "white", StrokeColor = "white" },
                    Shape = new Shape()
                    {
                        Type = NodeShapes.HTML,
                    },
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port2",
                            Visibility = PortVisibility.Hidden,
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Height = 1, Width = 1,
                            Constraints = PortConstraints.InConnect,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },
                    },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "User Login",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1.2 },
                            Style = new TextStyle()
                            {
                                FontSize = 15,
                            }
                        }
                    },

                },
                new Node()
                {
                    ID = "node4",
                    Width = 170,
                    Height = 80,
                    OffsetX = 500,
                    OffsetY = 300,
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port12",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        },
                        new PointPort()
                        {
                            ID = "port15",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        }
                    },
                    Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "External-Configuration",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 0.5 },
                            Style = new TextStyle()
                            {
                                Color = "white",
                            }
                        }
                    },
                    Style = new ShapeStyle() { Fill = "#0199EE", StrokeColor = "#0199EE" }
                },
                new Node()
                {
                    ID = "node5",
                    Width = 100,
                    Height = 100,
                    OffsetX = 500,
                    OffsetY = 500,
                    Shape = new Shape() { Type = NodeShapes.SVG },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "Local Cache",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1.2 },
                            Style = new TextStyle()
                            {
                                FontSize = 15,
                            }
                        }
                    },
                },
                new Node()
                {
                    ID = "node6",
                    Width = 130,
                    Height = 100,
                    OffsetX = 770,
                    OffsetY = 300,
                    Shape = new Shape() { Type = NodeShapes.SVG },
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port14",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        }
                    },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "Cloud Storage",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1.2 },
                            Style = new TextStyle()
                            {
                                FontSize = 15,
                            }
                        }
                    },


                },
                new Node()
                {
                    ID = "node8",
                    Width = 20,
                    Height = 20,
                    OffsetX = 340,
                    OffsetY = 300,
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port4",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        },
                        new PointPort()
                        {
                            ID = "port5",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        },
                        new PointPort()
                        {
                            ID = "port6",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0.5, Y = 0 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }

                        },
                        new PointPort()
                        {
                            ID = "port7",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },

                    },
                    Shape = new BasicShape()
                    {
                        Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse
                    },
                    Style = new ShapeStyle() { Fill = "#0079d6", StrokeColor = "#0079d6" }
                },
                new Node()
                {
                    ID = "node9",
                    Width = 20,
                    Height = 20,
                    OffsetX = 640,
                    OffsetY = 300,
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port8",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },
                        new PointPort()
                        {
                            ID = "port9",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },
                        new PointPort()
                        {
                            ID = "port10",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0.5, Y = 0 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },
                        new PointPort()
                        {
                            ID = "port11",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        },

                    },
                    Shape = new BasicShape()
                    {
                        Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse
                    },
                    Style = new ShapeStyle() { Fill = "#0079d6", StrokeColor = "#0079d6" }
                },
                new Node()
                {
                    ID = "node7",
                    Width = 100,
                    Height = 100,
                    OffsetX = 770,
                    OffsetY = 500,
                    Shape = new Shape() { Type = NodeShapes.SVG },
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                    {
                        new ShapeAnnotation
                        {
                            Content = "DataBase(Alternative)",
                            // Sets the offset for an annotation content.
                            Offset = new DiagramPoint() { X = 0.5, Y = 1.2 },
                            Style = new TextStyle()
                            {
                                FontSize = 15,
                            }
                        }
                    },
                    Ports = new DiagramObjectCollection<PointPort>()
                    {
                        new PointPort()
                        {
                            ID = "port3",
                            // Sets the offset for the port.
                            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                            Visibility = PortVisibility.Hidden,
                            Width = 1,
                            Height = 1,
                            Style = new TextStyle()
                            {
                                Color = "#0079d6",
                            }
                        }
                    }
                },

            };
            DiagramConnectors = new DiagramObjectCollection<Connector>()
            {
                new Connector()
                {
                    ID = "connector1",
                    //Source node id of the connector.
                    SourceID = "node1",
                    SourcePortID = "port1",
                    //Target node id of the connector.
                    TargetID = "node8",

                    TargetPortID = "port6",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Orthogonal,

                },
                new Connector()
                {
                    ID = "connector2",
                    //Source node id of the connector.
                    SourceID = "node2",
                    SourcePortID = "port14",
                    //Target node id of the connector.
                    TargetID = "node8",

                    TargetPortID = "port5",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Straight,

                },
                new Connector()
                {
                    ID = "connector3",
                    //Source node id of the connector.
                    SourceID = "node8",
                    SourcePortID = "port7",
                    //Target node id of the connector.
                    TargetID = "node3",

                    TargetPortID = "port2",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Orthogonal,

                },
                new Connector()
                {
                    ID = "connector4",
                    //Source node id of the connector.
                    SourceID = "node8",
                    SourcePortID = "port4",
                    //Target node id of the connector.
                    TargetID = "node4",

                    TargetPortID = "port12",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Straight,

                },
                new Connector()
                {
                    ID = "connector5",
                    //Source node id of the connector.
                    SourceID = "node4",

                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    //Target node id of the connector.
                    TargetID = "node5",
                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",
                    },
                    // Type of the connector.
                    Type = ConnectorSegmentType.Straight,
                },
                new Connector()
                {
                    ID = "connector6",
                    //Source node id of the connector.
                    SourceID = "node4",
                    SourcePortID = "port15",
                    //Target node id of the connector.
                    TargetID = "node9",

                    TargetPortID = "port9",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Straight,

                },
                new Connector()
                {
                    ID = "connector7",
                    //Source node id of the connector.
                    SourceID = "node9",
                    SourcePortID = "port1",
                    //Target node id of the connector.
                    TargetID = "node7",

                    TargetPortID = "port3",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",
                    },
                    Type = ConnectorSegmentType.Orthogonal,

                },
                new Connector()
                {
                    ID = "connector8",
                    //Source node id of the connector.
                    SourceID = "node9",
                    SourcePortID = "port8",
                    //Target node id of the connector.
                    TargetID = "node6",

                    TargetPortID = "port14",
                    TargetDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.Arrow,
                    },
                    SourceDecorator = new DecoratorSettings()
                    {
                        Style = new ShapeStyle()
                        {
                            Fill = "#0079d6",
                            StrokeColor = "#0079d6",
                        },
                        Shape = DecoratorShape.None,
                    },

                    Style = new ShapeStyle()
                    {
                        Fill = "#0079d6",
                        StrokeColor = "#0079d6",

                    },
                    Type = ConnectorSegmentType.Straight,

                },
            };
        }

        public class UserHandleAppearance
        {
            public string? Name { get; set; }
        }

        private List<UserHandleAppearance> UserHandleAppearanceLists = new List<UserHandleAppearance>()
        {
            new UserHandleAppearance() { Name = "Item#1" },
            new UserHandleAppearance() { Name = "Item#2" },

        };

        private void OnCreated()
        {
            FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
            DiagramInstance!.FitToPage(mobileoptions);
        }

        @*Hidden:Lines*@
        public void Dispose()
        {
            if (DiagramNodes != null)
            {
                DiagramNodes.Clear();
                DiagramNodes = null;
            }

            if (DiagramConnectors != null)
            {
                DiagramConnectors.Clear();
                DiagramConnectors = null;
            }
        }

        @*End:Hidden*@
    }
