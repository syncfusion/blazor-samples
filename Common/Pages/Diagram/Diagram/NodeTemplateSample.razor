@page "/diagram/html-shapes"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Shapes = Syncfusion.Blazor.Diagram.NodeShapes
@namespace BlazorDemos.Pages
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable

<SampleDescription>
    <p>This sample demonstrates how to host an HTML element within a node. An expense tracker application can be created using the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.html" aria-label="Chart">Chart</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.html" aria-label="Grid">Grid</a> components.</p>
</SampleDescription>
<ActionDescription>
    <p>This example illustrates how to host an HTML control inside a node. By setting the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.NodeShapes.html#Syncfusion_Blazor_Diagram_Shapes_HTML" aria-label="HTML">HTML</a> property to the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Shape.html#Syncfusion_Blazor_Diagram_Shape_Type" aria-label="Type">Type</a> property, you can enable the template node. The content to be hosted can be defined using the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramTemplates.html#Syncfusion_Blazor_Diagram_DiagramTemplates_NodeTemplate" aria-label="NodeTemplate">NodeTemplate</a>.</p>
</ActionDescription>
@*End:Hidden*@
<div class="control-section" style="padding-bottom:0px">
    @*Hidden:Lines*@
    <style>
        #lineChartNode_content_html_template {
            padding-top: 4px !important;
        }

        #barChartNode_content_html_template {
            padding-top: 4px !important;
            margin-left: 4px;
            padding-bottom: 5px !important;
        }

        #datePickerNode_content_html_template {
            top: 13px !important;
        }

        .card-value {
            margin-top: 10px;
            font-family: verdana, "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif";
            font-size: 24px;
            font-weight: 400;
            text-align: center;
        }

        #diagram_control .chart-title {
            font-size: 16px;
        }

        #diagram_control .chart-title,
        #diagram_control .chart-subtitle {
            font-family: Roboto;
            font-size: 16px;
            font-weight: 400;
            font-weight: 400;
            letter-spacing: 0.02em;
            line-height: 16px;
            color: #5f5f5f !important;
        }

        #sfgridaynoarygrlc {
            width: 80%;
        }

        .chart-value {
            color: #676767;
        }

        #diagram_control {
            background-color: white;
            height: 100%;
            width: auto;
        }

            #diagram_control .e-grid,
            #diagram_control .e-grid .e-gridheader {
                border: none;
            }


        .pieChartHeader {
            margin-left: 20px;
            margin-top: 20px;
        }

        .diagram_border_cus {
            border: 1px solid transparent;
            background: #FFFFFF;
            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
            border-radius: 6px;
        }

        .diagram_chart {
            padding-left: 15px;
            padding-right: 15px;
        }

        .card .e-card-content {
            padding: 1rem;
        }

        .card-text {
            font-family: verdana, "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
            font-size: 13px;
            color: #6f6f6f !important;
            display: block;
            text-align: center;
            padding: 4px 0;
        }

        #tolincome {
            color: #4d80f3;
        }

        #tolexpense {
            color: #ff2f75;
        }
         #grid .e-gridheader {
            visibility: hidden;
        }
        .e-card {
            border-radius: 2px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif", "-apple-system", "BlinkMacSystemFont";
            font-size: 15px;
            justify-content: center;
            line-height: 36px;
            min-height: 36px;
            overflow: hidden;
            position: relative;
            text-overflow: ellipsis;
            vertical-align: middle;
            width: 100%;
        }

        #tolbalance {
            color: #2ba700;
        }

        #element_calander .e-input-group:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left),
        .e-input-group.e-float-icon-left:not(.e-success):not(.e-warning):not(.e-error) .e-input-in-wrap,
        .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left) {
            border: none;
        }

        .chart-padding {
            border: 1px solid transparent;
            background: #FFFFFF;
            box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
            border-radius: 6px;
        }

        .diagram_border_cal {
            height: 30px;
            padding-left: 0px;
        }

        .sf-grid e-grid e-control e-responsive e-default e-grid-height e-hidelines e-lib e-keyboard {
        }

        .control-section {
            background-color: #F5F5F5;
        }

        #custom-diagram .e-diagram-resize-handle.e-disabled {
            fill: #ced4da;
            opacity: 1;
            stroke: #fff;
            visibility: hidden;
        }
    </style>
    @*End:Hidden*@
    <SfDiagramComponent @ref="@diagram" Height="1060px" Nodes="@nodes" Created = "OnCreated">
        <SnapSettings Constraints=SnapConstraints.ShowLines>
        </SnapSettings>
        <DiagramTemplates>
            <NodeTemplate>
                @{
                    var id = (context as Node).ID;
                    if (id == "pieChartNode")
                    {
                        @*Hidden:Lines*@
                        <div id="diagram_control" class="diagram_border_cus">
                            <div class="pane col-xs-12 col-sm-12 col-md-12 pie-container">
                                <div class="pieChartHeader">
                                    <p class="chart-title">Total Expenses</p>
                                    <p id="rangeDate" class="chart-value">@Months[startDate.Month] @startDate.Day - @Months[endDate.Month] @endDate.Day</p>
                                </div>
                                @*End:Hidden*@
                                <div id="pieChart" style="height:100%; width:49%; overflow:hidden;float:left;" margin="20px">
                                    <SfAccumulationChart Width="100%" Height="350px" EnableAnimation="false" EnableSmartLabels="true">
                                        <AccumulationChartSeriesCollection>
                                            <AccumulationChartSeries DataSource="@pieRenderingData" XName="Text" YName="Y" Radius="83%" StartAngle="0" EndAngle="360" InnerRadius="50%" Palettes="@palettes">
                                                <AccumulationDataLabelSettings Visible="true" Name="X" Position="AccumulationLabelPosition.Outside">
                                                    <AccumulationChartConnector Length="10%"></AccumulationChartConnector>
                                                    <AccumulationChartDataLabelFont Color="Black" Size="14px" FontFamily="Roboto"></AccumulationChartDataLabelFont>
                                                </AccumulationDataLabelSettings>
                                            </AccumulationChartSeries>
                                        </AccumulationChartSeriesCollection>
                                        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                                        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                                    </SfAccumulationChart>
                                </div>
                                <div id="grid" style="height:100%; width:49%; overflow:hidden;float:left;">
                                    <SfGrid TValue="LegendRenderData" DataSource="@pieRenderData" Width="80%" AllowSelection="false" GridLines="GridLine.None" EnableHover="false">
                                        <GridTemplates>
                                            <RowTemplate Context="rowValue">
                                                @{ var legend = (rowValue as LegendRenderData);
                                                    var style = "width: 16px; height: 16px; margin-left: 1px; border-radius: 16px; background:" + legend.Color;
                                                    <td>
                                                        <div style="@style"></div>
                                                    </td>
                                                    <td style="height:30px"> @legend.Text </td>
                                                    <td> $@legend.Y </td>
                                                    <td style="text-align:right;">@legend.X </td> }
                                            </RowTemplate>
                                        </GridTemplates>
                                        <div>
                                            <GridColumns>
                                                <GridColumn Width="10%" TextAlign="@Syncfusion.Blazor.Grids.TextAlign.Center"></GridColumn>
                                                <GridColumn Width="50%"></GridColumn>
                                                <GridColumn Format="C2" Width="20%"></GridColumn>
                                                <GridColumn Width="20%"></GridColumn>
                                            </GridColumns>
                                        </div>
                                    </SfGrid>
                                </div>
                                @*Hidden:Lines*@
                            </div>
                        </div>
                        @*End:Hidden*@
                    }
                    else if (id == "barChartNode")
                    {
                        @*Hidden:Lines*@
                        <div class="diagram_border_cus diagram_chart">
                            @*End:Hidden*@
                            <div id="lineChart">
                                <SfChart @ref="chartRef" UseGroupingSeparator="true" Width="100%">
                                    <ChartMargin Top="90"></ChartMargin>
                                    <ChartArea>
                                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                                    </ChartArea>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MMM" IntervalType="IntervalType.Months">
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    </ChartPrimaryXAxis>
                                    <ChartPrimaryYAxis LabelFormat="c0" Maximum="1800" Interval="300"></ChartPrimaryYAxis>
                                    <ChartAnnotations>
                                        <ChartAnnotation X="@chartXAnnoation" Y="9%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                                            <ContentTemplate>
                                                <p style="font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;">Account - Balance</p>
                                            </ContentTemplate>
                                        </ChartAnnotation>
                                    </ChartAnnotations>
                                    <ChartSeriesCollection>
                                        <ChartSeries Type="ChartSeriesType.Area" XName="DateTime" Width="2" YName="Amount" Name="Amount" Fill="rgba(4, 112, 216, 0.3)"
                                                     DataSource="@lineChartData">
                                            <ChartSeriesBorder Width="0.5" Color="#0470D8"></ChartSeriesBorder>
                                            <ChartMarker Visible="true" Width="10" Height="10" Fill="white">
                                                <ChartMarkerBorder Width="2" Color="#0470D8"></ChartMarkerBorder>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Fill="#707070" Enable="true" Format="${series.name} : ${point.y}" Header="Month - ${point.x} "></ChartTooltipSettings>
                                    <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                </SfChart>
                            </div>
                            @*Hidden:Lines*@
                        </div>
                        @*End:Hidden*@
                    }
                    if (id == "lineChartNode")
                    {
                        @*Hidden:Lines*@
                        <div class="chart-padding">
                            @*End:Hidden*@
                            <div class="line-chart">
                                <SfChart @ref="chartRef" Width="100%" UseGroupingSeparator="true">
                                    <ChartMargin Top="90"></ChartMargin>
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MMM" IntervalType="IntervalType.Months" EdgeLabelPlacement="EdgeLabelPlacement.Shift"></ChartPrimaryXAxis>
                                    <ChartPrimaryYAxis LabelFormat="c0" Maximum="9000" Minimum="3000"></ChartPrimaryYAxis>
                                    <ChartAnnotations>
                                        <ChartAnnotation X="@chartXAnnoation" Y="9%" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                                            <ContentTemplate>
                                                <p style="font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;">Income - Expense</p>
                                            </ContentTemplate>
                                        </ChartAnnotation>
                                    </ChartAnnotations>
                                    <ChartSeriesCollection>
                                        <ChartSeries Type="ChartSeriesType.Column" XName="DateTime" YName="Amount" Width="2" Name="Income" Fill="#A16EE5"
                                                     LegendShape="LegendShape.Circle" DataSource="@colChartIncomeData">
                                            <ChartSeriesBorder Width="0.5" Color="#A16EE5"></ChartSeriesBorder>
                                            <ChartMarker Visible="true" Width="10" Height="10"></ChartMarker>
                                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        </ChartSeries>
                                        <ChartSeries Type="ChartSeriesType.Column" Width="2" XName="DateTime" YName="Amount" Name="Expense" Fill="#4472C4"
                                                     LegendShape="LegendShape.Circle" DataSource="@colChartExpenseData">
                                            <ChartSeriesBorder Width="0.5" Color="#A16EE5"></ChartSeriesBorder>
                                            <ChartMarker Visible="true" Width="10" Height="10"></ChartMarker>
                                            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                    <ChartTooltipSettings Fill="#707070" Enable="true" Shared="true" Format="${series.name} : ${point.y}" Header="Month - ${point.x} "></ChartTooltipSettings>
                                    <ChartTitleStyle TextAlignment="Syncfusion.Blazor.Charts.Alignment.Near" FontWeight="500" Size="16" Color="#000"></ChartTitleStyle>
                                    <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                </SfChart>
                            </div>
                            @*Hidden:Lines*@
                        </div>
                        @*End:Hidden*@
                    }
                    else if (id == "datePickerNode")
                    {
                        @*Hidden:Lines*@
                        <div class="diagram_border_cus diagram_border_cal">
                            @*End:Hidden*@
                            <div id="element_calander">
                                <SfDateRangePicker TValue="DateTime" AllowEdit="false" ShowClearButton="false" Format="MM/dd/yyyy" StartDate="@expense.StartDate" EndDate="@expense.EndDate" Min="@minDate" Max="@maxDate">
                                    <DateRangePickerEvents TValue="DateTime" ValueChange="OnDateRangeChange">

                                    </DateRangePickerEvents>
                                    <DateRangePickerPresets>
                                        <DateRangePickerPreset Label="Last Month" Start="@lastMonthStart" End="@lastMonthEnd"></DateRangePickerPreset>
                                        <DateRangePickerPreset Label="Last 3 Months" Start="@last3MonthStart" End="@last3MonthEnd"></DateRangePickerPreset>
                                        <DateRangePickerPreset Label="All Time" Start="@allTimeStart" End="@allTimeEnd"></DateRangePickerPreset>
                                    </DateRangePickerPresets>
                                </SfDateRangePicker>
                            </div>
                            @*Hidden:Lines*@
                        </div>
                        @*End:Hidden*@
                    }
                    if (id == "incomeNode")
                    {
                        <div>
                            <div class="e-card card">
                                <div class="e-card-content">
                                    <h2 class="card-value" id="tolincome">$43,300</h2>
                                    <span class="card-text">Income</span>
                                </div>
                            </div>
                        </div>
                    }
                    else if (id == "expenseNode")
                    {
                        <div>
                            <div class="e-card card">
                                <div class="e-card-content">
                                    <h2 class="card-value" id="tolexpense">$38,060</h2>
                                    <span class="card-text">Expenses</span>
                                </div>
                            </div>
                        </div>
                    }
                    else if (id == "balanceNode")
                    {
                        <div>
                            <div class="e-card card">
                                <div class="e-card-content">
                                    <h2 class="card-value" id="tolbalance">$5,240</h2>
                                    <span class="card-text">Balance</span>
                                </div>
                            </div>
                        </div>
                    }
                }
            </NodeTemplate>
        </DiagramTemplates>
    </SfDiagramComponent>
</div>

@code{
    @*Hidden:Lines*@
    private string chartXAnnoation = "75px";
    private SfChart chartRef;
    @*End:Hidden*@

    public DateTime startDate { get; set; }
    public DateTime endDate { get; set; }
    SfDiagramComponent diagram;
    public ExpenseDataService expense { get; set; }
    public List<ExpenseData> lineChartData { get; set; }
    private List<RenderingData> pieRenderingData;
    private List<LegendRenderData> pieRenderData;
    private string[] Months = new string[] { "", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
                    "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };

    private DateTime minDate = new DateTime(2021, 06, 01, 00, 00, 00);
    private DateTime maxDate = new DateTime(2021, 11, 30, 23, 59, 59);
    private DateTime lastMonthStart = new DateTime(2021, 10, 01, 00, 00, 00);
    private DateTime lastMonthEnd = new DateTime(2021, 10, 31, 23, 59, 59);
    private DateTime last3MonthStart = new DateTime(2021, 09, 01, 00, 00, 00);
    private DateTime last3MonthEnd = new DateTime(2021, 11, 30, 23, 59, 59);
    private DateTime allTimeStart = new DateTime(2021, 06, 01, 00, 00, 00);
    private DateTime allTimeEnd = new DateTime(2021, 11, 30, 23, 58, 58);

    private List<ExpenseData> colChartIncomeData;
    private List<ExpenseData> colChartExpenseData;
    private IEnumerable<ExpenseData> recentExpenseData;
    private IEnumerable<ExpenseData> incomeData;
    private IEnumerable<ExpenseData> expenseData;
    private List<TempExpenseData> tempExpenseDS;
    private List<TempExpenseData> tempIncomeDS;    
    public IEnumerable<ExpenseData> expenseDataSource { get; set; }
    
    //Defines diagrams's nodes collection
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    protected override void OnInitialized()
    {
        
        expense = new ExpenseDataService();
        Node pieChartNode = new Node()
        {
            ID = "pieChartNode",
            Width = 1050,
            Height = 430,
            OffsetX = 600,
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Constraints = AnnotationConstraints.ReadOnly } },
            Constraints = NodeConstraints.Default & ~NodeConstraints.Resize & ~NodeConstraints.Rotate& ~NodeConstraints.Select,
            OffsetY = 380,
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };
        Node lineChartNode = new Node()
        {
            ID = "lineChartNode",
            Width = 512,
            Height = 408,
            OffsetX = 870,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Resize & ~NodeConstraints.Rotate& ~NodeConstraints.Select,
            OffsetY = 810,
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML },
        };
        Node barChartNode = new Node()
        {
            ID = "barChartNode",
            Width = 512,
            Height = 408,
            OffsetX = 325,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Resize & ~NodeConstraints.Rotate& ~NodeConstraints.Select,
            OffsetY = 810,
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };
        Node datePickerNode = new Node()
        {
            ID = "datePickerNode",
            Width = 250,

            OffsetX = 1000,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Resize & ~NodeConstraints.Rotate& ~NodeConstraints.Select,
            OffsetY = 170,
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };
        TextStyle textStyle = new TextStyle()
        {
            FontSize = 16,
            Color = "#797979",
            Bold = true
        };
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation()
        {
            Content = "EXPENSE TRACKER",
            Style = textStyle
        };
        Node textNode = new Node()
        {
            ID = "textNode",
            Width = 250,
            Height = 30,
            OffsetX = 153,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Resize & ~NodeConstraints.Rotate,
            OffsetY = 20,
            Style = new ShapeStyle() { Fill = "Transparent", StrokeColor = "Transparent" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
        };

        Node incomeNode = new Node()
        {
            ID = "incomeNode",
            Width = 250,
            Height = 100,
            OffsetX = 200,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Select,
            //Style = new ShapeStyle() { StrokeColor = "Transparent" },
            OffsetY = 90,
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };
        Node expenseNode = new Node()
        {
            ID = "expenseNode",
            Width = 250,
            Height = 100,
            OffsetX = 460,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Select,
            OffsetY = 90,
            Style = new ShapeStyle() { StrokeColor = "Transparent" },
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };
        Node balanceNode = new Node()
        {
            ID = "balanceNode",
            Width = 250,
            Height = 100,
            OffsetX = 720,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Select,
            OffsetY = 90,
            Style = new ShapeStyle() { StrokeColor = "Transparent" },
            Shape = new Syncfusion.Blazor.Diagram.Shape() { Type = Shapes.HTML }
        };

        nodes.Add(pieChartNode);
        nodes.Add(lineChartNode);
        nodes.Add(barChartNode);
        nodes.Add(datePickerNode);
        nodes.Add(textNode);
        nodes.Add(incomeNode);
        nodes.Add(expenseNode);
        nodes.Add(balanceNode);
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        diagram.FitToPage(mobileoptions);
    }
    //Method to define update charts depends on date
    private async Task OnDateRangeChange(RangePickerEventArgs<DateTime> args)
    {
        expense.SetDate(args.StartDate, args.EndDate);
        InitializeData();
        UpdateChartData();
        StateHasChanged();
        await RefreshCharts(lineChartData);
        RefreshPieChart(expenseData);
    }

    //Method to define refresh pie chart
    public void RefreshPieChart(IEnumerable<ExpenseData> expenseData)
    {
        expenseDataSource = expenseData;
        UpdatePieChart();
    }

    //Method to define refresh line chart
    public async Task RefreshCharts(List<ExpenseData> lineChartDataSource)
    {
        lineChartData = lineChartDataSource;
        await InvokeAsync(async () =>
        {
            await Task.Delay(1);
            chartRef?.RefreshLiveData();
        });
    }
    private void InitializeData()
    {
        DateTime start = expense.StartDate; DateTime end = expense.EndDate;
        var commonData = expense.ExpenseData.Where(s => s.DateTime >= start && s.DateTime <= end);
        expense.SetCurrentData(commonData);
        var expenseD = new List<ExpenseData>();
        var incomeD = new List<ExpenseData>();
        tempExpenseDS = new List<TempExpenseData>();
        tempIncomeDS = new List<TempExpenseData>();
        var curDateTime = new ExpenseData();
        var lineDS = new List<ExpenseData>();
        foreach (var data in commonData)
        {
            var tempData = new ExpenseData { Amount = data.Amount, Category = data.Category, DateTime = data.DateTime, Description = data.Description, FormattedDate = data.FormattedDate, MonthFull = data.MonthFull, MonthShort = data.MonthShort, PaymentMode = data.PaymentMode, TransactionType = data.TransactionType, UniqueId = data.UniqueId };
            if (data.TransactionType == "Expense")
            {
                expenseD.Add(data);
                int index = tempExpenseDS.FindIndex(s => s.Month == tempData.DateTime.Month);
                if (index >= 0)
                {
                    curDateTime = tempExpenseDS[index].ExpenseData;
                    tempExpenseDS[index].ExpenseData.Amount = curDateTime.Amount + tempData.Amount;
                }
                else
                {
                    tempExpenseDS.Add(new TempExpenseData { Month = tempData.DateTime.Month, ExpenseData = tempData });
                    index = tempExpenseDS.Count() - 1;
                    tempExpenseDS[index].ExpenseData.DateTime = new DateTime(tempExpenseDS[index].ExpenseData.DateTime.Year, tempExpenseDS[index].ExpenseData.DateTime.Month, 1, 0, 0, 0, 0);
                }
            }
            else
            {
                incomeD.Add(data);
                int index = tempIncomeDS.FindIndex(s => s.Month == tempData.DateTime.Month);
                if (index >= 0)
                {
                    curDateTime = tempIncomeDS[index].ExpenseData;
                    tempIncomeDS[index].ExpenseData.Amount = curDateTime.Amount + tempData.Amount;
                }
                else
                {
                    tempIncomeDS.Add(new TempExpenseData { Month = tempData.DateTime.Month, ExpenseData = tempData });
                    index = tempIncomeDS.Count() - 1;
                    tempIncomeDS[index].ExpenseData.DateTime = new DateTime(tempIncomeDS[index].ExpenseData.DateTime.Year, tempIncomeDS[index].ExpenseData.DateTime.Month, 1, 0, 0, 0, 0);
                }
            }
        }
        expenseData = expenseD;
        incomeData = incomeD;
        lineChartData = lineDS;
        recentExpenseData = commonData.OrderByDescending(s => s.DateTime).Take(5);
    }

    //Method to define update chart data
    private void UpdateChartData()
    {
        var lineD = new List<TempExpenseData>();
        var lineDS = new List<ExpenseData>();
        var colIncomeDS = new List<ExpenseData>();
        foreach (var data in this.tempIncomeDS)
        {
            colIncomeDS.Add(data.ExpenseData);
            ProcessLineData(data.ExpenseData, lineD, lineDS);
        }
        colChartIncomeData = colIncomeDS;
        var colExpenseDS = new List<ExpenseData>();
        foreach (var data in tempExpenseDS)
        {
            colExpenseDS.Add(data.ExpenseData);
            ProcessLineData(data.ExpenseData, lineD, lineDS);
        }
        colChartExpenseData = colExpenseDS;
        lineChartData = lineDS;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        expense = new ExpenseDataService();
        InitializeData();
        UpdateChartData();
        UpdatePieChart();
    }

    //Method to define update pie chart
    private void UpdatePieChart()
    {
        startDate = expense.StartDate;
        endDate = expense.EndDate;
        var category = new List<string>();
        var renderingData = new List<RenderingData>();
        var lengendRenderData = new List<LegendRenderData>();
        var legendData = new List<ExpenseData>();
        ExpenseData data = new ExpenseData();
        var expTotal = 0;

        // Extracts the category based data from the whole expense data
        foreach (var item in expenseData)
        {
            expTotal += Convert.ToInt32(item.Amount);
            legendData.Add(item);
            if (!category.Contains(item.Category))
            {
                category.Add(item.Category);
            }
        }
        // From the category data, percentage calculation for legend grid
        for (int i = 0; i < category.Count(); i++)
        {
            var str = category[i];
            int total = 0;
            foreach (var item in legendData)
            {
                if (str == item.Category)
                    total += Convert.ToInt32(item.Amount);
                data = item;
            }
            string percent = (((decimal)total / expTotal) * 100).ToString("N2") + '%';
            renderingData.Add(new RenderingData { X = str, Y = total, Text = percent, Fill = "" });
        }
        renderingData = renderingData.OrderByDescending(s => s.Y).ToList();
        var GroupValue = renderingData.Count() > 10 ? renderingData[8].Y - 1 : 0;
        LegendRenderData othersRenderData = new LegendRenderData { Color = "", X = "0", Y = 0, Text = "Others" };
        RenderingData othersRenderingData = new RenderingData { Fill = "", X = "Others", Y = 0, Text = "0" };
        decimal X = 0; var Y = 0;

        for (int i = 0; i < renderingData.Count(); i++)
        {
            renderingData[i].Fill = this.palettes[i];
            if (renderingData[i].Y > GroupValue)
            {
                lengendRenderData.Add(new LegendRenderData { X = renderingData[i].Text, Y = renderingData[i].Y, Text = renderingData[i].X, Color = this.palettes[i] });
            }
            else
            {
                if (othersRenderData.Color == "")
                {
                    othersRenderData.Color = renderingData[i].Fill;
                    othersRenderingData.Fill = renderingData[i].Fill;
                }
                X += Convert.ToDecimal(renderingData[i].Text.Split("%")[0]); Y += renderingData[i].Y;
                renderingData.RemoveAt(i);
                if (i != 0) { i--; }
            }
        }
        if (othersRenderData.Color != "")
        {
            othersRenderData.X = X.ToString() + "%"; othersRenderingData.Text = X.ToString() + "%";
            othersRenderData.Y = Y; othersRenderingData.Y = Y;
            lengendRenderData.Add(othersRenderData); renderingData.Add(othersRenderingData);
        }
        pieRenderingData = renderingData;
        pieRenderData = lengendRenderData;

    }

    //Method to define update line chart
    private void ProcessLineData(ExpenseData data, List<TempExpenseData> LineD, List<ExpenseData> LineDS)
    {
        var curDateTime = new ExpenseData();
        var lineData = new ExpenseData { Amount = data.Amount, Category = data.Category, DateTime = data.DateTime, Description = data.Description, FormattedDate = data.FormattedDate, MonthFull = data.MonthFull, MonthShort = data.MonthShort, PaymentMode = data.PaymentMode, TransactionType = data.TransactionType, UniqueId = data.UniqueId };
        int idx = LineD.FindIndex(s => s.Month == lineData.DateTime.Month);
        if (idx >= 0)
        {
            curDateTime = LineD[idx].ExpenseData;
            LineD[idx].ExpenseData.Amount = Math.Abs(curDateTime.Amount - lineData.Amount);
        }
        else
        {
            LineD.Add(new TempExpenseData { Month = lineData.DateTime.Month, ExpenseData = lineData });
            LineDS.Add(LineD[LineD.Count - 1].ExpenseData);
        }
    }
    private class TempExpenseData
    {
        public int Month { get; set; }
        public ExpenseData ExpenseData { get; set; }
    }
    private class RenderingData
    {
        public string X { get; set; }
        public int Y { get; set; }
        public string Text { get; set; }
        public string Fill { get; set; }
    }
    private class LegendRenderData
    {
        public string X { get; set; }
        public int Y { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
    }
    @*End:Hidden*@
}

