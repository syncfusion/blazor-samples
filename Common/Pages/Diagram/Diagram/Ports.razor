@page "/diagram/ports"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@*Hidden:Lines*@
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@
@using NodeShape = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inject NavigationManager NavigationManager


@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample visualizes the process of publishing a book using connection points. Connection points are static points over the shapes used to create connections between the shapes. Customizing the size and appearance of the connection points is illustrated in this example.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to add connection points to shapes. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_Ports' aria-label="Ports">Ports</a></code> property of the node defines the static connection ports. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PointPort.html#Syncfusion_Blazor_Diagram_PointPort_Offset' aria-label="Offset">Offset</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_HorizontalAlignment' aria-label="HorizontalAlignment">HorizontalAlignment</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_VerticalAlignment' aria-label="VerticalAlignment">VerticalAlignment</a></code>, and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Margin' aria-label="Margin">Margin</a></code> properties of the port define its position.</p>
    <p>The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Style'>Style</a></code> property is used to customize its appearance. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Visibility' aria-label="Visibility">Visibility</a></code> property can be used to define when the connection ports should be visible.</p>
    <p>The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_ConnectionDirecction'>ConnectionDirection</a></code> property controls the direction for connections to the port. By default, the direction of the connection is automatically assigned based on the port's position and the direction of the connector's other endpoint. But the connection-direction can be set with a specific direction.</p>
</ActionDescription>
@*End:Hidden*@

<div class="content-wrapper">
    <div class="col-lg-9 control-section sb-property-border" style="height: 640px">
        <SfDiagramComponent @ref="@Diagram"
                            Height="600px"
                            SelectionChanged="@SelectionChanged"
                            Nodes="@nodes"
                            Connectors="@connectors"
                            Created="OnCreated">
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@gridLineIntervals">
                </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@gridLineIntervals">
                </VerticalGridLines>
            </SnapSettings>
        </SfDiagramComponent>
    </div>
    @*Hidden:Lines*@
    <style>
        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-bigger .e-btn.e-small.e-icon-btn {
            padding: 0px;
        }
    </style>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div id="propertypanel" class="e-remove-selection">
            <div class="property-section-content property-panel-content">
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Visibility
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" TItem="DiagramShapeModel" Width="110px" @bind-Value="@portVisibility" Placeholder="Select Visibility" DataSource="postVisibilityType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnVisibilityChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Shape
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" Width="110px" TItem="DiagramShapeModel" @bind-Value="@selectedShape" DataSource="shape" @ref="@dropDownList" Placeholder="Select a Shape">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnShapeChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Stroke Width
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox @ref="@strokeWidth" @bind-Enabled="@enableNumeric" TValue="double" Width="110px" @bind-Value="@widthNumeric" Min="1" Max="50" Step="0.5" Format="###.##">
                            <NumericTextBoxEvents TValue="double" ValueChange="OnBorderWidthChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>

                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Size
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox @ref="@sizeTextBox" @bind-Enabled="@enableNumeric" TValue="double" Width="110px" @bind-Value="@sizeNumeric" Min="1" Max="50" Step="1" Format="###.##">
                            <NumericTextBoxEvents TValue="double" ValueChange="OnSizeChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Fill Color
                    </div>
                    <div class="col-xs-6">
                        <SfColorPicker @bind-Disabled="@disablePicker" ValueChange="OnFillColorChange" @bind-Value="@fillColor"></SfColorPicker>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Stroke Color
                    </div>
                    <div class="col-xs-6">
                        <SfColorPicker @bind-Disabled="@disablePicker" ValueChange="OnBorderChange" @bind-Value="@strokeColor"></SfColorPicker>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Connection Direction
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" Width="110px" TItem="DiagramShapeModel" @bind-Value="@selectedDirection" DataSource="direction" @ref="@dropDownList" Placeholder="Select Direction">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnDirectionChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*End:Hidden*@
</div>
@code
{
    @*Hidden:Lines*@
    
    bool disablePicker = true;
    bool enableNumeric = false;
    bool enableDropDown = false;
    SfNumericTextBox<double>? strokeWidth;
    SfNumericTextBox<double>? sizeTextBox;
    SfDropDownList<string, DiagramShapeModel>? dropDownList;
    public string styleValue = "background-color:#008000";
    @*End:Hidden*@
    string portVisibility = "Visible";
    double sizeNumeric = 8;
    double widthNumeric = 1;
    string selectedShape = "Circle";
    string selectedDirection = "Auto";
    string fillColor = "#1916C1";
    string strokeColor = "#000";
    SfDiagramComponent? Diagram;
    // Defines interval values for GridLines
    public double[]? gridLineIntervals { get; set; }

    //Defines diagrams's nodes collection
    DiagramObjectCollection<Node>? nodes = new DiagramObjectCollection<Node>();

    //Defines diagrams's connectors collection
    DiagramObjectCollection<Connector>? connectors = new DiagramObjectCollection<Connector>();

    private void OnCreated()
    {
        Diagram!.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes![0] });
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        Diagram.FitToPage(mobileoptions);
    }

    @*Hidden:Lines*@
    public async void OnVisibilityChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("visibility", args.Value!);
    }

    public async void OnShapeChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("shape", args.Value!);
    }

    public async void OnDirectionChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("direction", args.Value!);
    }

    List<DiagramShapeModel> shape = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "X", Text= "X" },
        new DiagramShapeModel() { Value= "Circle", Text= "Circle" },
        new DiagramShapeModel() { Value= "Square", Text= "Square" },
        new DiagramShapeModel() { Value="Custom", Text= "Custom" }
    };

    List<DiagramShapeModel> postVisibilityType = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "Visible", Text= "Visible" },
        new DiagramShapeModel() { Value= "Hover", Text= "Hover" },
        new DiagramShapeModel() { Value= "Connect", Text= "Connect" }
    };

    List<DiagramShapeModel> direction = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "Auto", Text= "Auto" },
        new DiagramShapeModel() { Value= "Left", Text= "Left" },
        new DiagramShapeModel() { Value= "Top", Text= "Top" },
        new DiagramShapeModel() { Value="Right", Text= "Right" },
        new DiagramShapeModel() { Value="Bottom", Text= "Bottom" }
    };

    public async Task OnBorderChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue!.Hex;
        await ApplyPortStyle("strokecolor", args.CurrentValue.Hex!);
    }

    public async Task OnBorderWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await ApplyPortStyle("strokewidth", args.Value);
    }

    public async Task OnSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await ApplyPortStyle("size", args.Value);
    }

    public async Task OnFillColorChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue!.Hex;
        await ApplyPortStyle("fill", args.CurrentValue.Hex!);
    }

    public class DiagramShapeModel
    {
        public string? Value { get; set; }
        public string? Text { get; set; }
    }

    private async Task ApplyPortStyle(string propertyName, Object propertyValue)
    {
        Diagram!.StartGroupAction();
        Diagram.BeginUpdate();
        if (Diagram.SelectionSettings != null && Diagram.SelectionSettings.Nodes != null && Diagram.SelectionSettings.Nodes.Count > 0)
        {
            List<PointPort> ports = Diagram.SelectionSettings.Nodes[0].Ports!.ToList();
            for (int j = 0; j < ports.Count; j++)
            {
                PointPort port = ports[j];
                switch (propertyName)
                {
                    case "fill":
                        port.Style.Fill = propertyValue.ToString();
                        break;
                    case "strokecolor":
                        port.Style.StrokeColor = propertyValue.ToString();
                        break;
                    case "size":
                        port.Width = port.Height = Convert.ToInt32(propertyValue);
                        break;
                    case "strokewidth":
                        port.Style.StrokeWidth = Convert.ToInt32(propertyValue);
                        break;
                    case "visibility":
                        port.Visibility = (PortVisibility)Enum.Parse(typeof(PortVisibility), propertyValue.ToString()!);
                        break;
                    case "shape":
                        port.Shape = (PortShapes)Enum.Parse(typeof(PortShapes), propertyValue.ToString()!);
                        if (propertyValue.ToString() == "Custom")
                        {
                            port.PathData = "M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z";
                        }
                        break;
                    case "direction":
                        port.ConnectionDirection = (PortConnectionDirection)Enum.Parse(typeof(PortConnectionDirection), propertyValue.ToString()!);
                        break;
                }
            }
        }
        await Diagram.EndUpdateAsync();
        Diagram.EndGroupAction();
    }
    @*End:Hidden*@

    // Method to update the style for the selected node's port.
    private void SelectionChanged(SelectionChangedEventArgs arg)
    {
        if (arg.NewValue != null && arg.NewValue.Count > 0 && !(arg.NewValue[0] is Connector))
        {
            disablePicker = false;
            enableDropDown = true;
            enableNumeric = true;
            if (arg.NewValue[0] is Node)
            {
                Node? node = arg.NewValue[0] as Node;
                List<PointPort> ports = node!.Ports!.ToList();
                if (ports.Count > 0)
                {
                    PointPort port = ports[0];
                    portVisibility = port.Visibility.ToString();
                    selectedShape = port.Shape.ToString();
                    sizeNumeric = port.Width;
                    widthNumeric = port.Style.StrokeWidth;
                    fillColor = port.Style.Fill!;
                    strokeColor = port.Style.StrokeColor!;
                    selectedDirection = port.ConnectionDirection.ToString();
                }
            }
        }
        else
        {
            disablePicker = true;
            enableDropDown = false;
            enableNumeric = false;
        }
    }

    protected override void OnInitialized()
    {
        
        gridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        nodes = new DiagramObjectCollection<Node>();
        #region Ports
        List<PointPort> portsfornode1 = new List<PointPort>();
        portsfornode1.Add(AddPort("port1", 0.01, 0.5));
        portsfornode1.Add(AddPort("port2", 1, 0.5));
        portsfornode1.Add(AddPort("port3", 0.25, 1));
        portsfornode1.Add(AddPort("port4", 0.5, 1));
        portsfornode1.Add(AddPort("port5", 0.75, 1));

        List<PointPort> portsfornode2 = new List<PointPort>();
        portsfornode2.Add(AddPort("port6", 0.01, 0.5));
        portsfornode2.Add(AddPort("port7", 1, 0.35));
        portsfornode2.Add(AddPort("port8", 1, 0.7));
        portsfornode2.Add(AddPort("port9", 0.5, 1));

        List<PointPort> portsfornode3 = new List<PointPort>();
        portsfornode3.Add(AddPort("port10", 0.01, 0.5));
        portsfornode3.Add(AddPort("port11", 0.5, 0.01));
        portsfornode3.Add(AddPort("port12", 0.5, 1));

        List<PointPort> portsfornode4 = new List<PointPort>();
        portsfornode4.Add(AddPort("port13", 0.01, 0.5));
        portsfornode4.Add(AddPort("port14", 0.5, 0.01));
        portsfornode4.Add(AddPort("port15", 0.5, 1));

        List<PointPort> portsfornode5 = new List<PointPort>();
        portsfornode5.Add(AddPort("port16", 0.01, 0.5));
        portsfornode5.Add(AddPort("port17", 0.5, 0.01));
        portsfornode5.Add(AddPort("port18", 1, 0.5));

        List<PointPort> portsfornode6 = new List<PointPort>();
        portsfornode6.Add(AddPort("port19", 0.01, 0.35));
        portsfornode6.Add(AddPort("port20", 0.5, 1));

        List<PointPort> portsfornode7 = new List<PointPort>();
        portsfornode7.Add(AddPort("port21", 0.5, 0.01));
        portsfornode7.Add(AddPort("port22", 0.5, 1));

        #endregion

        #region Nodes
        AddNode("Publisher", "Publisher", portsfornode1, 200, 160, NodeBasicShapes.Rectangle);
        AddNode("Completedbook", "Completed book", portsfornode2, 400, 160, NodeBasicShapes.Rectangle);
        AddNode("Firstreview", "First review", portsfornode3, 400, 260, NodeBasicShapes.Diamond);
        AddNode("Legalterms", "Legal terms", portsfornode4, 400, 360, NodeBasicShapes.Rectangle);
        AddNode("Secondreview", "Second review", portsfornode5, 400, 460, NodeBasicShapes.Diamond);
        AddNode("Board", "Board", portsfornode6, 600, 160, NodeBasicShapes.Rectangle);
        AddNode("Approval", "Approval", portsfornode7, 600, 260, NodeBasicShapes.Diamond);

        #endregion

        #region Connectors
        connectors = new DiagramObjectCollection<Connector>();
        AddConnector("connector1", "Publisher", "port2", "Completedbook", "port6");
        AddConnector("connector2", "Publisher", "port4", "Legalterms", "port13");
        AddConnector("connector3", "Completedbook", "port9", "Firstreview", "port11");
        AddConnector("connector4", "Completedbook", "port7", "Board", "port19");
        AddConnector("connector5", "Firstreview", "port10", "Publisher", "port5");
        AddConnector("connector6", "Firstreview", "port12", "Legalterms", "port14");
        AddConnector("connector7", "Legalterms", "port15", "Secondreview", "port17");
        AddConnector("connector8", "Secondreview", "port18", "Completedbook", "port8");
        AddConnector("connector9", "Secondreview", "port16", "Publisher", "port3");
        AddConnector("connector10", "Board", "port20", "Approval", "port21");
        AddConnector("connector11", "Approval", "port22", "Publisher", "port1");
        #endregion
    }

    // Method to create node
    private void AddNode(string id, string content, List<PointPort> ports, double offsetX, double offsetY, NodeBasicShapes shape)
    {
        Node node = new Node()
        {
            ID = id,
            Height = 65,
            Width = id == "Secondreview" ? 115 : 110,
            OffsetX = offsetX,
            OffsetY = offsetY,
            Shape = new BasicShape() { Type = NodeShape.Basic, Shape = shape },
            Style = new ShapeStyle() { Fill = "WhiteSmoke", StrokeColor = "#777778" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = content, Style = new TextStyle() { FontSize = 13, Color = "black" } } },
            Ports = new DiagramObjectCollection<PointPort>(ports)
        };
        nodes!.Add(node);
    }

    // Method to create connector
    private void AddConnector(string id, string sourceId, string sourcePortId, string targetId, string targetPortId)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = sourceId,
            SourcePortID = sourcePortId,
            TargetID = targetId,
            TargetPortID = targetPortId,
            Type = ConnectorSegmentType.Orthogonal,
            Style = new ShapeStyle() { StrokeColor = "black", StrokeWidth = 1 },
            TargetDecorator = new DecoratorSettings()
            {
                Width = 10,
                Height = 10,
                Shape = DecoratorShape.Arrow,
                Style = new ShapeStyle() { Fill = "black", StrokeColor = "black" }
            }
        };
        connectors!.Add(connector);
    }

    // Method to create port
    private PointPort AddPort(string id, double x, double y)
    {
        return new PointPort()
        {
            ID = id,
            Shape = PortShapes.Circle,
            Width = 8,
            Height = 8,
            Visibility = PortVisibility.Visible,
            Offset = new DiagramPoint() { X = x, Y = y },
            Style = new ShapeStyle() { Fill = "#1916C1", StrokeColor = "#000" },
            Constraints = PortConstraints.Default|PortConstraints.Draw
        };
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}
