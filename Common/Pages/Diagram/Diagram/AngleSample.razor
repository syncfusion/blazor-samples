@page "/diagram/angle"
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Notifications
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@
@*Hidden:Lines*@
<SampleDescription>
    <p>
        This sample demonstrates a smart solar panel tilt system that allows users to interactively adjust the panel angle and observe real-time changes in system efficiency based on sun position and geographic location.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, users can simulate the sun's movement from east to west and adjust the solar panel's tilt angle using buttons or a slider. The system dynamically updates the efficiency gauge and displays the optimal angle based on the selected location.
    </p>
    <p>
        The diagram component visualizes a smart solar panel tilt system, showcasing the sun's path from east to west and the dynamic adjustment of the panel's tilt angle.
    </p>
</ActionDescription>
@*End:Hidden*@
<style>
    .diagram-panel {
        width: 1000px;
        height: 100%;
        border-radius: 20px;
        margin-right: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
        background: transparent;
    }

    .control-section {
        margin-bottom: 25px;
        background: linear-gradient(145deg, #ffffff, #f8f9fa);
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.06);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .control-label {
        display: flex;
        align-items: center;
        font-weight: 600;
        font-size: 18px;
        color: #2c3e50;
        margin-bottom: 15px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .control-label i {
            margin-right: 10px;
            font-size: 18px;
        }

    .angle-control {
        display: flex;
        align-items: center;
        background: linear-gradient(145deg, #f8f9fa, #e9ecef);
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 15px;
        transition: all 0.3s ease;
    }

    .angle-button {
        background: linear-gradient(145deg, #3498db, #2980b9);
        border: none;
        color: white;
        font-size: 20px;
        font-weight: bold;
        cursor: pointer;
        padding: 12px 16px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        transition: all 0.2s ease;
        min-width: 45px;
    }

    .angle-display {
        flex: 1;
        text-align: center;
        margin: 0 20px;
    }

    .angle-value {
        font-size: 20px;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .angle-description {
        font-size: 14px;
        color: #7f8c8d;
        font-weight: 500;
    }

    .angle-slider {
        margin-top: 20px;
    }

    .slider-input {
        width: 100%;
        height: 8px;
        border-radius: 4px;
        background: #e9ecef;
        outline: none;
        -webkit-appearance: none;
        cursor: pointer;
    }

        .slider-input::-webkit-slider-thumb {
            appearance: none;
            height: 24px;
            width: 24px;
            border-radius: 50%;
            background: linear-gradient(145deg, #3498db, #2980b9);
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(52, 152, 219, 0.4);
            transition: all 0.2s ease;
        }

    .efficiency-section {
        text-align: center;
        margin-bottom: 30px;
        background: linear-gradient(145deg, #ffffff, #f1f3f4);
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08);
    }
</style>

<SfDiagramComponent @ref="diagram" Height="900px"
                    NodeCreating="@OnNodeCreated"
                    Nodes="@nodes" Connectors="@connectors"
                    RotationChanged="@RotateChanged"
                    RotationChanging="@RotationChanging"
                    SelectionSettings="@selectionSettings">
    <SnapSettings Constraints="SnapConstraints.None" SnapAngle="1"></SnapSettings>
    <DiagramTemplates>
        <NodeTemplate>
            @{
                    if ((context as Node).ID == "location")
                    {
                        <div class="control-section" style="min-height:150px;min-width:300px">
                            <div class="control-label" style="font-size:18px;font-weight:600">
                                Select location
                            </div>
                            <SfDropDownList TValue="string" TItem="LocationData"
                                            DataSource="@locations"
                                            Value="@selectedLocation"
                                            ValueChanged="@OnLocationChanged"
                                            Placeholder="Select Location"
                                            PopupHeight="150px">
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    }
                    if ((context as Node).ID == "angle")
                    {
                        <div class="control-section" style="min-width: 300px;min-height: 250px;">
                            <div class="control-label" style="font-size:18px;font-weight:600">
                                Tilt Angle
                            </div>
                            <div class="angle-control">
                                <button class="angle-button" @onclick="DecreaseAngle">−</button>
                                <div class="angle-display">
                                    <div class="angle-value">@intPanelAngleDeg°</div>
                                    <div class="angle-description">@GetAngleDescription()</div>
                                </div>
                                <button class="angle-button" @onclick="IncreaseAngle">+</button>
                            </div>
                            <div class="angle-slider">
                                <input type="range" min="0" max="75" value="@intPanelAngleDeg"
                                       @oninput="OnAngleSliderChange"
                                       class="slider-input">
                            </div>
                        </div>
                    }
                    @if ((context as Node).ID == "efficiency")
                    {
                        <div class="efficiency-section" style="min-width:300px">
                            <h3 class="control-label" style="font-size:18px;font-weight:600">
                                System Efficiency
                            </h3>
                            <div style="width: 210px; height:180px; margin:auto;">
                                <SfCircularGauge Width="200px" Height="200px" Background="transparent">
                                    <CircularGaugeAxes>
                                        <CircularGaugeAxis StartAngle="225"
                                                           EndAngle="45"
                                                           Minimum="0"
                                                           Maximum="100"
                                                           Radius="95%">
                                            <CircularGaugeAxisLineStyle Width="22" Color="#F2F4F6"></CircularGaugeAxisLineStyle>
                                            <CircularGaugeAxisMajorTicks Height="0"></CircularGaugeAxisMajorTicks>
                                            <CircularGaugeAxisMinorTicks Height="0"></CircularGaugeAxisMinorTicks>
                                            <CircularGaugeAxisLabelStyle>
                                                <CircularGaugeAxisLabelFont Size="0px"></CircularGaugeAxisLabelFont>
                                            </CircularGaugeAxisLabelStyle>
                                            <CircularGaugeRanges>
                                                <CircularGaugeRange Start="0" End="40" Color="#4BC657" StartWidth="22" EndWidth="22" />
                                                <CircularGaugeRange Start="40" End="80" Color="#FEA714" StartWidth="22" EndWidth="22" />
                                                <CircularGaugeRange Start="80" End="@efficiency" Color="#FF6F13" StartWidth="22" EndWidth="22" />
                                            </CircularGaugeRanges>
                                            <CircularGaugeAnnotations>
                                                <CircularGaugeAnnotation Angle="90" Radius="0%" ZIndex="1">
                                                    <ContentTemplate>
                                                        <div style="text-align: center;">
                                                            <div style="font-size: 20px; font-weight: bold; color: #1A2A3B;">
                                                                @((int)efficiency)<span style="font-size:20px;font-weight:500;">%</span>
                                                            </div>
                                                            <div style="font-size: 14px; font-weight: 500; color: #888; margin-top: 5px; text-align: right; padding-left: 10px; text-transform: uppercase;">
                                                                EFFICIENCY
                                                            </div>
                                                        </div>
                                                    </ContentTemplate>
                                                </CircularGaugeAnnotation>
                                            </CircularGaugeAnnotations>
                                        </CircularGaugeAxis>
                                    </CircularGaugeAxes>
                                </SfCircularGauge>
                            </div>
                            <div style="min-width:200px;margin-top:20px">
                                <SfMessage Severity="@GetEfficiencyMessageSeverity()"
                                           ShowIcon="true"
                                           CssClass="performance-message"
                                           Visible="true"
                                           ShowCloseIcon="false">
                                    <div class="performance-indicator">
                                        @if (efficiency > 60)
                                        {
                                            <span style="font-size:14px">Good Performance</span>
                                        }
                                        else if (efficiency > 40)
                                        {
                                            <span style="font-size:14px">Fair Performance</span>
                                        }
                                        else
                                        {
                                            <span style="font-size:14px">Bad Performance</span>
                                        }
                                    </div>
                                </SfMessage>
                            </div>
                        </div>
                    }
                    if ((context as Node).ID == "centerSun" && (context as Node).Shape.Type == NodeShapes.SVG)
                    {
                        <svg width="76" height="76" viewBox="0 0 76 76" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g filter="url(#filter0_d_1423_96)">
                                <circle cx="37.9998" cy="38" r="17.2727" fill="url(#paint0_radial_1423_96)" />
                            </g>
                            <g filter="url(#filter1_d_1423_96)">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M38.0001 6.33331C36.4102 6.33331 35.1213 7.62219 35.1213 9.2121V14.9697C35.1213 16.5596 36.4102 17.8485 38.0001 17.8485C39.59 17.8485 40.8788 16.5596 40.8788 14.9697V9.2121C40.8788 7.62219 39.59 6.33331 38.0001 6.33331ZM60.3915 15.6082C59.2672 14.484 57.4445 14.484 56.3202 15.6082L52.249 19.6794C51.1248 20.8037 51.1248 22.6264 52.249 23.7507C53.3733 24.8749 55.196 24.8749 56.3203 23.7507L60.3915 19.6794C61.5157 18.5552 61.5157 16.7325 60.3915 15.6082ZM66.7877 35.1212C68.3776 35.1212 69.6665 36.41 69.6665 38C69.6665 39.5899 68.3776 40.8787 66.7877 40.8787H61.0301C59.4402 40.8787 58.1513 39.5899 58.1513 38C58.1513 36.41 59.4402 35.1212 61.0301 35.1212H66.7877ZM15.6077 15.6083C14.4834 16.7326 14.4834 18.5553 15.6077 19.6796L19.6789 23.7508C20.8031 24.875 22.6259 24.875 23.7501 23.7508C24.8744 22.6265 24.8744 20.8038 23.7501 19.6796L19.6789 15.6083C18.5547 14.4841 16.7319 14.4841 15.6077 15.6083ZM35.1213 61.0302C35.1213 59.4403 36.4102 58.1514 38.0001 58.1514C39.59 58.1514 40.8788 59.4403 40.8788 61.0302V66.7878C40.8788 68.3777 39.59 69.6666 38.0001 69.6666C36.4102 69.6666 35.1213 68.3777 35.1213 66.7878V61.0302ZM23.7511 52.2492C22.6269 51.125 20.8041 51.125 19.6799 52.2492L15.6087 56.3204C14.4844 57.4447 14.4844 59.2674 15.6087 60.3917C16.7329 61.5159 18.5557 61.5159 19.6799 60.3917L23.7511 56.3204C24.8754 55.1962 24.8754 53.3735 23.7511 52.2492ZM14.9696 35.1212C16.5595 35.1212 17.8484 36.41 17.8484 38C17.8484 39.5899 16.5595 40.8787 14.9696 40.8787H9.21204C7.62213 40.8787 6.33325 39.5899 6.33325 38C6.33325 36.41 7.62213 35.1212 9.21204 35.1212H14.9696ZM52.2491 52.2492C51.1248 53.3734 51.1248 55.1962 52.2491 56.3204L56.3203 60.3916C57.4445 61.5159 59.2673 61.5159 60.3915 60.3916C61.5157 59.2674 61.5157 57.4447 60.3915 56.3204L56.3203 52.2492C55.196 51.125 53.3733 51.125 52.2491 52.2492Z" fill="url(#paint1_linear_1423_96)" />
                            </g>
                            <defs>
                                <filter id="filter0_d_1423_96" x="16.9271" y="16.9272" width="42.9899" height="42.9899" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1423_96" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1423_96" result="shape" />
                                </filter>
                                <filter id="filter1_d_1423_96" x="2.53325" y="2.53331" width="71.7777" height="71.7777" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1423_96" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1423_96" result="shape" />
                                </filter>
                                <radialGradient id="paint0_radial_1423_96" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(41.9506 27.1674) rotate(180) scale(32.7949)">
                                    <stop stop-color="#FFF4C3" />
                                    <stop offset="0.16" stop-color="#FFE036" />
                                    <stop offset="1" stop-color="#FA761C" />
                                </radialGradient>
                                <linearGradient id="paint1_linear_1423_96" x1="66.8754" y1="5.38557" x2="10.5535" y2="67.6553" gradientUnits="userSpaceOnUse">
                                    <stop stop-color="#FFBA24" />
                                    <stop offset="1" stop-color="#FF5500" />
                                </linearGradient>
                            </defs>
                        </svg>
                    }
                    else if ((context as Node).ID == "eastSun" && (context as Node).Shape.Type == NodeShapes.SVG)
                    {
                        <svg width="76" height="76" viewBox="0 0 76 76" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_7964_371)">
                                <g filter="url(#filter0_d_7964_371)">
                                    <path d="M14.9707 35.1214C16.5606 35.1214 17.8496 36.4104 17.8496 38.0003C17.8494 39.59 16.5605 40.8792 14.9707 40.8792H9.21289C7.62318 40.8791 6.33416 39.59 6.33398 38.0003C6.33398 36.4105 7.62307 35.1215 9.21289 35.1214H14.9707ZM66.7881 35.1214C68.3778 35.1216 69.666 36.4105 69.666 38.0003C69.6658 39.5899 68.3777 40.879 66.7881 40.8792H61.0303C59.4405 40.8792 58.1515 39.5901 58.1514 38.0003C58.1514 36.4104 59.4404 35.1214 61.0303 35.1214H66.7881ZM15.6074 15.6087C16.7317 14.4845 18.5545 14.4845 19.6787 15.6087L23.75 19.68C24.8737 20.8041 24.8737 22.6262 23.75 23.7503C22.6259 24.8744 20.803 24.8751 19.6787 23.7513L15.6074 19.68C14.4832 18.5558 14.4832 16.7329 15.6074 15.6087ZM56.3203 15.6087C57.4445 14.4845 59.2674 14.4845 60.3916 15.6087C61.5158 16.7329 61.5158 18.5558 60.3916 19.68L56.3203 23.7513C55.1962 24.8749 53.3741 24.8749 52.25 23.7513C51.1258 22.627 51.1258 20.8042 52.25 19.68L56.3203 15.6087ZM38.001 6.33331C39.5907 6.33352 40.8789 7.62244 40.8789 9.21222V14.97C40.8787 16.5597 39.5906 17.8487 38.001 17.8489C36.4112 17.8489 35.1222 16.5598 35.1221 14.97V9.21222C35.1221 7.62231 36.4111 6.33331 38.001 6.33331Z" fill="url(#paint0_linear_7964_371)" />
                                </g>
                                <g filter="url(#filter1_d_7964_371)">
                                    <path d="M56.9995 63.3337C58.1653 63.3337 59.1106 64.2783 59.1108 65.444C59.1108 66.61 58.1654 67.5554 56.9995 67.5554H23.2222C22.0562 67.5554 21.1108 66.61 21.1108 65.444C21.1111 64.2783 22.0564 63.3337 23.2222 63.3337H56.9995ZM37.9995 50.6667C39.1654 50.6667 40.1108 51.6121 40.1108 52.778C40.1107 53.9438 39.1654 54.8893 37.9995 54.8893H4.22217C3.05631 54.8893 2.11097 53.9438 2.11084 52.778C2.11084 51.6121 3.05623 50.6667 4.22217 50.6667H37.9995ZM71.7778 50.6667C72.9437 50.6668 73.8892 51.6122 73.8892 52.778C73.889 53.9438 72.9436 54.8892 71.7778 54.8893H46.4438C45.2782 54.8891 44.3336 53.9437 44.3335 52.778C44.3335 51.6122 45.2781 50.6669 46.4438 50.6667H71.7778Z" fill="url(#paint1_radial_7964_371)" />
                                </g>
                                <g filter="url(#filter2_d_7964_371)">
                                    <path d="M38 20.7271C47.5394 20.7271 55.2733 28.4602 55.2734 37.9996C55.2734 39.4562 55.0924 40.8709 54.7529 42.2222H21.248C20.9085 40.8709 20.7275 39.4562 20.7275 37.9996C20.7277 28.4603 28.4607 20.7273 38 20.7271Z" fill="url(#paint2_radial_7964_371)" />
                                </g>
                            </g>
                            <defs>
                                <filter id="filter0_d_7964_371" x="2.53398" y="2.53331" width="71.7765" height="42.9903" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_7964_371" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_7964_371" result="shape" />
                                </filter>
                                <filter id="filter1_d_7964_371" x="-1.68916" y="46.8667" width="80.2228" height="25.3331" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_7964_371" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_7964_371" result="shape" />
                                </filter>
                                <filter id="filter2_d_7964_371" x="16.9275" y="16.9271" width="42.9903" height="29.9396" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_7964_371" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_7964_371" result="shape" />
                                </filter>
                                <linearGradient id="paint0_linear_7964_371" x1="66.875" y1="5.81636" x2="42.3723" y2="55.4803" gradientUnits="userSpaceOnUse">
                                    <stop stop-color="#FFBA24" />
                                    <stop offset="1" stop-color="#FF5500" />
                                </linearGradient>
                                <radialGradient id="paint1_radial_7964_371" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(49.6112 64.3887) rotate(-168.69) scale(48.441 24.199)">
                                    <stop stop-color="#FFBA24" />
                                    <stop offset="1" stop-color="#FF5500" />
                                </radialGradient>
                                <radialGradient id="paint2_radial_7964_371" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(41.9513 27.1673) rotate(180) scale(32.7953 32.7951)">
                                    <stop stop-color="#FFF4C3" />
                                    <stop offset="0.16" stop-color="#FFE036" />
                                    <stop offset="1" stop-color="#FA761C" />
                                </radialGradient>
                                <clipPath id="clip0_7964_371">
                                    <rect width="76" height="76" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>
                    }
                    else if ((context as Node).ID == "westSun" && (context as Node).Shape.Type == NodeShapes.SVG)
                    {
                        <svg width="76" height="76" viewBox="0 0 76 76" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_7964_385)">
                                <g filter="url(#filter0_d_7964_385)">
                                    <path d="M56.9998 61.2225C58.1655 61.2225 59.1108 62.1672 59.1111 63.3329C59.1111 64.4988 58.1657 65.4442 56.9998 65.4442H23.2224C22.0565 65.4442 21.1111 64.4988 21.1111 63.3329C21.1113 62.1672 22.0566 61.2225 23.2224 61.2225H56.9998ZM37.9998 48.5555C39.1657 48.5555 40.1111 49.5009 40.1111 50.6669C40.111 51.8327 39.1656 52.7782 37.9998 52.7782H4.22241C3.05655 52.7782 2.11119 51.8327 2.11108 50.6669C2.11108 49.5009 3.05648 48.5555 4.22241 48.5555H37.9998ZM71.7781 48.5555C72.9438 48.5557 73.8884 49.5011 73.8884 50.6669C73.8883 51.8326 72.9438 52.778 71.7781 52.7782H48.5554C47.3896 52.7782 46.4442 51.8327 46.4441 50.6669C46.4441 49.501 47.3895 48.5556 48.5554 48.5555H71.7781Z" fill="url(#paint0_radial_7964_385)" />
                                </g>
                                <g filter="url(#filter1_d_7964_385)">
                                    <path d="M37.7803 8.17151C51.8926 8.17156 63.333 19.6119 63.333 33.7242C63.333 35.8791 63.0648 37.9713 62.5625 39.9703H12.998C12.4958 37.9713 12.2275 35.8791 12.2275 33.7242C12.2275 19.6119 23.6679 8.17151 37.7803 8.17151Z" fill="url(#paint1_radial_7964_385)" />
                                </g>
                            </g>
                            <defs>
                                <filter id="filter0_d_7964_385" x="-1.68892" y="44.7555" width="80.2218" height="25.3331" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_7964_385" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_7964_385" result="shape" />
                                </filter>
                                <filter id="filter1_d_7964_385" x="8.42754" y="4.37151" width="59.5499" height="40.2433" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dx="0.422222" dy="0.422222" />
                                    <feGaussianBlur stdDeviation="2.11111" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0.156863 0 0 0 0 0.305882 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_7964_385" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_7964_385" result="shape" />
                                </filter>
                                <radialGradient id="paint0_radial_7964_385" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(39.8314 62.2776) rotate(-165.864) scale(38.8982 23.931)">
                                    <stop stop-color="#FFBA24" />
                                    <stop offset="1" stop-color="#FF5500" />
                                </radialGradient>
                                <radialGradient id="paint1_radial_7964_385" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(46.0737 36.9531) rotate(-153.435) scale(41.1658 41.1657)">
                                    <stop stop-color="#FFF4C3" />
                                    <stop offset="0.28125" stop-color="#FFE036" />
                                    <stop offset="0.598958" stop-color="#FA761C" />
                                </radialGradient>
                                <clipPath id="clip0_7964_385">
                                    <rect width="76" height="76" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>
                    }
                }
            </NodeTemplate>
        </DiagramTemplates>
    </SfDiagramComponent>

    @code {
    SfDiagramComponent diagram;
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
    private int currentAngle = 330;
    private double efficiency = 78;
    private string selectedLocation = "New York";
    private DateTime selectedDateTime = DateTime.Now;
    private double sunElevation = 0;
    private double sunAzimuth = 0;
    private double optimalTilt = 0;
    private double solarIrradiance = 0;
    private double incidenceAngle = 0;
    int intPanelAngleDeg = 0;
    public DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings()
        {
            Constraints = SelectorConstraints.All & ~(SelectorConstraints.Tooltip | SelectorConstraints.ResizeAll)
        };

    private void onCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.PageSettings };
        diagram!.FitToPage(mobileoptions);
    }

    private MessageSeverity GetEfficiencyMessageSeverity()
    {
        if (efficiency > 60) return MessageSeverity.Success;
        if (efficiency > 40) return MessageSeverity.Warning;
        return MessageSeverity.Error;
    }

    private void RotationChanging(RotationChangingEventArgs args)
    {
        if (args.Element is DiagramSelectionSettings settings && settings.Nodes!.Count > 0)
        {
            Node selectedNode = settings.Nodes[0];
            if (selectedNode.ID == "solarPanelFrame")
            {
                double proposedAngle = (args.NewValue as DiagramSelectionSettings)!.RotationAngle;
                double normalizedAngle = proposedAngle % 360;
                if (normalizedAngle < 0) normalizedAngle += 360;
                if (normalizedAngle < 270 || normalizedAngle > 345)
                {
                    args.Cancel = true;
                }
            }
        }
    }

    private List<LocationData> locations = new List<LocationData>
{
// US Cities
new LocationData { Name = "New York", Latitude = 40.7128, Longitude = -74.0060 },
new LocationData { Name = "Los Angeles", Latitude = 34.0522, Longitude = -118.2437 },
new LocationData { Name = "Chicago", Latitude = 41.8781, Longitude = -87.6298 },
new LocationData { Name = "Houston", Latitude = 29.7604, Longitude = -95.3698 },
new LocationData { Name = "Phoenix", Latitude = 33.4484, Longitude = -112.0740 },
new LocationData { Name = "Philadelphia", Latitude = 39.9526, Longitude = -75.1652 },
new LocationData { Name = "San Antonio", Latitude = 29.4241, Longitude = -98.4936 },
new LocationData { Name = "San Diego", Latitude = 32.7157, Longitude = -117.1611 },
new LocationData { Name = "Dallas", Latitude = 32.7767, Longitude = -96.7970 },
new LocationData { Name = "San Jose", Latitude = 37.3382, Longitude = -121.8863 },
new LocationData { Name = "Austin", Latitude = 30.2672, Longitude = -97.7431 },
new LocationData { Name = "Jacksonville", Latitude = 30.3322, Longitude = -81.6557 },
new LocationData { Name = "San Francisco", Latitude = 37.7749, Longitude = -122.4194 },
new LocationData { Name = "Columbus", Latitude = 39.9612, Longitude = -82.9988 },
new LocationData { Name = "Fort Worth", Latitude = 32.7555, Longitude = -97.3308 },
new LocationData { Name = "Indianapolis", Latitude = 39.7684, Longitude = -86.1581 },
new LocationData { Name = "Charlotte", Latitude = 35.2271, Longitude = -80.8431 },
new LocationData { Name = "Seattle", Latitude = 47.6062, Longitude = -122.3321 },
new LocationData { Name = "Denver", Latitude = 39.7392, Longitude = -104.9903 },
new LocationData { Name = "Boston", Latitude = 42.3601, Longitude = -71.0589 }
};

    private void OnNodeCreated(IDiagramObject obj)
    {
        if (obj is Node node && node.ID != "solarPanelFrame")
        {
            (obj as Node)!.Constraints = NodeConstraints.None;
        }
    }

    public class LocationData
    {
        public string? Name { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    private async Task OnAngleSliderChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newAngle))
        {
            currentAngle = 270 + newAngle;
            if (currentAngle >= 360) currentAngle -= 360;
            AngleCalculation();
            CalculateEfficiency();
            await UpdateDiagram();
            StateHasChanged();
        }
    }

    private string GetAngleDescription()
    {
        if (intPanelAngleDeg == 0)
            return "Horizontal";
        else if (intPanelAngleDeg < 15)
            return "Low Tilt";
        else if (intPanelAngleDeg < 45)
            return "Medium Tilt";
        else if (intPanelAngleDeg < 75)
            return "High Tilt";
        else
            return "Steep Tilt";
    }

    private void RotateChanged(RotationChangedEventArgs args)
    {
        if (args.Element is DiagramSelectionSettings settings)
        {
            Node node = settings.Nodes[0];
            currentAngle = (int)(args.NewValue.RotationAngle);
            AngleCalculation();
            CalculateEfficiency();
        }
    }

    protected override void OnInitialized()
    {
        InitializeDiagram();
        AngleCalculation();
        CalculateSolarPosition();
        CalculateEfficiency();
    }

    private async Task IncreaseAngle()
    {
        if (intPanelAngleDeg < 75)
        {
            currentAngle = (currentAngle + 1) % 360;
            AngleCalculation();
            CalculateEfficiency();
            await UpdateDiagram();
            StateHasChanged();
        }
    }

    private async Task DecreaseAngle()
    {
        currentAngle = (currentAngle - 1 + 360) % 360;
        AngleCalculation();
        CalculateEfficiency();
        await UpdateDiagram();
        StateHasChanged();
    }

    private async Task OnLocationChanged(string newLocation)
    {
        selectedLocation = newLocation;
        var location = locations.FirstOrDefault(l => l.Name == newLocation);
        if (location != null)
        {
            CalculateSolarPosition();
            CalculateEfficiency();
            await UpdateDiagram();
            StateHasChanged();
        }
    }

    private void CalculateSolarPosition()
    {
        var location = locations.FirstOrDefault(l => l.Name == selectedLocation);
        if (location == null) return;
        double lat = location.Latitude * Math.PI / 180.0;
        int dayOfYear = selectedDateTime.DayOfYear;
        double hour = 12.0;
        double declination = 23.45 * Math.PI / 180.0 * Math.Sin(2 * Math.PI * (284 + dayOfYear) / 365.0);
        double hourAngle = 0; // Solar noon
        double elevation = Math.Asin(Math.Sin(declination) * Math.Sin(lat) +
        Math.Cos(declination) * Math.Cos(lat) * Math.Cos(hourAngle));
        sunElevation = Math.Max(0, elevation * 180.0 / Math.PI);
        sunAzimuth = 180.0;
        optimalTilt = Math.Max(0, Math.Min(60, Math.Abs(location.Latitude)));
        if (sunElevation > 0)
        {
            double elevationRad = elevation;
            double airMass = 1.0 / Math.Sin(elevationRad);
            airMass = Math.Max(1.0, Math.Min(40.0, airMass));
            solarIrradiance = 1353 * Math.Pow(0.7, Math.Pow(airMass, 0.678)) * Math.Sin(elevationRad);
            solarIrradiance = Math.Max(0, solarIrradiance);
        }
        else
        {
            solarIrradiance = 0;
        }
    }

    private void CalculateEfficiency()
    {
        if (sunElevation <= 0)
        {
            efficiency = 0;
            incidenceAngle = 90;
            return;
        }
        double panelTiltRad = intPanelAngleDeg * Math.PI / 180.0;
        double sunElevRad = sunElevation * Math.PI / 180.0;
        double azimuthDiff = 0;
        double cosIncidence = Math.Sin(sunElevRad) * Math.Cos(panelTiltRad) +
        Math.Cos(sunElevRad) * Math.Sin(panelTiltRad) * Math.Cos(azimuthDiff);
        cosIncidence = Math.Max(0, Math.Min(1, cosIncidence));
        incidenceAngle = Math.Acos(cosIncidence) * 180.0 / Math.PI;
        double maxPanelEfficiency = 22.0;
        double cosineFactor = cosIncidence;
        double irradianceFactor = Math.Min(1.0, solarIrradiance / 1000.0);
        double temperatureFactor = 0.95;
        double systemLossFactor = 0.90;
        double optimalAngleDiff = Math.Abs(intPanelAngleDeg - optimalTilt);
        double optimalAngleFactor = Math.Max(0.8, 1.0 - (optimalAngleDiff / 90.0) * 0.2);
        efficiency = maxPanelEfficiency * cosineFactor * irradianceFactor *
        temperatureFactor * systemLossFactor * optimalAngleFactor;
        efficiency = efficiency * 100.0 / maxPanelEfficiency;
        if (optimalAngleDiff < 5)
        {
            efficiency = Math.Min(100, efficiency * 1.05);
        }
        efficiency = Math.Max(0, Math.Min(100, efficiency));
    }

    private void AngleCalculation()
    {
        double normalizedAngle = currentAngle % 360;
        if (normalizedAngle >= 270)
        {
            intPanelAngleDeg = (int)(normalizedAngle - 270);
        }
        else if (normalizedAngle <= 90)
        {
            intPanelAngleDeg = Math.Min(90, (int)(90 - normalizedAngle));
        }
        else
        {
            if (normalizedAngle <= 180)
            {
                intPanelAngleDeg = (int)(180 - normalizedAngle);
            }
            else
            {
                intPanelAngleDeg = (int)(normalizedAngle - 180);
            }
        }
        intPanelAngleDeg = Math.Max(0, Math.Min(90, intPanelAngleDeg));
    }

    private async Task UpdateDiagram()
    {
        if (diagram != null)
        {
            diagram.BeginUpdate();
            var solarPanelFrame = nodes.FirstOrDefault(n => n.ID == "solarPanelFrame");
            AngleCalculation();
            if (solarPanelFrame != null)
            {
                solarPanelFrame.RotationAngle = currentAngle;
            }
            await diagram.EndUpdateAsync();
        }
    }

    private void InitializeDiagram()
    {
        Node title = new Node()
            {
                ID = "title",
                Width = 450,
                Height = 80,
                OffsetX = 512,
                OffsetY = 155,
                Shape = new TextShape()
                {
                    Type = NodeShapes.Text,
                    Content = "SMART SOLAR PANEL TILT SYSTEM"
                },
                Style = new TextStyle()
                {
                    Color = "#2c3e50",
                    Fill = "transparent",
                    FontFamily = "Segoe UI",
                    FontSize = 26,
                    Bold = true,
                    TextAlign = TextAlign.Center
                }
            };

        Connector sunPath = new Connector()
            {
                ID = "sunPath",
                Type = ConnectorSegmentType.Bezier,
                ZIndex = 1,
                Constraints = ConnectorConstraints.None,
                SourcePoint = new DiagramPoint() { X = 221, Y = 462 },
                TargetPoint = new DiagramPoint() { X = 731, Y = 462 },
                Segments = new DiagramObjectCollection<ConnectorSegment>()
{
new BezierSegment()
{
Type = ConnectorSegmentType.Bezier,
Point1 = new DiagramPoint() { X = 350, Y = 300 },
Point2 = new DiagramPoint() { X = 610, Y = 300 },
Point = new DiagramPoint() { X = 731, Y = 462 }
}
},
                Style = new ShapeStyle()
                {
                    StrokeColor = "#3498db",
                    StrokeWidth = 3,
                    StrokeDashArray = "10,5",
                    Opacity = 0.8
                },
                TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.None },
                SourceDecorator = new DecoratorSettings() { Shape = DecoratorShape.None }
            };

        Node eastSun = new Node()
            {
                ID = "eastSun",
                Width = 60,
                Height = 60,
                OffsetX = 221,
                OffsetY = 462,
                Shape = new Shape() { Type = NodeShapes.SVG },
            };

        Node centerSun = new Node()
            {
                ID = "centerSun",
                Width = 60,
                Height = 60,
                OffsetX = 483,
                OffsetY = 333,
                Shape = new Shape() { Type = NodeShapes.SVG },
            };

        Node westSun = new Node()
            {
                ID = "westSun",
                Width = 60,
                Height = 60,
                OffsetX = 731,
                OffsetY = 462,
                Shape = new Shape() { Type = NodeShapes.SVG },
            };

        Node eastLabel = new Node()
            {
                ID = "eastLabel",
                Width = 60,
                Height = 30,
                OffsetX = 238,
                OffsetY = 405,
                Shape = new TextShape()
                {
                    Type = NodeShapes.Text,
                    Content = "EAST"
                },
                Style = new TextStyle()
                {
                    Color = "#34495e",
                    Fill = "transparent",
                    FontFamily = "Segoe UI",
                    FontSize = 14,
                    Bold = true
                }
            };

        Node westLabel = new Node()
            {
                ID = "westLabel",
                Width = 60,
                Height = 30,
                OffsetX = 692,
                OffsetY = 408,
                Shape = new TextShape()
                {
                    Type = NodeShapes.Text,
                    Content = "WEST"
                },
                Style = new TextStyle()
                {
                    Color = "#34495e",
                    Fill = "transparent",
                    FontFamily = "Segoe UI",
                    FontSize = 14,
                    Bold = true
                }
            };

        Node groundLine = new Node()
            {
                ID = "groundLine",
                Width = 500,
                Height = 5,
                OffsetX = 529,
                OffsetY = 699,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                Style = new ShapeStyle()
                {
                    Fill = "#2E485F",
                    StrokeColor = "#2E485F",
                    StrokeWidth = 2,
                }
            };

        Node supportPost = new Node()
            {
                ID = "supportPost",
                Width = 15,
                Height = 146,
                OffsetX = 513,
                OffsetY = 625,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                Style = new ShapeStyle()
                {
                    Fill = "#2E485F",
                    StrokeColor = "#2E485F",
                }
            };

        Node pivotPoint = new Node()
            {
                ID = "pivotPoint",
                Width = 16,
                Height = 16,
                OffsetX = 507,
                OffsetY = 544,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse },
                Style = new ShapeStyle()
                {
                    Fill = "#FF5F1F",
                    StrokeColor = "#2E485F",
                    StrokeWidth = 1,
                }
            };

        Node solarPanelFrame = new Node()
            {
                ID = "solarPanelFrame",
                Width = 260,
                Height = 20,
                OffsetX = 507,
                OffsetY = 544,
                RotationAngle = currentAngle,
                Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Rectangle },
                Style = new ShapeStyle()
                {
                    Opacity = 0.5,
                    Fill = "#2272B2",
                    StrokeColor = "#2E485F",
                    StrokeWidth = 3,
                }
            };

        Node locationNode = new Node()
            {
                ID = "location",
                OffsetX = 1230,
                OffsetY = 101,
                Shape = new Shape() { Type = NodeShapes.HTML },
            };

        Node efficinceNode = new Node()
            {
                ID = "efficiency",
                OffsetX = 1232,
                OffsetY = 266,
                Shape = new Shape() { Type = NodeShapes.HTML },
            };

        Node AngleNode = new Node()
            {
                ID = "angle",
                OffsetX = 1230,
                OffsetY = 631,
                Shape = new Shape() { Type = NodeShapes.HTML },
            };

        nodes.Add(locationNode);
        nodes.Add(efficinceNode);
        nodes.Add(AngleNode);
        nodes.Add(title);
        nodes.Add(eastSun);
        nodes.Add(centerSun);
        nodes.Add(westSun);
        nodes.Add(eastLabel);
        nodes.Add(westLabel);
        nodes.Add(groundLine);
        nodes.Add(supportPost);
        nodes.Add(solarPanelFrame);
        nodes.Add(pivotPoint);
        connectors.Add(sunPath);

        Node skyBackground = new Node()
            {
                ID = "skyBackground",
                Width = 1500,
                Height = 835,
                OffsetX = 750,
                OffsetY = 450,
                ZIndex = -10,
                Shape = new ImageShape()
                {
                    Type = NodeShapes.Image,
                    Source = SampleService.WebAssetsPath + "images/diagram/background.png"
                },
            };
        nodes.Add(skyBackground);
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}