@page "/diagram/container"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using NodeShape = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@
@inject NavigationManager NavigationManager

@*Hidden:Lines*@
<SampleDescription>
    <p>
        This sample demonstrates how to visualize the Azure Container Apps Environment using the built-in container shapes in Syncfusion Blazor Diagram.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This sample illustrates how an Azure Container Apps Environment is structured, with various microservices and dependencies grouped within a container. The container is added to the diagram using the built-in container shapes in Syncfusion Blazor Diagram. Using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.NodeGroup.html#Syncfusion_Blazor_Diagram_NodeGroup_Children" aria-label="Children">Children</a></code> property of the container, nodes representing services such as ingestion, workflow, and delivery can be added inside it. Additionally, external dependencies like Azure Cosmos DB, Azure Monitor, and Azure Key Vault are linked to represent the complete system architecture.The integrated Symbol Palette enables users to build custom diagrams effortlessly by dragging and dropping symbols.
    </p>
</ActionDescription>
@*End:Hidden*@

@*Hidden:Lines*@
<div class="control-section">
    <style>
        @@font-face {
        font-family: 'e-ddb-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
        font-weight: normal;
        font-style: normal;
        }

        .e-ddb-icons {
        font-family: 'e-ddb-icons';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        }

        .e-basic::before {
        content: "\e726";
        }

        .e-flow::before {
        content: "\e724";
        }

        .e-connector::before {
        content: "\e725";
        }

        #container {
        display: block;
        }

        #symbolPalette {
        display: block;
        }
    </style>
    <style>
        @@font-face {
        font-family: 'e-ddb-icons1';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
        font-weight: normal;
        font-style: normal;
        }

        .e-ddb-icons1 {
        font-family: 'e-ddb-icons1';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        }

        .sb-mobile-palette {
        width: 240px;
        height: 100%;
        float: left;
        }

        .sb-mobile-palette-bar {
        display: none;
        }

        .sb-mobile-diagram {
        width: calc(100% - 242px);
        height: 100%;
        float: left;
        }

        @@media (max-width: 550px) {
        .sb-mobile-palette {
        z-index: 19;
        position: absolute;
        display: none;
        transition: transform 300ms linear, visibility 0s linear 300ms;
        width: 30%;
        height: 100%;
        }

        .sb-mobile-palette-bar {
        display: block;
        width: 100%;
        background: #fafafa;
        padding: 14px 10px;
        border: 0.5px solid #e0e0e0;
        min-height: 54px;
        }

        .sb-mobile-diagram {
        width: 100%;
        height: 100%;
        float: left;
        left: 0px;
        }

        #palette-icon {
        font-size: 20px;
        }
        }

        .sb-mobile-palette-open {
        position: absolute;
        display: block;
        right: 15px;
        }

        .e-toggle-palette::before {
        content: "\e700"
        }

    </style>
    @*End:Hidden*@
    <div id="properties" class="content-wrapper">
        <div style="padding-top:6px;padding-bottom:8px">
            <SfDropDownList TValue="@string" Width="110px" TItem="@FontFamily" @bind-Value="@FontStyle" ID="fontFamily" @bind-Enabled="@IsFontfamilyEnabled" PopupHeight="120" Placeholder="Select a font type" CssClass="textboxstyle" PopupWidth="150" DataSource="@FontFamilyLists">
                <DropDownListEvents TItem="FontFamily" TValue="string" ValueChange="FontChange"></DropDownListEvents>
                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
            </SfDropDownList>

            <SfNumericTextBox ID="fontSize" TValue="int" @bind-Value="@FontSizeValue" Min="10" Max="50" @bind-Enabled="IsFontSize" Format="##.##" Step="1" Width="110px" CssClass="textboxstyle">
                <NumericTextBoxEvents TValue="int" ValueChange="@FontSizeChange"></NumericTextBoxEvents>
            </SfNumericTextBox>

            <SfButton @bind-Disabled="IsBold" ID="bold" style="@TextStyle" OnClick="FontBold" CssClass="boldwidth button" iconCss="e-btn-icon e-bold e-icons"></SfButton>
            <SfButton ID="italic" style="@TextStyle" @bind-Disabled="IsItalic" OnClick="FontItalic" CssClass="boldwidth button" iconCss="e-btn-icon e-italic e-icons"></SfButton>
            <SfButton style="@TextStyle" ID="underline" @bind-Disabled="IsUnderLine" OnClick="FontUnderLine" CssClass="boldwidth button" iconCss="e-btn-icon e-underline e-icons"></SfButton>
            <SfColorPicker title="Text Fill Color" @bind-Disabled="IsColorPickerDisabled" ValueChange="OnFillColorChange"></SfColorPicker>
        </div>
    </div>
    <div style="width: 100%">
        @*Hidden:Lines*@
        <div class="sb-mobile-palette-bar">
            <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
        </div>
        @*End:Hidden*@
        <div id="palette-space" class="sb-mobile-palette">
            <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" SymbolDragPreviewSize="@SymbolPreview" Palettes="@palettes" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
            </SfSymbolPaletteComponent>
        </div>
        <div id="diagram-space" class="sb-mobile-diagram">
            <div class="content-wrapper" style="border: 1px solid #D7D7D7">
                <SfDiagramComponent @ref="DiagramInstance" Height="712px" Constraints="@Constraints" Nodes="@Nodes" Connectors="Connectors" ConnectorCreating="OnConnectorCreating" Created="OnCreated" SelectionChanged="@SelectionChanged">
                    <RulerSettings>
                        <HorizontalRuler></HorizontalRuler>
                        <VerticalRuler></VerticalRuler>
                    </RulerSettings>
                </SfDiagramComponent>
            </div>
        </div>
    </div>
    @*Hidden:Lines*@
</div>
@*End:Hidden*@


@code {
    @*Hidden:Lines*@
    private bool IsBold { get; set; } = false;
    private bool IsItalic { get; set; } = false;
    private bool IsUnderLine { get; set; } = false;
    private bool IsFontfamilyEnabled { get; set; } = true;
    private bool IsFontSize { get; set; } = true;
    private bool IsColorPickerDisabled { get; set; } = false;
    private int FontSizeValue { get; set; } = 0;
    private string FillColor { get; set; } = "#c9c6ac";
    private string FontStyle { get; set; } = "Arial";
    private string styleValue { get; set; } = "background-color:#008000";
    private DecoratorSettings decoratorSettings = new DecoratorSettings()
        {
            Shape = DecoratorShape.Arrow,
            Style = new ShapeStyle()
            {
                Fill = "#5E5E5E",
                StrokeColor = "#5E5E5E",
                StrokeWidth = 1
            }
        };
    private string TextStyle { get; set; } = "background-color:#cccccc;color:black;width:50px";

    @*End:Hidden*@
    //Define sfdiagramComponent
    private SfDiagramComponent? DiagramInstance { get; set; }

    public DiagramConstraints Constraints { get; set; } = DiagramConstraints.Default | DiagramConstraints.Bridging;

    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node>? Nodes { get; set; } = new DiagramObjectCollection<Node>();

    //Defines diagrams's connectors collection
    public DiagramObjectCollection<Connector>? Connectors { get; set; } = new DiagramObjectCollection<Connector>();
    public DiagramSize? SymbolPreview;
    public SymbolMargin? SymbolMargin = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };

    public SfSymbolPaletteComponent? PaletteInstance;

    //Define palettes collection
    private DiagramObjectCollection<Palette>? palettes = new DiagramObjectCollection<Palette>();
    public DiagramObjectCollection<NodeBase>? basicShapes { get; set; }
    public DiagramObjectCollection<NodeBase>? connectors { get; set; }
    DiagramObjectCollection<NodeBase>? ContainerNodes { get; set; }
    [Inject]
    protected IJSRuntime? jsRuntime { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        PaletteInstance!.Targets = new DiagramObjectCollection<SfDiagramComponent?>
        {
            DiagramInstance
        };
    }

    protected override void OnInitialized()
    {
        CreateNode("node1", 100, 300, 60, 100, "HTTP Traffic");
        CreateNode("node2", 300, 300, 60, 100, "Ingestion service");
        CreateNode("node3", 450, 300, 60, 100, "Workflow service");
        CreateNode("node4", 300, 415, 60, 100, "Package service");
        CreateNode("node5", 450, 415, 60, 150, "Drone Scheduler service");
        CreateNode("node6", 600, 415, 60, 100, "Delivery service");
        CreateNode("node7", 380, 130, 60, 90, "Azure Service Bus");
        CreateNode("node8", 615, 130, 60, 100, "Managed Identities");
        CreateNode("node9", 800, 130, 60, 100, "Azure Key Vault");
        CreateNode("node10", 300, 550, 60, 100, "Azure Cosmos DB for MongoDB API");
        CreateNode("node11", 450, 550, 60, 100, "Azure Cosmos DB");
        CreateNode("node12", 600, 550, 60, 100, "Azure Cache for Redis");
        CreateNode("node13", 840, 255, 60, 100, "Azure Application Insights");
        CreateNode("node14", 940, 350, 60, 100, "Azure Monitor");
        CreateNode("node15", 840, 445, 60, 100, "Azure Log Analytics workspace");
        Container container = new Container()
            {
                ID = "container",
                Header = new ContainerHeader()
                {
                    ID = "containerHeader",
                    Height = 40,
                    Annotation = new ShapeAnnotation()
                    {
                        ID = "label",
                        Style = new TextStyle()
                        {
                            FontSize = 18,
                            Bold = true,
                        },
                        Content = "Azure Container Apps Environment"
                    },

                    Style = new TextStyle()
                    {
                        Fill = "Transparent",
                        StrokeColor = "Transparent",
                    },
                },
                Style = new ShapeStyle()
                {
                    Fill = "#E9EEFF",
                    StrokeColor = "#2546BB",
                    StrokeWidth = 1,
                },
                Height = 300,
                Width = 520,
                OffsetX = 460,
                OffsetY = 350,
                Children = new string[] { "node2", "node3", "node4", "node5", "node6" }
            };

        Nodes!.Add(container);
        CreateConnector("connector1", "node1", "node2");
        CreateConnector("connector2", "node4", "node10");
        CreateConnector("connector3", "node5", "node11");
        CreateConnector("connector4", "node6", "node12");
        CreateConnector("connector5", "node8", "node9");
        CreateConnector("connector6", "container", "node13");
        CreateConnector("connector7", "container", "node15");
        CreateConnector("connector8", "node3", "node4", Nodes[2].Ports![0].ID);
        CreateConnector("connector9", "node3", "node5", Nodes[2].Ports![1].ID);
        CreateConnector("connector10", "node3", "node6", Nodes[2].Ports![2].ID);
        CreateConnector("connector11", "node2", "node7", "", Nodes[6].Ports![0].ID);
        CreateConnector("connector12", "node7", "node3", Nodes[6].Ports![1].ID);
        CreateConnector("connector13", "node13", "node14", Nodes[12].Ports![0].ID);
        CreateConnector("connector14", "node15", "node14", Nodes[14].Ports![0].ID);
        CreateConnector("connector16", "node8", "node5", Nodes[7].Ports![0].ID, Nodes[4].Ports![0].ID, decoratorSettings);
        CreateConnector("connector17", "node8", "node6", Nodes[7].Ports![1].ID, Nodes[5].Ports![0].ID, decoratorSettings);
        InitPaletteModel();
    }
    // DiagramInstance connector defaults
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector? connector = obj as Connector;
        connector!.Style = new ShapeStyle() { StrokeColor = "#5E5E5E", StrokeWidth = 1 };
        if (connector.TargetDecorator != null)
            connector.TargetDecorator.Style = new ShapeStyle()
            {
                Fill = "#5E5E5E",
                StrokeColor = "#5E5E5E",
                StrokeWidth = 1
            };
    }
    private void OnCreated()
    {
        FitOptions options = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        DiagramInstance!.FitToPage(options);
    }
    // Create connector
    private void CreateConnector(string id, string node1, string node2, string sourcePortId = "", string targetPortId = "", DecoratorSettings? sourceDecorator = null)
    {
        Connector connector = new Connector()
            {
                ID = id,
                SourceID = node1,
                TargetID = node2,
                SourcePortID = sourcePortId,
                TargetPortID = targetPortId
            };

        connector.Type = ConnectorSegmentType.Orthogonal;
        if (sourceDecorator != null)
            connector.SourceDecorator = sourceDecorator;
        Connectors!.Add(connector);
    }
    // Create node.
    private void CreateNode(string id, int offsetx, int offsety, int height, int width, string content)
    {
        Node node = new Node()
            {
                ID = id,
                Height = height,
                Width = width,
                OffsetX = offsetx,
                OffsetY = offsety,
                Shape = new BasicShape() { CornerRadius = 4 },
                Style = new ShapeStyle()
                {
                    StrokeColor = "#2546BB",
                    Fill = "White",
                },
            };
        if (id == "node5")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint(){X=0.9,Y=0})
            };
        }
        if (id == "node6")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 0.9, Y = 0 })
            };
        }

        if (id == "node13")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 1, Y = 0.5 })
            };
        }

        if (id == "node15")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 1, Y = 0.5 })
            };
        }

        if (id == "node3")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 0.25, Y = 1 }),
                CreatePort(new DiagramPoint() { X = 0.5, Y = 1 }),
                CreatePort(new DiagramPoint() { X = 0.75, Y = 1 }),
            };
        }
        if (id == "node7")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 0, Y = 0.5 }),
                CreatePort(new DiagramPoint() { X = 1, Y = 0.5 })
            };
        }

        if (id == "node8")
        {
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                CreatePort(new DiagramPoint() { X = 0.25, Y = 1 }),
                CreatePort(new DiagramPoint() { X = 0.75, Y = 1 })
            };
        }
        if (content != "")
        {
            node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content = content,
                        HorizontalAlignment = HorizontalAlignment.Center,
                        Style=new TextStyle(){Color="#343434"}
                    },
                };
        }

        Nodes!.Add(node);
    }
    // Create ports for nodes
    private PointPort CreatePort(DiagramPoint offset)
    {
        PointPort port = new PointPort()
        {
            Offset = offset,
            Height = 10,
            Width = 10,
            Visibility = PortVisibility.Hidden,
            Shape = PortShapes.Square
        };
            return port;
    }
    //Update annotation bold property
    private void FontBold()
    {
        UpdateAnnotation("bold", true);

    }

    //Update annotation italic property
    private void FontItalic()
    {
        UpdateAnnotation("italic", true);

    }

    //Update annotation underline property
    private void FontUnderLine()
    {
        UpdateAnnotation("underline", true);

    }

    //Update annotation fontfamily
    private void FontChange(ChangeEventArgs<string, FontFamily> args)
    {
        UpdateAnnotation("fontfamily", args.Value!);
    }

    //Update annotation fontsize value
    private void FontSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        FontSizeValue = int.Parse(args.Value.ToString());
        UpdateAnnotation("fontsize", FontSizeValue);
    }

    //Update fill color for annotations
    public void OnFillColorChange(ColorPickerEventArgs args)
    {
        styleValue = "background-color:" + args.CurrentValue!.Hex;
        UpdateAnnotation("fontcolor", args.CurrentValue.Hex!);

    }
    //Update annotation
    private void UpdateAnnotation(string name, object value)
    {
        DiagramInstance!.StartGroupAction();
        if (DiagramInstance.SelectionSettings!.Connectors!.Count > 0)
        {
            for (var i = 0; i < DiagramInstance.SelectionSettings.Connectors.Count; i++)
            {
                var connector = DiagramInstance.SelectionSettings.Connectors[i];
                for (var j = 0; j < connector.Annotations!.Count; j++)
                {
                    TextStyle annotationStyle = connector.Annotations[j].Style!;
                    UpdateAnnotationStyle(name, annotationStyle, value);

                }
            }
        }
        if (DiagramInstance.SelectionSettings.Nodes!.Count > 0)
        {
            for (var i = 0; i < DiagramInstance.SelectionSettings.Nodes.Count; i++)
            {
                var node = DiagramInstance.SelectionSettings.Nodes[i];
                if (node is Container container && container.Header != null)
                {
                    UpdateAnnotationStyle(name, container.Header.Annotation.Style!, value);
                }
                else
                    UpdateNodeAnnotationStyles(node, name, value);
            }
        }
        DiagramInstance.EndGroupAction();
    }

    private void UpdateNodeAnnotationStyles(Node node, string name, object value)
    {
        for (var j = 0; j < node.Annotations!.Count; j++)
        {
            TextStyle annotationStyle = node.Annotations[j].Style!;
            UpdateAnnotationStyle(name, annotationStyle, value);
        }
    }
    //Update annotation style
    private void UpdateAnnotationStyle(string option, TextStyle textStyle, object value)
    {
        switch (option)
        {
            case "fontsize":
                textStyle.FontSize = Double.Parse(value.ToString()!);
                break;
            case "underline":
                textStyle.TextDecoration = textStyle.TextDecoration == TextDecoration.Underline ? TextDecoration.None : TextDecoration.Underline;
                break;
            case "fontfamily":
                textStyle.FontFamily = value.ToString();
                break;
            case "bold":
                if (textStyle.Bold)
                    textStyle.Bold = false;
                else
                    textStyle.Bold = true;
                break;
            case "italic":
                if (textStyle.Italic)
                    textStyle.Italic = false;
                else
                    textStyle.Italic = true;
                break;
            case "fontcolor":
                textStyle.Color = value.ToString();
                break;

        }
    }
    @*Hidden:Lines*@
    public class FontFamily
    {
        public string? Name { get; set; }
    }

    private List<FontFamily> FontFamilyLists = new List<FontFamily>()
    {
        new FontFamily() { Name = "Arial" },
        new FontFamily() { Name = "Aharoni" },
        new FontFamily() { Name = "Bell MT" },
        new FontFamily() { Name = "Fantasy" },
        new FontFamily() { Name = "Times New Roman" },
        new FontFamily() { Name = "Segoe UI" },
        new FontFamily() { Name = "Verdana" },
    };

    public class TextWrapping
    {
        public string? Name { get; set; }
    }

    private List<TextWrapping> TextWrappingList = new List<TextWrapping>()
    {
        new TextWrapping() { Name = "NoWrap" },
        new TextWrapping() { Name = "Wrap" },
        new TextWrapping() { Name = "WrapWithOverflow" },
    };

    public class TextOverFlow
    {
        public string? Name { get; set; }
    }

    private List<TextOverFlow> TextOverFlowList = new List<TextOverFlow>()
    {
        new TextOverFlow() { Name = "Ellipsis" },
        new TextOverFlow() { Name = "Wrap" },
        new TextOverFlow() { Name = "Clip" },
    };
    private void SelectionChanged(SelectionChangedEventArgs args)
    {
        if (args.NewValue!.Count > 0)
        {
            var item = args.NewValue[0];

            if (item is Node node && node.Annotations!.Count > 0)
            {
                var shapeAnnotation = node.Annotations[0];
                FontSizeValue = (int)shapeAnnotation.Style!.FontSize;
                FontStyle = shapeAnnotation.Style.FontFamily!;
            }
            else if (item is Container container && container.Header?.Annotation != null)
            {
                var shapeAnnotation = container.Header.Annotation;
                FontSizeValue = (int)shapeAnnotation.Style!.FontSize;
                FontStyle = shapeAnnotation.Style.FontFamily!;
            }
        }
    }

    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();

        ContainerNodes = new DiagramObjectCollection<NodeBase>();

        Container container = new Container()
            {
                ID = "ContainerWithHeader",
                Header = new ContainerHeader()
                {
                    ID = "containerHeader",
                    Annotation = new ShapeAnnotation()
                    {
                        Content = "Container Title"
                    },
                    Style = new TextStyle()
                    {
                        Fill = "CornflowerBlue"
                    },
                    SearchTags = new List<string>() { "container" },
                },
            };

        Container containerWithoutHeader = new Container()
            {
                ID = "ContainerWithoutHeader",
                SearchTags = new List<string>() { "container" },
            };

        ContainerNodes = new DiagramObjectCollection<NodeBase>()
        {
            container,
            containerWithoutHeader,
        };
        basicShapes = new DiagramObjectCollection<NodeBase>
        {
            CreateBasicNode("Rectangle",NodeBasicShapes.Rectangle),
            CreateBasicNode("Ellipse",NodeBasicShapes.Ellipse),
            CreateBasicNode("Diamond",NodeBasicShapes.Diamond),
            CreateBasicNode("Triangle",NodeBasicShapes.Triangle),
            CreateBasicNode("Hexagon",NodeBasicShapes.Hexagon),
            CreateBasicNode("Pentagon",NodeBasicShapes.Pentagon),
            CreateBasicNode("Cylinder",NodeBasicShapes.Cylinder),
            CreateBasicNode("Star",NodeBasicShapes.Star),
            CreateBasicNode("Octagon",NodeBasicShapes.Octagon),
            CreateBasicNode("Plus",NodeBasicShapes.Plus),
            CreateBasicNode("Heptagon",NodeBasicShapes.Heptagon),
        };
        
        connectors = new DiagramObjectCollection<NodeBase>()
        {
            CreateConnector("OrthogonalWithArrow",ConnectorSegmentType.Orthogonal,DecoratorShape.Arrow),
            CreateConnector("Orthogonal",ConnectorSegmentType.Orthogonal,DecoratorShape.None),
            CreateConnector("StraightWithArrow",ConnectorSegmentType.Straight,DecoratorShape.Arrow),
            CreateConnector("Straight",ConnectorSegmentType.Straight,DecoratorShape.None),
            CreateConnector("BezierWithArrow",ConnectorSegmentType.Bezier, DecoratorShape.Arrow),
            CreateConnector("Bezier",ConnectorSegmentType.Bezier,DecoratorShape.None),

        };

#pragma warning disable BL0005

        palettes.Add(
             new Palette()
                 {
                     Symbols = ContainerNodes,
                     Title = "Container Shapes",
                     ID = "ContainerShapes",
                     IsExpanded = true,
                 }
        );
        palettes.Add(
           new Palette()
               {
                   ID = "BasicShape",
                   IsExpanded = true,
                   Symbols = basicShapes,
                   Title = "Basic Shapes",
               }
        );

        palettes.Add(
            new Palette()
                {
                    ID = "Connectors",
                    IsExpanded = true,
                    Symbols = connectors,
                    Title = "Connectors",
                }
        );
    }
    private Node CreateBasicNode(string id, NodeBasicShapes type)
    {
        Node node = new Node()
            {
                ID = id,
                Shape = new BasicShape()
                {
                Type = NodeShape.Basic,
                    Shape = type
                },
                SearchTags = new List<string>() { "Basic" },
                Style = new ShapeStyle() { StrokeWidth = 2, StrokeColor = "#757575" }
            };
        return node;
    }
    // Method to create connector
    private Connector CreateConnector(string id, ConnectorSegmentType type, DecoratorShape shape)
    {
        Connector connector = new Connector()
            {
                ID = id,
                Type = type,
                SearchTags = new List<string>() { "connector" },
                SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
                TargetPoint = new DiagramPoint() { X = 40, Y = 40 },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = shape,
                    Style = new ShapeStyle() { StrokeColor = "#757575", Fill = "#757575" }
                },
                Style = new ShapeStyle() { StrokeWidth = 2, StrokeColor = "#757575" }
            };
        return connector;
    }
    public async Task ShowHideSymbolPalette()
    {
        await jsRuntime!.InvokeAsync<object>("openPalette");

    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (Nodes != null)
        {
            Nodes.Clear();
            Nodes = null;
        }

        if (Connectors != null)
        {
            Connectors.Clear();
            Connectors = null;
        }
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }
        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
       
#pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                palettes[i].IconCss = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
#pragma warning restore BL0005
       
    }
    @*End:Hidden*@
}
