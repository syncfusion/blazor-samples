@page "/diagram/distance"

@using Syncfusion.Blazor.Diagram
@using Node = Syncfusion.Blazor.Diagram.Node
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable;
@inject NavigationManager NavigationManager
@using System.Collections.Generic
@using System.Linq
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns


<SampleDescription>
    <p>
        This sample demonstrates how to measure and visualize distances between diagram elements using interactive connectors.
    </p>
</SampleDescription>

<ActionDescription>

<p>
  In this demo, distance connectors are automatically generated and updated as users reposition the shapes. These connectors display the dimensions between elements, with labels showing the exact distances in inches, feet, and centimeters. Nodes and connectors are used to create a responsive diagram where distances are recalculated in real time, helping users better understand spatial relationships and alignment within the diagram.
</p>
</ActionDescription>

@*End:Hidden*@

<div>
    <label>Unit: </label>
    <SfDropDownList TValue="string" TItem="UnitOption"
    DataSource="@unitOptions"
    Value="@selectedUnit"
    ValueChanged="@OnUnitChanged"
    Width="150px">
        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
    </SfDropDownList>
</div>
<SfDiagramComponent Height="900px" Created="@CreatedEvent" SourcePointChanged="@SourcePointChanged" TargetPointChanged="@SourcePointChanged" @ref="@diagram" NodeCreating="@NodeCreated" Connectors="@connectors" Nodes="@nodes">
</SfDiagramComponent>


@code
{
    // Reference to diagram
    SfDiagramComponent? diagram;

    // Defines diagram's node collection
    DiagramObjectCollection<Node>? nodes;
    // Defines diagram's connector collection
    DiagramObjectCollection<Connector>? connectors;
    // Unit options for dropdown
    private string selectedUnit = "in";
    private void NodeCreated(IDiagramObject obj){
        (obj as Node)!.Constraints = NodeConstraints.None;
    }
    private void OnUnitChanged(string newValue)
    {
        selectedUnit = newValue;

        // Update all connector annotations with new unit values
        UpdateConnectorAnnotationsFromStoredDistances();

        // Refresh the diagram
        StateHasChanged();
    }
    private void SourcePointChanged(EndPointChangedEventArgs arg)
    {
            UpdateDimensionConnectors(arg.Connector!);
        
    }
    private void CreatedEvent()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        diagram!.FitToPage(mobileoptions);
    }
    private string GetCurrentUnit(string content)
    {
        if (content.Contains(" ft")) return "ft";
        if (content.Contains(" in")) return "in";
        if (content.Contains(" cm")) return "cm";
        return "in"; // default
    }
   //Method to update annotations from stored distances
    private void UpdateConnectorAnnotationsFromStoredDistances()
    {
        if (connectors == null) return;

        foreach (var connector in connectors)
        {
            if (connector.Annotations != null && connector.Annotations.Count > 0)
            {
                string content = connector.Annotations[0].Content!;
                double doubleValue = double.Parse(content.Split(' ')[0]);
                string currentUnit = GetCurrentUnit(content);
                var convertedValue = ConvertBetweenUnits(doubleValue, currentUnit, selectedUnit);
                connector.Annotations[0].Content = FormatMeasurement(convertedValue);
            }
        
        }
    }
    private double ConvertBetweenUnits(double value, string fromUnit, string toUnit)
    {
        if (fromUnit == toUnit) return value;

        return (fromUnit, toUnit) switch
        {
            // From inches
            ("in", "ft") => value / 12.0,
            ("in", "cm") => value * 2.54,

            // From feet
            ("ft", "in") => value * 12.0,
            ("ft", "cm") => value * 30.48,

            // From cm
            ("cm", "in") => value / 2.54,
            ("cm", "ft") => value / 30.48,

            _ => value // default
        };
    }
    private double ConvertPixelsToSelectedUnit(double pixelValue)
    {
        return selectedUnit switch
        {
            "ft" => pixelValue / 96.0,          
            "in" => pixelValue / 8.0, 
            "cm" => pixelValue / 3.15,
            _ => pixelValue / 96.0      
        };
    }

    private string FormatMeasurement(double value)
    {
        return selectedUnit switch
        {
            "ft" => $"{value:F1} ft",
            "in" => $"{value:F1} in",
            "cm" => $"{value:F1} cm",
            _ => $"{value:F1} ft"
        };
    }

    // Update the unit options to include feet
    private List<UnitOption> unitOptions = new List<UnitOption>
{
    new UnitOption { Text = "Feet (ft)", Value = "ft" },
    new UnitOption { Text = "Inches (in)", Value = "in" },
    new UnitOption { Text = "Centimeters (cm)", Value = "cm" }
};

    public class UnitOption
    {
        public string? Text { get; set; }
        public string? Value { get; set; }
    }

    protected override void OnInitialized()
    {
        // Initialize diagram's node collection
        nodes = new DiagramObjectCollection<Node>();
        connectors = new DiagramObjectCollection<Connector>();

        CreateWallsInNodes();
    }

    private void CreateWallConnector(string id, double startX, double startY, double endX, double endY, string color, double thickness)
    {
        double middlePortPosition = 0.5; // Default position
        ConnectorConstraints constraints = id.Contains("WallOuter") ? ConnectorConstraints.None : ConnectorConstraints.Default;
        switch (id)
        {
            case "WallOuterLeft":
                middlePortPosition = 0.35;
                break;
            case "WallOuterTop":
                middlePortPosition = 0.53;
                break;
            case "WallOuterRight":
                middlePortPosition = 0.35;
                break;
            case "WallOuterBottom":
                middlePortPosition = 0.40;
                break;
            default:
                middlePortPosition = 0.5; // Default for separators and other walls
                break;
        }
        Connector wallConnector = new Connector()
            {
                ID = id,
                SourcePoint = new DiagramPoint() { X = startX, Y = startY },
                TargetPoint = new DiagramPoint() { X = endX, Y = endY },
                Type = ConnectorSegmentType.Straight,
                Constraints = constraints,
                Style = new ShapeStyle()
                {
                    StrokeColor = color,
                    StrokeWidth = 3
                },
                SourceDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.None
                },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.None
                },
                Ports = new DiagramObjectCollection<ConnectorPort>()
        {
            new ConnectorPort()
            {
                ID = $"{id}StartPort",
                PathPosition = 0.0,
                Visibility = PortVisibility.Hidden,
                Shape = PortShapes.Circle,
                Width = 8,
                Height = 8,

                Style = new ShapeStyle()
                {
                    Fill = "#FF6B6B",
                    
                    StrokeColor = "#333333",
                    StrokeWidth = 2
                }
            },

            new ConnectorPort()
            {

                ID = $"{id}MiddlePort",
                PathPosition = middlePortPosition,
                Visibility = PortVisibility.Hidden,
                Shape = PortShapes.Square,
                Width = 6,
                Height = 6,
                Style = new ShapeStyle()
                {
                    Fill = "#4ECDC4",
                    StrokeColor = "#333333",
                    StrokeWidth = 1
                }
            },
            new ConnectorPort()
            {
                ID = $"{id}EndPort",
                PathPosition = 1.0,
                Visibility = PortVisibility.Hidden,
                Shape = PortShapes.Circle,
                Width = 8,
                Height = 8,
                Style = new ShapeStyle()
                {
                    Fill = "#FF6B6B",
                    StrokeColor = "#333333",
                    StrokeWidth = 2
                }
            }
        }
            };
        if (id == "WallOuterRight")
        {
            ConnectorPort port = new ConnectorPort()
                {
                    ID = $"{id}MiddlePort2",
                    PathPosition = 0.61,
                    Visibility = PortVisibility.Hidden,
                    Shape = PortShapes.Circle,
                    Width = 8,
                    Height = 8,
                    Style = new ShapeStyle()
                    {
                        Fill = "#4ECDC4",
                        StrokeColor = "#333333",
                        StrokeWidth = 1
                    }
                };
            wallConnector.Ports.Add(port);
        }
        if (id == "WallOuterBottom")
        {
            ConnectorPort port = new ConnectorPort()
                {
                    ID = $"{id}MiddlePort2",
                    PathPosition = 0.8,
                    Visibility = PortVisibility.Hidden,
                    Shape = PortShapes.Circle,
                    Width = 8,
                    Height = 8,
                    Style = new ShapeStyle()
                    {
                        Fill = "#4ECDC4",
                        StrokeColor = "#333333",
                        StrokeWidth = 1
                    }
                };
            wallConnector.Ports.Add(port);
        }
        connectors!.Add(wallConnector);
    }
    private void CreatePortConnections()
    {
        // Find connectors and set their port connections
        var wallOuterTop = connectors!.FirstOrDefault(c => c.ID == "WallOuterTop");
        var wallOuterLeft = connectors!.FirstOrDefault(c => c.ID == "WallOuterLeft");
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");
        var wallOuterRight = connectors!.FirstOrDefault(c => c.ID == "WallOuterRight");
        var separator1 = connectors!.FirstOrDefault(c => c.ID == "Separator1");
        var separator2 = connectors!.FirstOrDefault(c => c.ID == "Separator2");
        var separator3 = connectors!.FirstOrDefault(c => c.ID == "Separator3");
        var separator4 = connectors!.FirstOrDefault(c => c.ID == "Separator4");

        // OUTER WALL CORNER CONNECTIONS (forming a rectangle)

        // Top-Left corner connection
        if (wallOuterTop != null && wallOuterLeft != null)
        {
            wallOuterTop.SourceID = "WallOuterLeft";
            wallOuterTop.SourcePortID = "WallOuterLeftStartPort";
        }

        // Top-Right corner connection
        if (wallOuterTop != null && wallOuterRight != null)
        {
            wallOuterTop.TargetID = "WallOuterRight";
            wallOuterTop.TargetPortID = "WallOuterRightStartPort";
        }

        // Bottom-Left corner connection
        if (wallOuterBottom != null && wallOuterLeft != null)
        {
            wallOuterBottom.SourceID = "WallOuterLeft";
            wallOuterBottom.SourcePortID = "WallOuterLeftEndPort";
        }

        // Bottom-Right corner connection
        if (wallOuterBottom != null && wallOuterRight != null)
        {
            wallOuterBottom.TargetID = "WallOuterRight";
            wallOuterBottom.TargetPortID = "WallOuterRightEndPort";
        }

        // SEPARATOR CONNECTIONS TO OUTER WALLS
        if (separator3 != null && wallOuterLeft != null)

        {

            separator3.SourceID = "WallOuterLeft";

            separator3.SourcePortID = "WallOuterLeftMiddlePort";

        }

        if (separator2 != null && wallOuterTop != null)

        {

            separator2.TargetID = "WallOuterTop";

            separator2.TargetPortID = "WallOuterTopMiddlePort";

        }

        if (separator1 != null && wallOuterRight != null)

        {

            separator1.TargetID = "WallOuterRight";

            separator1.TargetPortID = "WallOuterRightMiddlePort2";

        }

        if (separator4 != null && wallOuterRight != null)

        {

            separator4.TargetID = "WallOuterRight";

            separator4.TargetPortID = "WallOuterRightMiddlePort";

        }
    }
    private void CreateRestroomSeparator()
    {
        // Create vertical separator to split restroom
        CreateWallConnector("RestroomSeparator", 940, 620, 940, 720, "#333333", 8);

        // Add port connections for the new separator
        var restroomSeparator = connectors!.FirstOrDefault(c => c.ID == "RestroomSeparator");
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");

        if (restroomSeparator != null && wallOuterBottom != null)
        {
            restroomSeparator.SourceID = "WallOuterBottom";
            restroomSeparator.SourcePortID = "WallOuterBottomMiddlePort2";
        }
    }
    private void CreateWallsInNodes()
    {
        // Create all walls with slanted roof
        CreateWallConnector("WallOuterTop", 460, 260, 1060, 260, "#333333", 8);
        CreateWallConnector("WallOuterLeft", 460, 260, 460, 720, "#333333", 8);
        CreateWallConnector("WallOuterBottom", 460, 720, 1060, 720, "#333333", 8);
        CreateWallConnector("WallOuterRight", 1060, 260, 1060, 720, "#333333", 8);
        CreateWallConnector("Separator1", 830, 540, 1060, 540, "#333333", 8);
        CreateWallConnector("Separator2", 780, 260, 780, 410, "#333333", 8); // Shortened to fit under slanted roof
        CreateWallConnector("Separator3", 460, 420, 720, 420, "#333333", 8); // Adjusted to connect to slanted roof
        CreateWallConnector("Separator4", 860, 420, 1060, 420, "#333333", 8); // Shortened to fit within right wall
        CreatePortConnections();


        CreateBedroomItem("BedItem2", 575, 349, 80, 142, "M1 2C1 1.44771 1.44772 1 2 1H26C26.5523 1 27 1.44772 27 2V54C27 54.5523 26.5523 55 26 55H2C1.44772 55 1 54.5523 1 54V2Z M1 27.5941C1 27.5432 1.0038 27.4928 1.01218 27.4426C1.13134 26.7284 2.13402 21.153 4.41646 21.0198C4.47147 21.0165 4.52813 21.0118 4.58296 21.0063C7.51272 20.7131 9.98932 30.7524 14.8322 30.9965C14.9423 31.002 15.0553 30.9826 15.1593 30.946C18.0006 29.9475 18.036 28.9499 20 28.5008C22.6744 27.8892 25.3331 28.7977 26.4505 29.2665C26.794 29.4106 27 29.7509 27 30.1234V52.0177C27 52.5699 26.5523 53.0177 26 53.0177H2C1.44772 53.0177 1 52.5699 1 52.0177V27.5941Z M7.47077 8.3988C7.27248 7.71969 7.76957 7 8.47703 7H19.0951C19.901 7 20.4243 7.93945 20.1178 8.68485C19.7917 9.47806 19.5 10.4742 19.5 11.5C19.5 12.5349 19.7571 13.4842 20.0583 14.2413C20.363 15.007 19.824 16 19 16H8.47703C7.76957 16 7.27248 15.2803 7.47077 14.6012C7.73012 13.7129 8 12.539 8 11.5C8 10.461 7.73012 9.28707 7.47077 8.3988Z", "#654321");


        // RIGHT BEDROOM items (repositioned to fit under slanted roof)
        CreateBedroomItem("BedItem4", 968, 331, 80, 140, "M1 54V2C1 1.44772 1.44772 1 2 1H44C44.5523 1 45 1.44771 45 2V54C45 54.5523 44.5523 55 44 55H2C1.44772 55 1 54.5523 1 54Z  M8 14V8C8 7.44772 8.44772 7 9 7H19C19.5523 7 20 7.44772 20 8V14C20 14.5523 19.5523 15 19 15H9C8.44772 15 8 14.5523 8 14Z M26 14V8C26 7.44772 26.4477 7 27 7H37C37.5523 7 38 7.44772 38 8V14C38 14.5523 37.5523 15 37 15H27C26.4477 15 26 14.5523 26 14Z M0.5 2V54H1.5V2H0.5ZM2 55.5H44V54.5H2V55.5ZM45.5 54V2H44.5V54H45.5ZM2 1.5H44V0.5H2V1.5ZM45.5 2C45.5 1.17157 44.8284 0.5 44 0.5V1.5C44.2761 1.5 44.5 1.72386 44.5 2H45.5ZM44 55.5C44.8284 55.5 45.5 54.8284 45.5 54H44.5C44.5 54.2761 44.2761 54.5 44 54.5V55.5ZM0.5 54C0.5 54.8284 1.17157 55.5 2 55.5V54.5C1.72386 54.5 1.5 54.2761 1.5 54H0.5ZM1.5 2C1.5 1.72386 1.72386 1.5 2 1.5V0.5C1.17157 0.5 0.5 1.17157 0.5 2H1.5ZM1 21.5H45V20.5H1V21.5ZM7.5 8V14H8.5V8H7.5ZM9 15.5H19V14.5H9V15.5ZM20.5 14V8H19.5V14H20.5ZM19 6.5H9V7.5H19V6.5ZM20.5 8C20.5 7.17157 19.8284 6.5 19 6.5V7.5C19.2761 7.5 19.5 7.72386 19.5 8H20.5ZM19 15.5C19.8284 15.5 20.5 14.8284 20.5 14H19.5C19.5 14.2761 19.2761 14.5 19 14.5V15.5ZM7.5 14C7.5 14.8284 8.17157 15.5 9 15.5V14.5C8.72386 14.5 8.5 14.2761 8.5 14H7.5ZM8.5 8C8.5 7.72386 8.72386 7.5 9 7.5V6.5C8.17157 6.5 7.5 7.17157 7.5 8H8.5ZM25.5 8V14H26.5V8H25.5ZM27 15.5H37V14.5H27V15.5ZM38.5 14V8H37.5V14H38.5ZM37 6.5H27V7.5H37V6.5ZM38.5 8C38.5 7.17157 37.8284 6.5 37 6.5V7.5C37.2761 7.5 37.5 7.72386 37.5 8H38.5ZM37 15.5C37.8284 15.5 38.5 14.8284 38.5 14H37.5C37.5 14.2761 37.2761 14.5 37 14.5V15.5ZM25.5 14C25.5 14.8284 26.1716 15.5 27 15.5V14.5C26.7239 14.5 26.5 14.2761 26.5 14H25.5ZM26.5 8C26.5 7.72386 26.7239 7.5 27 7.5V6.5C26.1716 6.5 25.5 7.17157 25.5 8H26.5Z", "#8B4513");

        // KITCHEN items (repositioned)
        CreateKitchenItem("KitchenSink", 928, 466, 61, 67, "M1 8.58323H61V58.0356H1V8.58323Z M1 58.8332H61V63.6189C61 65.381 59.5716 66.8094 57.8095 66.8094H4.19048C2.42843 66.8094 1 65.381 1 63.6189V58.8332Z M57.0527 8.17857L4.158 8.17857L4.158 4.19047C4.158 2.42842 5.58642 1 7.34847 1L53.8623 1C55.6243 1 57.0527 2.42843 57.0527 4.19048V8.17857Z M1 8.58323V8.08323H0.5V8.58323H1ZM61 8.58323H61.5V8.08323H61V8.58323ZM61 58.0356V58.5356H61.5V58.0356H61ZM1 58.0356H0.5V58.5356H1V58.0356ZM1 58.8332V58.3332H0.5V58.8332H1ZM61 58.8332H61.5V58.3332H61V58.8332ZM6.52686 66.8094V66.3094H6.02686V66.8094H6.52686ZM16.79 66.8094H17.29V66.3094H16.79V66.8094ZM57.0527 8.17857V8.67857H57.5527V8.17857H57.0527ZM4.158 8.17857H3.658V8.67857H4.158V8.17857ZM53.8623 1V0.500004V1ZM57.0527 4.19048H56.5527H57.0527ZM4.158 4.19047H3.658H4.158ZM7.34847 1V1.5V1ZM1 9.08323H61V8.08323H1V9.08323ZM60.5 8.58323V58.0356H61.5V8.58323H60.5ZM61 57.5356H1V58.5356H61V57.5356ZM1.5 58.0356V8.58323H0.5V58.0356H1.5ZM1 59.3332H61V58.3332H1V59.3332ZM60.5 58.8332V63.6189H61.5V58.8332H60.5ZM57.8095 66.3094H4.19048V67.3094H57.8095V66.3094ZM1.5 63.6189V58.8332H0.5V63.6189H1.5ZM4.19048 66.3094C2.70457 66.3094 1.5 65.1049 1.5 63.6189H0.5C0.5 65.6571 2.15228 67.3094 4.19048 67.3094V66.3094ZM60.5 63.6189C60.5 65.1049 59.2954 66.3094 57.8095 66.3094V67.3094C59.8477 67.3094 61.5 65.6571 61.5 63.6189H60.5ZM6.52686 67.3094H16.79V66.3094H6.52686V67.3094ZM13.5995 69.4999H9.71733V70.4999H13.5995V69.4999ZM9.71733 69.4999C8.23142 69.4999 7.02686 68.2953 7.02686 66.8094H6.02686C6.02686 68.8476 7.67914 70.4999 9.71733 70.4999V69.4999ZM16.29 66.8094C16.29 68.2953 15.0854 69.4999 13.5995 69.4999V70.4999C15.6377 70.4999 17.29 68.8476 17.29 66.8094H16.29ZM57.0527 7.67857L4.158 7.67857V8.67857L57.0527 8.67857V7.67857ZM4.658 8.17857L4.658 4.19047H3.658L3.658 8.17857H4.658ZM7.34847 1.5L53.8623 1.5V0.500004L7.34847 0.5V1.5ZM56.5527 4.19048V8.17857H57.5527V4.19048H56.5527ZM53.8623 1.5C55.3482 1.5 56.5527 2.70457 56.5527 4.19048H57.5527C57.5527 2.15229 55.9005 0.500004 53.8623 0.500004V1.5ZM4.658 4.19047C4.658 2.70456 5.86256 1.5 7.34847 1.5V0.5C5.31028 0.5 3.658 2.15228 3.658 4.19047H4.658Z", "#34495E");

        CreateKitchenItem("KitchenCounter", 1026, 478, 68, 35, "M67.5828 1.96454C67.5828 1.43184 67.151 1 66.6183 1L1.96405 1.00001C1.43135 1.00001 0.999512 1.43184 0.999512 1.96454L0.999515 34.0355C0.999515 34.5682 1.43135 35 1.96405 35L66.6183 35C67.151 35 67.5828 34.5682 67.5828 34.0355V1.96454Z M33.5828 4.79852C33.5828 4.26582 33.151 3.83398 32.6183 3.83398L4.79737 3.83399C4.26467 3.83399 3.83283 4.26583 3.83283 4.79853L3.83284 31.2028C3.83284 31.7355 4.26468 32.1673 4.79738 32.1673L32.6183 32.1673C33.151 32.1673 33.5828 31.7355 33.5828 31.2028L33.5828 4.79852Z M64.7488 4.79852C64.7488 4.26582 64.317 3.83398 63.7843 3.83398L35.9634 3.83399C35.4307 3.83399 34.9988 4.26583 34.9988 4.79853L34.9989 31.2028C34.9989 31.7355 35.4307 32.1673 35.9634 32.1673L63.7843 32.1673C64.317 32.1673 64.7489 31.7355 64.7489 31.2028L64.7488 4.79852Z M26.4988 18C26.4988 22.6944 22.6933 26.5 17.9988 26.5C13.3044 26.5 9.49885 22.6944 9.49885 18C9.49885 13.3056 13.3044 9.5 17.9988 9.5C22.6933 9.5 26.4988 13.3056 26.4988 18Z M25.4363 18C25.4363 22.1076 22.1065 25.4375 17.9988 25.4375C13.8912 25.4375 10.5613 22.1076 10.5613 18C10.5613 13.8924 13.8912 10.5625 17.9988 10.5625C22.1065 10.5625 25.4363 13.8924 25.4363 18Z M25.0574 24.6826L24.6818 25.0583L22.0015 22.378L22.3772 22.0024L25.0574 24.6826Z M13.9442 13.5703L13.5685 13.946L10.888 11.2655L11.2637 10.8898L13.9442 13.5703Z M24.786 11.0938L25.1616 11.4694L22.4813 14.1497L22.1057 13.774L24.786 11.0938Z M13.7733 21.9844L14.1489 22.36L11.4686 25.0403L11.093 24.6646L13.7733 21.9844Z M21.452 18C21.452 19.9071 19.906 21.4531 17.9988 21.4531C16.0917 21.4531 14.5457 19.9071 14.5457 18C14.5457 16.0929 16.0917 14.5469 17.9988 14.5469C19.906 14.5469 21.452 16.0929 21.452 18Z M57.6658 18C57.6658 22.6944 53.8603 26.5 49.1658 26.5C44.4714 26.5 40.6658 22.6944 40.6658 18C40.6658 13.3056 44.4714 9.5 49.1658 9.5C53.8603 9.5 57.6658 13.3056 57.6658 18Z M56.6033 18C56.6033 22.1076 53.2735 25.4375 49.1658 25.4375C45.0582 25.4375 41.7283 22.1076 41.7283 18C41.7283 13.8924 45.0582 10.5625 49.1658 10.5625C53.2735 10.5625 56.6033 13.8924 56.6033 18Z M56.2235 24.6826L55.8478 25.0583L53.1675 22.378L53.5432 22.0024L56.2235 24.6826Z M45.1121 13.5703L44.7365 13.946L42.056 11.2655L42.4317 10.8898L45.1121 13.5703Z M55.952 11.0938L56.3276 11.4694L53.6474 14.1497L53.2717 13.774L55.952 11.0938Z M44.9403 21.9844L45.3159 22.36L42.6356 25.0403L42.26 24.6646L44.9403 21.9844Z M52.619 18C52.619 19.9071 51.0729 21.4531 49.1658 21.4531C47.2587 21.4531 45.7127 19.9071 45.7127 18C45.7127 16.0929 47.2587 14.5469 49.1658 14.5469C51.0729 14.5469 52.619 16.0929 52.619 18Z", "#8B4513");

        CreateLivingRoomItems();
        CreateRestroomSeparator();
        CreateHallSeparator();
        AddMeasurementConnectors();
       
    }
    private void CreateLivingRoomItems()
    {
       

        CreateLivingRoomItem("LivingRoomSofa", 570, 478, 90, 60,
            "M55 23H4C2.34315 23 1 24.3431 1 26V40H58V26C58 24.3431 56.6569 23 55 23ZM55 23L48.1968 4.29128C47.4783 2.31534 45.6004 1 43.4979 1H16.5021C14.3996 1 12.5217 2.31533 11.8032 4.29128L5 23H55ZM16 1V23M25 1V23M34 1V23M43 1V23M1 36.5H58",
            "#8B4513");
        CreateLivingRoomItem("TVStand", 570, 685, 180, 70,
            "M95 49H130C131.657 49 133 47.6569 133 46V20C133 18.3431 131.657 17 130 17H20C18.3431 17 17 18.3431 17 20V46C17 47.6569 18.3431 49 20 49H95ZM95 49V17H56V49H95ZM145 17H137C134.791 17 133 18.7909 133 21V45C133 47.2091 134.791 49 137 49H145C147.209 49 149 47.2091 149 45V21C149 18.7909 147.209 17 145 17ZM145 17H5M145 17C147.209 17 149 15.2091 149 13V5.00001C149 2.79087 147.209 1.00001 145 1.00001L5 1C2.79086 1 1 2.79086 1 5L1 13C1 15.2091 2.79086 17 5 17M5 17H13C15.2091 17 17 18.7909 17 21V45C17 47.2091 15.2091 49 13 49H5C2.79086 49 1 47.2091 1 45L1 21C1 18.7909 2.79086 17 5 17Z",
            "#2C3E50");
        CreateLivingRoomItem("Bathroom", 1005, 660, 70, 80,
            "M46.4065 37.9425C46.4065 55.0951 36.823 69.0002 25.0011 69.0002C13.1792 69.0002 3.5957 55.0951 3.5957 37.9425C3.5957 30.1141 5.2059 23.4623 8.5 18C8.61402 18 25 18 25 18H41.2425C44.5366 23.4623 46.4065 30.1141 46.4065 37.9425Z M41.2161 43.5006C41.2161 53.9728 33.9559 62.4621 24.9999 62.4621C16.0439 62.4621 8.78369 53.9728 8.78369 43.5006C8.78369 33.0284 16.0439 24.5391 24.9999 24.5391C33.9559 24.5391 41.2161 33.0284 41.2161 43.5006Z M1 3.61538C1 2.17095 2.17095 1 3.61538 1H46.3846C47.8291 1 49 2.17095 49 3.61538V15.3846C49 16.8291 47.8291 18 46.3846 18H3.61538C2.17095 18 1 16.8291 1 15.3846V3.61538Z M26.9995 9C26.9995 10.1046 26.1041 11 24.9995 11C23.8949 11 22.9995 10.1046 22.9995 9C22.9995 7.89543 23.8949 7 24.9995 7C26.1041 7 26.9995 7.89543 26.9995 9Z M31 33C31 37.4183 28.3137 41 25 41C21.6863 41 19 37.4183 19 33C19 28.5817 21.6863 25 25 25C28.3137 25 31 28.5817 31 33Z",
            "#654321");
        CreateLivingRoomItem("SideTable", 570, 580, 100, 80,
            "M58 31C58 46.464 45.6878 59 30.5 59C15.3122 59 3 46.464 3 31C3 15.536 15.3122 3 30.5 3C45.6878 3 58 15.536 58 31Z  M29 59V61H25V59H29Z M29 1V3H25V1L29 1Z M36 59V61H32V59H36Z M36 1V3H32V1L36 1Z M3 29H1L1 25H3L3 29Z M60 29H58V25H60V29Z M3 36H1L1 32H3L3 36Z M60 36H58V32H60V36Z",
            "#8B4513");
        CreateLivingRoomItem("Door", 790, 675, 80, 80,
            "M1 71L1 79L72 79V71M1 71L72 71M1 71C1 32.3401 32.3401 1 71 1H72V71",
            "#FFD700");


    }
    private void CreateHallSeparator()
    {
        // Create vertical separator to define the hall area
        CreateWallConnector("HallSeparator", 700, 520, 700, 720, "#333333", 8);

        // Add port connections for the new hall separator
        var hallSeparator = connectors!.FirstOrDefault(c => c.ID == "HallSeparator");
        var separator3 = connectors!.FirstOrDefault(c => c.ID == "Separator3");
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");

        if (hallSeparator != null && wallOuterBottom != null)
        {
            hallSeparator.SourceID = "WallOuterBottom";
            hallSeparator.SourcePortID = "WallOuterBottomMiddlePort";
        }
    }

    private void CreateLivingRoomItem(string id, double x, double y, double width, double height, string pathData, string color)
    {
        Node item = new Node()
            {
                ID = id,
                Width = width,
                Height = height,
                OffsetX = x,
                OffsetY = y,
                //RotationAngle = 3, // Same rotation as parent nodes
                Shape = new PathShape()
                {
                    Type = NodeShapes.Path,
                    Data = pathData
                },
                Style = new ShapeStyle()
                {
                    Fill = "#FFF8DC", // Cornsilk for kitchen items
                    StrokeColor = "#B8860B",
                    StrokeWidth = 2
                }
            };
        if (id == "Bathroom")
        {
            item.RotationAngle = 90;
            item.Style.Fill = "#E6E6FA"; // Lavender for bathroom
            item.Style.StrokeColor = "#9370DB";
        }
        if (id == "SideTable")
        {
            item.Style.Fill = "#FFEFD5"; // Papaya whip for side table
            item.Style.StrokeColor = "#CD853F";
        }
        if (id == "Door")
        {
            item.Style.Fill = "#FFD700"; // Gold for door
            item.Style.StrokeColor = "#B8860B";
        }
        if (id == "TVStand")
        {
            item.RotationAngle = 180;
        }
        nodes!.Add(item);
    }
    private void CreateKitchenItem(string id, double x, double y, double width, double height, string pathData, string color)
    {
        Node item = new Node()
            {
                ID = id,
                Width = width,
                Height = height,
                OffsetX = x,
                OffsetY = y,
                Shape = new PathShape()
                {
                    Type = NodeShapes.Path,
                    Data = pathData
                },
                Style = new ShapeStyle()
                {
                    Fill = color,
                },
            };
        if (id == "KitchenSink")
        {
            item.Style.Fill = "#E0F6FF"; // Light cyan for sink
            item.Style.StrokeColor = "#4682B4";
        }
        if (id == "KitchenCounter")
        {
            item.RotationAngle = 90;
            item.Style.Fill = "#F5F5DC"; // Beige for counter
            item.Style.StrokeColor = "#8B4513";
        }
        nodes!.Add(item);
    }
    private void CreateBedroomItem(string id, double x, double y, double width, double height, string pathData, string color)
    {
        Node item = new Node()
            {
                ID = id,
                Width = width,
                Height = height,
                OffsetX = x,
                OffsetY = y,
                Shape = new PathShape()
                {
                    Type = NodeShapes.Path,
                    Data = pathData
                },
                Style = new ShapeStyle()
                {
                    Fill = "#E8F4FD", // Light blue for bedroom items
                    StrokeColor = "#2E86AB",
                    StrokeWidth = 2
                }
            };
        if (id == "BedItem2")
        {
            item.RotationAngle = 270;
            item.Style.Fill = "#FFF2E8"; // Light peach for bed
            item.Style.StrokeColor = "#D2691E";
        }
        if (id == "BedItem4")
        {
            item.RotationAngle = 90;
            item.Style.Fill = "#F0F8E8"; // Light green for bed
            item.Style.StrokeColor = "#228B22";
        }
        
        nodes!.Add(item);
    }
    private void CreateDimensionConnector(string id, double startX, double startY, double endX, double endY, string dimensionText, bool isHorizontal)
    {
        // Create the main dimension line
        Connector dimensionLine = new Connector()
            {
                ID = id,
                SourcePoint = new DiagramPoint() { X = startX, Y = startY },
                TargetPoint = new DiagramPoint() { X = endX, Y = endY },
                Type = ConnectorSegmentType.Straight,
                Constraints = ConnectorConstraints.None,
                Style = new ShapeStyle()
                {
                    StrokeColor = "#0066CC",
                    StrokeWidth = 2
                },
                SourceDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.Arrow,
                    Style = new ShapeStyle()
                    {
                        Fill = "#0066CC",
                        StrokeColor = "#0066CC"
                    }
                },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.Arrow,
                    Style = new ShapeStyle()
                    {
                        Fill = "#0066CC",
                        StrokeColor = "#0066CC"
                    }
                },
                Annotations = new DiagramObjectCollection<PathAnnotation>()
        {
            new PathAnnotation()
            {
                Content = dimensionText,
                Style = new TextStyle()
                {
                    Color = "black",
                    FontSize = 12,
                    Fill="white",
                    FontFamily = "Arial",
                    Bold = true
                },
                Offset = 0.5,
                Alignment = AnnotationAlignment.Center
            }
        }
            };

        if (isHorizontal)
        {
            CreateExtensionLine($"{id}_ExtStart", startX, startY - 10, startX, startY + 10);
            CreateExtensionLine($"{id}_ExtEnd", endX, endY - 10, endX, endY + 10);
        }
        else
        {
            CreateExtensionLine($"{id}_ExtStart", startX - 10, startY, startX + 10, startY);
            CreateExtensionLine($"{id}_ExtEnd", endX - 10, endY, endX + 10, endY);
        }

        connectors!.Add(dimensionLine);
    }

    private void CreateExtensionLine(string id, double startX, double startY, double endX, double endY)
    {
        Connector extensionLine = new Connector()
            {
                ID = id,
                SourcePoint = new DiagramPoint() { X = startX, Y = startY },
                TargetPoint = new DiagramPoint() { X = endX, Y = endY },
                Type = ConnectorSegmentType.Straight,
                      Constraints = ConnectorConstraints.None,
                SourceDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.None
                },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = DecoratorShape.None
                },

                Style = new ShapeStyle()
                {
                    StrokeColor = "#0066CC",
                    StrokeWidth = 1
                }
            };

        connectors!.Add(extensionLine);
    }

    private void AddMeasurementConnectors()
    {
        // Clear existing measurement connectors
        var measurementConnectors = connectors!.Where(c => c.ID!.Contains("Measurement")).ToList();
        foreach (var connector in measurementConnectors)
        {
            connectors!.Remove(connector);
        }

        // Get actual connectors and calculate their distances
        var separator1 = connectors!.FirstOrDefault(c => c.ID == "Separator1");
        if (separator1 != null)
        {
            var separator1Width = Math.Abs(separator1.TargetPoint!.X - separator1.SourcePoint!.X);
            var separator1WidthInches = separator1Width / 8.0; // Convert pixels to inches
            CreateDimensionConnector("Separator1Measurement",
                separator1.SourcePoint.X, 820,
                separator1.TargetPoint.X, 820,
                $"{separator1WidthInches:F1} in",
                true);
        }
        var hallSeparator = connectors!.FirstOrDefault(c => c.ID == "HallSeparator");
        if (hallSeparator != null)
        {
            var hallSeparatorHeight = Math.Abs(hallSeparator.TargetPoint!.Y - hallSeparator.SourcePoint!.Y);
            var hallSeparatorHeightInches = hallSeparatorHeight / 8.0; // Convert pixels to inches
            CreateDimensionConnector("HallSeparatorMeasurement",
                400, hallSeparator.SourcePoint.Y,
                400, hallSeparator.TargetPoint.Y,
                $"{hallSeparatorHeightInches:F1} in",
                false);
        }
        var restroomSeparator = connectors!.FirstOrDefault(c => c.ID == "RestroomSeparator");
        if (restroomSeparator != null)
        {
            var restroomSeparatorHeight = Math.Abs(restroomSeparator.TargetPoint!.Y - restroomSeparator.SourcePoint!.Y);
            var restroomSeparatorHeightInches = restroomSeparatorHeight / 8.0; // Convert pixels to inches
            CreateDimensionConnector("RestroomSeparatorMeasurement",
                1140, restroomSeparator.SourcePoint.Y,
                1140, restroomSeparator.TargetPoint.Y,
                $"{restroomSeparatorHeightInches:F1} in",
                false);
        }

        var separator3 = connectors!.FirstOrDefault(c => c.ID == "Separator3");
        if (separator3 != null)
        {
            var separator3Width = Math.Abs(separator3.TargetPoint!.X - separator3.SourcePoint!.X);
            var separator3WidthInches = separator3Width / 8.0; // Convert pixels to inches
            CreateDimensionConnector("Separator3Measurement",
                separator3.SourcePoint.X, 770,
                separator3.TargetPoint.X, 770,
                $"{separator3WidthInches:F1} in",
                true);
        }

        var separator4 = connectors!.FirstOrDefault(c => c.ID == "Separator4");
        if (separator4 != null)
        {
            var separator4Width = Math.Abs(separator4.TargetPoint!.X - separator4.SourcePoint!.X);
            var separator4WidthInches = separator4Width / 8.0; // Convert pixels to inches
            CreateDimensionConnector("Separator4Measurement",
                separator4.SourcePoint.X, 220,  // Changed from 790 to 250 (below the top wall at Y=200)
                separator4.TargetPoint.X, 220,  // Changed from 790 to 250
                $"{separator4WidthInches:F1} in",
                true);
        }

        var separator2 = connectors!.FirstOrDefault(c => c.ID == "Separator2");
        if (separator2 != null)
        {
            var separator2Height = Math.Abs(separator2.TargetPoint!.Y - separator2.SourcePoint!.Y);
            var separator2HeightInches = separator2Height / 8.0; // Convert pixels to inches
            CreateDimensionConnector("Separator2Measurement",
                1100, separator2.SourcePoint.Y,
                1100, separator2.TargetPoint.Y,
                $"{separator2HeightInches:F1} in",
                false);
        }

        // Main walls
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");
        if (wallOuterBottom != null)
        {
            var bottomWallWidth = Math.Abs(wallOuterBottom.TargetPoint!.X - wallOuterBottom.SourcePoint!.X);
            var bottomWallWidthInches = bottomWallWidth / 8.0; // Convert pixels to inches
            CreateDimensionConnector("BottomWallMeasurement",
                wallOuterBottom.SourcePoint.X, 880,
                wallOuterBottom.TargetPoint.X, 880,
                $"{bottomWallWidthInches:F1} in",
                true);
        }

        var wallOuterTop = connectors!.FirstOrDefault(c => c.ID == "WallOuterTop");
        if (wallOuterTop != null)
        {
            var topWallWidth = Math.Abs(wallOuterTop.TargetPoint!.X - wallOuterTop.SourcePoint!.X);
            var topWallWidthInches = topWallWidth / 8.0; // Convert pixels to inches
            CreateDimensionConnector("TopWallMeasurement",
                wallOuterTop.SourcePoint.X, 180,
                wallOuterTop.TargetPoint.X, 180,
                $"{topWallWidthInches:F1} in",
                true);
        }

        var wallOuterLeft = connectors!.FirstOrDefault(c => c.ID == "WallOuterLeft");
        if (wallOuterLeft != null)
        {
            var leftWallHeight = Math.Abs(wallOuterLeft.TargetPoint!.Y - wallOuterLeft.SourcePoint!.Y);
            var leftWallHeightInches = leftWallHeight / 8.0; // Convert pixels to inches
            CreateDimensionConnector("LeftWallMeasurement",
                340, wallOuterLeft.SourcePoint.Y,  // Changed from 400 to 340 (further left)
                340, wallOuterLeft.TargetPoint.Y,  // Changed from 400 to 340 (further left)
                $"{leftWallHeightInches:F1} in",
                false);
        }
    }
    private void RemoveSpecificDimensionConnector(string separatorId)
    {
        string measurementId = $"{separatorId}Measurement";
        var dimensionConnectors = connectors!.Where(c =>
            c.ID == measurementId ||
            c.ID == $"{measurementId}_ExtStart" ||
            c.ID == $"{measurementId}_ExtEnd").ToList();

        foreach (var connector in dimensionConnectors)
        {
            connectors!.Remove(connector);
        }
    }

    private void AddSpecificSeparatorMeasurement(Connector separator)
    {
        var wallOuterTop = connectors!.FirstOrDefault(c => c.ID == "WallOuterTop");
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");
        var wallOuterRight = connectors!.FirstOrDefault(c => c.ID == "WallOuterRight");
        var wallOuterLeft = connectors!.FirstOrDefault(c => c.ID == "WallOuterLeft");

        switch (separator.ID)
        {
            case "Separator1":
                var separator1Width = Math.Abs(separator.TargetPoint!.X - separator.SourcePoint!.X);
                CreateDimensionConnector("Separator1Measurement",
                    separator.SourcePoint.X, wallOuterBottom!.SourcePoint!.Y + 60,
                    separator.TargetPoint.X, wallOuterBottom.SourcePoint.Y + 60,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(separator1Width)),
                    true);
                break;

            case "Separator3":
                var separator3Width = Math.Abs(separator.TargetPoint!.X - separator.SourcePoint!.X);
                CreateDimensionConnector("Separator3Measurement",
                    separator.SourcePoint.X, wallOuterBottom!.SourcePoint!.Y + 80,
                    separator.TargetPoint.X, wallOuterBottom.SourcePoint.Y + 80,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(separator3Width)),
                    true);
                break;
            case "HallSeparator":
                var hallSeparatorHeight = Math.Abs(separator.TargetPoint!.Y - separator.SourcePoint!.Y);
                CreateDimensionConnector("HallSeparatorMeasurement",
                    400, separator.SourcePoint.Y,  // Hall separator at X=400
                    400, separator.TargetPoint.Y,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(hallSeparatorHeight)),
                    false);
                break;
            case "Separator4":
                var separator4Width = Math.Abs(separator.TargetPoint!.X - separator.SourcePoint!.X);
                CreateDimensionConnector("Separator4Measurement",
                    separator.SourcePoint.X, wallOuterTop!.SourcePoint!.Y - 20,
                    separator.TargetPoint.X, wallOuterTop.SourcePoint.Y - 20,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(separator4Width)),
                    true);
                break;

            case "Separator2":
                var separator2Height = Math.Abs(separator.TargetPoint!.Y - separator.SourcePoint!.Y);
                CreateDimensionConnector("Separator2Measurement",
                    wallOuterRight!.SourcePoint!.X + 40, separator.SourcePoint.Y,
                    wallOuterRight.SourcePoint.X + 40, separator.TargetPoint.Y,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(separator2Height)),
                    false);
                break;

            case "RestroomSeparator":
                var restroomSeparatorHeight = Math.Abs(separator.TargetPoint!.Y - separator.SourcePoint!.Y);
                CreateDimensionConnector("RestroomSeparatorMeasurement",
                    wallOuterRight!.SourcePoint!.X + 80, separator.SourcePoint.Y,
                    wallOuterRight.SourcePoint.X + 80, separator.TargetPoint.Y,
                    FormatMeasurement(ConvertPixelsToSelectedUnit(restroomSeparatorHeight)),
                    false);
                break;
        }
    }
    private void UpdateDimensionConnectors(Connector movedConnector)
    {
        // Only update for separator connectors (not wall connectors)
        if (!movedConnector.ID!.StartsWith("Separator") &&
        movedConnector.ID != "RestroomSeparator" &&
        movedConnector.ID != "HallSeparator")
            return;
        // Remove only the specific separator's dimension connectors
        RemoveSpecificDimensionConnector(movedConnector.ID);

        // Recreate only the specific separator's dimension connector
        AddSpecificSeparatorMeasurement(movedConnector);

        // Refresh the diagram
        StateHasChanged();
    }

    private bool IsWallOrSeparator(string connectorId)
    {
        return connectorId.StartsWith("WallOuter") ||
          connectorId.StartsWith("Separator") ||
          connectorId == "RestroomSeparator";
    }

    private void RemoveDimensionConnectors(Connector connector)
    {
            connectors!.Remove(connector);
    }

    // Enhanced AddMeasurementConnectors to get current wall positions
    private void AddMeasurementConnectorsRuntTime()
    {
        // Get current wall connector positions
        var wallOuterTop = connectors!.FirstOrDefault(c => c.ID == "WallOuterTop");
        var wallOuterLeft = connectors!.FirstOrDefault(c => c.ID == "WallOuterLeft");
        var wallOuterBottom = connectors!.FirstOrDefault(c => c.ID == "WallOuterBottom");
        var wallOuterRight = connectors!.FirstOrDefault(c => c.ID == "WallOuterRight");
        var separator1 = connectors!.FirstOrDefault(c => c.ID == "Separator1");
        var separator2 = connectors!.FirstOrDefault(c => c.ID == "Separator2");
        var separator3 = connectors!.FirstOrDefault(c => c.ID == "Separator3");
        var separator4 = connectors!.FirstOrDefault(c => c.ID == "Separator4");


        // SMALL DIMENSIONS (closest to walls) - Separators
        if (separator1 != null)
        {
            var separator1Width = Math.Abs(separator1.TargetPoint!.X - separator1.SourcePoint!.X);
            CreateDimensionConnector("Separator1Measurement",
                separator1.SourcePoint.X, wallOuterBottom!.SourcePoint!.Y + 60,
                separator1.TargetPoint.X, wallOuterBottom.SourcePoint.Y + 60,
                FormatMeasurement(ConvertPixelsToSelectedUnit(separator1Width)),
                true);
        }

        if (separator3 != null)
        {
            var separator3Width = Math.Abs(separator3.TargetPoint!.X - separator3.SourcePoint!.X);
            CreateDimensionConnector("Separator3Measurement",
                separator3.SourcePoint.X, wallOuterBottom!.SourcePoint!.Y + 80,
                separator3.TargetPoint.X, wallOuterBottom.SourcePoint.Y + 80,
                FormatMeasurement(ConvertPixelsToSelectedUnit(separator3Width)),
                true);
        }

        if (separator4 != null)
        {
            var separator4Width = Math.Abs(separator4.TargetPoint!.X - separator4.SourcePoint!.X);
            CreateDimensionConnector("Separator4Measurement",
                separator4.SourcePoint.X, wallOuterTop!.SourcePoint!.Y -20,  // Position below the top wall measurement
                separator4.TargetPoint.X, wallOuterTop.SourcePoint.Y -20,  // Position below the top wall measurement
                FormatMeasurement(ConvertPixelsToSelectedUnit(separator4Width)),
                true);
        }
        var restroomSeparator = connectors!.FirstOrDefault(c => c.ID == "RestroomSeparator");
        if (restroomSeparator != null)
        {
            var restroomSeparatorHeight = Math.Abs(restroomSeparator.TargetPoint!.Y - restroomSeparator.SourcePoint!.Y);
            CreateDimensionConnector("RestroomSeparatorMeasurement",
                wallOuterRight!.SourcePoint!.X + 80, restroomSeparator.SourcePoint.Y,
                wallOuterRight.SourcePoint.X + 80, restroomSeparator.TargetPoint.Y,
                FormatMeasurement(ConvertPixelsToSelectedUnit(restroomSeparatorHeight)),
                false);
        }
        if (separator2 != null)
        {
            var separator2Height = Math.Abs(separator2.TargetPoint!.Y - separator2.SourcePoint!.Y);
            CreateDimensionConnector("Separator2Measurement",
                wallOuterRight!.SourcePoint!.X + 40, separator2.SourcePoint.Y,
                wallOuterRight.SourcePoint.X + 40, separator2.TargetPoint.Y,
                FormatMeasurement(ConvertPixelsToSelectedUnit(separator2Height)),
                false);
        }
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}