@page "/dialog/draggable"

@using Syncfusion.Blazor.Popups

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the drag-and-drop operation of the Blazor Dialog component. To begin a drag-and-drop operation, select a dialog's header using a mouse and drop them in the desired location. The Dialog can be dragged within the sample container. Enable the 'Open' button to reopen the Dialog if it is closed.</p>
</SampleDescription>
<ActionDescription>
   <p>Drag-and-drop operation is enabled using the <code>AllowDragging</code> property. When you configure the <code>Target</code> property, the dialog can be dragged only within its target container. The drag-and-drop feature is used to reposition the dialog dynamically.</p>
   <p>More information on the draggable operation of Dialog can be found in the<a target="_blank" href="https://blazor.syncfusion.com/documentation/dialog/draggable/" aria-label="Blazor Dialog Draggable documentation"> documentation section </a>.</p>
</ActionDescription>

<div class="col-lg-12 control-section" id="target">
    <div>
        @if (this.ShowButton)
        {
            <button class="e-btn" @onclick="@OnClicked" aria-label="Open Dialog">Open</button>
        }
    </div>
    <SfDialog Target="#target" Width="300px" AllowDragging="true" IsModal="true" ShowCloseIcon="true" @bind-Visible="Visibility">
        <DialogTemplates>
            <Header> Drag Me!!!</Header>
            <Content> This is a dialog with draggable support.</Content>
        </DialogTemplates>
        <DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose"></DialogEvents>
    </SfDialog>
</div>

<style>
    #target {
        height: 500px;
    }

    .material.e-bigger .e-dialog .e-dlg-content, .material.e-bigger.e-dialog .e-dlg-content {
        border-radius: 0 0 16px 16px;
    }
</style>

@code {
    private bool Visibility { get; set; } = true;
    private bool ShowButton { get; set; } = false;
    
    private void DialogOpen(Object args)
    {
        this.ShowButton = false;
    }

    private void DialogClose(Object args)
    {
        this.ShowButton = true;
    }

    private void OnClicked()
    {
        this.Visibility = true;
    }
}