@page "/dialog/resizable"

@using Syncfusion.Blazor.Popups

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to resize the operation of the Blazor Dialog component in all directions. To resize the modal Dialog, select and resize a Dialog using its handle (grip) or hover on any of the edges or borders of the Dialog. The "Open" button is used to reopen the Dialog if it is closed.</p>
</SampleDescription>
<ActionDescription>
   <p> Users can create resizable modal Blazor Dialog by setting the <code>EnableResize</code> property to true, which is used to change the size of a Dialog dynamically and view its content with expanded mode. The <code>ResizeHandles</code> property can also be configured for which directions the Dialog should resize. When you configure the <code>Target</code> property along with <code>EnableResize</code> property, the Dialog can be resized within its specified target container.</p>
</ActionDescription>

<div class="col-lg-12 control-section" id="target">
    <div>
        @if (this.ShowButton)
        {
            <button class="e-btn" @onclick="@OnClicked" aria-label="Open Resizable Dialog">Open</button>
        }
    </div>
    <SfDialog Target="#target" Width="300px" ResizeHandles="@_dialogResizeDirections" AllowDragging="true" EnableResize="true" ShowCloseIcon="true" @bind-Visible="Visibility">
        <DialogTemplates>
            <Header> Resize Me!!!</Header>
            <Content> This is a dialog with resizable support. </Content>
        </DialogTemplates>
        <DialogEvents OnOpen="@DialogOpen" Closed="@DialogClose"></DialogEvents>
    </SfDialog>
</div>

<style>
    #target {
        height: 500px;
    }
</style>

@code {
    private bool Visibility { get; set; } = true;
    private bool ShowButton { get; set; } = false;
    private ResizeDirection[] _dialogResizeDirections { get; set; } = new ResizeDirection[] { ResizeDirection.All };
    
    private void DialogOpen(Object args)
    {
        this.ShowButton = false;
    }

    private void DialogClose(Object args)
    {
        this.ShowButton = true;
    }

    private void OnClicked()
    {
        this.Visibility = true;
    }
}