@page "/tooltip/menu"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Lists
@inject IJSRuntime JsRuntime;
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@implements IDisposable;
@*End:Hidden*@

<SampleDescription>
    This sample demonstrates how to customize the <a href="https://www.syncfusion.com/blazor-components/blazor-tooltip" target="_blank" aria-label="Feature Tour of Blazor Tooltip">Blazor Tooltip</a> component to show the list of menu items as its content.
</SampleDescription>
<ActionDescription>
    <code>Tooltip</code> has been integrated with the <a href="https://www.syncfusion.com/blazor-components/blazor-listview" target="_blank" aria-label="Feature Tour of Blazor ListView">ListView</a> component to display the tooltip menu. With the help of the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Popups.SfTooltip.html#Syncfusion_Blazor_Popups_SfTooltip_OnRender" target="_blank" aria-label="Class reference of OnRender event in Tooltip">OnRender</a> event, the template content of tooltip will be changed to show a different ListView, which appears like a menu. On clicking the toolbar items, the corresponding tooltip menu will be opened.
</ActionDescription>
<div class="control-section">
    <div class="toolbarContainer">
        @*Initialize the Tooltip component*@
        <SfTooltip @ref="tooltipInstance" Width="170px" ID="tooltip-menu" Target=".custom" OnRender="OnTooltipRender" OpensOn="Click" CssClass="e-tooltip-menu-settings">
            <TooltipTemplates>
                <Content>
                    @if (DynamicContent == "Wireless")
                    {
                        @*Initialize the Wireless ListView component*@
                        <SfListView CssClass="tooltipMenu-list" ShowIcon="true" DataSource="@ConnectionData" TValue="DataModel">
                            <ListViewEvents TValue="DataModel" Clicked="CloseTooltip"></ListViewEvents>
                            <ListViewFieldSettings TValue="DataModel" Id="Id" IconCss="IconCss" Text="Text"></ListViewFieldSettings>
                        </SfListView>
                    }
                    else if (DynamicContent == "Device")
                    {
                        @*Initialize the Device ListView component*@
                        <SfListView CssClass="tooltipMenu-list" ShowIcon="true" DataSource="@SettingsData" TValue="DataModel">
                            <ListViewEvents TValue="DataModel" Clicked="CloseTooltip"></ListViewEvents>
                            <ListViewFieldSettings TValue="DataModel" Id="Id" IconCss="IconCss" Text="Text"></ListViewFieldSettings>
                        </SfListView>
                    }
                    else if (DynamicContent == "Personal")
                    {
                        @*Initialize the Personal ListView component*@
                        <SfListView CssClass="tooltipMenu-list" ShowIcon="true" DataSource="@PesonalData" TValue="DataModel">
                            <ListViewEvents TValue="DataModel" Clicked="CloseTooltip"></ListViewEvents>
                            <ListViewFieldSettings TValue="DataModel" Id="Id" IconCss="IconCss" Text="Text"></ListViewFieldSettings>
                        </SfListView>
                    }
                </Content>
            </TooltipTemplates>
            @*Initialize the Toolbar component*@
            <SfToolbar ID="toolbar-menu" aria-label="Tooltip Menu Toolbar">
                <ToolbarItems>
                    <ToolbarItem CssClass="custom" Id="Wireless" Type="ItemType.Button" Text="Wireless" TooltipText="Wireless" Overflow=OverflowOption.Hide PrefixIcon="e-wifi"></ToolbarItem>
                    <ToolbarItem CssClass="custom" Id="Device" Type="ItemType.Button" Text="Device" TooltipText="Device" Overflow=OverflowOption.Hide PrefixIcon="e-battery"></ToolbarItem>
                    <ToolbarItem CssClass="custom" Id="Personal" Type="ItemType.Button" Text="Personal" TooltipText="Personal" Overflow=OverflowOption.Hide PrefixIcon="e-security"></ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </SfTooltip>
    </div>
</div>

@code {
    // Specifies the instance of Tooltip component.
    public SfTooltip? tooltipInstance;
    // Specifies the current Toolbar item.
    public string DynamicContent = string.Empty;
    private DotNetObjectReference<Menu>? dotnetObjectRef { get; set; }
    public class DataModel
    {
        public string? Text { get; set; }
        public string? IconCss { get; set; }
        public string? Id { get; set; }
    }
    // Specifies the wireless data of the ListView component.
    public DataModel[] ConnectionData =
    {
        new DataModel { Text = "WI-FI", IconCss = "wifi", Id = "1" },
        new DataModel { Text = "Bluetooth", IconCss = "bluetooth", Id = "2" },
        new DataModel { Text = "SIM cards", IconCss = "sim", Id = "3" }
    };
    // Specifies the device data of the ListView component.
    public DataModel[] SettingsData =
    {
        new DataModel { Text = "Display", IconCss = "display", Id = "11" },
        new DataModel { Text = "Sound", IconCss = "sound", Id = "12" },
        new DataModel { Text = "Battery", IconCss = "battery", Id = "13" },
        new DataModel { Text = "Users", IconCss = "user", Id = "4" }
    };
    // Specifies the personal data of the ListView component.
    public DataModel[] PesonalData =
    {
        new DataModel { Text = "Location", IconCss = "location", Id = "111" },
        new DataModel { Text = "Security", IconCss = "security", Id = "112" },
        new DataModel { Text = "Language", IconCss = "language", Id = "113" }
    };
    protected override void OnInitialized()
    {
        dotnetObjectRef = DotNetObjectReference.Create(this);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("getInstance", dotnetObjectRef);
            JsRuntime.InvokeVoidAsync("closeTooltipPopup", "CloseTooltipPopup");
        }
    }
    // Specifies the event handler for before rendering the Tooltip component.
    public void OnTooltipRender(TooltipEventArgs args)
    {
        if (args.Target != null)
        {
            DynamicContent = args.Target.ID;
        }
        if (tooltipInstance != null)
        {
            tooltipInstance.RefreshPositionAsync();         
        }
    }
    // Specifies the event handler to close the tooltip while selecting the item.

    public void CloseTooltip(ClickEventArgs<DataModel> args)
    {
        if (tooltipInstance != null)
        {
            tooltipInstance.CloseAsync();         
        }
    }
    [JSInvokable]
    public void CloseTooltipPopup()
    {
        if (tooltipInstance != null)
        {
            tooltipInstance.CloseAsync();
        }
    }
    public void Dispose()
    {
        dotnetObjectRef?.Dispose();
    }
}
<style type="text/css">
    /* Icon specific styles for toolbar and menu items */
    @@font-face {
        font-family: 'e-tooltip-menu-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .tooltipMenu-list .e-list-icon {
        float: right;
        height: inherit;
        width: inherit;
        margin-right: 0;
        font-family: 'e-tooltip-menu-icons';
    }

    .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn.e-tbtn-txt .e-btn-icon {
        font-family: 'e-tooltip-menu-icons';
    }

    .tooltipMenu-list .wifi:before,
    #toolbar-menu .e-wifi:before {
        content: "\e700";
    }

    .tooltipMenu-list .bluetooth:before {
        content: "\e702";
    }

    .tooltipMenu-list .sim:before {
        content: "\e705";
    }

    .tooltipMenu-list .display:before {
        content: "\e704";
    }

    .tooltipMenu-list .sound:before {
        content: "\e703";
    }

    .tooltipMenu-list .battery:before,
    #toolbar-menu .e-battery:before {
        content: "\e711";
    }

    .tooltipMenu-list .user:before {
        content: "\e707";
    }

    .tooltipMenu-list .location:before {
        content: "\e708";
    }

    .tooltipMenu-list .security:before,
    #toolbar-menu .e-security:before {
        content: "\e709";
    }

    .tooltipMenu-list .language:before {
        content: "\e710";
    }
    /* Sample specifc styles */
    .toolbarContainer {
        text-align: center;
        padding-top: 140px;
    }

    #tooltip-menu, #toolbar-menu {
        display: inline-block;
    }
    
    .e-tooltip-menu-settings .e-listview {
        border-radius: 0;
    }

    .e-tooltip-menu-settings.e-tooltip-wrap.e-popup {
        background: inherit;
    }

    .fluent2 .e-tooltip-menu-settings.e-tooltip-wrap.e-popup,
    .fluent2-dark .e-tooltip-menu-settings.e-tooltip-wrap.e-popup,
    .fluent2-highcontrast .e-tooltip-menu-settings.e-tooltip-wrap.e-popup {
        background-color: var(--color-sf-tooltip-bg-color);
    }

    .fluent2 .tooltipMenu-list.e-listview .e-list-icon,
    .fluent2-dark .tooltipMenu-list.e-listview .e-list-icon,
    .fluent2-highcontrast .tooltipMenu-list.e-listview .e-list-icon {
        padding: 2px;
        padding-top: 6px;
    }

    .e-tooltip-menu-settings.e-tooltip-wrap .e-tip-content {
        padding: 3px;
    }

    .tooltipMenu-list .e-list-item:last-child {
        border-bottom: 0;
    }

    .e-tooltip-menu-settings.e-tooltip-wrap .e-arrow-tip-inner.e-tip-top {
        color: white;
    }

</style>

