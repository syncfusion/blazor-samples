@page "/predefined-dialogs/customization"

@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons

@inject SfDialogService DialogService

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates how to customize the content of the predefined Alert, Confirm and Prompt dialogs. Three buttons have been added to this example, click one of them to open the relevant dialog box.</p>
</SampleDescription>
<ActionDescription>
    <p>The predefined dialog is used to display messages such as supplemental content like graphics, text, and interactive content like form components within a web page. It can use the <code>DialogOption.ChildContent</code> attribute to load customized content.
    </p>
     <p>
        <b>See also</b>
    </p>
    <ul>
        <li> <a target="_blank" 
            href="https://blazor.syncfusion.com/documentation/predefined-dialogs/customization" aria-label="Customization of Blazor Predefined Dialogs documentation">
            Customization of predefined dialogs </a>    
        </li>
</ul>
</ActionDescription>

<div id="predefinedDialogCustomization">
    <SfButton CssClass="e-warning" @onclick="@AlertButton">Alert</SfButton>
    <SfButton CssClass="e-success" @onclick="@ConfirmButton">Confirm</SfButton>
    <SfButton CssClass="e-primary" @onclick="@PromptButton">Prompt</SfButton>
    <span class="status" >
        @DialogStatus
    </span>
</div>
    
@code {
    private string? DialogStatus { get; set; }
    private string? _inputValue { get; set; }

    private async Task AlertButton()
    {
        this.DialogStatus = " ";
        await DialogService.AlertAsync(null, " ", new DialogOptions()
        {
            PrimaryButtonOptions = new DialogButtonOptions { Content = "OK" },
            ChildContent = @<table class="Table">
                <tbody style="line-height: 2.0;">
                <tr>
                    <td class="data">
                        <span class="circle-border"><span class="e-icons e-check" style="font-size: 30px; color: green; font-weight:700;"></span></span>
                    </td>
                </tr>
                <tr>
                    <td class="data" style="font-size: 25px;"><b style="font-weight: 500 !important;">Good job!</b></td>
                </tr>
                <tr>
                    <td class="data">You clicked the button!</td>
                </tr>
                </tbody>
            </table>
        });
        this.DialogStatus = "The user closed the Alert dialog";
    }

    private async Task ConfirmButton()
    {
        this.DialogStatus = " ";
        bool isConfirm = await DialogService.ConfirmAsync(null, "Delete File", new DialogOptions()
        {
            PrimaryButtonOptions = new DialogButtonOptions { Content = "Yes" },
            CancelButtonOptions = new DialogButtonOptions { Content = "No" },
            ChildContent =
                @<div>
                <p ><span class="e-icons e-changes-reject" style="float: left;padding-right: 10px;font-size: 25px;display: inline;"></span>Are you sure you want to permanently delete this file?</p>
                <p class="fileEdit"><span class="e-icons e-image" style="font-size: 60px;"></span>
                    <span>failed personas.png<br/>
                        Item type:PNG File<br/>
                        Dimenstion: 1384 * 782<br/>
                        Size:374 KB<br/>
                        Original Location:C:\Users\Images</span></p>
            </div>
        });
        string confirmMessage = isConfirm ? "confirmed" : "canceled";
        this.DialogStatus = $"The user {confirmMessage} the dialog box.";
    }

    private async Task PromptButton()
    {
        this.DialogStatus = " ";
        string promptText = await DialogService.PromptAsync(null, "Join Wi-Fi Network", new DialogOptions()
        {
            ChildContent =
                @<table class="Table">
                    <tbody style="line-height: 2.0;"><tr><td>SSID: <b>AndroidAP</b></td></tr>
                    <tr><td>Password:</td></tr>
                    <tr><td><span class="e-input-group"><input type="password" id="password" @bind-value="_inputValue" name="Required" class="e-input"></span></td></tr></tbody>
            </table>
        });
        this.DialogStatus = $"The user's input is returned as \"{_inputValue}\".";
    }

}
<style>
   .e-alert-dialog .e-footer-content {
     display: flex;
    justify-content: center;
    }
    #predefinedDialogCustomization {
        margin: 25px 0 0 15px;
    }
    #predefinedDialogCustomization .status {
        margin-top:20px;
        font-size:16px;
        display:block;
    }
    #predefinedDialogCustomization .e-btn{
       margin-right:5px;
    }
    .e-dlg-content .Table{
        width: 100%;
        height: 100%;
    }
    .fileEdit{
        display:flex;
        justify-content:space-evenly;
        padding: 20px 0 0 0px;
    }
    .circle-border{
        align-items: center;
        justify-content: center;
        display: flex;
        color: green;
        width: 60px;
        height: 60px;
        border: 5px solid rgb(215,215,215);
        border-radius: 50%;
    }
    .data{
        display:flex;
        justify-content :center;
        /*padding-left: 32px;*/
    }
    .confirm{
        display:flex;
        justify-content :center;
        padding-left: 55px;
        padding-right: 20px;
    }
    
  button.e-btn.dlgbtn {
      margin-top:10px;
  }
</style>
