@page "/DateTime-Picker/Disabled-Dates"

@using Syncfusion.Blazor.Calendars

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
<SampleDescription>
    <p>In the following example, all the weekends (<b>Saturday</b> and <b>Sunday</b>) of a month are <b>disabled</b>, and these dates are <b>restricted</b> to set or select in the DateTimePicker.</p>
</SampleDescription>
<ActionDescription>
    <p>Disabled Dates example demonstrates how to disable specific dates in the DateTimePicker by using <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Calendars.DateTimePickerEvents-1.html#Syncfusion_Blazor_Calendars_DateTimePickerEvents_1_OnRenderDayCell" target="_blank" aria-label="Class reference of OnRenderDayCell event in DateTimePicker">OnRenderDayCell</a> event. This event gets triggered on each day cell element creation, that allows you to customize, or disable specific dates in the calendar. Here the weekend dates are disabled by using <b>OnRenderDayCell</b>.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <label class="example-label">Select Date and Time</label>
        <SfDateTimePicker TValue="DateTime?" @ref="@DateTimePickerObj" ShowClearButton="true" FullScreen="true" Placeholder="Select a date" aria-label="Date and time selector with weekends disabled">
            <DateTimePickerEvents TValue="DateTime?" OnRenderDayCell="@DisableDate"></DateTimePickerEvents>
        </SfDateTimePicker>
    </div>
</div>

<style>
    .control-wrapper {
    max-width: 275px;
    margin: 0 auto;
    padding: 50px 0px 0px;
    }

    .example-label {
    font-size: 14px;
    margin-bottom: 6px;
    }
</style>

@code {
    private SfDateTimePicker<DateTime?>? DateTimePickerObj { get; set; }

    private void DisableDate(RenderDayCellEventArgs args)
    {
        if (DateTimePickerObj != null)
        {
            var view = DateTimePickerObj.CurrentView();
            if (view == "Month" && ((int)args.Date.DayOfWeek == 0 || (int)args.Date.DayOfWeek == 6))
            {
                args.IsDisabled = true;
            }           
        }
    }
}