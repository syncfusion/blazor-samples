@page "/DatePicker/Special-Dates"

@using Syncfusion.Blazor.Calendars

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
<SampleDescription>
    <p>In the following example, specific dates are highlighted in the calendar popup.</p>
</SampleDescription>
<ActionDescription>
    <p>The Special Dates example demonstrates, how to customize specific dates in a calendar by using the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Calendars.DatePickerEvents-1.html#Syncfusion_Blazor_Calendars_DatePickerEvents_1_OnRenderDayCell" target="_blank" aria-label="Class reference of OnRenderDayCell property in DatePicker">OnRenderDayCell</a> event. This event gets triggered on each day cell element creation that allows you to customize or disable the specific dates in the calendar. Here, list of dates in the current month are customized with custom styles by adding the <b>personal-appointment</b> and <b>official-appointment</b> classes.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <label class="example-label">Travel Date</label>
        <SfDatePicker TValue="DateTime?" Placeholder="Choose a Date" ShowClearButton="true" @bind-Value="@SelectedDate" FullScreen="true" aria-label="Select travel date with special appointments highlighted">
            <DatePickerEvents TValue="DateTime?" OnRenderDayCell="CustomDates" ValueChange="OnChange" Created="CreatedHandler"></DatePickerEvents>
        </SfDatePicker>
    </div>
    <div class="display-date">
        <span class="example-label">Selected travel date is: <b>@SelectedValue</b></span>
    </div>
</div>

@code {
    public DateTime? SelectedDate { get; set; } = DateTime.Now;
    public string? SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;

    public void CustomDates(RenderDayCellEventArgs args)
    {
        if (CurrentDate != null)
        {
            var CurrentMonth = CurrentDate.Value.Month;
            if (args.Date.Month == CurrentMonth && (args.Date.Day == 7 || args.Date.Day == 14 || args.Date.Day == 24 || args.Date.Day == 29))
            {
                if (args.CellData != null)
                {
                    args.CellData.ClassList += " personal-appointment";
                }
            }
            if (args.Date.Month == CurrentMonth && (args.Date.Day == 3 || args.Date.Day == 11 || args.Date.Day == 17 || args.Date.Day == 22))
            {
                if (args.CellData != null)
                {
                    args.CellData.ClassList += " official-appointment";
                }
            }

        }
    }

    public void CreatedHandler(object args)
    {
        if (DateTime.Today.Day == 7 || DateTime.Today.Day == 14 || DateTime.Today.Day == 24 || DateTime.Today.Day == 29)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Personal appointment)";
        }
        if (DateTime.Today.Day == 3 || DateTime.Today.Day == 11 || DateTime.Today.Day == 17 || DateTime.Today.Day == 22)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Official appointment)";
        }
    }
    public void OnChange(ChangedEventArgs<DateTime?> args)
    {
        var Count = 0;
        if (CurrentDate != null)
        {
            var CurrentMonth = CurrentDate.Value.Month;
            if (args.Value != null && args.Value.Value.Month == CurrentMonth && (args.Value.Value.Day == 7 || args.Value.Value.Day == 14 || args.Value.Value.Day == 24 || args.Value.Value.Day == 29))
            {
                this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Personal appointment)";
                Count++;
            }
            if (args.Value != null && args.Value.Value.Month == CurrentMonth && (args.Value.Value.Day == 3 || args.Value.Value.Day == 11 || args.Value.Value.Day == 17 || args.Value.Value.Day == 22))
            {
                this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Official appointment)";
                Count++;
            }
            if (Count == 0)
            {
                this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
            }
        }
    }
}
<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .display-date {
        max-width: 250px;
        margin: 0 auto;
        padding: 15px 0px;
    }

    .e-calendar .e-content .e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day {
        color: #28a745;
        font-weight: 800;
    }

    .e-calendar .e-content .e-cell.official-appointment span.e-day,
    .e-calendar .e-content td:hover.e-cell.official-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        color: #dc3545;
        font-weight: 800;
    }

    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.personal-appointment span.e-day,
    .e-calendar .e-content td.e-selected.e-focused-date.e-cell.official-appointment span.e-day {
        background-color: rgb(255 255 0 / 90%);
    }

</style>
