@page "/DatePicker/Format"

@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
<SampleDescription>
   <p>This example demonstrates the display and input formats of the DatePicker by using the <code>Format</code> and <code>InputFormats</code> properties.</p>
</SampleDescription>
<ActionDescription>
    <p>Date Formats example explains the support of display format in the DatePicker component by using the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Calendars.DatePickerModel.html#Syncfusion_Blazor_Calendars_DatePickerModel_Format" target="_blank" aria-label="Class reference of Format property in DatePicker"> Format</a> property.</p>
    <p>Additionally, it demonstrates the support for input formats when a user types an input value, it is converted to the display format using the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Calendars.DatePickerModel.html#Syncfusion_Blazor_Calendars_DatePickerModel_Format" target="_blank" aria-label="Class reference of Format property in DatePicker"> InputFormats</a> property.</p>
    <p><b>See also</b></p>
    <ul>
        <li><a href="https://blazor.syncfusion.com/documentation/datepicker/date-format/" target="_blank">Blazor DatePicker - Format</a></li>
    </ul>
</ActionDescription>

<div class="col-lg-12">
    <div class="col-lg-8 control-section sb-property-border">
        <div class="control-wrapper">
            <label class="example-label">Departure Date</label>
            <SfDatePicker TValue="DateTime?" Placeholder="Choose a Date" @bind-Value="@DateValue" InputFormats="@InputFormats"
                          Format="@SelectedFormat" ShowClearButton="true" FullScreen="true"></SfDatePicker>
        </div>
    </div>
    <div class="col-lg-4">
        <div class='property-panel-section'>
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <label class="example-label">Choose a display format</label>
                <SfDropDownList TItem="DateFormat" TValue="string" PopupHeight="230px" @bind-Index="@SelectedFormatIndex" DataSource="@DisplayFormats">
                    <DropDownListEvents TItem="DateFormat" TValue="string" ValueChange="OnDisplayFormatChange"></DropDownListEvents>
                    <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="property-panel-content">
                <label class="example-label">Choose input formats</label>
                <SfMultiSelect TValue="string[]" TItem="InputFormatOption" Placeholder="e.g. MM-dd-yyyy" @bind-Value="@SelectedInputFormats" Mode="@VisualMode.CheckBox" DataSource="@InputFormatOptions" ShowSelectAll="true" PopupHeight="350px">
                    <MultiSelectEvents TItem="InputFormatOption" TValue="string[]" ValueChange="OnInputFormatChange"></MultiSelectEvents>
                    <MultiSelectFieldSettings Value="InputFormat"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section {
        min-height: 370px;
    }

    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .property-panel-content {
        padding: 0px 0px 15px 0px;
    }

    .property-panel-content:last-child {
        padding: 0px 0px 40px 0px;
    }
</style>

@code {
    private int? SelectedFormatIndex { get; set; } = 0;
    public DateTime? DateValue { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 10);
    public string[]? InputFormats { get; set; }
    public string[]? SelectedInputFormats { get; set; }
    public string? SelectedFormat { get; set; } = "dd-MMM-yy";

    public class DateFormat
    {
        public string? Id { get; set; }
        public string? Text { get; set; }
    }

    private List<DateFormat> DisplayFormats = new List<DateFormat>()
    {
        new DateFormat() { Id = "format1", Text = "dd-MMM-yy" },
        new DateFormat() { Id = "format2", Text = "yyyy-MM-dd" },
        new DateFormat() { Id = "format3", Text = "dd-MMMM-yyyy" }
    };

    public void OnDisplayFormatChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DateFormat> args)
    {
        this.SelectedFormat = args.ItemData?.Text;
    }

    public class InputFormatOption
    {
        public string? InputFormat { get; set; }
    }

    private List<InputFormatOption> InputFormatOptions = new List<InputFormatOption>
    {
        new InputFormatOption() { InputFormat="MM-dd-yyyy" },
        new InputFormatOption() { InputFormat="dd/MM/yyyy" },
        new InputFormatOption() { InputFormat="ddMMMyy" },
        new InputFormatOption() { InputFormat="yyyyMMdd" },
        new InputFormatOption() { InputFormat="dd.MM.yy" },
        new InputFormatOption() { InputFormat="MM/dd/yyyy" },
        new InputFormatOption() { InputFormat="yyyy/MMM/dd" },
        new InputFormatOption() { InputFormat="dd-MM-yyyy" }
    };

    private void OnInputFormatChange(MultiSelectChangeEventArgs<string[]> args)
    {
        this.InputFormats = args.Value;
    }
}
