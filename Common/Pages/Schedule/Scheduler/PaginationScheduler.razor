@page "/scheduler/pagination-scheduler"

@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Data
@inject NavigationManager UriHelper
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This demo shows how to implement pagination in a scheduler with many resources, loading them in smaller batches for better performance.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This demo showcases the implementation of pagination in a Scheduler component with a large number of resources, loading them in smaller batches for improved performance.
    </p>
    <p>
        Key components and features:
    </p>
    <ul>
        <li><strong>Syncfusion Scheduler (SfSchedule):</strong> Displays the timeline view of resources and their events.</li>
        <li><strong>Syncfusion Pager (SfPager):</strong> Enables navigation through resource pages, with 5 pages visible at a time.</li>
        <li><strong>Resource Management:</strong> 1000 resources are managed, but only 10 are displayed per page.</li>
        <li><strong>Dynamic Update:</strong> The scheduler view updates as you navigate through pages, showing the corresponding resources.</li>
    </ul>
    <p>
        This approach is implemented by:
    </p>
    <ol>
        <li>Generating a large set of resources (1000) and events.</li>
        <li>Using the SfPager component to create a paginated interface.</li>
        <li>Updating the CurrentResources list based on the selected page.</li>
        <li>Binding the CurrentResources to the Scheduler's resource data source.</li>
    </ol>
    <p>
        This method effectively manages large datasets, improving application performance and user experience when dealing with numerous resources.
    </p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <SfSchedule TValue="EventData" @ref="ScheduleObj" Width="100%" Height="550px" @bind-SelectedDate="@_currentDate" EnableAutoRowHeight="true">
            <ScheduleTemplates>
                <ResourceHeaderTemplate>
                    <div class='template-wrap'>
                        <div class="employee-name"><b>@(((context as TemplateContext).ResourceData as ResourceData).Name)</b></div>
                        <div class="employee-designation">@(((context as TemplateContext).ResourceData as ResourceData).Designation)</div>
                    </div>
                </ResourceHeaderTemplate>
            </ScheduleTemplates>
            <ScheduleGroup EnableCompactView="false" Resources="@_groupData"></ScheduleGroup>
            <ScheduleResources>
                <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@CurrentResources" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
            </ScheduleResources>
            <ScheduleEventSettings DataSource="@_appointmentData"></ScheduleEventSettings>
            <ScheduleViews>
                <ScheduleView Option="View.TimelineMonth"></ScheduleView>
            </ScheduleViews>
        </SfSchedule>

        <SfPager PageSize="10" TotalItemsCount="@ResourceDataSource.Count" ItemClick="OnPageChange" NumericItemsCount="5"></SfPager>
    </div>
</div>

@code {
    SfSchedule<EventData> ScheduleObj;
    public List<ResourceData> ResourceDataSource = new List<ResourceData>();
    public List<ResourceData> CurrentResources = new List<ResourceData>();
    private string[] _groupData = { "Resources" };
    private DateTime _currentDate { get; set; }
    private int currentPage = 1;
    public List<EventData> _appointmentData = new List<EventData>();
    private int CurrentYear;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CurrentYear = DateTime.Today.Year;
        _currentDate = new DateTime(CurrentYear, 1, 1);
        _appointmentData = GenerateEvents();
        ResourceDataSource = GenerateResourceData();
        UpdateCurrentPage(1);
    }

    public void OnPageChange(PagerItemClickEventArgs args)
    {
        UpdateCurrentPage(args.CurrentPage);
    }

    public void UpdateCurrentPage(int page)
    {
        currentPage = page;
        int startIndex = (page - 1) * 10;
        int endIndex = Math.Min(startIndex + 10, ResourceDataSource.Count);

        CurrentResources = ResourceDataSource.GetRange(startIndex, endIndex - startIndex);
        StateHasChanged();
    }

    public List<EventData> GenerateEvents()
    {
        DateTime date = new DateTime(CurrentYear, 1, 1);
        List<EventData> data = new List<EventData>(3600);
        var id = 1;
        for (var i = 0; i < 300; i++)
        {
            Random random = new Random();
            List<int> listNumbers = new List<int>();
            int[] randomCollection = new int[24];
            int number;
            int max = 30;
            for (int a = 0; a < 12; a++)
            {
                do
                {
                    number = random.Next(max);
                } while (listNumbers.Contains(number));
                listNumbers.Add(number);
                var startDate = date.AddDays(number);
                startDate = startDate.AddMilliseconds((((number % 10) * 10) * (1000 * 60)));
                var endDate = startDate.AddMilliseconds(((1440 + 30) * (1000 * 60)));
                data.Add(new EventData
                    {
                        Id = id,
                        Subject = "Event #" + id,
                        StartTime = startDate,
                        EndTime = endDate,
                        IsAllDay = (id % 10 == 0) ? false : true,
                        ResourceId = i + 1
                    });
                id++;
            }
        }
        return data;
    }

    public List<ResourceData> GenerateResourceData()
    {
        List<ResourceData> resources = new List<ResourceData>(1000);
        var colors = new string[]
        {
            "#ff8787", "#9775fa", "#748ffc", "#3bc9db", "#69db7c",
            "#fdd835", "#748ffc", "#9775fa", "#df5286", "#7fa900",
            "#fec200", "#5978ee", "#00bdae", "#ea80fc"
        };
        var names = new string[]
        {
            "John", "Kate", "Randy", "Nancy", "Robert",
            "Harry", "Blake", "Jimmy", "Ellen", "Vennasa",
            "Mike", "Shawn", "Mark", "Jeff"
        };
        var designation = new string[]
        {
            "Auditor", "Accountant", "Administrator", "Managing Director", "General Manager",
            "Maintainance Engineer", "Supervisor 1", "Sales Manager Level 1", "Sales Manager Level 2", "Sales Leader",
            "Customer Care", "Facility", "Customer Tracker", "Supervisor 2"
        };
        for (int a = 1; a <= 1000; a++)
        {
            int index = a % colors.Length;
            index = index == 0 ? (colors.Length / a) : index;
            resources.Add(new ResourceData
                {
                    Id = a,
                    Text = "Resource " + a,
                    Color = colors[index],
                    Name = names[index],
                    Designation = designation[index]
                });
        }
        return resources;
    }

    public class EventData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public bool? IsAllDay { get; set; }
        public int? RecurrenceID { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public int ResourceId { get; set; }
    }

    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
        public string Name { get; set; }
        public string Designation { get; set; }
    }
}

<style>
    @@media screen and (max-width: 480px) {
        .e-schedule .e-timeline-month-view .e-resource-left-td {
            width: 146px;
        }

        .e-schedule .e-timeline-month-view .e-resource-cells {
            padding-left: 6px;
        }
    }
</style>