@page "/scheduler/inline-editing"

@using Syncfusion.Blazor.Schedule
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This demo shows the experience of adding a new appointment or editing the existing appointment through inline mode. Click on the cells to add an appointment with the subject alone and click on the appointment to edit the subject of the appointment.   </p>
</SampleDescription>
<ActionDescription>
    <p>The features enable user to add or edit the appointment through inline mode. Click on the cells or the existing appointments to enable inline mode. You can press the ENTER key on the selected cell or appointment.</p>
    <p> The feature activates when you enable the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Schedule.SfSchedule-1.html#Syncfusion_Blazor_Schedule_SfSchedule_1_AllowInline">AllowInline</a> property. For adding an appointment, the appointment will be created based on the selected time and subject once you focused-out or press ENTER key. For editing an appointment, the appointment will be saved based on the modified subject. </p>
</ActionDescription>

<div class="control-section">
    <SfSchedule TValue="ScheduleData.ResourceData" Width="100%" Height="650px" AllowInline="true" @bind-SelectedDate="@CurrentDate" @bind-CurrentView="@CurrentView">
        <ScheduleEventSettings DataSource="@ScheduleDataSource"></ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView MaxEventsPerRow="2" Option="View.TimelineWeek"></ScheduleView>
            <ScheduleView MaxEventsPerRow="2" Option="View.TimelineMonth"></ScheduleView>
        </ScheduleViews>
        <ScheduleGroup Resources="@_resourceName"></ScheduleGroup>
        <ScheduleResources>
            <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@TaskData" Field="TaskId" Title="Category" Name="Categories" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
        </ScheduleResources>
    </SfSchedule>
</div>

@code{
    private DateTime CurrentDate { get; set; } = new DateTime(DateTime.Today.Year, 1, 10);
    private View CurrentView { get; set; }  = View.TimelineWeek;
    private string[] _resourceName = { "Categories" };

    private List<ResourceData> TaskData { get; set; } = new List<ResourceData>
    {
        new ResourceData { Text = "Nancy", Id = 1, Color = "#357cd2" },
        new ResourceData { Text = "Steven", Id = 2, Color = "#1aaa55" },
        new ResourceData { Text = "Robert", Id = 3, Color = "#8e24aa" },
        new ResourceData { Text = "Smith", Id = 4, Color = "#df5286" },
        new ResourceData { Text = "Michael", Id = 5, Color = "#fec200" }
    };
    private List<ScheduleData.ResourceData> ScheduleDataSource = new ScheduleData().GetResourceData();
    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
}
<style>
    .e-schedule .e-timeline-view .e-resource-left-td,
    .e-schedule .e-timeline-month-view .e-resource-left-td {
        width: 150px;
    }
</style>