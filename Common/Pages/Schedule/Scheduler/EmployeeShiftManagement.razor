@page "/scheduler/employee-shift-management"
@using System.Globalization
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using employeeshiftmanagement.DefaultData
@inject NavigationManager UriHelper
@inherits SampleBaseComponent

<SampleDescription>
    <p>This demo shows efficient employee shift management using the Scheduler, including shift scheduling, swapping, highlighting staff unavailability, and seamlessly assigning leave replacements using drag-and-drop.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, employees are categorized by roles (Doctors, nurses, and support staff) and designations, with two daily shifts: Morning (7 AM – 3 PM) and Evening (3 PM – 11 PM). Past shifts are disabled for clarity.</p>
    <p>
        <strong>Shift Swapping</strong>
    </p>
    <p>Shifts can be swapped between employees with the same designation using the swap request icon. The updated shift is highlighted with a swap icon, and details are available in the quick info popup.</p>
    <p>
        <strong>Leave Replacement</strong>
    </p>
    <p>To cover leave, drag and drop available staff from the same designation. The appointment updates with a replacement icon, and details appear in the quick info popup.</p>
    <p>
        <strong>Filtering</strong>
    </p>
    <p>
        Filter shifts by role or employee name in the agenda view to check staff availability and for shift management.
    </p>
</ActionDescription>

<div class="schedule-control-section shift-management-control-section">
    <div class="col-lg-12 control-section">
        <div class="content-wrapper shift-management-sample-wrapper">
            <SfSchedule TValue="EmployeeShiftManagementData" @ref="ScheduleRef" Height="550px" @bind-SelectedDate="@CurrentDate" cssClass="schedule-shift-management" AllowResizing="false" AllowDragAndDrop="false" @bind-CurrentView="@currentView">
                <ScheduleGroup EnableCompactView="false" Resources="@Resources"></ScheduleGroup>
                <ScheduleTimeScale Interval="480" SlotCount="3">
                    <MajorSlotTemplate Context="context">
                        @{
                            var time = context.Date.TimeOfDay;
                            var label = "";
                            if (time.Hours == 7) label = "Morning Shift";
                            else if (time.Hours == 15) label = "Evening Shift";
                        }
                        <div>@label</div>
                    </MajorSlotTemplate>
                </ScheduleTimeScale>
                <ScheduleResources>
                    <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@RoleData" Field="RoleId" Title="Roles" Name="Roles" TextField="RoleText" IdField="Id" AllowMultiple="false"></ScheduleResource>
                    <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@DesignationData" Field="DesignationId" Title="Designations" Name="Designation" TextField="DesignationText" IdField="Id" GroupIDField="DesignationGroupId" AllowMultiple="true"></ScheduleResource>
                </ScheduleResources>
                <ScheduleEvents TValue="EmployeeShiftManagementData" OnPopupOpen="HandlePopupOpen" OnPopupClose="OnPopupClose" OnCellClick="OnCellClick" OnCellDoubleClick="OnCellDoubleClick" OnEventDoubleClick="OnEventDoubleClick" Navigating="OnAgendaNavigating"></ScheduleEvents>
                <ScheduleEventSettings DataSource="@(ScheduleRef?.CurrentView == View.Agenda ? FilteredEmployees : employeeData)">
                    <ChildContent>
                        <ScheduleTemplates>
                            <EditorHeaderTemplate>
                                <div>Leave Replacement</div>
                            </EditorHeaderTemplate>
                        </ScheduleTemplates>
                        <ScheduleField>
                            <FieldSubject Title="Title"></FieldSubject>
                            <FieldStartTime Title="Start"></FieldStartTime>
                            <FieldEndTime Title="End"></FieldEndTime>
                            <FieldDescription Title="Description"></FieldDescription>
                        </ScheduleField>
                    </ChildContent>
                    <Template Context="context">
                        @{
                            var appointmentData = context as EmployeeShiftManagementData;
                            var shiftTime = ($"{appointmentData?.StartTime: h tt} - {appointmentData?.EndTime: h tt}");
                            string displayName;
                            // extracts the name from the subject
                            if (appointmentData?.Description?.Contains("Leave", StringComparison.OrdinalIgnoreCase) ?? false)
                            {
                                displayName = "Leave";
                            }
                            else if (appointmentData?.Subject != null &&
                            appointmentData.Subject.Contains("swapped the shift with") &&
                            appointmentData.Subject.Contains("'s shift scheduled"))
                            {
                                var subject = appointmentData.Subject;
                                var start = subject.IndexOf("swapped the shift with", StringComparison.OrdinalIgnoreCase);
                                var end = subject.IndexOf("'s shift scheduled", StringComparison.OrdinalIgnoreCase);
                                if (start >= 0 && end > start)
                                {
                                    var nameStart = start + "swapped the shift with".Length;
                                    var requestingEmployeeName = subject.Substring(nameStart, end - nameStart).Trim();
                                    displayName = requestingEmployeeName;
                                }
                                else
                                {
                                    displayName = appointmentData.Subject;
                                }
                            }
                            else if (appointmentData?.Subject != null &&
                            appointmentData.Subject.Contains("covers for", StringComparison.OrdinalIgnoreCase))
                            {
                                var subject = appointmentData.Subject;
                                var coversIndex = subject.IndexOf("covers for", StringComparison.OrdinalIgnoreCase);

                                if (coversIndex > 0)
                                {
                                    var name = subject.Substring(0, coversIndex).Trim();
                                    displayName = name;
                                }
                                else
                                {
                                    displayName = appointmentData.Subject;
                                }
                            }
                            else
                            {
                                displayName = appointmentData?.Subject;
                            }

                            var startTime = appointmentData?.StartTime;
                            var isMorningShift = startTime.Value.Hour == 7;
                            var isEveningShift = startTime.Value.Hour == 15;
                            var isLeaveEvent = appointmentData?.Description?.Contains("Leave", StringComparison.OrdinalIgnoreCase) ?? false;
                            var isLeaveSwap = appointmentData?.Subject?.Contains("covers for", StringComparison.OrdinalIgnoreCase) ?? false;
                            var isSwapEvent = appointmentData?.Description?.Contains("Swap", StringComparison.OrdinalIgnoreCase) ?? false;
                            var isPastDate = appointmentData?.IsReadonly ?? false;
                            var isSwappedShift = appointmentData?.IsSwapped ?? false;
                            var shiftClass = isSwappedShift ? "swapped-shift" : isLeaveEvent ? "leave-event" : isMorningShift ? "morning-shift" : "evening-shift";
                            if (isPastDate)
                            {
                                shiftClass += " past-day";
                            }
                        }
                        <div class="shift-cell @shiftClass">
                            <div class="shift-cell-container">
                                <div class="shift-cell-content">
                                    <img class="staff-image"
                                         src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/employeeshiftmanagement/{(displayName == "Leave" ? appointmentData?.Subject?.ToLower() : displayName?.ToLower())}.png")"
                                         alt="@displayName" />

                                    <div>
                                        <div class="employee-name">@displayName</div>
                                        <div class="employee-designation">@shiftTime</div>
                                    </div>
                                </div>

                                @if (isLeaveEvent)
                                {
                                    <div class="icon-margin">
                                        <SfTooltip Content="@($"{appointmentData?.Subject} is on leave. To cover this shift, drag a staff member with the same designation from the available list and drop them here.")" Position="Position.RightCenter">
                                            <span class="e-icons e-leave">&#xe800;</span>
                                        </SfTooltip>
                                    </div>
                                }
                                else if (isLeaveSwap)
                                {
                                    <div class="icon-margin">
                                        <SfTooltip Content="Leave covered by replacement" Position="Position.RightCenter">
                                            <span class="e-icons e-replaced sf-icon-user-replace">&#xe700;</span>
                                        </SfTooltip>
                                    </div>
                                }
                                else if (isSwapEvent)
                                {
                                    <div class="icon-margin">
                                        <SfTooltip Content="Click here to swap shift" Position="Position.RightCenter">
                                            <span class="e-icons e-swap sf-icon-replace-request"
                                                  @onclick="@(() => HandleSwapIconClick(appointmentData))"
                                                  @onclick:stopPropagation="true">
                                                &#xe702;
                                            </span>
                                        </SfTooltip>
                                    </div>
                                }
                                else if (isSwappedShift)
                                {
                                    <div class="icon-margin">
                                        <SfTooltip Content="This shift has been swapped" Position="Position.RightCenter">
                                            <span class="e-icons e-swapped sf-icon-replace-accepted">&#xe701;</span>
                                        </SfTooltip>
                                    </div>
                                }
                            </div>
                        </div>
                    </Template>
                </ScheduleEventSettings>
                <SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="showSwapDialog">
                    <DialogTemplates>
                        <Header>
                            Shift swap
                        </Header>
                        <Content>
                            <div>
                                <div>
                                    <label>Select an employee(Available for swapping)</label>
                                    <SfDropDownList TValue="string" TItem="EmployeeDropdownData" DataSource="@EmployeeNamesList" Placeholder="Select an Employee" @bind-Value="SelectedEmployeeId">
                                        <DropDownListEvents ValueChange="OnValueChange" TValue="string" TItem="EmployeeDropdownData"></DropDownListEvents>
                                        <DropDownListFieldSettings Text="Name" Value="EmployeeId" />
                                    </SfDropDownList>
                                </div>
                                <div>
                                    <label>Select Shift</label>
                                    <SfDropDownList TValue="string" TItem="ShiftDropdownData" DataSource="@ShiftsData" Placeholder="Select Shift" @bind-Value="SelectedShiftId" Enabled="OnDropdownChanged">
                                        <DropDownListFieldSettings Text="Name" Value="EventId" />
                                    </SfDropDownList>
                                </div>
                            </div>
                        </Content>
                        <FooterTemplate>
                            <SfButton OnClick="@(() => showSwapDialog = false)">Cancel</SfButton>
                            <SfButton OnClick="ConfirmShiftSwap" Disabled="@IsSwapButtonDisabled">Swap Shift</SfButton>
                        </FooterTemplate>
                    </DialogTemplates>
                </SfDialog>
                <ScheduleViews>
                    <ScheduleView Option="View.TimelineWeek" StartHour="07:00" EndHour="23:00" MaxEventsPerRow="2"></ScheduleView>
                    <ScheduleView Option="View.Agenda">
                        <EventTemplate>
                            @if (selectedCategory == "All" || GetCategory((context as EmployeeShiftManagementData).RoleId) == selectedCategory)
                            {
                                var data = context as EmployeeShiftManagementData;
                                if (data != null && (string.IsNullOrEmpty(selectedEmployeeId) || data.Subject == selectedEmployeeId))
                                {
                                    var initial = GetInitial(data.Subject);
                                    var employeeName = GetEmployeeName(data);
                                    var role = GetRole(data.RoleId);
                                    var designation = GetDesignation(data.DesignationId);
                                    var leaveTag = GetLeaveTag(data.Description);
                                    var startTime = $"{data?.StartTime: h tt}";
                                    var endTime = $"{data?.EndTime: h tt}";

                                    <div class="agenda-event">
                                        <div class="e-staff">
                                            <div class="staff-image">@initial</div>
                                            <div class="event-details">
                                                <div class="staff-info">
                                                    <span class="staff-name">@employeeName</span>
                                                    <span class="staff-role">@role</span>
                                                    <span class="staff-designation">(@designation)</span>
                                                    <span class="staff-availability">@leaveTag</span>
                                                </div>
                                                <div class="event-time">
                                                    Shift Time: @startTime - @endTime
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </EventTemplate>
                    </ScheduleView>
                </ScheduleViews>
                @if (ScheduleRef?.CurrentView == View.Agenda)
                {
                    <div class="toolbar">
                        <SfToolbar Height="50px" OverflowMode="OverflowMode.Scrollable">
                            <ToolbarItems>
                                <ToolbarItem>
                                    <Template>
                                        <SfChip>
                                            <ChipItems>
                                                <ChipItem Text="All" CssClass="@(selectedCategory == "All" ? "e-primary" : "")"></ChipItem>
                                                <ChipItem Text="Doctors" CssClass="@(selectedCategory == "Doctors" ? "e-primary" : "")"></ChipItem>
                                                <ChipItem Text="Nurses" CssClass="@(selectedCategory == "Nurses" ? "e-primary" : "")"></ChipItem>
                                                <ChipItem Text="Staffs" CssClass="@(selectedCategory == "Staffs" ? "e-primary" : "")"></ChipItem>
                                            </ChipItems>
                                            <ChipEvents OnClick="@OnChipClick"></ChipEvents>
                                        </SfChip>
                                    </Template>
                                </ToolbarItem>
                                <ToolbarItem Type="ItemType.Spacer"></ToolbarItem>
                                <ToolbarItem>
                                    <Template>
                                        <SfDropDownList TValue="string" Placeholder="Select Employee" TItem="EmployeeShiftManagementData" DataSource="@FilteredDropdown" ShowClearButton="true" Width="230px">
                                            <DropDownListFieldSettings Text="Subject" Value="Id"></DropDownListFieldSettings>
                                            <DropDownListEvents TItem="EmployeeShiftManagementData" TValue="string" ValueChange="OnDropdownChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </Template>
                                </ToolbarItem>
                            </ToolbarItems>
                        </SfToolbar>
                    </div>
                }
            </SfSchedule>
            <div class="treeview-container">
                <div class="title-text">
                    <span>Available List</span>
                </div>
                <div class="role-tabs">
                    <SfChip CssClass="e-outline">
                        <ChipEvents OnClick="@OnChipClicked"></ChipEvents>
                        <ChipItems>
                            <ChipItem Text="All" CssClass="@(currentChip == "All" ? "e-primary" : "")"></ChipItem>
                            <ChipItem Text="Doctors" CssClass="@(currentChip == "Doctors" ? "e-primary" : "")"></ChipItem>
                            <ChipItem Text="Nurses" CssClass="@(currentChip == "Nurses" ? "e-primary" : "")"></ChipItem>
                            <ChipItem Text="Staffs" CssClass="@(currentChip == "Staffs" ? "e-primary" : "")"></ChipItem>
                        </ChipItems>
                    </SfChip>
                    @if (!string.IsNullOrEmpty(clickname))
                    {
                        <SfTreeView TValue="TreeViewData" AllowDragAndDrop="true" CssClass="treeview-external-drag" DropArea=".shift-management-sample-wrapper">
                            <TreeViewEvents TValue="TreeViewData" OnNodeDragStart="OnTreeDragStart" OnNodeDragStop="OnTreeViewDragStop" />
                            <TreeViewFieldsSettings DataSource="@currentTreeData" Id="Id" Text="Name" />
                            <TreeViewTemplates TValue="TreeViewData">
                                <NodeTemplate>
                                    <div id="available-list-container">
                                        <img class="staff-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/employeeshiftmanagement/{(context as TreeViewData)?.Name?.ToLower()}.png")" alt="@((context as TreeViewData)?.Name)" />
                                        <div id="listdetails">
                                            <div id="available-list-name">@((context as TreeViewData).Name)</div>
                                            <div id="available-list-description">@((context as TreeViewData).Description)</div>
                                        </div>
                                    </div>
                                </NodeTemplate>
                            </TreeViewTemplates>
                        </SfTreeView>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<link href="@(SampleService.WebAssetsPath + "styles/schedule/employeeshiftmanagement.css")" rel="stylesheet" />
@code {
    DateTime CurrentDate = new DateTime(2025, 3, 5);
    private SfSchedule<EmployeeShiftManagementData> ScheduleRef;
    public string[] Resources { get; set; } = { "Roles", "Designation" };
    private bool isSwapIconClicked = false;
    private List<TreeViewData> currentTreeData;
    public List<EmployeeShiftManagementData> employeeData { get; set; }
    private List<EmployeeShiftManagementData> FilteredEmployees { get; set; }
    View currentView = View.TimelineWeek;

    //properties for swift swap
    private List<EmployeeDropdownData> EmployeeNamesList { get; set; } = new List<EmployeeDropdownData>();
    private List<ShiftDropdownData> ShiftsData { get; set; } = new List<ShiftDropdownData>();
    private RequestedShiftInfo RequestedShift { get; set; } = new RequestedShiftInfo();
    private string SelectedEmployeeId { get; set; }
    private string SelectedShiftId { get; set; }

    //properties for drag and drop
    private string draggedItemName;
    private bool isDraggedItemDropped = false;
    private string currentChip = "All";

    //properties for agenda toolbar and dropdown
    private string selectedEmployeeId = "";
    private string selectedName = "";
    private List<EmployeeShiftManagementData> FilteredDropdown = new List<EmployeeShiftManagementData>();

    //properties for dialog box
    private bool OnDropdownChanged = false;
    private bool IsSwapButtonDisabled => string.IsNullOrEmpty(SelectedShiftId) || string.IsNullOrEmpty(SelectedEmployeeId);
    private bool showSwapDialog = false;

    //properties for chip
    private string selectedCategory = "All";
    private string clickname = "All"; //for storing the chip name on clicked

    //fields for ResourceData
    public class ResourceData
    {
        public int Id { get; set; }
        public string RoleText { get; set; }
        public string DesignationText { get; set; }
        public int DesignationGroupId { get; set; }
    }

    public class TreeViewData
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Role { get; set; }
    }

    public class EmployeeDropdownData
    {
        public string Name { get; set; }
        public string EmployeeId { get; set; }
        public string Id { get; set; }
    }

    public class ShiftDropdownData
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string DesignationId { get; set; }
        public string EmployeeId { get; set; }
        public string EventId { get; set; }
    }

    public class RequestedShiftInfo
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    //DataSource for RoleData
    public List<ResourceData> RoleData { get; set; } = new List<ResourceData>
    {
        new ResourceData { RoleText = "Doctors", Id = 1 },
        new ResourceData { RoleText = "Nurses", Id = 2 },
        new ResourceData { RoleText = "Support Staff", Id = 3 }
    };

    //DataSource for DesignationData
    public List<ResourceData> DesignationData { get; set; } = new List<ResourceData>
    {
        new ResourceData { DesignationText = "Attending Physician", Id = 1, DesignationGroupId = 1 },
        new ResourceData { DesignationText = "Hospitalist", Id = 2, DesignationGroupId = 1 },
        new ResourceData { DesignationText = "General Pediatrician", Id = 3, DesignationGroupId = 1 },
        new ResourceData { DesignationText = "Resident Doctor", Id = 4, DesignationGroupId = 1 },
        new ResourceData { DesignationText = "Senior Nurse", Id = 5, DesignationGroupId = 2 },
        new ResourceData { DesignationText = "Nurse Practitioner", Id = 6, DesignationGroupId = 2 },
        new ResourceData { DesignationText = "Medical Assistant", Id = 7, DesignationGroupId = 3 },
        new ResourceData { DesignationText = "Receptionist", Id = 8, DesignationGroupId = 3 }
    };

    //DataSource for DoctorData
    private List<TreeViewData> doctorsData = new List<TreeViewData>
    {
        new TreeViewData { Id = 1, Name = "Mark", Description = "Attending Physician", Role = "Doctors" },
        new TreeViewData { Id = 2, Name = "Brian", Description = "Hospitalist", Role = "Doctors" },
        new TreeViewData { Id = 3, Name = "Kevin", Description = "General Pediatrician", Role = "Doctors" },
        new TreeViewData { Id = 4, Name = "Salman", Description = "Resident Doctor", Role = "Doctors" }
    };

    //DataSource for NurseData
    private List<TreeViewData> nursesData = new List<TreeViewData>
    {
        new TreeViewData { Id = 5, Name = "Olivia", Description = "Senior Nurse", Role = "Nurses" },
        new TreeViewData { Id = 6, Name = "Zoe", Description = "Nurse Practitioner", Role = "Nurses" }
    };

    //DataSource for StaffData
    private List<TreeViewData> staffsData = new List<TreeViewData>
    {
        new TreeViewData { Id = 7, Name = "Ricky", Description = "Medical Assistant", Role = "Support Staffs" },
        new TreeViewData { Id = 8, Name = "Jake", Description = "Receptionist", Role = "Support Staffs" }
    };

    //DataSource for allData
    private List<TreeViewData> allData = new List<TreeViewData>
    {
        new TreeViewData { Id = 1, Name = "Mark", Description = "Attending Physician", Role = "Doctors" },
        new TreeViewData { Id = 2, Name = "Brian", Description = "Hospitalist", Role = "Doctors" },
        new TreeViewData { Id = 3, Name = "Kevin", Description = "General Pediatrician", Role = "Doctors" },
        new TreeViewData { Id = 4, Name = "Salman", Description = "Resident Doctor", Role = "Doctors" },
        new TreeViewData { Id = 5, Name = "Olivia", Description = "Senior Nurse", Role = "Nurses" },
        new TreeViewData { Id = 6, Name = "Zoe", Description = "Nurse Practitioner", Role = "Nurses" },
        new TreeViewData { Id = 7, Name = "Ricky", Description = "Medical Assistant", Role = "Support Staffs" },
        new TreeViewData { Id = 8, Name = "Jake", Description = "Receptionist", Role = "Support Staffs" }
    };

    protected override void OnInitialized()
    {
        currentTreeData = allData;
        employeeData = EmployeeShiftManagementData.GetShiftData();
        FilteredEmployees = new List<EmployeeShiftManagementData>(employeeData);
    }

    //preventing the cell click event
    public async Task OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }

    //preventing the cell double click event
    public void OnCellDoubleClick(CellClickEventArgs args)
    {
        args.Cancel = true;   //To prevent the opening of editor window on cells alone.
    }

    //preventing the event double click event
    public async Task OnEventDoubleClick(EventClickArgs<EmployeeShiftManagementData> args)
    {
        args.Cancel = true;
    }

    // Get the first character of the subject and convert it to uppercase
    public string GetInitial(string subject)
    {
        return !string.IsNullOrWhiteSpace(subject) ? subject.Substring(0, 1).ToUpper() : "?";
    }

    // Get the employee name from the subject
    public string GetEmployeeName(EmployeeShiftManagementData data)
    {
        return data.Subject ?? data.Subject ?? "";
    }

    // Get the role name based on the role ID
    public string GetRole(int? roleId)
    {
        var role = RoleData.FirstOrDefault(r => r.Id == roleId);
        return role?.RoleText ?? "";
    }

    // Get the designation name based on the designation ID
    public string GetDesignation(int? designationId)
    {
        var designation = DesignationData.FirstOrDefault(d => d.Id == designationId);
        return designation?.DesignationText ?? "";
    }

    // Get the category based on the role ID
    public string GetLeaveTag(string description)
    {
        return !string.IsNullOrWhiteSpace(description) && description.ToLower().Contains("leave") ? " - On Leave" : "";
    }

    private void OnChipClicked(ChipEventArgs args)
    {
        currentChip = args.Text;
        UpdateCurrentTreeData();
    }

    // Method for handling the popup open event
    private void HandlePopupOpen(PopupOpenEventArgs<EmployeeShiftManagementData> args)
    {
        if (args.Data?.IsReadonly == true)
        {
            args.Cancel = true;
            return;
        }
        //preventing the quickinfo popup on clicking the icon
        if (isSwapIconClicked && (args.Type == PopupType.QuickInfo || args.Type == PopupType.ViewEventInfo))
        {
            RequestedShift = new RequestedShiftInfo
                {
                    Id = args.Data.Id.ToString(),
                    Name = args.Data.Subject
                };
            RequestShiftSwap(args.Data);
            args.Cancel = true;
            isSwapIconClicked = false;
            showSwapDialog = true;
            return;
        }
    }

    // Method to reset the swap dialog properties
    private void ResetSwapDialog()
    {
        SelectedEmployeeId = null;
        SelectedShiftId = null;
        RequestedShift = null;
    }

    // Method to open the swap dialog
    private void OpenSwapDialog()
    {
        ResetSwapDialog();
        showSwapDialog = true;
    }

    // Method to handling the swap event
    private async Task ConfirmShiftSwap()
    {
        if (string.IsNullOrEmpty(SelectedEmployeeId) || string.IsNullOrEmpty(SelectedShiftId))
            return;
        var allEvents = await ScheduleRef.GetEventsAsync();
        var events = allEvents.Cast<EmployeeShiftManagementData>().ToList();
        var selectedSwapEvent = events.FirstOrDefault(e => e.Id.ToString() == SelectedShiftId);
        var originalEvent = events.FirstOrDefault(e => e.Id.ToString() == RequestedShift.Id);

        if (selectedSwapEvent == null || originalEvent == null)
            return;

        // Backup names (for reassigning after swap)
        string requestingEmployeeName = originalEvent.Subject;
        string selectedEmployeeName = selectedSwapEvent.Subject;
        // Swap EmployeeId
        var tempEmpId = selectedSwapEvent.EmployeeId;
        selectedSwapEvent.EmployeeId = originalEvent.EmployeeId;
        originalEvent.EmployeeId = tempEmpId;
        // Keep the Subject as employee names (simple)
        originalEvent.Subject = GetDetailedSubject(requesterName: requestingEmployeeName, targetName: selectedEmployeeName, startTimeStr: selectedSwapEvent.StartTime.ToString(), endTimeStr: selectedSwapEvent.EndTime.ToString()
        );
        selectedSwapEvent.Subject = GetDetailedSubject(requesterName: selectedEmployeeName, targetName: requestingEmployeeName, startTimeStr: originalEvent.StartTime.ToString(), endTimeStr: originalEvent.EndTime.ToString()
        );
        originalEvent.SwapWithId = selectedSwapEvent.Id.ToString();
        selectedSwapEvent.SwapWithId = originalEvent.Id.ToString();
        if (originalEvent.StartTime != null && selectedSwapEvent.StartTime != null)
        {
            originalEvent.Description = CleanSwapDescription(originalEvent.Description, originalEvent.StartTime);
            selectedSwapEvent.Description = CleanSwapDescription(selectedSwapEvent.Description, selectedSwapEvent.StartTime);
        }
        originalEvent.IsSwapped = true;
        selectedSwapEvent.IsSwapped = true;
        // Save both events
        await ScheduleRef.SaveEventAsync(selectedSwapEvent);
        await ScheduleRef.SaveEventAsync(originalEvent);
        showSwapDialog = false;
    }

    // Method for updating the swap description
    private string CleanSwapDescription(string? description, DateTime startTime)
    {
        string baseDescription = description?.Replace(" - Swap-Request", "")?.Trim() ?? "";
        // Add shift label
        string shiftType = startTime.Hour == 7 ? "Morning" : "Evening";
        return $"Available ({shiftType} shift)";
    }

    private void HandleSwapIconClick(EmployeeShiftManagementData data)
    {
        isSwapIconClicked = true;
        OpenSwapDialog();
        OnDropdownChanged = false;
        ScheduleRef?.CloseQuickInfoPopupAsync();
    }

    //Method for setting the detailed subject on the Quickinfo after the swap
    private string GetDetailedSubject(string requesterName, string targetName, string startTimeStr, string endTimeStr)
    {
        var start = DateTime.Parse(startTimeStr);
        var end = DateTime.Parse(endTimeStr);
        string datePart = $"{start:MMM d}";
        string startPart = $"{start:h tt}";
        string endPart = $"{end:h tt}";
        return $"{requesterName} swapped the shift with {targetName}'s shift scheduled from {datePart}, {startPart} to {endPart}";
    }

    //Method for filtering the Dropdown values based on the selected event
    private void RequestShiftSwap(EmployeeShiftManagementData selectedEvent)
    {
        var allEvents = ScheduleRef?.GetEventsAsync().Result?.Cast<EmployeeShiftManagementData>().ToList() ?? new List<EmployeeShiftManagementData>();
        var matchingSwapEvents = allEvents.Where(e =>
          e.Description != null &&
          e.Description.ToLower().Contains("swap-request") &&
          e.RoleId == selectedEvent.RoleId &&
          e.DesignationId == selectedEvent.DesignationId &&
          e.Subject != selectedEvent.Subject
        ).ToList();
        EmployeeNamesList = matchingSwapEvents
          .GroupBy(e => e.Subject)
          .Select(g => new EmployeeDropdownData
              {
                  Name = g.Key,
                  EmployeeId = g.First().EmployeeId.ToString(),
                  Id = g.First().DesignationId.ToString()
              }).ToList();
        ShiftsData = matchingSwapEvents
          .Select((item, index) => new ShiftDropdownData
              {
                  Id = index + 1,
                  Name = FormatDateRange(item.StartTime, item.EndTime),
                  DesignationId = item.DesignationId.ToString(),
                  EmployeeId = item.EmployeeId.ToString(),
                  EventId = item.Id.ToString()
              }).ToList();
        RequestedShift = new RequestedShiftInfo
            {
                Id = selectedEvent.Id.ToString(),
                Name = selectedEvent.Subject
            };
    }

    // Method for formatting the start and endtime for Dropdown Value
    private string FormatDateRange(DateTime start, DateTime? end = null)
    {
        string formattedStart = $"{start:MMM d ddd h:mm tt}";
        if (end.HasValue)
        {
            string formattedEnd = $"{end.Value:h:mm tt}";
            return $"{formattedStart} - {formattedEnd}";
        }
        return formattedStart;
    }

    // Method for enabling the Dropdown
    private void OnValueChange()
    {
        OnDropdownChanged = true;
    }

    // Method for handling the DragStart event
    private void OnTreeDragStart(DragAndDropEventArgs args)
    {
        var draggedNode = args.DraggedNodeData;
        if (draggedNode != null)
        {
            draggedItemName = draggedNode.Text?.ToString();
        }
    }

    // Method for handling the Drop event
    public async void OnTreeViewDragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        EmployeeShiftManagementData appointmentData = await ScheduleRef.GetTargetEventAsync(Convert.ToInt32(args.Left), Convert.ToInt32(args.Top));
        var draggedNode = args.DraggedNodeData;
        var treeData = allData.FirstOrDefault(data => data.Name == draggedNode.Text);
        if (appointmentData != null && treeData != null && appointmentData.DesignationId == GetDesignationId(treeData.Description) && appointmentData.Description.Contains("Leave"))
        {
            var copiedEvents = new EmployeeShiftManagementData
                {
                    Id = appointmentData.Id,
                    RoleId = appointmentData.RoleId,
                    DesignationId = appointmentData.DesignationId,
                    Subject = $"{treeData.Name} covers for {appointmentData.Subject}",
                    StartTime = appointmentData.StartTime,
                    EndTime = appointmentData.EndTime,
                    Description = appointmentData.Description,
                };
            isDraggedItemDropped = true;
            await ScheduleRef.OpenEditorAsync(copiedEvents, CurrentAction.Save);
        }
    }

    // Method for handling the PopupClose event
    private void OnPopupClose(PopupCloseEventArgs<EmployeeShiftManagementData> args)
    {
        if (args.Type == PopupType.Editor && args.Data != null)
        {
            if (args.CurrentAction == CurrentAction.Save && isDraggedItemDropped && !string.IsNullOrEmpty(draggedItemName))
            {
                var treeData = allData.FirstOrDefault(data => data.Name == draggedItemName);
                if (treeData != null)
                {
                    args.Data.Description = args.Data.Description.Replace("Leave", "Available");
                    RemoveFromCurrentList(treeData);
                }
            }
            isDraggedItemDropped = false;
            draggedItemName = string.Empty;
            ScheduleRef.RefreshEventsAsync();
        }
    }

    // Method to get the role ID based on the role name
    private int GetRoleId(string role)
    {
        return role switch
        {
            "Doctors" => 1,
            "Nurses" => 2,
            "Support Staffs" => 3,
            _ => 0
        };
    }

    // Method to get the designation ID based on the description
    private int GetDesignationId(string description)
    {
        return description switch
        {
            "Attending Physician" => 1,
            "Hospitalist" => 2,
            "General Pediatrician" => 3,
            "Resident Doctor" => 4,
            "Senior Nurse" => 5,
            "Nurse Practitioner" => 6,
            "Medical Assistant" => 7,
            "Receptionist" => 8,
            _ => 0
        };
    }

    // Method to remove the dragged item from the current tree list
    private void RemoveFromCurrentList(TreeViewData treeData)
    {
        doctorsData = doctorsData.Where(item => item.Name != draggedItemName).ToList();
        nursesData = nursesData.Where(item => item.Name != draggedItemName).ToList();
        staffsData = staffsData.Where(item => item.Name != draggedItemName).ToList();
        allData.Remove(treeData);
        UpdateCurrentTreeData();
    }

    // Method to update the current tree data based on the selected chip
    private void UpdateCurrentTreeData()
    {
        currentTreeData = currentChip switch
        {
            "Doctors" => doctorsData,
            "Nurses" => nursesData,
            "Staffs" => staffsData,
            _ => allData
        };
    }

    // Method to handle chip click events in the agenda view
    private void OnChipClick(ChipEventArgs args)
    {
        selectedCategory = args.Text;
        selectedName = "";
        FilterEmployees(selectedCategory);
    }

    // Method to filter employees based on the selected category and name
    private void FilterEmployees(string category)
    {
        var filteredData = employeeData.AsEnumerable();
        if (category == "Doctors" || category == "Nurses" || category == "Staffs")
        {
            filteredData = filteredData.Where(e => GetCategory(e.RoleId) == category);
            FilteredEmployees = filteredData.ToList();
        }
        if (category == "All")
        {
            FilteredEmployees = new List<EmployeeShiftManagementData>(employeeData);
        }
        if (!string.IsNullOrEmpty(selectedName))
        {
            filteredData = filteredData.Where(e => ExtractDisplayName(e.Subject) == selectedName);
        }

        FilteredEmployees = filteredData.ToList();

        if (selectedName == "")
        {
            FilteredDropdown = filteredData
            .GroupBy(e => ExtractDisplayName(e.Subject))
            .Select(g => g.First())
            .ToList();
        }
    }

    // Method to extract the display name from the subject
    private string ExtractDisplayName(string? subject)
    {
        if (subject.Contains("swapped the shift with") && subject.Contains("'s shift scheduled"))
        {
            var start = subject.IndexOf("swapped the shift with", StringComparison.OrdinalIgnoreCase);
            var end = subject.IndexOf("'s shift scheduled", StringComparison.OrdinalIgnoreCase);

            if (start >= 0 && end > start)
            {
                var nameStart = start + "swapped the shift with".Length;
                var requestingEmployeeName = subject.Substring(nameStart, end - nameStart).Trim();
                return requestingEmployeeName;
            }
        }
        if (subject.Contains("covers for", StringComparison.OrdinalIgnoreCase))
        {
            var parts = subject.Split(new[] { "covers for" }, StringSplitOptions.None);
            if (parts.Length > 1)
            {
                return parts[1].Trim();
            }
        }
        return subject;
    }

    // Method to handle navigation in the agenda view
    public void OnAgendaNavigating(NavigatingEventArgs args)
    {
        if (args.CurrentView == View.Agenda)
        {
            FilteredEmployees = employeeData;
            selectedCategory = "All";
            selectedName = "";
            FilterEmployees(selectedCategory);
        }
    }

    // Method to get the category based on the role ID
    private string GetCategory(int RoleId) => RoleId switch
    {
        1 => "Doctors",
        2 => "Nurses",
        3 => "Staffs"
    };

    // Method to handle dropdown value change events
    private void OnDropdownChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, EmployeeShiftManagementData> args)
    {
        if (string.IsNullOrEmpty(args?.Value))
        {
            selectedName = string.Empty;
            FilterEmployees(selectedCategory);
        }
        if (args?.ItemData.Subject != null)
        {
            selectedName = args.ItemData.Subject;
            FilterEmployees(selectedName);
        }
    }
}
<style>
    .shift-management-sample-wrapper .schedule-shift-management .e-table-wrap.e-timeline-view .e-content-wrap .e-appointment {
        background-color: transparent !important;
        height: 45px !important;
        border-radius: 8px !important;
        box-shadow: none;
    }

    .shift-management-sample-wrapper {
        display: flex;
        height: 550px;
        width: 100%;
    }

    .schedule-shift-management {
        border: 1px solid #C4C7C5;
        border-radius: 12px;
        margin-right: 12px;
    }

    /* setting the cell height for the parent node*/
    .e-table-wrap.e-timeline-view .e-resource-cells.e-parent-node,
    .e-work-cells.e-resource-group-cells,
    .e-table-wrap.e-timeline-view .e-resource-cells.e-child-node,
    .e-work-cells:not(.e-resource-group-cells) {
        height: 60px !important;
    }

    /* removing thead edit and delete button from the quickinfo popup */
    .schedule-shift-management .e-quick-popup-wrapper .e-popup-footer,
    .e-schedule-dialog.shift-management-editor-popup .e-footer-content .e-event-delete.e-btn,
    .treeview-external-drag.e-treeview .e-icon-expandable,
    .treeview-external-drag .e-sibling,
    .e-schedule-dialog .e-footer-content .e-event-delete.e-btn {
        display: none;
    }

    /* Style for the shift cell */
    .shift-cell {
        padding-right: 2px;
        border-radius: 5px;
        width: 100%;
        height: 100%;
    }

    /* Staff image style */
    .staff-image {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 8px;
        background-color: white;
    }

    /* Employee name styling */
    .employee-name {
        color: #333;
        font-size: 13px;
        line-height: 18px;
        letter-spacing: 0.1px;
    }

    /* Employee designation styling */
    .employee-designation {
        font-size: 0.85em;
        color: #666;
        font-size: 11px;
        line-height: 14px;
        letter-spacing: 0.1px;
    }

    /* Style form icons*/
    .e-swap.e-icons,
    .e-replaced.e-icons {
        color: #FFFFFF;
        font-size: 18px;
    }

    .e-swapped.e-icons {
        color: black;
        font-size: 18px;
    }

    .e-leave.e-icons {
        color: #B3261E;
        font-size: 18px;
    }

    /* setting the quickinfo subject header*/
    .schedule-shift-management .e-quick-popup-wrapper .e-popup-header .e-subject-wrap .e-subject {
        max-height: 100% !important;
    }

    /* Style for the disabled appointments and content */
    .past-day {
        background-color: #E0E0E0 !important;
    }

    .past-day .employee-name,
    .past-day .employee-designation {
        color: #333 !important;
    }

    .past-day .staff-image {
        opacity: 0.6;
    }

    /* Style for morning shift appointment */
    .morning-shift {
        background-color: #0875B8;
    }

    .morning-shift .employee-name,
    .morning-shift .employee-designation,
    .evening-shift .employee-name,
    .evening-shift .employee-designation {
        color: white;
    }

    /* Style for evening shift Appointment */
    .evening-shift {
        background-color: #633DD0;
    }

    /* Style for leave event */
    .leave-event {
        border: 1px dotted #B3261E;
        background-color: #F9DEDC;
    }

    .leave-event .employee-name,
    .leave-event .employee-designation,
    .swapped-shift .employee-name,
    .swapped-shift .employee-designation {
        color: black;
    }

    /* Style for swapped event */
    .swapped-shift {
        background-color: #FFA500;
    }

    /*styling for icon*/
    .icon-margin {
        margin-top: 5px;
    }

    .shift-cell,
    .shift-cell-content,
    .shift-cell-container,
    #available-list-container {
        display: flex;
        align-items: center;
    }

    .shift-cell-container {
        justify-content: space-between;
        width: 100%;
        padding: 4px;
    }

    /* style for agenda template*/
    .e-table-wrap.e-agenda-view {
        .e-agenda-item {
            padding: 12px 0;
            .e-appointment {
                .agenda-event {
                    padding: 8px 0px;
                    .e-staff {
                        display: flex;
                        align-items: center;
                        .staff-image {
                            align-items: center;
                            background-color: #6750A4;
                            border-radius: 50%;
                            color: #FFFFFF;
                            display: flex;
                            font-size: 16px;
                            font-weight: 500;
                            height: 40px;
                            justify-content: center;
                            line-height: 20px;
                            letter-spacing: 0.1px;
                            min-width: 40px;
                            width: 40px;
                        }
                        .staff-name {
                            font-weight: 500;
                            font-size: 16px;
                            line-height: 24px;
                            letter-spacing: 0px;
                        }
                        .staff-role,
                        .staff-designation,
                        .staff-availability,
                        .event-time {
                            font-weight: 400;
                            font-size: 14px;
                            line-height: 20px;
                            letter-spacing: 0.24px;
                        }
                        .staff-availability {
                            color: #C70404;
                        }
                    }
                }
            }
        }
        .e-resource-column {
            display: none;
        }
    }

    /* styling the dialog box container */
    .e-dlg-content {
        .e-subject-container {
            width: 100% !important;
        }
        .e-start-end-row,
        .e-resource-row {
            pointer-events: none;
            opacity: 0.5;
            cursor: not-allowed;
        }
        .e-location-container,
        .e-all-day-time-zone-row,
        .e-time-zone-row,
        .e-repeat-parent-row,
        .e-recurrenceeditor {
            display: none !important;
        }
    }
    .e-footer-content {
        height: 60px;
        .e-btn {
            font-size: 12px;
            font-weight: 500;
            letter-spacing: 0.5px;
            line-height: 16px;
        }
    }
    .e-dlg-content label {
        font-size: 10px;
        font-weight: 400;
        letter-spacing: 0.1px;
    }

    /*styling for toolbar div*/
    .toolbar {
        height: 50px;
    }

    /*updating the agenda content height after adding the toolbar to thead agenda*/
    .e-schedule .e-table-wrap.e-agenda-view .e-content-wrap {
        height: 450px !important;
    }

    /* treeview */
    /* ensures the equal space between the Available List chips*/
    .e-chip-list {
        justify-content: space-between;
    }

    .e-chip {
        height: 32px !important;
        border-radius: 16px !important;
        min-width: 41px !important;
    }

    .e-chip-text {
        font-size: 14px;
        font-weight: 500;
        letter-spacing: 0.1px;
        line-height: 18px;
        text-align: center;
    }

    #available-list-container {
        display: flex;
        align-items: center;
    }

    .treeview-external-drag #available-list-container,
    .treeview-external-drag #listdetails {
        height: 100%;
        padding: 0;
    }

    .treeview-external-drag #listdetails {
        width: 100%;
        float: left;
    }

    .treeview-external-drag #available-list-name {
        width: 100%;
        font-weight: bold;
        font-size: 14px;
        padding: 6px 0 0 10px;
    }

    .treeview-external-drag #available-list-description {
        font-size: 12px;
        padding-left: 10px;
        padding-top: 3px;
    }

    .treeview-external-drag #available-list-name,
    .treeview-external-drag #available-list-description {
        overflow: hidden;
        height: 50%;
        text-overflow: ellipsis;
    }

    .treeview-external-drag .e-list-item.e-active>.e-fullrow,
    .treeview-external-drag .e-list-item.e-active.e-hover>.e-fullrow,
    .e-bigger .treeview-external-drag .e-list-item.e-active>.e-fullrow,
    .e-bigger .treeview-external-drag .e-list-item.e-active.e-hover>.e-fullrow {
        background-color: transparent !important;
        border-color: transparent !important;
        box-shadow: none !important;
    }

    .treeview-external-drag .e-list-text,
    .e-bigger .treeview-external-drag .e-list-text {
        height: 48px;
        line-height: 15px !important;
        padding: 0 20px;
        width: 100%;
    }

    .treeview-external-drag .e-text-content,
    .e-bigger .treeview-external-drag .e-text-content {
        padding: 0;
        background-color: inherit;
    }

    .title-text {
        position: relative;
        text-align: center;
        padding-top: 10px;
        font-size: 16px;
        font-weight: 500;
        letter-spacing: 0.1px;
        line-height: 20px;
        font-family: 'Roboto';
    }

    .treeview-container {
        border: 1px solid #C4C7C5;
        border-radius: 12px;
        .role-tabs .e-chip-list {
            flex-wrap: nowrap;
            padding: 10px 4px 14px 4px;
            height: 60px;
        }
        .treeview-external-drag.e-control {
            height: 440px;
            border: none;
            .e-list-parent {
                height: 100%;
                .e-list-item {
                    height: 50px;
                    padding: 0;
                    .e-fullrow {
                        border-radius: 0%;
                        height: 50px;
                        margin: 0;
                        width: 100%;
                    }
                    .e-text-content {
                        padding: 0 !important;
                    }
                }
            }
        }
    }

    .material3 .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left).e-disabled {
        border-bottom-color: black !important;
    }

    .material3-dark .e-input-group.e-control-wrapper:not(.e-success):not(.e-warning):not(.e-error):not(.e-float-icon-left).e-disabled {
        border-bottom-color: white !important;
    }

    .fluent-dark .e-dialog .e-footer-content,
    .fluent .e-dialog .e-footer-content,
    .fluent2-highcontrast .e-dialog .e-footer-content,
    .fluent2-dark .e-dialog .e-footer-content,
    .fluent2 .e-dialog .e-footer-content {
        padding: 15px !important;
    }

    @@media (max-width: 550px) {
        .e-schedule .e-table-wrap.e-agenda-view .e-content-wrap {
            height: 390px !important;
        }
        .shift-management-control-section {
            .shift-management-sample-wrapper {
                display: block;
                height: auto;
                overflow: hidden;
                .schedule-shift-management {
                    margin-right: 0;
                    margin-bottom: 10px;
                    width: 100%;
                    height: 450px;
                }
                .treeview-container {
                    width: 100%;
                    height: auto;
                    position: relative;
                    overflow: visible;
                    .shift-management-treeview.e-control {
                        height: 300px;
                    }
                }
            }
        }

        /* Handle drag items specifically */
        .e-drag-item.shift-management-treeview {
            position: fixed !important;
            max-width: 80%;
            z-index: 9999;
        }

        /* Ensure the drag area is properly contained */
        .shift-management-sample-wrapper[dragArea] {
            position: relative;
            overflow: hidden;
        }

        /* Fix for TreeView nodes */
        .shift-management-treeview .e-list-item {
            width: 100% !important;
            max-width: 100%;
        }

        /* Ensure employee images scale properly */
        .employee-image {
            max-width: 32px;
            max-height: 32px;
        }
    }
</style>