@page "/scheduler/tech-event-organizer"
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using System.Globalization
@using BlazorDemos.Pages.Schedule
@inherits SampleBaseComponent

<SampleDescription>
    <p>This demo showcases a technical event management system that uses the Scheduler component, where each technical event is split into multiple sessions with specific room allocations. The system features drag-and-drop capabilities for scheduling sessions, conflict prevention, and filtering by room.</p>
</SampleDescription>
<ActionDescription>
    <p>
        This example demonstrates how to implement a technical event management system using the Scheduler component. The application includes the following key features:
    </p>
    <ul>
        <li>Each technical event is organized into multiple separate sessions, with specific room allocations on the same day.</li>
        <li>An external list of unscheduled sessions that can be scheduled via drag-and-drop functionality</li>
        <li>Prevention of scheduling conflicts and room capacity overflows while dragging and dropping externally maintained event sessions.</li>
        <li>Room-based filtering through toolbar dropdown selections.</li>
        <li>Ability to filter and view unscheduled event sessions by technical event.</li>
        <li>Detailed agenda view that displays event information including speakers, audience size, and session descriptions.</li>
    </ul>
</ActionDescription>
<div class="control-section event-management-wrapper">
    <div>
        <SfToolbar Height="50px" CssClass="custom-toolbar">
            <ToolbarItems>
                <ToolbarItem Align="ItemAlign.Left" PrefixIcon="e-chevron-left" TooltipText="Previous" OnClick="NavigatePrevious" CssClass="e-previous"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Left" PrefixIcon="e-chevron-right" TooltipText="Next" OnClick="NavigateNext" CssClass="e-next"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Left" SuffixIcon="e-icons e-chevron-down" Text="@GetFormattedDate()" OnClick="@DateRangeClick"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right" Type="ItemType.Spacer"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right" Text="Day" CssClass="e-day" OnClick="OnDayView"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right" Text="Week" CssClass="e-week" OnClick="OnWeekView"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right" Text="Agenda" CssClass="e-agenda" OnClick="OnAgendaView"></ToolbarItem>
                <ToolbarItem Type="ItemType.Separator" Align="ItemAlign.Right"></ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right">
                    <Template>
                        <SfDropDownList TValue="string" TItem="DropdownOption" DataSource="@RoomOptions" Placeholder="Select Room" @bind-Value="SelectedRoom" Width="106px;">
                            <DropDownListTemplates TItem="DropdownOption">
                                <ValueTemplate>
                                    @{
                                        var data = (context as DropdownOption);
                                        <span>@(data?.Value == "All" ? "Room: All" : data?.Text)</span>
                                    }
                                </ValueTemplate>
                            </DropDownListTemplates>
                            <DropDownListEvents TValue="string" TItem="DropdownOption" ValueChange="OnRoomSelectionChanged"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Text" Value="Value" />
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Separator" Align="ItemAlign.Right"></ToolbarItem>
                <ToolbarItem PrefixIcon="@(ShowUnplanned ? "e-icons e-show-unplanned-events" : "e-icons e-hide-unplanned-events")" Align="ItemAlign.Right" Overflow="OverflowOption.Show" Id="overview_toolbar_settings_unplanned_events" OnClick="ToggleUnplannedEventsElement">
                </ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right">
                    <Template>
                        <SfDropDownButton Items="DropDownItems" IconCss="custom-icon e-tbar-btn-text" CssClass="e-caret-hide e-tbar-btn e-tbtn-txt dropdownButton">
                            <DropDownButtonEvents ItemSelected="@ItemSelected"></DropDownButtonEvents>
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
        <SfSchedule TValue="TechEventOrganizerData" @ref="ScheduleRef" Width="100%" Height="500px" @bind-SelectedDate="@CurrentDate" ShowHeaderBar="false" @bind-CurrentView="@CurrentView" StartHour="8:00" EndHour="18:00" CssClass="schedule-event-management" AllowDragAndDrop="false" AllowResizing="false">
            <ChildContent>
                @if (ShowHeader)
                {
                    <div class="e-header-popup">
                        @if (ShowCalendar)
                        {
                            <SfCalendar TValue="DateTime" @bind-Value="@CurrentDate" CssClass="custom-calendar">
                                <CalendarEvents TValue="DateTime" ValueChange="@DateRangeClick"></CalendarEvents>
                            </SfCalendar>
                        }
                    </div>
                }
                <ScheduleGroup EnableCompactView="false" Resources="@GroupData"></ScheduleGroup>
                <ScheduleResources>
                    <ScheduleResource TItem="RoomData" TValue="int[]" DataSource="@FilteredRooms" Field="RoomId" Title="Rooms" Name="Rooms" TextField="Text" IdField="Id" ColorField="Color" AllowMultiple="true"></ScheduleResource>
                </ScheduleResources>
                <ScheduleTemplates>
                    <ResourceHeaderTemplate>
                        @{
                            var resourceData = (context as TemplateContext).ResourceData as RoomData;
                            <div class="template-wrap">
                                <div class="resource-detail">
                                    <div class="resource-name">@(resourceData?.Text)</div>
                                    <div class="capacity-wrap">
                                        <span class='e-icons e-capacity-icon'></span>
                                        <span class='e-capacity'> Capacity - @(resourceData?.Capacity)</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </ResourceHeaderTemplate>
                    <EditorTemplate Context="context">
                        @{
                            var data = context as TechEventOrganizerData;
                        }
                        @if (data != null)
                        {
                            selectedRoomId = data.RoomId;
                            <div class="editor-template">
                                <div class="editor-title">
                                    <label>Title</label>
                                    <SfTextBox @bind-Value="data.Subject" Placeholder="Enter Title"></SfTextBox>
                                </div>
                                <div class="editor-event">
                                    <label>Event</label>
                                    <SfTextBox @bind-Value="data.Title"></SfTextBox>
                                </div>
                            </div>
                            <div class="editor-template">
                                <div class="editor-start-time">
                                    <label>Start</label>
                                    @{
                                        var startTime = pendingDraggedEvent != null ? pendingDraggedEvent.StartTime : DateTime.Now;
                                    }
                                    <SfDateTimePicker TValue="DateTime" Value="@startTime" ValueChanged="@(args => OnStartTimeChanged(args))" Format="MM/dd/yyyy hh:mm tt">
                                    </SfDateTimePicker>
                                </div>
                                <div class="editor-end-time">
                                    @{
                                        var endTime = pendingDraggedEvent != null ? pendingDraggedEvent.EndTime : DateTime.Now.AddHours(1);
                                    }
                                    <label>End</label>
                                    <SfDateTimePicker TValue="DateTime" Value="@endTime" Readonly="true" Format="MM/dd/yyyy hh:mm tt">
                                    </SfDateTimePicker>
                                </div>
                            </div>
                            @if (showErrorMessage)
                            {
                                <div class="error-message">
                                    Start time must be between 8:00 AM and 6:00 PM
                                </div>
                            }
                            <div class="form-group">
                                <label>Rooms</label>
                                <SfDropDownList TValue="int" TItem="RoomData" DataSource="Rooms" Value="@data.RoomId" ValueChanged="@(val => OnRoomDropdownChanged(val, data))" ValueExpression="@( () => data.RoomId )" Placeholder="Select Room">
                                    <DropDownListFieldSettings Text="Text" Value="Id" />
                                    <DropDownListTemplates TItem="RoomData" Context="room">
                                        <ItemTemplate>
                                            <div class="dropdown-div">
                                                <div style="width: 12px; height: 12px; background-color: @(room.Color); margin: 0px 0px 0 20px;"></div>
                                                <div>@room.Text</div>
                                            </div>
                                        </ItemTemplate>
                                    </DropDownListTemplates>
                                </SfDropDownList>
                            </div>
                            <div class="form-group">
                                <label>Participants Count</label>
                                <SfNumericTextBox TValue="int" Readonly="true" @bind-Value="data.Capacity"></SfNumericTextBox>
                            </div>
                            @if (showWarning)
                            {
                                <div class="error-message">
                                    Number of participants exceeds the room's limit.
                                </div>
                            }
                        }
                    </EditorTemplate>
                    <EditorFooterTemplate>
                        <div class="d-flex justify-content-end gap-2 p-2">
                            <SfButton CssClass="e-primary" Disabled="@(showErrorMessage||showWarning)" OnClick="SaveEvent">Save</SfButton>
                            <SfButton CssClass="e-flat" OnClick="() => ScheduleRef.CloseEditor()">Close</SfButton>
                        </div>
                    </EditorFooterTemplate>
                </ScheduleTemplates>
                <ScheduleViews>
                    <ScheduleView Option="View.Day"></ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.Agenda">
                        <EventTemplate>
                            @{
                                var data = context as TechEventOrganizerData;
                                var agendaSubject = (data.Subject.Contains("Break") || data.Subject.Contains("Lunch")) ? "break-event-subject" : "event-subject";
                                <div class="agenda-event">
                                    <div class="@agendaSubject">@data.Subject</div>
                                    <div class="event-description">@data.Description</div>
                                    @if (!data.Subject.ToLower().Contains("break") && !data.Subject.ToLower().Contains("lunch"))
                                    {
                                        <div class="event-duration-audience">
                                            <div class="event-duration">
                                                <span class="e-icons e-duration-icon"></span>
                                                <span class="e-duration">@FormatTime(data.StartTime) - @FormatTime(data.EndTime)</span>
                                            </div>
                                            @if (data.Capacity > 0)
                                            {
                                                <div class="event-audience">
                                                    <span class="e-icons e-audience-icon"></span>
                                                    <span class="e-audience-count">Audience: @data.Capacity</span>
                                                </div>
                                            }
                                        </div>
                                    }
                                    @if (data.Speakers != null && data.Speakers.Count > 0)
                                    {
                                        <div class="event-speaker">
                                            <div class="separator-line"></div>
                                            <label>@(data.Speakers.Count > 1 ? "Speakers" : "Speaker")</label>
                                            @foreach (var speaker in data.Speakers)
                                            {
                                                <div class="speaker-details">
                                                    <div class="speaker-image">@speaker.Name.Substring(0, 1)</div>
                                                    <div class="speaker-info">
                                                        <div class="speaker-name">@speaker.Name</div>
                                                        <div class="speaker-title">@speaker.Title</div>
                                                        <div class="speaker-note">@speaker.Note</div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </EventTemplate>
                    </ScheduleView>
                </ScheduleViews>
                <ScheduleQuickInfoTemplates TemplateType="TemplateType.Event">
                    <HeaderTemplate>
                        <div class="e-event-header e-popup-header">
                            <div class="e-header-icon-wrapper">
                                <SfButton id="close" OnClick="OnCloseClick" IconCss="e-icons e-close-icon" CssClass="e-close e-flat e-round e-small" type="button"></SfButton>
                            </div>
                            <div>
                                @if (context is TechEventOrganizerData data)
                                {
                                    var roomColor = Rooms.FirstOrDefault(item => item.Id == data.RoomId)?.Color ?? "#007bff";
                                    <div class="quick-info-header-content" style="@($"background: {roomColor}; color: #FFFFFF;")">
                                        <div class="quick-info-title">@data.Subject</div>
                                        <div class="duration-text">@GetQuickInfoDurationText(data)</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="quick-info-content">
                            <div class="event-content">
                                @if (context is TechEventOrganizerData data)
                                {
                                    var roomName = GetRoomName(data.RoomId);
                                    <div class="e-room e-content-item">
                                        <label>Room</label>
                                        <span class="colon">:</span>
                                        <span class="e-content">@roomName</span>
                                    </div>
                                    <div class="e-event e-content-item">
                                        <label>Event</label>
                                        <span class="colon">:</span>
                                        <span class="e-content">@data.Title</span>
                                    </div>
                                    @if (data.Speakers != null && data.Speakers.Any())
                                    {
                                        var speakerLabel = data.Speakers.Count > 1 ? "Speakers" : "Speaker";
                                        var speakerList = string.Join(", ", data.Speakers.Select((s, index) =>
                                        $"{s.Name} ({s.Title}){(index == data.Speakers.Count - 2 ? " and" : "")}"));
                                        <div class="e-speaker e-content-item">
                                            <label>@speakerLabel</label>
                                            <span class="colon">:</span>
                                            <span class="e-content">@speakerList</span>
                                        </div>
                                    }
                                    <div class="e-count e-content-item">
                                        <label>Participant count</label>
                                        <span class="colon">:</span>
                                        <span class="e-content">@data.Capacity</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </ContentTemplate>
                </ScheduleQuickInfoTemplates>
                <ScheduleTimeScale Interval="60" SlotCount="3"></ScheduleTimeScale>
                <ScheduleEvents TValue="TechEventOrganizerData" OnCellClick="OnCellClick" OnCellDoubleClick="OnCellDoubleClick" OnEventDoubleClick="OnEventDoubleClick" EventRendered="OnEventRendered" OnActionBegin="OnActionBegin" OnPopupOpen="OnPopupOpen"></ScheduleEvents>
                <ScheduleEventSettings DataSource="@employeeData">
                    <ScheduleField>
                        <FieldSubject Name="Subject"></FieldSubject>
                        <FieldStartTime Name="StartTime"></FieldStartTime>
                        <FieldEndTime Name="EndTime"></FieldEndTime>
                        <FieldLocation Name="Title" Title="Event"></FieldLocation>
                        <FieldDescription Name="Capacity" Title="Participants Count"></FieldDescription>
                    </ScheduleField>
                </ScheduleEventSettings>
            </ChildContent>
        </SfSchedule>
    </div>
    @if (ShowUnplanned)
    {
        <div class="unplanned-events-container">
            <div class="title-container">
                <div class="title-text">Unscheduled Events</div>
            </div>
            <div id="list-container">
                <div class="events-list">
                    <label class="event-label">Event</label>
                    <SfDropDownList TValue="string" TItem="DropdownOption" DataSource="@EventTypeOptions" Placeholder="Select Event Type" @bind-Value="SelectedEventType" Width="235px">
                        <DropDownListEvents TValue="string" TItem="DropdownOption" ValueChange="OnEventTypeChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Text" Value="Value" />
                    </SfDropDownList>
                </div>
                @if (FilteredData != null && FilteredData.Any())
                {
                    <SfTreeView TValue="TechEventOrganizerData" CssClass="event-management-treeview" AllowDragAndDrop="true" DropArea=".control-section">
                        <TreeViewFieldsSettings DataSource="@FilteredData" Id="Id" Text="Subject" />
                        <TreeViewEvents TValue="TechEventOrganizerData" OnNodeDragStart="OnTreeDragStart" OnNodeDragStop="OnTreeViewDragStop" />
                        <TreeViewTemplates TValue="TechEventOrganizerData">
                            <NodeTemplate>
                                @{
                                    var item = context as TechEventOrganizerData;
                                }
                                <div class="unplanned-item">
                                    <div class="unplanned-item-subject">@item.Subject</div>
                                    <div class="unplanned-item-duration">
                                        <span class="duration-icon e-icons"></span>
                                        <span class="duration-value">Duration: @item.Duration</span>
                                    </div>
                                    <div class="unplanned-item-capacity">
                                        <span class="capacity-icon e-icons"></span>
                                        <span class="capacity-value">Audience Size: @item.Capacity</span>
                                    </div>
                                </div>
                            </NodeTemplate>
                        </TreeViewTemplates>
                    </SfTreeView>
                }
                else
                {
                    <div class="no-events-message">All events have been scheduled</div>
                }

            </div>
        </div>
    }
    <div id="target">
        <SfDialog @ref="AlertDialog" Width="400px" IsModal="true" ShowCloseIcon="true" Visible="false" Header="Alert" Target=".control-section">
            <DialogTemplates>
                <Content>
                    @AlertMessage
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" OnClick="@CloseAlertDialog" />
            </DialogButtons>
        </SfDialog>
    </div>
</div>
@code {
    //properties
    SfSchedule<TechEventOrganizerData> ScheduleRef;
    private DateTime CurrentDate { get; set; } = new DateTime(2025, 2, 24);
    public View CurrentView { get; set; } = View.Day;
    private bool ShowHeader { get; set; } = true;
    private bool ShowCalendar { get; set; } = false;
    private string[] GroupData = new string[] { "Rooms" };
    private List<TechEventOrganizerData> ScheduleEvents = new List<TechEventOrganizerData>();
    public List<TechEventOrganizerData> employeeData { get; set; } = new List<TechEventOrganizerData>();
    public List<TechEventOrganizerData> cloudSecurityData { get; set; } = new List<TechEventOrganizerData>();
    public List<TechEventOrganizerData> AIAutomationData { get; set; } = new List<TechEventOrganizerData>();
    public List<TechEventOrganizerData> AllData { get; set; } = new List<TechEventOrganizerData>();
    private List<TechEventOrganizerData> FilteredData = new List<TechEventOrganizerData>();
    private List<RoomData> FilteredRooms;
    private SfDialog AlertDialog;
    private string AlertMessage = "";
    private string SelectedRoom = "All";
    private bool ShowUnplanned = true;
    private string SelectedEventType = "All";
    private bool showErrorMessage = false;
    //properties for drag and drop
    private string draggedItemName;
    private bool isDraggedItemDropped = false;
    private string draggedItemDuration;
    private TechEventOrganizerData pendingDraggedEvent;
    bool isOverlapping { get; set; }
    private int selectedRoomId;
    private bool showWarning = false;

    //field for TreeViewData
    public class TreeViewData
    {
        public string Id { get; set; }
        public string Subject { get; set; }
        public string Duration { get; set; }
        public string Capacity { get; set; }
    }
    //field for RoomData
    public class RoomData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
        public int Capacity { get; set; }
    }
    //field for DropdownOption
    public class DropdownOption
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    //Datasource for Dropdown Items
    private List<DropDownMenuItem> DropDownItems = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "Print" },
        new DropDownMenuItem { Text = "Export" }

    };
    // Datasource for Rooms
    private List<RoomData> Rooms { get; set; } = new List<RoomData>
    {
        new RoomData { Text = "Room A", Id = 1, Color = "#0F6CBD" , Capacity = 100 },
        new RoomData { Text = "Room B", Id = 2, Color = "#B71C1C" ,Capacity = 200 },
        new RoomData { Text = "Room C", Id = 3, Color = "#E65100" ,Capacity = 300 },
        new RoomData { Text = "Room D", Id = 4, Color = "#558B2F" ,Capacity = 400 }
    };
    // Datasource for RoomOptions
    private List<DropdownOption> RoomOptions = new List<DropdownOption>
    {
        new DropdownOption { Text = "All", Value = "All" },
        new DropdownOption { Text = "Room A", Value = "Room A" },
        new DropdownOption { Text = "Room B", Value = "Room B" },
        new DropdownOption { Text = "Room C", Value = "Room C" },
        new DropdownOption { Text = "Room D", Value = "Room D" }
    };
    // Datasource for eventTypeOptions
    private List<DropdownOption> EventTypeOptions = new List<DropdownOption>
    {
        new DropdownOption { Text = "All", Value = "All" },
        new DropdownOption { Text = "Cloud Security Essentials", Value = "CloudSecurity" },
        new DropdownOption { Text = "AI for Automation", Value = "AIAutomation" }
    };

    // OnInitialized method
    protected override void OnInitialized()
    {
        employeeData = TechEventOrganizerData.GetEventData();
        cloudSecurityData = TechEventOrganizerData.GetCloudSecurityEventData();
        AIAutomationData = TechEventOrganizerData.GetAIAutomationEventData();
        AllData = cloudSecurityData.Concat(AIAutomationData).ToList();
        SelectedEventType = "All";
        FilteredData = AllData;
        FilteredRooms = Rooms;
    }
    // Method for Navigating Previous when the toolbar icon is clicked
    private void NavigatePrevious()
    {
        CurrentDate = CurrentDate.AddDays(-1);
    }
    // Method for Navigating Next when the toolbar icon is clicked
    private void NavigateNext()
    {
        CurrentDate = CurrentDate.AddDays(1);
    }
    // Method for opening the calender on the toolbar
    private void DateRangeClick()
    {
        ShowCalendar = !ShowCalendar;
    }
    // Method for rendered the day view
    private void OnDayView()
    {
        CurrentView = View.Day;
    }
    // Method for rendered the week view
    private void OnWeekView()
    {
        CurrentView = View.Week;
    }
    // Method for rendered the agenda view
    private void OnAgendaView()
    {
        CurrentView = View.Agenda;
    }
    // Method for changing the date format based on the view of the schedule
    private string GetFormattedDate()
    {
        switch (CurrentView)
        {
            case View.Day:
            case View.Agenda:
                return CurrentDate.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture);
            case View.Week:
                var startOfWeek = CurrentDate.StartOfWeek(DayOfWeek.Sunday);
                var endOfWeek = startOfWeek.AddDays(6);
                return $"{startOfWeek.ToString("MMM dd", CultureInfo.InvariantCulture)} - {endOfWeek.ToString("MMM dd, yyyy", CultureInfo.InvariantCulture)}";
            default:
                return CurrentDate.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture);
        }
    }
    // preventing the editor popup when the cell is double clicked
    public void OnCellDoubleClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    // preventing the editor popup when the cell is clicked
    public async Task OnCellClick(CellClickEventArgs args)
    {
        args.Cancel = true;
    }
    // preventing the editor popup when the event is double clicked
    public async Task OnEventDoubleClick(EventClickArgs<TechEventOrganizerData> args)
    {
        args.Cancel = true;
    }
    //Method for Exporting the schedule as excel
    public async Task OnExportToExcel()
    {
        ExportOptions Options = new ExportOptions() { ExportType = ExcelFormat.Xlsx, Fields = new string[] { "Id", "Subject", "Title", "StartTime", "EndTime", "RoomId", "Capacity" } };
        await ScheduleRef.ExportToExcelAsync(Options);
    }
    // Method for printing the schedule
    public async Task OnPrintClick()
    {
        await ScheduleRef.PrintAsync();
    }
    // Method for identifing the selected text on the dropdown button
    private void ItemSelected(MenuEventArgs args)
    {
        var selectedText = args.Item.Text;
        if (selectedText == "Print")
        {
            OnPrintClick();
        }
        else if (selectedText == "Export")
        {
            OnExportToExcel();
        }
    }
    // Method for rendering the treeview based on the dropdown change
    private void OnEventTypeChange(ChangeEventArgs<string, DropdownOption> args)
    {
        SelectedEventType = args.Value;
        switch (SelectedEventType)
        {
            case "CloudSecurity":
                FilteredData = cloudSecurityData;
                break;
            case "AIAutomation":
                FilteredData = AIAutomationData;
                break;
            case "All":
            default:
                FilteredData = AllData;
                break;
        }
    }
    // Method for filtering the rooms based on the dropdown selection
    private void OnRoomSelectionChanged(ChangeEventArgs<string, DropdownOption> args)
    {
        if (args.Value == "All")
        {
            FilteredRooms = Rooms;
        }
        else
        {
            FilteredRooms = Rooms.Where(room => room.Text == args.Value).ToList();
        }
    }
    // OnEventRendered method for setting the color for the event
    public void OnEventRendered(EventRenderedArgs<TechEventOrganizerData> args)
    {
        Dictionary<string, object> attributes = new Dictionary<string, object>();
        if (args.Data.Subject?.ToLower().Contains("break") == true || args.Data.Subject?.ToLower().Contains("lunch") == true)
        {
            attributes.Add("style", "background-color: #455A64; color: white;");
        }
        args.Attributes = attributes;
    }
    // Method for formatting the time to set it on the agenda view
    private string FormatTime(DateTime dateTime)
    {
        return dateTime.ToString("h:mm tt");
    }
    // Method for fetching the RoomName based on the roomId
    private string GetRoomName(int roomId)
    {
        return roomId switch
        {
            1 => "Room A",
            2 => "Room B",
            3 => "Room C",
            4 => "Room D",
        };
    }
    // Method for closing the Quickinfo popup
    private async Task OnCloseClick()
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
    }
    // Method for preventing the quickinfopopup open if the event is break or lunch
    public void OnPopupOpen(PopupOpenEventArgs<TechEventOrganizerData> args)
    {
        showErrorMessage = false;
        showWarning = false;
        if (args.Type == PopupType.QuickInfo && (args.Data.Subject?.ToLower().Contains("break") == true ||
            args.Data.Subject?.ToLower().Contains("lunch") == true))
        {
            args.Cancel = true;
        }
    }
    // Method for formatting the time to set it on the quickinfo popup
    private string GetQuickInfoDurationText(dynamic data)
    {
        string dayOfWeek = data.StartTime.ToString("dddd");
        string startDate = data.StartTime.ToString("MMMM dd, yyyy");
        string startTime = data.StartTime.ToString("hh:mm tt");
        string endTime = data.EndTime.ToString("hh:mm tt");
        return $" {dayOfWeek}, {startDate} ({startTime} - {endTime})";
    }
    // Method for toggling the unplanned events
    private void ToggleUnplannedEventsElement()
    {
        ShowUnplanned = !ShowUnplanned;
    }
    // Methdd for saving the event on save click
    private async Task SaveEvent()
    {
        if (showErrorMessage || showWarning) return;
        await ScheduleRef.AddEventAsync(pendingDraggedEvent);
        ScheduleRef.CloseEditor();
    }
    // Metbod for tracing the start time chanage
    private void OnStartTimeChanged(DateTime newStartTime)
    {
        pendingDraggedEvent.StartTime = newStartTime;
        if (!string.IsNullOrEmpty(draggedItemDuration))
        {
            var parts = draggedItemDuration.Split(' ');
            int durationValue = int.Parse(parts[0]);
            string unit = parts[1].ToLower();

            if (unit != null)
            {
                switch (unit.ToLowerInvariant())
                {
                    case "hour":
                    case "hours":
                        pendingDraggedEvent.EndTime = newStartTime.AddHours(durationValue);
                        break;

                    case "minute":
                    case "minutes":
                        pendingDraggedEvent.EndTime = newStartTime.AddMinutes(durationValue);
                        break;

                    default:
                        pendingDraggedEvent.EndTime = pendingDraggedEvent.EndTime;
                        break;
                }
            }
        }
        var start = newStartTime.TimeOfDay;
        showErrorMessage = start < new TimeSpan(8, 0, 0) || start > new TimeSpan(18, 0, 0);
    }
    // Method for opening and reseting the dialog box and dialog content
    private async Task ShowAlert(string message)
    {
        AlertMessage = string.Empty;
        await AlertDialog.HideAsync();
        AlertMessage = message;
        await AlertDialog.ShowAsync();
    }
    // Method for closing the dialog box
    private async Task CloseAlertDialog()
    {
        await AlertDialog.HideAsync();
    }
    // Method for getting the name of the draggedItemName
    private void OnTreeDragStart(DragAndDropEventArgs args)
    {
        var draggedNode = args.DraggedNodeData;
        if (draggedNode != null)
        {
            draggedItemName = draggedNode.Text?.ToString();
        }
    }
    // Method for Drag stop event and identifying the slot is available
    public async void OnTreeViewDragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        CellClickEventArgs cellData = await ScheduleRef.GetTargetCellAsync((int)args.Left, (int)args.Top);
        if (cellData == null) return;
        var treeData = AllData.FirstOrDefault(data => data.Id.ToString() == args.DraggedNodeData.Id);
        if (treeData == null) return;
        draggedItemDuration = treeData.Duration;
        draggedItemName = treeData.Subject;
        var resourceDetails = ScheduleRef.GetResourceByIndex(cellData.GroupIndex);
        var roomId = resourceDetails.GroupData.RoomId;
        var parts = treeData.Duration.Split(' ');
        int durationValue = int.Parse(parts[0]);
        string unit = parts[1].ToLower();
        DateTime startTime = NormalizeTime(cellData.StartTime);
        DateTime endTime;
        switch (unit?.ToLowerInvariant())
        {
            case "hour":
            case "hours":
                endTime = startTime.AddHours(durationValue);
                break;
            case "minute":
            case "minutes":
                endTime = startTime.AddMinutes(durationValue);
                break;
            default:
                endTime = NormalizeTime(cellData.EndTime);
                break;
        }
        if (endTime.TimeOfDay > new TimeSpan(18, 0, 0))
        {
            await ShowAlert("End time exceeds working hours.");
            return;
        }
        var pendingEvent = new TechEventOrganizerData
            {
                Id = new Random().Next(1000),
                Title = treeData.Title,
                Subject = treeData.Subject,
                StartTime = startTime,
                EndTime = endTime,
                Capacity = treeData.Capacity,
                RoomId = roomId,
                Duration = treeData.Duration,
                EventType = treeData.EventType,
                TargetAudience = treeData.TargetAudience,
                EventLevel = treeData.EventLevel,
                EventTags = treeData.EventTags,
                Description = treeData.Description,
                Speakers = treeData.Speakers
            };
        bool isSlotAvailable = await ScheduleRef.IsSlotAvailableAsync(pendingEvent);
        if (!isSlotAvailable)
        {
            await ShowAlert("This room is already booked for this time slot. Please select a different room or time.");
            return;
        }
        bool isCapacityAvailable = CheckRoomCapacity(treeData.Capacity, roomId);
        if (!isCapacityAvailable)
        {
            await ShowAlert("This room cannot accommodate the stated number of attendees. Please select a room with a suitable capacity.");
            return;
        }
        pendingDraggedEvent = pendingEvent;
        isDraggedItemDropped = true;
        await ScheduleRef.OpenEditorAsync(pendingDraggedEvent, CurrentAction.Add);
    }
    // Method for Preventing the event creation if the slot is not available
    public async void OnActionBegin(ActionEventArgs<TechEventOrganizerData> args)
    {
        var data = args.AddedRecords.First();
        data.RoomId = selectedRoomId;
        bool isCapacityAvailable = CheckRoomCapacity(data.Capacity, data.RoomId);
        if (!isCapacityAvailable)
        {
            await ShowAlert("This room cannot accommodate the number of attendees.");
            return;
        }
        bool isOverlapping = await ScheduleRef.IsSlotAvailableAsync(new TechEventOrganizerData
            {
                Id = data.Id,
                StartTime = data.StartTime,
                EndTime = data.EndTime,
                RoomId = data.RoomId,
                TargetAudience = data.TargetAudience
            });
        if (!isOverlapping)
        {
            args.Cancel = true;
            await ShowAlert("Room is already booked for the selected time slot.");
            return;
        }
        if (args.ActionType == ActionType.EventCreate && args.AddedRecords?.Any() == true)
        {
            var treeData = AllData.FirstOrDefault(d => d.Subject == data.Subject);
            if (treeData != null)
            {
                AllData.Remove(treeData);
                AIAutomationData.Remove(treeData);
                cloudSecurityData.Remove(treeData);
            }
            isDraggedItemDropped = false;
            draggedItemDuration = null;
            draggedItemName = null;
            pendingDraggedEvent = null;
        }
    }
    // Method for normalizing the time
    private DateTime NormalizeTime(DateTime date)
    {
        return new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, 0);
    }
    // Method for identifying the room capacity
    private bool CheckRoomCapacity(int requiredCapacity, int roomId)
    {
        var capacity = Rooms.FirstOrDefault(room => room.Id == roomId);
        return capacity != null && capacity.Capacity >= requiredCapacity;
    }
    // Method for getting the dropdown change value and its availability
    private void OnRoomDropdownChanged(int selectedRoomId, TechEventOrganizerData data)
    {
        data.RoomId = selectedRoomId;
        bool isCapacityAvailable = CheckRoomCapacity(data.Capacity, data.RoomId);
        showWarning = !isCapacityAvailable ? true : false;
    }
}

<style>
    .event-management-wrapper {
        display: flex;
        width: 100%;
    }

    /*styling for the custom toolbar*/
    .custom-toolbar {
        border: 1px solid #dee2e6;
        border-bottom: none;
    }

    /*style form show unplanned events icon*/
    .e-show-unplanned-events::before {
        content: '\e71a';
    }

    /*style for hide unplanned events icon*/
    .e-hide-unplanned-events::before {
        content: '\e82b';
    }

    /*style for calender*/
    .e-header-popup .e-calendar {
        position: absolute;
        z-index: 100;
        top: -1px;
        left: 97px;
    }

    /*setting full width for the schedule events*/
    .e-table-wrap.e-vertical-view.e-day-view.e-current-panel .e-content-wrap .e-appointment {
        width: 100% !important;
    }

    /*adjusting the height of the schedule resource cell*/
    .e-schedule .e-vertical-view .e-resource-cells {
        height: 60px !important;
    }

    /*Styling for the error message*/
    .error-message {
        color: red;
        font-size: 14px;
        font-weight: bold;
    }

    /*styling for the template*/
    .editor-template {
        display: flex;
        justify-content: space-between;
    }

    .editor-title,
    .editor-event,
    .editor-start-time,
    .editor-end-time {
        width: 49%;
    }

    .editor-end-time,
    .editor-room,
    .editor-capacity {
        pointer-events: none;
        opacity: 0.5;
        cursor: not-allowed;
    }

    /*styling form dropdown button icon*/
    .custom-icon::before {
        font-family: 'e-icons';
        content: '\e71c';
        font-size: 18px;
        margin-left: 5px;
        vertical-align: middle;
    }

    .highcontrast .custom-icon::before {
        margin-left: 0px;
    }

    .fluent2 .e-schedule .e-vertical-view .e-day-wrapper .e-appointment .e-appointment-details,
    .fluent2-highcontrast .e-schedule .e-vertical-view .e-day-wrapper .e-appointment .e-appointment-details,
    .fluent2-dark .e-schedule .e-vertical-view .e-day-wrapper .e-appointment .e-appointment-details {
        line-height: 18px !important;
    }

    .dropdown-div {
        display: flex;
        align-items: center
    }

    .dropdownButton {
        padding: 0 !important;
    }

    /*adjusting the schedule content after adding the custom toolbar*/
    .e-schedule .e-table-wrap.e-vertical-view .e-content-wrap {
        height: 380px !important;
    }

    /*adjusting the Resource cell after adding the custom toolbar*/
    .e-time-cells-wrap {
        height: 380px !important;
    }

    /*style for resource header*/
    .e-date-header-container {
        .e-resource-cells {
            padding: 0;
            text-align: center !important;
            .resource-name {
                margin-bottom: 4px;
            }
            .capacity-wrap {
                .e-capacity-icon::before {
                    content: '\e7b9';
                }
                .e-capacity-icon {
                    line-height: 100%;
                    margin-right: 4px;
                    vertical-align: middle;
                }
                .e-capacity {
                    vertical-align: bottom;
                }
            }
        }
    }

    /*style for quick info popup*/
    .e-quick-popup-wrapper {
        max-width: 400px;
        .e-event-popup {
            .e-popup-header {
                .e-popup-header.e-event-header {
                    padding: 0;
                    .e-header-icon-wrapper {
                        display: flex;
                        justify-content: flex-end;
                    }
                    .quick-info-header-content {
                        padding: 11px 12px;
                        margin: 10px 16px;
                        .quick-info-title {
                            height: 100%;
                        }
                        .duration-text {
                            height: 100%;
                            white-space: nowrap;
                        }
                    }
                    .quick-info-close-icon .e-dlg-closeicon-btn {
                        background-color: transparent;
                        border: none;
                        font-size: 12px;
                        cursor: pointer;
                        padding: 4px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        width: 24px;
                        height: 24px;
                    }
                    .quick-info-close-icon .e-dlg-closeicon-btn:hover {
                        background-color: rgba(255, 255, 255, 0.2);
                    }
                }
            }
            .e-popup-content {
                padding: 14px 16px;
                .quick-info-content {
                    .event-content {
                        height: 100%;
                        padding: 0%;
                        .quick-info-header {
                            .quick-info-header-content {
                                padding: 16px;
                            }
                        }
                        .e-content-item {
                            display: flex;
                            align-items: baseline;
                            label {
                                flex-shrink: 0;
                                margin-right: 8px;
                                width: 116px !important;
                            }
                        }
                        .e-event,
                        .e-speaker,
                        .e-count {
                            margin-top: 14px;
                        }
                    }
                }
            }
            .e-popup-footer {
                display: none;
            }
        }
    }

    /*style for agenda view*/
    .e-table-wrap.e-agenda-view {
        .e-resource-column {
            .template-wrap {
                padding-top: 10px;
                padding-left: 5px;
                .capacity-wrap {
                    display: none;
                }
            }
        }
        .e-agenda-item.e-agenda-view {
            .e-appointment.e-template {
                border-top-color: #D1D1D1 !important;
                border-bottom-color: #D1D1D1 !important;
                border-top: 1px solid;
                border-bottom: 1px solid;
                flex-direction: row;
                width: 100%;
                >div:first-child {
                    width: 100%;
                }
            }
            .break-event-subject {
                color: white;
                font-size: 20px;
                line-height: 28px;
                padding-top: 12px;
            }
            .event-subject {
                color: #0F6CBD;
                font-size: 20px;
                line-height: 28px;
                padding-top: 12px;
            }
            .event-description {
                padding: 4px 0 12px 0;
            }
            .event-duration-audience {
                display: flex;
                padding-bottom: 16px;
                gap: 120px;
                .event-duration .e-duration,
                .event-audience .e-audience-count {
                    vertical-align: bottom;
                }
                .e-duration-icon,
                .e-audience-icon {
                    line-height: 14px;
                    vertical-align: text-top;
                }
                .e-duration-icon::before {
                    content: '\e705';
                }
                .e-audience-icon::before {
                    content: '\e7b9';
                }
            }
            .event-speaker {
                .separator-line {
                    border: 1px solid #D1D1D1;
                    border-radius: 4px;
                    margin-bottom: 12px;
                    width: 100%;
                }
                .speaker-details {
                    display: flex;
                    padding-top: 12px;
                    gap: 15px;
                    .speaker-image {
                        border: 1px solid #808080;
                        background-color: #0F6CBD;
                        color: #FFFFFF;
                        height: 32px;
                        width: 32px;
                        min-height: 32px;
                        min-width: 32px;
                        border-radius: 50%;
                        font-weight: 500;
                        font-family: 'Roboto';
                        letter-spacing: 0.1px;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                    .speaker-info {
                        .speaker-title {
                            color: #0F6CBD;
                            padding-top: 4px;
                        }
                        .speaker-note {
                            padding: 4px 0 12px 0;
                        }
                    }
                }
            }
        }
    }
    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment .e-location {
        padding-top: 0px !important;
    }

    /*style for unplanned events container*/
    .unplanned-events-container {
        border-style: solid;
        border-color: #D1D1D1;
        border-width: 1px 1px 1px 0px;
        min-width: 260px;
        width: 260px;
        height: 550px;
        .title-container {
            height: 50px;
            .title-text {
                padding: 14px 16px;
                text-align: center;
            }
        }

        #list-container {
            border-top: 1px solid #D1D1D1;
            height: auto;
            .events-list {
                height: 54px;
                margin: 12px 12px 16px 12px;
                .e-ddl.e-control-wrapper {
                    margin-top: 4px;
                }
            }
            .event-management-treeview {
                height: 416px;
                margin: 0 12px 0 12px;
                border: none;
                overflow-y: auto;
                .e-list-parent {
                    padding: 0;
                    overflow: visible;
                }
                .e-list-item {
                    height: auto;
                    margin-bottom: 8px;
                    padding: 0;
                    .e-fullrow {
                        border-radius: 6px;
                        height: 96px;
                        padding: 1px;
                        margin: 0;
                        width: 100%;
                    }
                }
                .e-text-content {
                    border-color: #D1D1D1 !important;
                    border: 1px solid;
                    border-radius: 6px;
                    height: 96px;
                    padding: 0;
                    .e-list-text {
                        border: none;
                        display: inline-block;
                        height: auto;
                        line-height: 20px;
                        padding: 12px;
                        white-space: nowrap;
                        width: 100%;
                        .unplanned-item-subject {
                            white-space: nowrap;
                            padding-bottom: 4px;
                            overflow: hidden;
                            text-overflow: ellipsis;
                        }
                        .unplanned-item-duration,
                        .unplanned-item-capacity {
                            margin-top: 4px;
                        }
                        .unplanned-item-duration .duration-icon,
                        .unplanned-item-capacity .capacity-icon {
                            font-size: 12px;
                            line-height: 100%;
                            padding-right: 8px;
                        }
                    }
                }
            }
            .no-events-message {
                display: flex;
                justify-content: center;
                align-items: center;
                height: 30px;
                width: 100%;
                font-size: 14px;
            }
        }
    }

    .event-management-treeview .e-text-content .unplanned-item-duration .duration-icon::before {
        content: '\e74c';
    }

    .event-management-treeview .e-text-content .unplanned-item-capacity .capacity-icon::before {
        content: '\e7b9';
    }

    /* style for room dropdown */
    .e-control-wrapper.e-ddl {
        .e-input-value {
            padding: 6px 4px 6px 12px;
        }
    }

    /* styling for adding the space before the quickinfo content */
    .event-content div span {
        padding-left: 8px;
    }

    /* style for quickinfo text */
    .quick-info-title {
        height: 100%;
        font-size: 16px;
    }

    .e-vertical-view .e-time-cells-wrap .e-time-slots span,
    .e-vertical-view .e-date-header-container .e-resource-cells .resource-name,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity,
    .e-table-wrap.e-agenda-view .e-resource-column .template-wrap .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-subject,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-description,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-duration .e-duration,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-audience .e-audience-count,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .quick-info-title,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .duration-text,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item label,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item .e-content,
    .unplanned-events-container .title-container .title-text,
    .unplanned-events-container #list-container .events-list .event-label,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-subject,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-value {
        font-family: 'Segoe UI';
    }

    .e-schedule-toolbar-container .e-toolbar-items .e-print-export,
    .e-vertical-view .e-time-cells-wrap .e-time-slots span,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity-icon,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity,
    .e-table-wrap.e-agenda-view .e-resource-column .template-wrap .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-description,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-duration .e-duration,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-audience .e-audience-count,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-duration-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-audience-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-note,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .duration-text,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item .e-content,
    .unplanned-events-container #list-container .events-list .event-label,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-icon,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-icon {
        font-weight: 400;
    }

    .e-vertical-view .e-date-header-container .e-resource-cells .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-subject,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker label,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-title,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .quick-info-title,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item label,
    .unplanned-events-container .title-container .title-text,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-subject {
        font-weight: 600;
    }

    .e-schedule-toolbar-container .e-toolbar-items .e-print-export,
    .e-vertical-view .e-date-header-container .e-resource-cells .resource-name,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity-icon,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity,
    .e-table-wrap.e-agenda-view .e-resource-column .template-wrap .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-description,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-duration .e-duration,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-audience .e-audience-count,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-duration-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-audience-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker label,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-title,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-note,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .duration-text,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item label,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item .e-content,
    .unplanned-events-container #list-container .events-list .event-label,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-subject,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-value {
        font-size: 14px;
    }

    .e-vertical-view .e-time-cells-wrap .e-time-slots span,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-image,
    .unplanned-events-container .title-container .title-text {
        font-size: 16px;
    }

    .e-schedule-toolbar-container .e-toolbar-items .e-print-export,
    .e-vertical-view .e-time-cells-wrap .e-time-slots span,
    .e-vertical-view .e-date-header-container .e-resource-cells .resource-name,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity-icon,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity,
    .e-table-wrap.e-agenda-view .e-resource-column .template-wrap .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-description,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-duration .e-duration,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-audience .e-audience-,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-duration-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .e-audience-icon,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker label,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-title,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-note,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .quick-info-title,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .duration-text,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item label,
    .unplanned-events-container .title-container .title-text,
    .unplanned-events-container #list-container .events-list .event-label,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-subject,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-icon,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-icon {
        letter-spacing: 0%;
    }

    .e-vertical-view .e-date-header-container .e-resource-cells .resource-name,
    .e-vertical-view .e-date-header-container .e-resource-cells .capacity-wrap .e-capacity,
    .e-table-wrap.e-agenda-view .e-resource-column .template-wrap .resource-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-description,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-duration .e-duration,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-duration-audience .event-audience .e-audience-count,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker label,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-image,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-name,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-title,
    .e-table-wrap.e-agenda-view .e-agenda-item.e-agenda-view .event-speaker .speaker-details .speaker-info .speaker-note,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .quick-info-title,
    .e-quick-popup-wrapper .e-event-popup .e-popup-header .e-event-header.e-popup-header .quick-info-header-content .duration-text,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item label,
    .e-quick-popup-wrapper .e-event-popup .e-popup-content .quick-info-content .event-content .e-content-item .e-content,
    .unplanned-events-container .title-container .title-text,
    .unplanned-events-container #list-container .events-list .event-label,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-subject,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-duration .duration-value,
    .unplanned-events-container #list-container .event-management-treeview .e-text-content .e-list-text .unplanned-item-capacity .capacity-value {
        line-height: 20px;
    }

    /*  preventing the visibility of the icon while drag and drop*/
    .event-management-treeview .e-icon-expandable,
    .event-management-treeview .e-sibling {
        display: none;
    }

    /* properly setting the icon based on the theme change */
    .material3 .e-header-popup .e-calendar {
        background-color: white;
    }

    .highcontrast .e-hide-unplanned-events::before,
    .highcontrast .e-show-unplanned-events::before {
        content: '\eb8b';
    }

    .highcontrast .unplanned-item-duration .duration-icon::before {
        content: '\e316' !important;
    }

    .highcontrast .unplanned-item-capacity .capacity-icon::before,
    .highcontrast .e-capacity-icon::before {
        content: '\e425' !important;
    }

    .highcontrast .custom-icon::before {
        content: '\e615' !important;
    }

    .highcontrast .e-audience-icon::before {
        content: '\e425' !important;
    }

    /* style for preventing the cursor block for drag and drop */
    .e-prevent-select {
        cursor: default !important;
    }

    /* mobile view */
    @@media (max-width: 550px) {
        .event-management-wrapper {
            display: block;
            height: auto;
            overflow: hidden;
            .schedule-event-management {
                margin-right: 0;
                margin-bottom: 10px;
                width: 100%;
                height: 450px;
                .e-resource-tree-popup .e-list-item {
                    .e-fullrow,
                    .e-text-content {
                        height: 82px;
                    }
                }
                .e-schedule-toolbar-container {
                    .room-filter {
                        display: none;
                    }
                }
            }
            .unplanned-events-container {
                border-left: 1px solid #D1D1D1;
                width: 100%;
                height: auto;
                position: relative;
                overflow: visible;
                .event-management-treeview.e-control {
                    height: 300px;
                }
            }
        }
        .e-drag-item.event-management-treeview {
            position: fixed !important;
            max-width: 80%;
            z-index: 9999;
        }
    }
</style>