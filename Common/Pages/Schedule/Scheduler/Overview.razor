@page "/scheduler/overview"
@inject NavigationManager UriHelper

@using System.Globalization
@using System.IO
@using System.Timers
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.SplitButtons
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the overview of Blazor Scheduler with its overall features. Use the toolbar buttons to play with Scheduler functionalities.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor Scheduler is a fully-featured calendar component for managing appointments with multiple resources.</p>
    <p>In this demo, all the available views in Blazor Scheduler are showcased with the major features like resource grouping, tooltip, row auto height, timescale, templates for quick info popups and date header. </p>
    <p>Also, you can change the first day of the week, working days and hours, start and end hour, slot interval and durations, time format of the Scheduler, and show or hide the week numbers with the <b>Settings</b> options available in the toolbar.</p>
</ActionDescription>

<div class="control-section">
    <div class="schedule-overview">
        <SfAppBar ColorMode="AppBarColor.Primary">
            <span class="time e-icons e-time-zone"></span>
            <span id="timezoneBtn" class="time ">@TimezoneData.Name</span>
            <span class="time e-icons e-clock"></span>
            <span id="timeBtn" class="time current-time">@SystemTime.ToString("hh:mm:ss tt")</span>
            <AppBarSpacer></AppBarSpacer>
            <SfButton IconCss="e-icons e-print" CssClass="title-bar-btn e-inherit" id="printBtn" OnClick="OnPrintClick">Print</SfButton>
            <div class="control-panel">
                <SfUploader AllowedExtensions=".ics" CssClass="calendar-import import-button" AllowMultiple="false">
                    <UploaderButtons Browse="Import"></UploaderButtons>
                    <UploaderEvents ValueChange="OnFileUploadChange"></UploaderEvents>
                </SfUploader>
            </div>
            <div class="control-panel calendar-export">
                <SfDropDownButton Content="Export" class="title-bar-btn e-inherit">
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="iCalendar" IconCss="e-icons e-export"></DropDownMenuItem>
                        <DropDownMenuItem Text="Excel" IconCss="e-icons e-export-excel"></DropDownMenuItem>
                    </DropDownMenuItems>
                    <DropDownButtonEvents ItemSelected="OnExportClick"></DropDownButtonEvents>
                </SfDropDownButton>
            </div>
            <SfButton IconCss="e-icons e-settings" CssClass="overview-toolbar-settings e-inherit" IconPosition="IconPosition.Top" OnClick="OnSettingsClick"></SfButton>
        </SfAppBar>
        <SfToolbar Width="auto" CssClass="overview-toolbar" Height="70px" OverflowMode="OverflowMode.Scrollable" ScrollStep="100">
            <ToolbarItems>
                <ToolbarItem PrefixIcon="e-icons e-plus" TooltipText="New Event" Text="New Event" OnClick="OnNewEventAdd" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-repeat" TooltipText="New Recurring Event" Text="New Recurring Event" OnClick="OnNewRecurringEventAdd" TabIndex=0></ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-day" TooltipText="Day" Text="Day" OnClick="OnDayView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-week" TooltipText="Week" Text="Week" OnClick="OnWeekView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-week" TooltipText="WorkWeek" Text="WorkWeek" OnClick="OnWorkWeekView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-month" TooltipText="Month" Text="Month" OnClick="OnMonthView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-month" TooltipText="Year" Text="Year" OnClick="OnYearView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-agenda-date-range" TooltipText="Agenda" Text="Agenda" OnClick="OnAgendaView" TabIndex=0></ToolbarItem>
                <ToolbarItem TooltipText="Timeline Views" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox @ref="ViewRef" HtmlAttributes="@htmlAttribute" TChecked="bool" ValueChange="OnViewChange"></SfCheckBox>
                                </div>
                                <div class="text-child">Timeline Views</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Grouping" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox Checked="@EnableGroup" TChecked="bool" ValueChange="OnGroupChange" title="Grouping Resource"></SfCheckBox>
                                </div>
                                <div class="text-child">Grouping</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Tooltip="Auto Fit Rows" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox Checked="@isRowAutoHeight" title="Auto fit rows in month and timeline views" Disabled="@(this.CurrentView == View.Day || this.CurrentView == View.Week || this.CurrentView == View.WorkWeek || this.CurrentView == View.Year || CurrentView == View.Agenda)" TChecked="bool" ValueChange="OnRowAutoHeightChange"></SfCheckBox>
                                </div>
                                <div class="text-child">Auto Fit Rows</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem TooltipText="Time Slots" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox Checked="@EnableTimeScale" title="Time Slots" Disabled="@(CurrentView == View.Agenda || CurrentView == View.Month || CurrentView == View.Year || CurrentView == View.TimelineMonth || CurrentView == View.TimelineYear)" TChecked="bool" ValueChange="OnTimeScaleChange"></SfCheckBox>
                                </div>
                                <div class="text-child">Time Slots</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
            <ToolbarEvents Created="OnToolbarCreated"></ToolbarEvents>
        </SfToolbar>
        <div class="overview-content">
            <div class="left-panel">
                <div class="overview-scheduler">
                    <SfSchedule @ref="ScheduleRef" TValue="AppointmentData" CssClass="schedule-overview" Width="100%" Height="100%" @bind-SelectedDate="@SelectedDate" @bind-CurrentView="@CurrentView" Timezone="@TimezoneData.Value" FirstDayOfWeek="@FirstDayOfWeek" ShowWeekNumber="@ShowWeekNumber" WeekRule="@WeekRule" WorkDays="@WorkDays" StartHour="@DayStartHour" EndHour="@DayEndHour" EnableAutoRowHeight="@isRowAutoHeight" TimeFormat="@TimeFormat">
                        <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
                        <ScheduleResources>
                            <ScheduleResource TValue="int[]" TItem="CalendarData" DataSource="@Calendars" Query="@ResourceQuery" Field="CalendarId" Title="Calendars" Name="Calendars" TextField="CalendarName" IdField="CalendarId" ColorField="CalendarColor" AllowMultiple="true"></ScheduleResource>
                        </ScheduleResources>
                        <ScheduleViews>
                            <ScheduleView Option="View.Day"></ScheduleView>
                            <ScheduleView Option="View.Week"></ScheduleView>
                            <ScheduleView Option="View.WorkWeek"></ScheduleView>
                            <ScheduleView Option="View.Month"></ScheduleView>
                            <ScheduleView Option="View.Year"></ScheduleView>
                            <ScheduleView Option="View.Agenda"></ScheduleView>
                            <ScheduleView Option="View.TimelineDay"></ScheduleView>
                            <ScheduleView Option="View.TimelineWeek"></ScheduleView>
                            <ScheduleView Option="View.TimelineWorkWeek"></ScheduleView>
                            <ScheduleView Option="View.TimelineMonth"></ScheduleView>
                            <ScheduleView Option="View.TimelineYear"></ScheduleView>
                        </ScheduleViews>
                        <ScheduleTemplates>
                            <DateHeaderTemplate>
                                <div class="date-text">@(((context as TemplateContext).Date).ToString("dd", CultureInfo.InvariantCulture))</div>
                                <div class="date-text">@(((context as TemplateContext).Date).ToString("ddd", CultureInfo.InvariantCulture))</div>
                                @{
                                    @switch ((int)(context as TemplateContext).Date.DayOfWeek)
                                    {
                                        case 0:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-clear.svg")" />
                                            break;
                                        case 1:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-clouds.svg")" />
                                            break;
                                        case 2:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-rain.svg")" />
                                            break;
                                        case 3:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-clouds.svg")" />
                                            break;
                                        case 4:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-rain.svg")" />
                                            break;
                                        case 5:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-clear.svg")" />
                                            break;
                                        case 6:
                                            <img class="weather-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/scheduler/weather-clouds.svg")" />
                                            break;
                                    }
                                }
                            </DateHeaderTemplate>
                        </ScheduleTemplates>
                        <ScheduleTimeScale Enable="@EnableTimeScale" Interval="@SlotInterval" SlotCount="@SlotCount"></ScheduleTimeScale>
                        <ScheduleWorkHours Start="@WorkStartHour" End="@WorkEndHour"></ScheduleWorkHours>
                        <ScheduleEventSettings TValue="@AppointmentData" DataSource="@DataSource" EnableTooltip="@TooltipEnable"></ScheduleEventSettings>
                    </SfSchedule>
                    <SfContextMenu TValue="MenuItem" CssClass="schedule-context-menu" Target=".e-schedule">
                        <MenuItems>
                            <MenuItem Text="New Event" IconCss="e-icons e-plus" Id="Add" Hidden="@isCell"></MenuItem>
                            <MenuItem Text="New Recurring Event" IconCss="e-icons e-repeat" Hidden="@isCell" Id="AddRecurrence"></MenuItem>
                            <MenuItem Text="Today" IconCss="e-icons e-timeline-today" Id="Today" Hidden="@isCell"></MenuItem>
                            <MenuItem Text="Edit Event" IconCss="e-icons e-edit" Id="Save" Hidden="@isEvent"></MenuItem>
                            <MenuItem Text="Edit Event" IconCss="e-icons e-edit" Id="EditRecurrenceEvent" Hidden="@isRecurrence">
                                <MenuItems>
                                    <MenuItem Text="Edit Occurrence" Id="EditOccurrence"></MenuItem>
                                    <MenuItem Text="Edit Series" Id="EditSeries"></MenuItem>
                                </MenuItems>
                            </MenuItem>
                            <MenuItem Text="Delete Event" IconCss="e-icons e-trash" Id="Delete" Hidden="@isEvent"></MenuItem>
                            <MenuItem Text="Delete Event" IconCss="e-icons e-trash" Id="DeleteRecurrenceEvent" Hidden="@isRecurrence">
                                <MenuItems>
                                    <MenuItem Text="Delete Occurrence" Id="DeleteOccurrence"></MenuItem>
                                    <MenuItem Text="Delete Series" Id="DeleteSeries"></MenuItem>
                                </MenuItems>
                            </MenuItem>
                        </MenuItems>
                        <MenuEvents TValue="MenuItem" OnOpen="OnOpen" ItemSelected="OnItemSelected"></MenuEvents>
                    </SfContextMenu>
                </div>
            </div>
            <div class="right-panel @((this.IsSettingsVisible ? "" : "hide"))">
                <div class="control-panel e-css">
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Calendar</label>
                        </div>
                        <div class="col-right">
                            <SfMultiSelect @ref="ResourceRef" TValue="int[]" TItem="CalendarData" CssClass="schedule-resource" Mode="@VisualMode.CheckBox" DataSource="@Calendars" EnableSelectionOrder="false" ShowDropDownIcon="true" ShowClearButton="false" @bind-Value="@SelectedResource">
                                <MultiSelectFieldSettings Text="CalendarName" Value="CalendarId"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="CalendarData" ValueChange="OnResourceChange"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">First Day of Week</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="WeekDays" TValue="int" @bind-Value="@FirstDayOfWeek" DataSource="@WeekCollection">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" ValueChange="OnWeekDaysChange" TItem="WeekDays"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work week</label>
                        </div>
                        <div class="col-right">
                            <SfMultiSelect TValue="int[]" TItem="WeekDays" CssClass="schedule-workweek" Mode="@VisualMode.CheckBox" DataSource="@WeekCollection" EnableSelectionOrder="false" ShowDropDownIcon="true" @bind-Value="@WorkDays">
                                <MultiSelectFieldSettings Text="Name" Value="Value"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="WeekDays" ValueChange="OnWorkDaysChange"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Day Start Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@ScheduleStartHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnDayStartHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Day End Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@ScheduleEndHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnDayEndHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work Start Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@StartWorkHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnWorkStartHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work End Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@EndWorkHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnWorkEndHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Slot Duration</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="SlotData" TValue="int" PopupHeight="150px" DataSource="@SlotIntervalDataSource" @bind-Value="@SlotInterval">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="SlotData" TValue="int" ValueChange="OnSlotIntervalChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Slot Interval</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="SlotData" TValue="int" PopupHeight="150px" DataSource="@SlotCountDataSource" @bind-Value="@SlotCount">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Time Format</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="TimeFormatData" TValue="string" PopupHeight="150px" DataSource="@TimeFormatDataSource" @bind-Value="@TimeFormat">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Week Numbers</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="WeekNumbers" TValue="string" PopupHeight="150px" DataSource="@WeekNumbersData" @bind-Value="@WeeklyRule">
                                <DropDownListEvents TItem="WeekNumbers" TValue="string" ValueChange="OnWeekNumberChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Tooltip</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="Tooltip" TValue="string" PopupHeight="150px" DataSource="@TooltipData" @bind-Value="@Tooltipvalue">
                                <DropDownListEvents TItem="Tooltip" TValue="string" ValueChange="OnTooltipChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SfTextBox SubjectRef;
    private SfCheckBox<bool> ViewRef;
    private SfTextBox DescriptionRef;
    private SfMultiSelect<int[], CalendarData> ResourceRef;
    private SfSchedule<AppointmentData> ScheduleRef;
    private SfDropDownList<int, CalendarData> CalendarRef;
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsReadonly { get; set; }
        public int CalendarId { get; set; }
        public int? RecurrenceID { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }

        public AppointmentData() { }

        public AppointmentData(int Id, string Subject, DateTime StartTime, DateTime EndTime, string Location, string Description, bool IsAllDay, bool IsReadonly, int CalendarId, int RecurrenceID, string RecurrenceRule, string RecurrenceException)
        {
            this.Id = Id;
            this.Subject = Subject;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.Location = Location;
            this.Description = Description;
            this.IsAllDay = IsAllDay;
            this.IsReadonly = IsReadonly;
            this.CalendarId = CalendarId;
            this.RecurrenceID = RecurrenceID;
            this.RecurrenceRule = RecurrenceRule;
            this.RecurrenceException = RecurrenceException;
        }

        public List<AppointmentData> GetEvents()
        {
            List<AppointmentData> EventData = new List<AppointmentData>();
            DateTime YearStart = new DateTime(DateTime.Now.Year, 1, 1);
            DateTime YearEnd = new DateTime(DateTime.Now.Year, 12, 31);
            string[] EventSubjects = new string[]
            {
                "Bering Sea Gold", "Technology", "Maintenance", "Meeting", "Travelling", "Annual Conference", "Birthday Celebration", "Farewell Celebration",
                "Wedding Anniversary", "Alaska: The Last Frontier", "Deadliest Catch", "Sports Day", "MoonShiners", "Close Encounters", "HighWay Thru Hell",
                "Daily Planet", "Cash Cab", "Basketball Practice", "Rugby Match", "Guitar Class", "Music Lessons", "Doctor checkup", "Brazil - Mexico",
                "Opening ceremony", "Final presentation"
            };
            DateTime CurrentDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Sunday);
            DateTime Start = new DateTime(CurrentDate.Year, CurrentDate.Month, CurrentDate.Day, 10, 0, 0);
            DateTime End = new DateTime(CurrentDate.Year, CurrentDate.Month, CurrentDate.Day, 11, 30, 0);
            EventData.Add(new AppointmentData()
            {
                Id = 1,
                Subject = "Stand-Up Meeting",
                StartTime = Start.ToLocalTime(),
                EndTime = End.ToLocalTime(),
                Location = "",
                Description = "Event Scheduled",
                RecurrenceRule = "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1;COUNT=10;",
                IsAllDay = false,
                IsReadonly = false,
                CalendarId = 1
            });
            for (int a = 0, id = 2; a < 500; a++)
            {
                Random random = new Random();
                int Month = random.Next(1, 12);
                int Date = random.Next(1, 28);
                int Hour = random.Next(1, 24);
                int Minutes = random.Next(1, 60);
                DateTime start = new DateTime(YearStart.Year, Month, Date, Hour, Minutes, 0);
                DateTime end = new DateTime(start.Ticks).AddHours(2);
                DateTime StartDate = new DateTime(start.Ticks);
                DateTime EndDate = new DateTime(end.Ticks);
                AppointmentData eventDatas = new AppointmentData()
                {
                    Id = id,
                    Subject = EventSubjects[random.Next(1, 25)],
                    StartTime = StartDate,
                    EndTime = EndDate,
                    Location = "",
                    Description = "Event Scheduled",
                    IsAllDay = id % 10 == 0,
                    IsReadonly = EndDate < DateTime.Now,
                    CalendarId = (a % 4) + 1
                };
                EventData.Add(eventDatas);
                id++;
            }

            return EventData;
        }
    }
    public class CalendarData
    {
        public string CalendarName { get; set; }
        public string CalendarColor { get; set; }
        public int CalendarId { get; set; }
    }
    public class WeekDays
    {
        public string Name { get; set; }
        public int Value { get; set; }
    }
    public class SlotData : WeekDays { }
    public class TimeFormatData
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class WeekNumbers
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class Tooltip
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class Timezone
    {
        public string Name { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
    }

    private List<AppointmentData> DataSource = new AppointmentData().GetEvents();
    public AppointmentData EventData { get; set; }
    public CellClickEventArgs CellData { get; set; }
    private bool isCell { get; set; }
    private bool isEvent { get; set; }
    private bool isRecurrence { get; set; }
    private int SlotCount { get; set; } = 2;
    private int SlotInterval { get; set; } = 60;
    private int FirstDayOfWeek { get; set; } = 0;
    private bool EnableGroup { get; set; } = true;
    private bool TooltipEnable { get; set; } = false;
    private bool isRowAutoHeight { get; set; } = false;
    private bool EnableTimeScale { get; set; } = true;
    private bool ShowWeekNumber { get; set; } = false;
    private bool isQuickInfoCreated { get; set; } = false;
    private CalendarWeekRule WeekRule { get; set; } = CalendarWeekRule.FirstDay;
    private string WeeklyRule { get; set; } = "Off";
    private string Tooltipvalue { get; set; } = "Off";
    private View CurrentView { get; set; } = View.Week;
    private string SelectedView { get; set; } = "Week";
    private string DayStartHour { get; set; } = "00:00";
    private string DayEndHour { get; set; } = "24:00";
    private string WorkStartHour { get; set; } = "09:00";
    private string WorkEndHour { get; set; } = "18:00";
    private string TimeFormat { get; set; } = "hh:mm tt";
    private bool IsSettingsVisible { get; set; } = false;
    public string[] GroupData = new string[] { "Calendars" };
    private DateTime SystemTime { get; set; } = DateTime.UtcNow;
    private DateTime SelectedDate { get; set; } = DateTime.UtcNow;
    private DateTime? StartWorkHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0);
    private DateTime? EndWorkHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 18, 0, 0);
    private DateTime? ScheduleStartHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
    private DateTime? ScheduleEndHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59);
    private int[] SelectedResource { get; set; } = new int[] { 1 };
    private int[] WorkDays { get; set; } = new int[] { 1, 2, 3, 4, 5 };
    private Timezone TimezoneData { get; set; } = new Timezone() { Name = "UTC+00:00", Key = "UTC", Value = "UTC" };
    private Query ResourceQuery { get; set; } = new Query().Where(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = 1 });

    public List<CalendarData> Calendars { get; set; } = new List<CalendarData>
    {
        new CalendarData { CalendarName = "My Calendar", CalendarId = 1, CalendarColor = "#c43081" },
        new CalendarData { CalendarName = "Company", CalendarId = 2, CalendarColor = "#ff7f50" },
        new CalendarData { CalendarName = "Birthday", CalendarId = 3, CalendarColor = "#AF27CD" },
        new CalendarData { CalendarName = "Holiday", CalendarId = 4, CalendarColor = "#808000" }
    };

    private List<SlotData> SlotIntervalDataSource = new List<SlotData>()
    {
        new SlotData() { Name = "1 hour", Value = 60 },
        new SlotData() { Name = "1.5 hours", Value = 90 },
        new SlotData() { Name = "2 hours", Value = 120 },
        new SlotData() { Name = "2.5 hours", Value = 150 },
        new SlotData() { Name = "3 hours", Value = 180 },
        new SlotData() { Name = "3.5 hours", Value = 210 },
        new SlotData() { Name = "4 hours", Value = 240 },
        new SlotData() { Name = "4.5 hours", Value = 270 },
        new SlotData() { Name = "5 hours", Value = 300 },
        new SlotData() { Name = "5.5 hours", Value = 330 },
        new SlotData() { Name = "6 hours", Value = 360 },
        new SlotData() { Name = "6.5 hours", Value = 390 },
        new SlotData() { Name = "7 hours", Value = 420 },
        new SlotData() { Name = "7.5 hours", Value = 450 },
        new SlotData() { Name = "8 hours", Value = 480 },
        new SlotData() { Name = "8.5 hours", Value = 510 },
        new SlotData() { Name = "9 hours", Value = 540 },
        new SlotData() { Name = "9.5 hours", Value = 570 },
        new SlotData() { Name = "10 hours", Value = 600 },
        new SlotData() { Name = "10.5 hours", Value = 630 },
        new SlotData() { Name = "11 hours", Value = 660 },
        new SlotData() { Name = "11.5 hours", Value = 690 },
        new SlotData() { Name = "12 hours", Value = 720 }
    };

    private List<SlotData> SlotCountDataSource = new List<SlotData>()
    {
        new SlotData() { Name = "1", Value = 1 },
        new SlotData() { Name = "2", Value = 2 },
        new SlotData() { Name = "3", Value = 3 },
        new SlotData() { Name = "4", Value = 4 },
        new SlotData() { Name = "5", Value = 5 },
        new SlotData() { Name = "6", Value = 6 },
        new SlotData() { Name = "7", Value = 7 },
        new SlotData() { Name = "8", Value = 8 },
        new SlotData() { Name = "9", Value = 9 },
        new SlotData() { Name = "10", Value = 10 }
    };

    private List<TimeFormatData> TimeFormatDataSource = new List<TimeFormatData>()
    {
        new TimeFormatData() { Name = "12 hours", Value = "hh:mm tt" },
        new TimeFormatData() { Name = "24 hours", Value = "HH:mm" }
    };

    private List<WeekNumbers> WeekNumbersData = new List<WeekNumbers>()
    {
        new WeekNumbers() { Name = "Off", Value = "Off" },
        new WeekNumbers() { Name = "First Day Of Year", Value = "FirstDay" },
        new WeekNumbers() { Name = "First Full Week", Value = "FirstFullWeek" },
        new WeekNumbers() { Name = "First Four-Day Week", Value = "FirstFourDayWeek" }
    };

    private List<Tooltip> TooltipData = new List<Tooltip>()
    {
        new Tooltip() { Name = "Off", Value = "Off" },
        new Tooltip() { Name = "On", Value = "On" }
    };
    private List<string> ScheduleViews { get; set; } = new List<string>() { "Day", "Week", "WorkWeek", "Month", "Year", "Agenda", "TimelineDay", "TimelineWeek", "TimelineWorkWeek", "TimelineMonth", "TimelineYear" };

    private List<WeekDays> WeekCollection { get; set; } = new List<WeekDays>()
    {
        new WeekDays() { Name = "Sunday", Value = 0 },
        new WeekDays() { Name = "Monday", Value = 1 },
        new WeekDays() { Name = "Tuesday", Value = 2 },
        new WeekDays() { Name = "Wednesday", Value = 3 },
        new WeekDays() { Name = "Thursday", Value = 4 },
        new WeekDays() { Name = "Friday", Value = 5 },
        new WeekDays() { Name = "Saturday", Value = 6 }
    };

    private List<Timezone> TimezoneCollection { get; set; } = new List<Timezone>()
    {
        new Timezone() { Name = "UTC-08:00", Key = "Pacific Standard Time", Value = "America/Los_Angeles" },
        new Timezone() { Name = "UTC-07:00", Key = "Mountain Standard Time", Value = "America/Denver" },
        new Timezone() { Name = "UTC-06:00", Key = "Central Standard Time", Value = "America/Chicago" },
        new Timezone() { Name = "UTC-05:00", Key = "Eastern Standard Time", Value = "America/New_York" },
        new Timezone() { Name = "UTC-04:00", Key = "Atlantic Standard Time", Value = "Atlantic/Bermuda" },
        new Timezone() { Name = "UTC-03:00", Key = "Greenland Standard Time", Value = "Atlantic/Stanley" },
        new Timezone() { Name = "UTC-02:00", Key = "Mid-Atlantic Standard Time", Value = "America/Sao_Paulo" },
        new Timezone() { Name = "UTC-01:00", Key = "Cape Verde Standard Time", Value = "Atlantic/Cape_Verde" },
        new Timezone() { Name = "UTC+00:00", Key = "UTC", Value = "UTC" },
        new Timezone() { Name = "UTC+01:00", Key = "Romance Standard Time", Value = "Europe/Paris" },
        new Timezone() { Name = "UTC+03:00", Key = "Russian Standard Time", Value = "Europe/Moscow" },
        new Timezone() { Name = "UTC+05:30", Key = "India Standard Time", Value = "Asia/Kolkata" },
        new Timezone() { Name = "UTC+08:00", Key = "W. Australia Standard Time", Value = "Australia/Perth" },
        new Timezone() { Name = "UTC+10:00", Key = "E. Australia Standard Time", Value = "Australia/Brisbane" },
        new Timezone() { Name = "UTC+10:30", Key = "Lord Howe Standard Time", Value = "Australia/Adelaide" },
        new Timezone() { Name = "UTC+13:00", Key = "New Zealand Standard Time", Value = "Pacific/Auckland" }
    };

    private Dictionary<string, object> htmlAttribute = new Dictionary<string, object>()
    {
        { "tabindex", "-1" }
    };

    private void OnViewChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        switch (this.CurrentView)
        {
            case View.Day:
            case View.TimelineDay:
                this.CurrentView = args.Checked ? View.TimelineDay : View.Day;
                break;
            case View.Week:
            case View.TimelineWeek:
                this.CurrentView = args.Checked ? View.TimelineWeek : View.Week;
                break;
            case View.WorkWeek:
            case View.TimelineWorkWeek:
                this.CurrentView = args.Checked ? View.TimelineWorkWeek : View.WorkWeek;
                break;
            case View.Month:
            case View.TimelineMonth:
                this.CurrentView = args.Checked ? View.TimelineMonth : View.Month;
                break;
            case View.Year:
            case View.TimelineYear:
                this.CurrentView = args.Checked ? View.TimelineYear : View.Year;
                break;
            case View.Agenda:
                this.CurrentView = View.Agenda;
                break;
        }
    }

    private async void OnNewEventAdd()
    {
        DateTime Date = this.ScheduleRef.SelectedDate;
        DateTime Start = new DateTime(Date.Year, Date.Month, Date.Day, DateTime.Now.Hour, 0, 0);
        AppointmentData eventData = new AppointmentData
        {
            Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
            Subject = "Add title",
            StartTime = Start,
            EndTime = Start.AddHours(1),
            Location = "",
            Description = "",
            IsAllDay = false,
            CalendarId = this.ResourceRef.Value[0]
        };
        await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
    }

    private async void OnNewRecurringEventAdd()
    {
        DateTime Date = this.ScheduleRef.SelectedDate;
        DateTime Start = new DateTime(Date.Year, Date.Month, Date.Day, DateTime.Now.Hour, 0, 0);
        AppointmentData eventData = new AppointmentData
        {
            Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
            Subject = "Add title",
            StartTime = Start,
            EndTime = Start.AddHours(1),
            Location = "",
            Description = "",
            IsAllDay = false,
            CalendarId = this.ResourceRef.Value[0],
            RecurrenceRule = "FREQ=DAILY;INTERVAL=1;"
        };
        await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
    }

    private void OnDayView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineDay : View.Day;
    }

    private void OnWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWeek : View.Week;
    }

    private void OnWorkWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWorkWeek : View.WorkWeek;
    }

    private void OnMonthView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineMonth : View.Month;
    }

    private void OnYearView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineYear : View.Year;
    }

    private void OnAgendaView()
    {
        this.CurrentView = View.Agenda;
    }

    private async void OnSettingsClick()
    {
        this.IsSettingsVisible = !this.IsSettingsVisible;
        StateHasChanged();
        await this.ScheduleRef.RefreshEventsAsync();
    }

    private string GetEventDetails(AppointmentData data)
    {
        return data.StartTime.ToString("dddd dd, MMMM yyyy", CultureInfo.InvariantCulture) + " (" + data.StartTime.ToString(TimeFormat, CultureInfo.InvariantCulture) + "-" + data.EndTime.ToString(TimeFormat, CultureInfo.InvariantCulture) + ")";
    }

    private string GetHeaderStyles(AppointmentData data)
    {
        if (data.Id == default(int))
        {
            return "align-items: center ; color: #919191;";
        }
        else
        {
            CalendarData resData = GetResourceData(data);
            return "background:" + (resData == null ? "#007bff" : resData.CalendarColor) + "; color: #FFFFFF;";
        }
    }

    private async Task SetFocus()
    {
        if (isQuickInfoCreated)
        {
            await Task.Delay(20);
            await SubjectRef.FocusAsync();
        }
    }
    private async Task OnQuickInfoSubjectCreated()
    {
        await Task.Yield();
        await SubjectRef.FocusAsync();
        isQuickInfoCreated = true;
    }

    public void OnToolbarCreated()
    {
        Timer timer = new Timer(1000);
        timer.Elapsed += new ElapsedEventHandler((object sender, ElapsedEventArgs e) =>
        {
            string key = this.TimezoneData.Key ?? "UTC";
            SystemTime = this.TimeConvertor(key);
            ScheduleRef?.PreventRender();
            InvokeAsync(() => { StateHasChanged(); });
        });
        timer.Enabled = true;
    }

    private CalendarData GetResourceData(AppointmentData data)
    {
        if (data.CalendarId != 0)
        {
            int resourceId = SelectedResource.Where(item => item == data.CalendarId).FirstOrDefault();
            CalendarData resourceData = this.Calendars.Where(item => item.CalendarId == resourceId).FirstOrDefault();
            return resourceData;
        }
        return null;
    }

    private DateTime TimeConvertor(string TimeZoneId)
    {
        return TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneId));
    }

    private async void OnMoreDetailsClick(MouseEventArgs args, AppointmentData data, bool isEventData)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        if (isEventData == false)
        {
            AppointmentData eventData = new AppointmentData
            {
                Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                Subject = SubjectRef.Value ?? "",
                StartTime = data.StartTime,
                EndTime = data.EndTime,
                Location = data.Location,
                Description = DescriptionRef.Value ?? "",
                IsAllDay = data.IsAllDay,
                CalendarId = CalendarRef.Value,
                RecurrenceException = data.RecurrenceException,
                RecurrenceID = data.RecurrenceID,
                RecurrenceRule = data.RecurrenceRule
            };
            await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
        }
        else
        {
            AppointmentData eventData = new AppointmentData
            {
                Id = data.Id,
                Subject = data.Subject,
                Location = data.Location,
                Description = data.Description,
                StartTime = data.StartTime,
                EndTime = data.EndTime,
                IsAllDay = data.IsAllDay,
                CalendarId = data.CalendarId,
                RecurrenceException = data.RecurrenceException,
                RecurrenceID = data.RecurrenceID,
                RecurrenceRule = data.RecurrenceRule
            };
            if (!string.IsNullOrEmpty(eventData.RecurrenceRule))
            {
                await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.EditOccurrence);
            }
            else
            {
                await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Save);
            }
        }
    }

    private async Task OnDelete(AppointmentData data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        await ScheduleRef.DeleteEventAsync(data, !string.IsNullOrEmpty(data.RecurrenceRule) ? CurrentAction.DeleteOccurrence : CurrentAction.Delete);
    }

    private async Task OnAdd(MouseEventArgs args, AppointmentData data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        AppointmentData cloneData = new AppointmentData
        {
            Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
            Subject = SubjectRef.Value ?? "Add title",
            Description = DescriptionRef.Value ?? "Add notes",
            StartTime = data.StartTime,
            EndTime = data.EndTime,
            CalendarId = CalendarRef.Value,
            Location = data.Location,
            IsAllDay = data.IsAllDay,
            RecurrenceException = data.RecurrenceException,
            RecurrenceID = data.RecurrenceID,
            RecurrenceRule = data.RecurrenceRule
        };
        await ScheduleRef.AddEventAsync(cloneData);
    }

    public void OnWeekNumberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, WeekNumbers> args)
    {
        switch (args.Value)
        {
            case "Off":
                this.ShowWeekNumber = false;
                break;
            case "FirstDay":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstDay;
                break;
            case "FirstFullWeek":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstFullWeek;
                break;
            case "FirstFourDayWeek":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstFourDayWeek;
                break;
        }
    }

    public void OnWeekDaysChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, WeekDays> args)
    {
        this.FirstDayOfWeek = args.Value;
    }

    public void OnWorkDaysChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if( args.Value != null)
        {
            this.WorkDays = args.Value;
        }
    }

    public void OnDayStartHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text) && args.Value != null)
        {
            this.DayStartHour = args.Text;
        }
    }

    public void OnDayEndHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text) && args.Value != null)
        {
            this.DayEndHour = args.Text;
        }
    }

    public void OnWorkStartHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text) && args.Value != null)
        {
            this.WorkStartHour = args.Text;
        }
    }

    public void OnWorkEndHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text) && args.Value != null)
        {
            this.WorkEndHour = args.Text;
        }
    }

    public void OnTimezoneChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Timezone> args)
    {
        this.TimezoneData = args.ItemData;
        var zones = TimeZoneInfo.GetSystemTimeZones();
        SystemTime = this.TimeConvertor(this.TimezoneData.Key);
    }

    public void OnResourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        WhereFilter predicate = new WhereFilter();
        if (args.Value != null)
        {
            predicate = new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 0 ? args.Value[0] : 0 }.
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 1 ? args.Value[1] : 0 }).
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 2 ? args.Value[2] : 0 }).
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 3 ? args.Value[3] : 0 });
        }
        else
        {
            predicate = new WhereFilter() { Field = "CalendarId", Operator = "equal", value = 1 };
        }
        this.ResourceQuery = new Query().Where(predicate);
    }

    public void OnGroupChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableGroup = args.Checked;
        this.GroupData = args.Checked ? new string[] { "Calendars" } : null;
    }

    public void OnTimeScaleChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableTimeScale = args.Checked;
    }

    public void OnRowAutoHeightChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.isRowAutoHeight = args.Checked;
    }

    public void OnTooltipChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Tooltip> args)
    {
        switch (args.Value)
        {
            case "Off":
                this.TooltipEnable = false;
                break;
            case "On":
                this.TooltipEnable = true;
                break;
        }
    }

    public void OnSlotIntervalChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, SlotData> args)
    {
        this.SlotInterval = args.Value;
    }

    public void OnSlotCountChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, SlotData> args)
    {
        this.SlotCount = args.Value;
    }

    public async Task OnFileUploadChange(UploadChangeEventArgs args)
    {
        foreach (Syncfusion.Blazor.Inputs.UploadFiles file in args.Files)
        {
            StreamReader reader = new StreamReader(file.File.OpenReadStream(long.MaxValue));
            string fileContent = await reader.ReadToEndAsync();
            await ScheduleRef.ImportICalendarAsync(fileContent);
        }
    }

    public async void OnPrintClick()
    {
        await ScheduleRef.PrintAsync();
    }

    public async void OnExportClick(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        if (args.Item.Text == "Excel")
        {
            List<AppointmentData> ExportDatas = new List<AppointmentData>();
            List<AppointmentData> EventCollection = await ScheduleRef.GetEventsAsync();
            List<Syncfusion.Blazor.Schedule.Resource> ResourceCollection = ScheduleRef.GetResourceCollections();
            List<CalendarData> ResourceData = ResourceCollection[0].DataSource as List<CalendarData>;
            for (int a = 0, count = ResourceData.Count(); a < count; a++)
            {
                List<AppointmentData> datas = EventCollection.Where(e => e.CalendarId == ResourceData[a].CalendarId).ToList();
                foreach (AppointmentData data in datas)
                {
                    ExportDatas.Add(data);
                }
            }
            ExportOptions Options = new ExportOptions()
                {
                    ExportType = ExcelFormat.Xlsx,
                    CustomData = ExportDatas,
                    Fields = new string[] { "Id", "Subject", "StartTime", "EndTime", "CalendarId" }
                };
            await ScheduleRef.ExportToExcelAsync(Options);
        }
        else
        {
            await ScheduleRef.ExportToICalendarAsync();
        }
    }

    public async Task OnOpen(BeforeOpenCloseMenuEventArgs<MenuItem> args)
    {
        if (args.ParentItem == null && args.Left != null && args.Top != null)
        {
            CellData = await ScheduleRef.GetTargetCellAsync((int)args.Left, (int)args.Top);
            await ScheduleRef.CloseQuickInfoPopupAsync();
            if (CellData == null)
            {
                EventData = await ScheduleRef.GetTargetEventAsync((int)args.Left, (int)args.Top);
                if (EventData.Id == 0)
                {
                    args.Cancel = true;
                }
                if (EventData.RecurrenceRule != null)
                {
                    isCell = isEvent = true;
                    isRecurrence = false;
                }
                else
                {
                    isCell = isRecurrence = true;
                    isEvent = false;
                }
            }
            else
            {
                isCell = false;
                isEvent = isRecurrence = true;
            }
        }
    }

    public async Task OnItemSelected(MenuEventArgs<MenuItem> args)
    {
        var SelectedMenuItem = args.Item.Id;
        var ActiveCellsData = await ScheduleRef.GetSelectedCellsAsync();
        if (ActiveCellsData == null)
        {
            ActiveCellsData = CellData;
        }
        switch (SelectedMenuItem)
        {
            case "Today":
                string key = this.TimezoneData.Key ?? "UTC";
                SelectedDate = this.TimeConvertor(key);
                break;
            case "Add":
                await ScheduleRef.OpenEditorAsync(ActiveCellsData, CurrentAction.Add);
                break;
            case "AddRecurrence":
                AppointmentData RecurrenceEventData = null;
                var resourceDetails = ScheduleRef.GetResourceByIndex(ActiveCellsData.GroupIndex);
                RecurrenceEventData = new AppointmentData
                {
                    Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                    StartTime = ActiveCellsData.StartTime,
                    EndTime = ActiveCellsData.EndTime,
                    CalendarId = resourceDetails.GroupData.CalendarId,
                    IsAllDay = ActiveCellsData.IsAllDay,
                    RecurrenceRule = "FREQ=DAILY;INTERVAL=1;"
                };
                await ScheduleRef.OpenEditorAsync(RecurrenceEventData, CurrentAction.Add);
                break;
            case "Save":
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.Save);
                break;
            case "EditOccurrence":
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.EditOccurrence);
                break;
            case "EditSeries":
                List<AppointmentData> Events = await ScheduleRef.GetEventsAsync();
                EventData = (AppointmentData)Events.Where(data => data.Id == EventData.RecurrenceID).FirstOrDefault();
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.EditSeries);
                break;
            case "Delete":
                await ScheduleRef.DeleteEventAsync(EventData);
                break;
            case "DeleteOccurrence":
                await ScheduleRef.DeleteEventAsync(EventData, CurrentAction.DeleteOccurrence);
                break;
            case "DeleteSeries":
                await ScheduleRef.DeleteEventAsync(EventData, CurrentAction.DeleteSeries);
                break;
        }
    }
}

<style>

    .tailwind .schedule-overview .overview-content .right-panel .control-panel,
    .tailwind3 .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #f3f4f6;
    }

    .tailwind-dark .schedule-overview .overview-content .right-panel .control-panel,
    .tailwind3-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #374151;
        color: #fff;
    }

    .material .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #fafafa;
    }

    .material-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #2a2a2a;
        color: #ffff;
    }

    .fabric .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #ffffff;
    }

    .fabric-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #333232;
        color: #fff;
    }

    .fluent .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #f3f2f1;
    }

    .fluent-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #252423;
        border-color: #c1c1c1;
        color: #fff;
    }

    .bootstrap .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #f8f8f8;
    }

    .bootstrap-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #2a2a2a;
        color: #fff;
    }

    .bootstrap5 .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #f8f9fa;
        color: #212529;
    }

    .bootstrap5-dark .schedule-overview .overview-content .right-panel .control-panel,
    .bootstrap5\.3-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #343a40;
        color: #fff;
    }

    .highcontrast .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #000000;
        color: #ffffff;
    }

    .material3 .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #f3f1f8;
    }

    .material3-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #2a2731;
    }

    .fluent2 .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #FFFFFF;
    }

    .fluent2-dark .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #292929;
    }

    .fluent2-highcontrast .schedule-overview .overview-content .right-panel .control-panel {
        background-color: #000000;
    }

    .schedule-overview .overview-toolbar.e-rtl + *{
        flex-direction: row-reverse;
    }

    .schedule-overview .overview-toolbar.e-toolbar {
        border-radius: 0;
    }

    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {
        display: inline-grid;
    }

    .material .schedule-overview .overview-toolbar.e-toolbar {
        border-style: solid;
    }

    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item:not(.e-separator) {
        padding: 3.5px;
    }

    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-icons.e-btn-icon,
    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-tbar-btn-text {
        line-height: 23px !important;
        min-height: 23px !important;
        padding: 0px !important;
    }

    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item.e-template {
        margin: 0 5px;
    }

    .schedule-overview .overview-content {
        display: flex;
    }

    .schedule-overview .overview-content .left-panel {
        height: 700px;
        width: 100%;
    }

    .schedule-overview .overview-content .right-panel {
        display: block;
        height: 700px;
        transform: translateX(0%);
        transition: transform .5s ease, width 500ms;
        width: 500px;
    }

    .schedule-overview .overview-content .right-panel.hide {
        display: none;
        transform: translateX(100%);
        transition: transform .5s ease, width 500ms;
        width: 0;
    }

    .schedule-overview .overview-content .right-panel .control-panel {
        background: #f8f9fa;
        font-size: 14px;
        height: 100%;
        overflow: auto;
        padding: 15px;
        width: 100%;
    }

    .schedule-overview .overview-content .right-panel .control-panel .col-row {
        display: flex;
        flex-wrap: wrap;
    }

    .schedule-overview .overview-content .right-panel .control-panel label {
        font-weight: 500;
    }

    .schedule-overview .overview-content .right-panel .control-panel .col-left {
        flex: 0 0 41.666667%;
        max-width: 41.666667%;
        margin-bottom: 1rem;
    }

    .schedule-overview .overview-content .right-panel .control-panel .col-right {
        flex: 0 0 58.333333%;
        max-width: 58.333333%;
        margin-bottom: 1rem;
    }

    .schedule-overview .overview-scheduler {
        height: 100%;
        width: 100%;
    }

    .schedule-overview .e-schedule-toolbar .e-views,
    .schedule-overview .e-schedule-toolbar .e-schedule-seperator,
    .schedule-workweek.e-multi-select-list-wrapper.e-checkbox .e-filter-parent,
    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-filter-parent {
        display: none;
    }

    .schedule-overview .e-timeline-view .e-resource-left-td,
    .schedule-overview .e-timeline-month-view .e-resource-left-td {
        width: 120px;
    }

    .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-list-parent:first-child li:first-child {
        background-image: none;
        opacity: .5;
        pointer-events: none;
        user-select: none;
    }

    .schedule-overview .calendar-import.e-upload {
        border: 0;
        padding-left: 0 !important;
    }

    .schedule-overview .calendar-import.e-upload .e-btn-icon {
        margin-left: initial;
    }

    .schedule-overview .calendar-import.e-upload .e-file-select-wrap {
        padding: 0
    }

            .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-select {
                display: none;
            }

    .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-drop,
    .calendar-import .e-upload-files {
        display: none;
    }

    .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {
        font-size: 14px;
    }

    .schedule-context-menu ul .e-menu-item .e-menu-icon {
        font-size: 12px;
    }

    .schedule-overview.e-schedule .e-vertical-view .e-header-cells,
    .schedule-overview.e-schedule .e-timeline-month-view .e-header-cells {
        padding: 0;
        text-align: center !important;
    }

    .schedule-overview.e-schedule .date-text {
        font-size: 14px;
    }

    .schedule-overview.e-schedule.e-device .date-text {
        font-size: 12px;
    }

    .schedule-overview.e-schedule .weather-image {
        width: 20px;
        height: 20px;
        background-position: center center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .schedule-overview.e-schedule .e-month-view .weather-image {
        float: right;
        margin: -20px 2px 0 0;
        width: 20px;
        height: 20px;
    }

    .fluent2 .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,
    .fluent2-dark .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame,
    .fluent2-highcontrast .schedule-overview .overview-toolbar .e-template .template .icon-child .e-checkbox-wrapper .e-frame {
        margin: 0;
    }

    .fluent .e-appbar .e-btn-icon.e-icons,
    .fluent-dark .e-appbar .e-btn-icon.e-icons {
        margin-top: -2px;
    }

    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame,
    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame {
        height: 17px;
        line-height: 17px;
        width: 17px;
    }

    .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check,
    .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check {
        font-size: 15px;
        line-height: 16px;
    }

    .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {
        padding-top: 2px;
        padding-bottom: 2px;
    }

    .time {
        display: flex;
        gap: 5px;
        align-items: center;
        padding: 0 5px;
    }

    .template {
        height: 46px;
        line-height: 23px;
    }

    .template .icon-child {
        text-align: center;
        height: 23px !important;
    }

    .template .text-child {
        font-size: 14px;
        line-height: 23px !important;
        font-weight: normal;
    }

    .import-button .e-css.e-btn {
        color: inherit;
        box-shadow: none;
        background: inherit;
        border-color: rgba(0, 0, 0, 0);
    }

    @@media (max-width: 481px) {
        .schedule-overview .overview-content .right-panel {
            position: absolute;
            width: 90%;
        }

        .import-button,
        #printBtn,
       .calendar-export {
            display: none;
        }

    }

    @@media (max-width: 1024px) {
        .schedule-overview .overview-content .right-panel .control-panel .col-row {
            display: initial;
        }

        .schedule-overview .overview-content .right-panel .control-panel .col-left {
            flex: initial;
            max-width: initial;
            margin-bottom: initial;
        }

        .schedule-overview .overview-content .right-panel .control-panel .col-right {
            flex: initial;
            max-width: initial;
        }
    }

</style>
