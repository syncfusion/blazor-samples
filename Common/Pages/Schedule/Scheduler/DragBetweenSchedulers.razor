@page "/scheduler/drag-between-schedulers"

@using System.Linq
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Navigations


@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


@*End:Hidden*@


<SampleDescription>
    <p>This example illustrates how to drag and drop events among multiple Scheduler. You can drag events from one Scheduler to another.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, <code>EventDragArea</code> is used to drag a range of events from one Scheduler to another.
        The <code>OnDragStop</code> event of the Scheduler is triggered when an item is dropped from one Scheduler onto another.
        Within the <code>OnDragStop</code> event, the <code>AddEventAsync</code> method is used to add the dropped event to the target Scheduler,
        and the <code>DeleteEventAsync</code> method is used to remove the dragged event from the source Scheduler.
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper  multiple-schedulers">
        <div class="schedule-container">
            <div class="steven-schedule">
                <SfSchedule TValue="ScheduleData.ResourceSampleData" @ref="StevenScheduleRef" Height="650px" EventDragArea=".content-wrapper" AllowResizing="true" @bind-SelectedDate="@StevenCurrentDate">
                    <ScheduleResources>
                        <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@StevenResourceData" Field="OwnerId" Title="Owner" Name="Owner" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
                    </ScheduleResources>
                    <ScheduleEvents TValue="ScheduleData.ResourceSampleData" OnDragStart="StevenScheduleDragStart" Dragged="@(args=> OnDragStop(args,StevenScheduleRef,JohnScheduleRef))"></ScheduleEvents>
                    <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
                    <ScheduleViews>
                        <ScheduleView Option="View.Month"></ScheduleView>
                    </ScheduleViews>
                    <ScheduleEventSettings DataSource="@StevenDatasource"></ScheduleEventSettings>
                </SfSchedule>
            </div>
            <div class="john-schedule">
                <SfSchedule TValue="ScheduleData.ResourceSampleData" @ref="JohnScheduleRef" Height="650px" EventDragArea=".content-wrapper" AllowResizing="true" @bind-SelectedDate="@JohnCurrentDate">
                    <ScheduleResources>
                        <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@JohnResourceData" Field="OwnerId" Title="Owner" Name="Owner" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
                    </ScheduleResources>
                    <ScheduleEvents TValue="ScheduleData.ResourceSampleData" OnDragStart="JohnScheduleDragStart" Dragged="@(args=> OnDragStop(args, JohnScheduleRef, StevenScheduleRef))"></ScheduleEvents>
                    <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
                    <ScheduleViews>
                        <ScheduleView Option="View.Month"></ScheduleView>
                    </ScheduleViews>
                    <ScheduleEventSettings DataSource="@JohnDatasource"></ScheduleEventSettings>
                </SfSchedule>
            </div>
        </div>
    </div>
</div>
<style>
    .content-wrapper.multiple-schedulers .schedule-container {
        display: flex;
    }

    .steven-schedule {
        margin-right: 10px;
    }

    @@media screen and (max-width: 768px) {
        .content-wrapper.multiple-schedulers .schedule-container {
            flex-direction: column;
        }

        .steven-schedule {
            margin-right: 0;
        }

        .john-schedule {
            margin-top: 10px;
        }
    }
</style>

@code {
    DateTime StevenCurrentDate = new DateTime(DateTime.Now.Year, 6, 1);
    DateTime JohnCurrentDate = new DateTime(DateTime.Now.Year, 6, 1);

    SfSchedule<ScheduleData.ResourceSampleData> StevenScheduleRef;
    SfSchedule<ScheduleData.ResourceSampleData> JohnScheduleRef;

    public List<ResourceData> StevenResourceData { get; set; }
    public List<ResourceData> JohnResourceData { get; set; }

    public List<ScheduleData.ResourceSampleData> StevenDatasource;
    public List<ScheduleData.ResourceSampleData> JohnDatasource;

    public bool StevenScheduleDrag = false;
    public bool JohnScheduleDrag = false;

    public string[] GroupData = new string[] { "Owner" };

    protected override void OnInitialized()
    {
        StevenResourceData = new List<ResourceData> {
        new ResourceData{ Text = "Steven", Id= 1, Color = "#7fa900" }
        };

        JohnResourceData = new List<ResourceData> {
        new ResourceData{ Text = "John", Id= 2, Color = "#ffb74d" }
        };

        StevenDatasource = new ScheduleData().GetResourceSampleData();
        JohnDatasource = new ScheduleData().GetResourceSampleData();
    }

    public async Task OnDragStop(DragEventArgs<ScheduleData.ResourceSampleData> args, SfSchedule<ScheduleData.ResourceSampleData> sourceSchedule, SfSchedule<ScheduleData.ResourceSampleData> targetSchedule)
    {
        CellClickEventArgs cellData = await targetSchedule.GetTargetCellAsync((int)args.MouseEventArgs.ClientX, (int)args.MouseEventArgs.ClientY);
        if (cellData != null)
        {
            var isStevenSchedule = await JSRuntime.InvokeAsync<bool>("isSelectorFromPoint", args.MouseEventArgs.ClientX, args.MouseEventArgs.ClientY, "steven-schedule");

            TimeSpan eventDuration = args.Data.EndTime - args.Data.StartTime;

            if (StevenScheduleDrag && !isStevenSchedule || JohnScheduleDrag && isStevenSchedule)
            {
                args.Cancel = true;
                var resourceData = targetSchedule.GetResourceByIndex(args.GroupIndex);
                int Id = new Random().Next(1000);
                DateTime newStartTime = new DateTime(cellData.StartTime.Year, cellData.StartTime.Month, cellData.StartTime.Day, args.StartTime.Hour, args.StartTime.Minute, args.StartTime.Second);

                ScheduleData.ResourceSampleData eventData = new ScheduleData.ResourceSampleData
                    {
                        Id = Id,
                        Subject = args.Data.Subject,
                        StartTime = newStartTime,
                        EndTime = newStartTime.Add(eventDuration),
                        IsAllDay = args.Data.IsAllDay,
                        Location = args.Data.Location,
                        Description = args.Data.Description,
                        StartTimezone = args.Data.StartTimezone,
                        EndTimezone = args.Data.EndTimezone,
                        OwnerId = resourceData.GroupData.OwnerId,
                    };
                if (args.Data.RecurrenceRule != null)
                {
                    await targetSchedule.AddEventAsync(eventData);
                }
                else
                {
                    await sourceSchedule.DeleteEventAsync(args.Data);
                    await targetSchedule.AddEventAsync(eventData);
                }
                StevenScheduleDrag = JohnScheduleDrag = false;
            }
            StevenScheduleDrag = JohnScheduleDrag = false;
            StateHasChanged();
        }
    }

    public void StevenScheduleDragStart()
    {
        StevenScheduleDrag = true;
    }

    public void JohnScheduleDragStart()
    {
        JohnScheduleDrag = true;
    }

    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
}
