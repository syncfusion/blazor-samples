@page "/scheduler/data-virtualization"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Schedule
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This example demonstrates the dynamic retrieval of events on each scroll within the Scheduler.
        As the content is scrolled, a data-loading request is dispatched to a remote data server.
        This request specifically aims to load appointments only for the resources currently being displayed.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, the lazy loading option is enabled in timeline month and month views to load 1000 resources, and data from remote service is bound to the Scheduler
        using the <code><a target="_blank" class="code" href="https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor~Syncfusion.Blazor.Data.SfDataManager_members.html">SfDataManager</a></code> component.
        To enable the on-demand loading of events in the Scheduler, set the <code><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Schedule.ScheduleView.html#Syncfusion_Blazor_Schedule_ScheduleView_EnableLazyLoading">EnableLazyloading</a></code> property to <code>true</code> within the view-specific settings.
    </p>
</ActionDescription>

<div class="control-section">
    <SfSchedule TValue="EventData" Width="100%" Height="700px" @bind-SelectedDate="@_currentDate" Readonly="true">
        <ScheduleTemplates>
            <ResourceHeaderTemplate>
                <div class='template-wrap'>
                    <div class="employee-name"><b>@(((context as TemplateContext).ResourceData as ResourceData).Name)</b></div>
                    <div class="employee-designation">@(((context as TemplateContext).ResourceData as ResourceData).Designation)</div>
                </div>
            </ResourceHeaderTemplate>
        </ScheduleTemplates>
        <ScheduleGroup EnableCompactView="false" Resources="@_groupData"></ScheduleGroup>
        <ScheduleResources>
            <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@ResourceDatasource" Field="ResourceId" Title="Resource" Name="Resources" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
        </ScheduleResources>
        <ScheduleEventSettings TValue="EventData">
            <SfDataManager Url="http://localhost:63028/api/VirtualEventData" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView MaxEventsPerRow="1" Option="View.TimelineMonth" EnableLazyLoading="true" IsSelected="true"></ScheduleView>
            <ScheduleView MaxEventsPerRow="1" Option="View.Month" EnableLazyLoading="true"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>
@code {
    public List<ResourceData> ResourceDatasource = new List<ResourceData>();
    private string[] _groupData = { "Resources" };
    private DateTime _currentDate { get; set; }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _currentDate = new DateTime(2023, 4, 1);
        ResourceDatasource = GenerateResourceData();
    }

    public List<ResourceData> GenerateResourceData()
    {
        List<ResourceData> resources = new List<ResourceData>(1000);
        var colors = new string[]
        {
            "#ff8787", "#9775fa", "#748ffc", "#3bc9db", "#69db7c",
            "#fdd835", "#748ffc", "#9775fa", "#df5286", "#7fa900",
            "#fec200", "#5978ee", "#00bdae", "#ea80fc"
        };
        var names = new string[]
        {
            "John", "Kate", "Randy", "Nancy", "Robert",
            "Harry", "Blake", "Jimmy", "Ellen", "Vennasa",
            "Mike", "Shawn", "Mark", "Jeff"
        };
        var designation = new string[]
        {
            "Auditor", "Accountant", "Administrator", "Managing Director", "General Manager",
            "Maintainance Engineer", "Supervisor 1", "Sales Manager Level 1", "Sales Manager Level 2", "Sales Leader",
            "Customer Care", "Facility", "Customer Tracker", "Supervisor 2"
        };
        for (int a = 1; a <= 1000; a++)
        {
            int index = a % colors.Length;
            index = index == 0 ? (colors.Length / a) : index;
            resources.Add(new ResourceData
            {
                Id = a,
                Text = "Resource " + a,
                Color = colors[index],
                Name = names[index],
                Designation = designation[index]
            });
        }

        return resources;
    }

    public class EventData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public bool? IsAllDay { get; set; }
        public int? RecurrenceID { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public int ResourceId { get; set; }
    }

    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
        public string Name { get; set; }
        public string Designation { get; set; }
    }
}
<style>
    @@media screen and (max-width: 480px) {
        .e-schedule .e-timeline-month-view .e-resource-left-td {
            width: 146px;
        }

        .e-schedule .e-timeline-month-view .e-resource-cells {
            padding-left: 6px;
        }
    }     
</style>