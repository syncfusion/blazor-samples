@page "/scheduler/grid-to-schedule"

@using System.Linq
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject IJSRuntime JSRuntime
@*End:Hidden*@

<SampleDescription>
    <p>This example illustrates how to drag and drop events between the DataGrid and the Scheduler.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, the DataGrid's <code>AllowRowDragAndDrop</code> and <code>GridRowDropSettings</code> is used to drag and drop items from DataGrid to the Scheduler.
        The <code>RowDropping</code> event of the DataGrid is triggered when an item is dropped to the Scheduler.
        Within the <code>RowDropping</code> event, the <code>AddEventAsync</code> method is used to add the dropped item to the target Scheduler,
        and current dragged item is removed using list operations. For Scheduler to DataGrid, <code>EventDragArea</code> is used to drag a range of events.
        The <code>Dragged</code> event of the Scheduler is triggered when an item is dropped from the Scheduler to the DataGrid.
        Within the <code>Dragged</code> event, the DataGrid's <code>AddRecordAsync</code> method is used to add the dropped event to the target DataGrid,
        and the <code>DeleteEventAsync</code> method is used to remove the dragged event from the Scheduler.
    </p>
</ActionDescription>

<div class="collg-12 control-section">
    <div class="content-wrapper grid-to-schedule">
        <div class="schedule-container">
            <div class="schedule-content">
                <h5 style="text-align: center; margin: 0;position: relative; bottom: 10px;">Task Management</h5>
                <SfSchedule TValue="ScheduleData.ResourceSampleData" @ref="ScheduleRef" ID="Schedule" Height="100%" Width="100%" EnableAutoRowHeight="true" EventDragArea=".content-wrapper" CssClass="grid-schedule" AllowResizing="true" @bind-SelectedDate="@CurrentDate">
                    <ScheduleResources>
                        <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@ResourceDatasource" Field="OwnerId" Title="Owner" Name="Owner" TextField="Text" IdField="Id" ColorField="Color"></ScheduleResource>
                    </ScheduleResources>
                    <ScheduleEvents TValue="ScheduleData.ResourceSampleData" Dragged="ScheduleDragStop"></ScheduleEvents>
                    <ScheduleGroup EnableCompactView="false" Resources="@GroupData"></ScheduleGroup>
                    <ScheduleViews>
                        <ScheduleView Option="View.TimelineDay">
                            <ScheduleTimeScale Interval="60" SlotCount="1"></ScheduleTimeScale>
                        </ScheduleView>
                    </ScheduleViews>
                    <ScheduleEventSettings DataSource="@ScheduleDatasource"></ScheduleEventSettings>
                </SfSchedule>
            </div>
            <div class="grid-content">
                <h5 style="text-align: center; margin: 0; position: relative; bottom: 10px;">Unplanned Tasks</h5>
                <SfGrid DataSource="@GridDatasource" id="Grid" @ref="GridRef" Width="280px" Height="100%" AllowRowDragAndDrop="true" AllowSelection="true" class="drag-grid">
                    <GridRowDropSettings TargetID="Schedule"></GridRowDropSettings>
                    <GridEditSettings AllowAdding="true"></GridEditSettings>
                    <GridEvents RowDropping="GridDragStop" TValue="ScheduleData.ResourceSampleData"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(ScheduleData.ResourceSampleData.Id)" Visible="false" IsPrimaryKey="true" HeaderText="ID"></GridColumn>
                        <GridColumn Field="@nameof(ScheduleData.ResourceSampleData.Subject)" HeaderText="Task" Width="50"></GridColumn>
                        <GridColumn HeaderText="Duration" Width="30">
                            <Template>
                                @{
                                    var EventInfo = (context as ScheduleData.ResourceSampleData);
                                    var duration = EventInfo.Duration > 1 ? Math.Round(EventInfo.Duration, 1) + " Hours" : Math.Round(EventInfo.Duration, 1) + " Hour";
                                    <div>
                                        @duration
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
</div>

<style>
    .content-wrapper.grid-to-schedule .schedule-container {
        display: flex;
        height: 500px;
    }

    .content-wrapper.grid-to-schedule .schedule-container .grid-content {
        margin-left: 10px;
    }

    .e-schedule.grid-schedule .e-timeline-view .e-resource-left-td,
    .e-schedule.grid-schedule .e-timeline-month-view .e-resource-left-td {
        width: 140px;
    }
    
    .drag-grid.e-grid .e-cloneproperties.e-draganddrop {
        pointer-events: none;
    }

    .grid-schedule.e-schedule .e-timeline-view .e-date-header-wrap table col,
    .grid-schedule.e-schedule .e-timeline-view .e-content-wrap table col {
        width: 100px;
    }

    @@media screen and (max-width: 768px) {
        .content-wrapper.grid-to-schedule .schedule-container {
            flex-direction: column;
        }

        .content-wrapper.grid-to-schedule .schedule-container .grid-content {
            margin-top: 10px;
        }

        .drag-grid.e-grid {
            width: 100% !important;
        }

        .grid-content {
            padding-top: 20px;
        }

        .content-wrapper.grid-to-schedule .schedule-container {
            display: flex;
            height: 100% !important;
        }
    }
</style>

@code {

    DateTime CurrentDate = new DateTime(DateTime.Now.Year, 6, 3);
    SfSchedule<ScheduleData.ResourceSampleData> ScheduleRef;
    SfGrid<ScheduleData.ResourceSampleData> GridRef;

    public string[] GroupData = new string[] { "Owner" };

    public List<ScheduleData.ResourceSampleData> ScheduleDatasource;
    public List<ResourceData> ResourceDatasource { get; set; }
    public List<ScheduleData.ResourceSampleData> GridDatasource { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ResourceDatasource = new List<ResourceData>
        {
            new ResourceData {Text = "Nancy", Id = 1, Color = "#df5286"},
            new ResourceData {Text = "Steven", Id = 2, Color = "#7fa900"},
            new ResourceData {Text = "Robert", Id = 3, Color = "#ea7a57"},
            new ResourceData {Text = "Smith", Id = 4, Color = "#5978ee"},
            new ResourceData {Text = "Michael", Id = 5, Color = "#00bdae"},
            new ResourceData {Text = "Root", Id = 6, Color = "#f57b42"},
            new ResourceData {Text = "John", Id = 7, Color = "#1aaa55"},
            new ResourceData {Text = "Stellah", Id = 8, Color = "#ffb74d"},
            new ResourceData {Text = "Chirish", Id = 9, Color = "#7460ee"},
            new ResourceData {Text = "Megan", Id = 10, Color = "#c0ca33"},
        };

        ScheduleDatasource = new ScheduleData().GetResourceSampleData();

        GridDatasource = new List<ScheduleData.ResourceSampleData>
        {
            new ScheduleData.ResourceSampleData {Id = 1001, Subject = "Test report validation", Duration = 3, StartTime = new DateTime(2024, 6, 2, 9, 0, 0), EndTime = new DateTime(2024, 6, 2, 12, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1002, Subject = "Timeline estimation", Duration = 4, StartTime = new DateTime(2024, 6, 3, 9, 0, 0), EndTime = new DateTime(2024, 6, 3, 13, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1003, Subject = "Workflow Analysis", Duration = 2, StartTime = new DateTime(2024, 6, 4, 9, 0, 0), EndTime = new DateTime(2024, 6, 4, 11, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1004, Subject = "Quality Analysis", Duration = 5, StartTime = new DateTime(2024, 6, 5, 9, 0, 0), EndTime = new DateTime(2024, 6, 5, 14, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1005, Subject = "Cross-browser testing", Duration = 1, StartTime = new DateTime(2024, 6, 1, 10, 0, 0), EndTime = new DateTime(2024, 6, 1, 11, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1006, Subject = "Resolution-based testing", Duration = 3, StartTime = new DateTime(2024, 6, 7, 9, 0, 0), EndTime = new DateTime(2024, 6, 7, 12, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1007, Subject = "Project Preview", Duration = 6, StartTime = new DateTime(2024, 6, 8, 9, 0, 0), EndTime = new DateTime(2024, 6, 8, 15, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1008, Subject = "Developers Meeting", Duration = 2, StartTime = new DateTime(2024, 6, 10, 9, 0, 0), EndTime = new DateTime(2024, 6, 10, 11, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1009, Subject = "Test case correction", Duration = 7, StartTime = new DateTime(2024, 6, 11, 9, 0, 0), EndTime = new DateTime(2024, 6, 11, 16, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1010, Subject = "Debugging", Duration = 4, StartTime = new DateTime(2024, 6, 12, 9, 0, 0), EndTime = new DateTime(2024, 6, 12, 13, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1011, Subject = "Exception handling", Duration = 5, StartTime = new DateTime(2024, 6, 13, 9, 0, 0), EndTime = new DateTime(2024, 6, 13, 14, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1012, Subject = "Bug fixing", Duration = 1, StartTime = new DateTime(2024, 6, 14, 10, 0, 0), EndTime = new DateTime(2024, 6, 14, 11, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1013, Subject = "Bug Automation", Duration = 3, StartTime = new DateTime(2024, 6, 15, 9, 0, 0), EndTime = new DateTime(2024, 6, 15, 12, 0, 0)},
            new ScheduleData.ResourceSampleData {Id = 1014, Subject = "Bug analyzing", Duration = 6, StartTime = new DateTime(2024, 6, 16, 9, 0, 0), EndTime = new DateTime(2024, 6, 16, 15, 0, 0)}
        };
    }

    public async Task ScheduleDragStop(DragEventArgs<ScheduleData.ResourceSampleData> args)
    {
        var gridData = await JSRuntime.InvokeAsync<bool>("isSelectorFromPoint", args.MouseEventArgs.ClientX, args.MouseEventArgs.ClientY, "grid-content");
        if (gridData)
        {
            args.Cancel = true;
            double duration = (args.EndTime - args.StartTime).TotalHours;
            ScheduleData.ResourceSampleData data = new ScheduleData.ResourceSampleData
                {
                    Id = args.Data.Id,
                    StartTime = args.StartTime,
                    EndTime = args.EndTime,
                    Subject = args.Data.Subject,
                    Duration = duration,
                    RecurrenceID = args.Data.RecurrenceID,
                    RecurrenceRule = args.Data.RecurrenceRule,
                    RecurrenceException = args.Data.RecurrenceException
                };
            await ScheduleRef.DeleteEventAsync(args.Data.Id);
            await GridRef.AddRecordAsync(data);
        }
    }

    public async Task GridDragStop(RowDroppingEventArgs<ScheduleData.ResourceSampleData> args)
    {

        if (args.TargetDimension != null)
        {
            CellClickEventArgs cellData = await ScheduleRef.GetTargetCellAsync((int)args.ClientX, (int)args.ClientY);
            var eventData = args.Data;
            double duration = (args.Data[0].EndTime - args.Data[0].StartTime).TotalHours;

            if (cellData != null)
            {
                args.Cancel = true;
                var resourceDetails = ScheduleRef.GetResourceByIndex(cellData.GroupIndex);
                ScheduleData.ResourceSampleData newEvent = new ScheduleData.ResourceSampleData
                    {
                        Id = eventData[0].Id,
                        Subject = eventData[0].Subject,
                        StartTime = cellData.StartTime,
                        EndTime = cellData.StartTime.AddHours(duration),
                        IsAllDay = cellData.IsAllDay,
                        Location = eventData[0].Location,
                        RecurrenceRule = args.Data[0].RecurrenceRule,
                        OwnerId = resourceDetails.GroupData.OwnerId,
                        StartTimezone = eventData[0].StartTimezone,
                        EndTimezone = eventData[0].EndTimezone
                    };
                await ScheduleRef.AddEventAsync(newEvent);
                var draggedIds = eventData.Select(item => item.Id).ToList();
                GridDatasource = GridDatasource.Where(item => !draggedIds.Contains(item.Id)).ToList();
            }
        }
    }

    public class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
    }
}
