@page "/barcodes/code-39"

@using Syncfusion.Blazor.BarcodeGenerator
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes Code 39, a self-checking barcode symbology that consists of uppercase letters, numeric digits, and several special characters. Code 39 is often used to present model numbers. Code 39 is widely used in the automotive and defense industries as a standard label.</p>
</SampleDescription>
<ActionDescription>
    <p>This sample shows how to create a Code 39 self-checking symbology type barcode image. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_Type" aria-label="Type">Type</a></code> property can be used to set the barcode type as <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.BarcodeType.html#Syncfusion_Blazor_BarcodeGenerator_BarcodeType_Code39" aria-label="Code39">Code39</a></code>.</p>
    <p>You can customize the barcode's <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_Value" aria-label="Value">Value</a></code>, allowing you to modify the barcode content. Adjust its <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_Width" aria-label="Width">Width</a></code>, <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_Height" aria-label="Height">Height</a></code>, <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_BackgroundColor" aria-label="Background Color">Background Color</a></code>, and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_ForeColor" aria-label="Fore Color">Fore Color</a></code> to control its size and appearance.</p>
    <p>The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.html#Syncfusion_Blazor_BarcodeGenerator_BarcodeGeneratorDisplayText_Visibility" aria-label="Text Visibility">Text Visibility</a></code> option lets you choose whether to display the accompanying text. <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.html#properties" aria-label="Margin">Margin</a></code> properties such as left, right, top, and bottom define the spacing around the barcode. Text properties allow for fine-tuning text placement and alignment, enabling you to set its <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.html#Syncfusion_Blazor_BarcodeGenerator_BarcodeGeneratorDisplayText_Position" aria-label="Position">Position</a></code> (e.g., top or bottom) and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.html#Syncfusion_Blazor_BarcodeGenerator_BarcodeGeneratorDisplayText_Alignment" aria-label="Alignment">Alignment</a></code> (e.g., center, left, or right).</p>
    <p>The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfBarcodeGenerator_Export_System_String_Syncfusion_Blazor_BarcodeGenerator_BarcodeExportType_" aria-label="Download">Download</a></code> button allows users to save the barcode as an image.</p>
</ActionDescription>

<div class="col-lg-9 control-section" style="width: 64%;height:600px">
    <div class="center">
        <div class="centercontrol">
            <SfBarcodeGenerator @ref="@sfBarcodeGenerator" Width="@barcodeWidth" Height="@barcodeHeight" Type="@BarcodeType.Code39" Value="@barcodeValue" BackgroundColor="@backgroundColor" ForeColor="@foreColor">
                <BarcodeGeneratorDisplayText Text="@displayTextValue" Alignment="@textAlignment" Position="@textPosition" Visibility="@textVisibility">
                    <BarcodeTextMargin Top="@topTextMargin" Bottom="@bottomTextMargin"></BarcodeTextMargin>
                </BarcodeGeneratorDisplayText>
                <BarcodeMargin Left="@leftMargin" Top="@topMargin" Right="@rightMargin" Bottom="@bottomMargin"></BarcodeMargin>
            </SfBarcodeGenerator>
        </div>
    </div>
    <div class="allowedText">
        <span style="font-weight: 600;"> Allowed input characters:</span> The Code 39 barcode supports all numeric digits (0-9), uppercase alphabetic letters (A-Z), and special characters(-, ., $, /, +, %, space).
    </div>
</div>
<div class="col-lg-3 property-section" style="padding-right: 0px; min-width: 36%;border-left:1px solid #D7D7D7;height:750px">
    <div class="property-panel-header">
        Appearance
    </div>
    <div id="propertypanel">
        <div class="property-section-content">
            <div class="row sb-child-row">
                <div class="col-xs-2 top barcode-panel-left">
                    Value
                </div>
                <div class="col-xs-10">
                    <SfTextBox Value="@barcodeValue" OnInput="@BarcodeValueChange" Width="103%" CssClass="@CssClass"></SfTextBox>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Width
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@width" Format="n0" Decimals=0 Min=0 Step=5 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BarcodeWidthChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Height
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@height" Format="n0" Decimals=0 Min=0 Step=5 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BarcodeHeightChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-3 top barcode-panel-left">
                        Background Color
                    </div>
                    <div class="col-xs-3 top barcode-panel-left">
                        <SfColorPicker @bind-Value="@backgroundColor" ValueChange="BackgroundColorChange"></SfColorPicker>
                    </div>
                </div>
                <div>
                    <div class="col-xs-3 top barcode-panel-left">
                        Fore Color
                    </div>
                    <div class="col-xs-3 top barcode-panel-left">
                        <SfColorPicker @bind-Value="@foreColor" ValueChange="ForeColorChange"></SfColorPicker>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div class="col-xs-3 top barcode-panel-left">
                    Text Visibility
                </div>
                <div class="col-xs-3" style="margin-top:6px">
                    <SfCheckBox Checked="@textVisibility" ValueChange="TextVisibilityChange" TChecked="bool"></SfCheckBox>
                </div>
            </div>
            <div class="property-panel-header">
                Margin
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Left
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@leftMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="LeftMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Right
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@rightMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="RightMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Top
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@topMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="TopMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Bottom
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@bottomMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BottomMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="property-panel-header property-panel-table">
                Text Properties
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Top
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@topTextMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="TopTextMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Bottom
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@bottomTextMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BottomTextMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Position
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfDropDownList TValue="@string" TItem="@PositionOfText" @bind-Enabled="bind" @bind-Value="@positionText" DataSource="@positionOfText" Width="110%">
                            <DropDownListFieldSettings Value="Position" Text="Position"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="PositionOfText" ValueChange="TextPositionChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Alignment
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfDropDownList TValue="@string" @bind-Enabled="bind" TItem="@TextAlignment" @bind-Value="@aligntext" DataSource="@TextAlign" Width="110%">
                            <DropDownListEvents TItem="TextAlignment" TValue="string" ValueChange="@TextAlignChanged"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Align" Value="Align"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div class="col-xs-2 top barcode-panel-left">
                    Display Text
                </div>
                <div class="col-xs-10">
                    <SfTextBox Value="@displayTextValue" OnInput="@DsiplayTextValueChange" Width="103%"></SfTextBox>
                </div>
            </div>
            <div class="row sb-child-row" style="padding-top:20px">
                <div class="col-xs-4 barcode-panel-left">
                    <SfButton @onclick="Export" Content="Download" iconCss="e-icons e-download"></SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .centercontrol {
    margin: auto;
    width: 50%;
    padding-left: 12%;
    padding-top: 5%;
    height: 50%;
    }

    .top {
    margin-top: 10px;
    }

    .sb-child-row {
    margin-top: 8px;
    }

    .col-xs-2 {
    width: 16.66666667%;
    }

    .allowedText {
    margin-left: 14px;
    margin-right: 17px;
    margin-top: 14px;
    width: auto;
    height: auto;
    }

    .row {
    margin-left: 0px;
    margin-right: 0px;
    display: block;
    }

    .property-section {
    padding-bottom: 20px;
    height: 740px;
    padding-right: 0px;
    display: inline-block;
    }

    .center {
    margin-left: 14px;
    margin-right: 17px;
    margin-top: 14px;
    min-width: 280px;
    width: auto;
    border: 2px solid lightgray;
    min-height: 55%;
    padding-top: 35px;
    }

    @@media screen and (max-width: 570px)
    {
    .centercontrol{
    width: 60%;
    padding-left: 0px;
    }
    }
</style>

@code
{
    string barcodeValue = "CODE39-BARCODE";
    string displayTextValue = "CODE39-BARCODE";
    double width = 200;
    double height = 150;
    string barcodeWidth = "200px";
    string barcodeHeight = "150px";
    bool textVisibility = true;
    string backgroundColor = "#FFFFFF";
    string foreColor = "#000000";
    double leftMargin = 10;
    double rightMargin = 10;
    double topMargin = 10;
    double bottomMargin = 10;
    double topTextMargin = 0;
    double bottomTextMargin = 0;
    bool bind = true;
    TextPosition textPosition = TextPosition.Bottom;
    string positionText = "Bottom";
    string aligntext = "Center";
    string? CssClass { get; set; }
    SfBarcodeGenerator? sfBarcodeGenerator;
    public class PositionOfText
    {
        public string? Position { get; set; }
    }
    private List<PositionOfText> positionOfText = new List<PositionOfText>() {
    new PositionOfText() { Position = "Top" },
    new PositionOfText() { Position = "Bottom" },
    };
    Alignment textAlignment = Alignment.Center;
    public class TextAlignment
    {
        public string? Align { get; set; }
    }
    private List<TextAlignment> TextAlign = new List<TextAlignment>() {
    new TextAlignment() { Align = "Left" },
    new TextAlignment() { Align = "Right" },
    new TextAlignment() { Align = "Center"}
    };
    private void BarcodeValueChange(ChangeEventArgs args)
    {
        if (!System.Text.RegularExpressions.Regex.IsMatch(args.Value!.ToString()!, "^[A-Za-z0-9]{0}$"))
        {
            barcodeValue = args.Value.ToString()!;
            CssClass = "e-success";
        }
    }
    private void DsiplayTextValueChange(ChangeEventArgs args)
    {
        displayTextValue = args.Value!.ToString()!;
    }
    private void BarcodeWidthChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        barcodeWidth = args.Value.ToString() + "px";
        width = args.Value;
    }
    private void BarcodeHeightChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        barcodeHeight = args.Value.ToString() + "px";
        height = args.Value;
    }
    private void TextVisibilityChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
            textVisibility = true;
        else
            textVisibility = false;
    }
    public void BackgroundColorChange(ColorPickerEventArgs args)
    {
        backgroundColor = args.CurrentValue!.Hex!.ToString();
    }
    public void ForeColorChange(ColorPickerEventArgs args)
    {
        foreColor = args.CurrentValue!.Hex!.ToString();
    }
    public void TopMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        topMargin = args.Value;
    }
    public void BottomMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        bottomMargin = args.Value;
    }
    public void LeftMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        leftMargin = args.Value;
    }
    public void RightMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        rightMargin = args.Value;
    }
    public void TopTextMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        topTextMargin = args.Value;
    }
    public void BottomTextMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        bottomTextMargin = args.Value;
    }
    private void TextPositionChanged(ChangeEventArgs<string, PositionOfText> args)
    {
        switch(args.Value)
        {
            case "Top":
                textPosition = TextPosition.Top;
                break;
            case "Bottom":
                textPosition = TextPosition.Bottom;
                break;
        }
    }
    private void TextAlignChanged(ChangeEventArgs<string, TextAlignment> args)
    {
        switch(args.Value)
        {
            case "Left":
                textAlignment = Alignment.Left;
                break;
            case "Right":
                textAlignment = Alignment.Right;
                break;
            case "Center":
                textAlignment = Alignment.Center;
                break;
        }
    }
    private void Export()
    {
        if (sfBarcodeGenerator != null)
        {
            sfBarcodeGenerator.Export("Code-39", BarcodeExportType.JPG);
        }
    }
}