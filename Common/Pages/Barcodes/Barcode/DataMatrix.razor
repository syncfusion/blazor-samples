@page "/barcodes/data-matrix"
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
@using Syncfusion.Blazor.BarcodeGenerator
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System.Text.RegularExpressions;

<SampleDescription>
    <p>This sample displays encoded numerals or text as an optical label using solid adjacent borders in an “L” shape and two other borders consisting of alternating dark and light cells or modules. Within these borders are rows and columns of cells that encode information.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to display encoded text or numerical values as a label using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html" aria-label="SfDataMatrixGenerator">SfDataMatrixGenerator</a></code> component.</p>
    <p>You can customize the Data Matrix <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Value" aria-label="Value">Value</a></code>, allowing you to modify the barcode content. Adjust its <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Width" aria-label="Width">Width</a></code>, <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Height" aria-label="Height">Height</a></code>, <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_BackgroundColor" aria-label="Background Color">Background Color</a></code>, and <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_ForeColor" aria-label="Fore Color">Fore Color</a></code> to control its size and appearance.</p>
    <p>The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.html#Syncfusion_Blazor_BarcodeGenerator_DataMatrixGeneratorDisplayText_Visibility" aria-label="Text Visibility">Text Visibility</a></code> option lets you choose whether to display the accompanying text. <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.html#Syncfusion_Blazor_BarcodeGenerator_DataMatrixGeneratorDisplayText_Margin" aria-label="Margin">Margin</a></code> properties such as left, right, top, and bottom define the spacing around the barcode.</p>
    <p>The data matrix encoding type can be set using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Encoding" aria-label="Encoding">Encoding</a></code> property of the Barcode component and the data matrix size can be defined using the <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Size" aria-label="Size">Size</a></code> property of the component.</p>
    <p>The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.html#Syncfusion_Blazor_BarcodeGenerator_SfDataMatrixGenerator_Export_System_String_Syncfusion_Blazor_BarcodeGenerator_BarcodeExportType_" aria-label="Download">Download</a></code> button allows users to save the barcode as an image.</p>
</ActionDescription>


<div class="col-lg-9 control-section" style="width: 64%;height:600px">
    <div class="center">
        <div class="centercontrol">
            <SfDataMatrixGenerator @ref="dataMatrixGenerator" Width="@barcodeWidth" Height="@barcodeHeight" Value="@barcodeValue" BackgroundColor="@backgroundColor" ForeColor="@foreColor" Size="@dataMatrixSize" Encoding="@dataMatrixEncoding">
                <DataMatrixGeneratorDisplayText Text="@barcodeValue" Visibility="@textVisibility">
                    <DataMatrixTextMargin Top="@topTextMargin" Bottom="@bottomTextMargin"></DataMatrixTextMargin>
                </DataMatrixGeneratorDisplayText>
                <DataMatrixMargin Left="@leftMargin" Top="@topMargin" Right="@rightMargin" Bottom="@bottomMargin"></DataMatrixMargin>
            </SfDataMatrixGenerator>
        </div>
    </div>
</div>
<div class="col-lg-3 property-section" style="padding-right: 0px; min-width:36%;border-left:1px solid #D7D7D7; height:630px">
    <div class="property-panel-header">
        Appearance
    </div>
    <div id="propertypanel">
        <div class="property-section-content">
            <div class="row sb-child-row">
                <div class="col-xs-2 top barcode-panel-left">
                    Value
                </div>
                <div class="col-xs-10">
                    <SfTextBox Value="@barcodeValue" OnInput="@BarcodeValueChange" CssClass="@CssClass" Width="103%"></SfTextBox>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Width
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@width" Format="n0" Decimals=0 Min=0 Step=5 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BarcodeWidthChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Height
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@height" Format="n0" Decimals=0 Min=0 Step=5 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BarcodeHeightChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-3 top barcode-panel-left">
                        Background Color
                    </div>
                    <div class="col-xs-3 top barcode-panel-left">
                        <SfColorPicker @bind-Value="@backgroundColor" ValueChange="BackgroundColorChange"></SfColorPicker>
                    </div>
                </div>
                <div>
                    <div class="col-xs-3 top barcode-panel-left">
                        Fore Color
                    </div>
                    <div class="col-xs-3 top barcode-panel-left">
                        <SfColorPicker @bind-Value="@foreColor" ValueChange="ForeColorChange"></SfColorPicker>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div class="col-xs-3 top barcode-panel-left">
                    Text Visibility
                </div>
                <div class="col-xs-3" style="margin-top:6px">
                    <SfCheckBox Checked="@textVisibility" ValueChange="TextVisibilityChange" TChecked="bool"></SfCheckBox>
                </div>
            </div>
            <div class="property-panel-header">
                Margin
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Left
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@leftMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="LeftMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Right
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@rightMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="RightMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Top
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@topMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="TopMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
                <div>
                    <div class="col-xs-2 top barcode-panel-left">
                        Bottom
                    </div>
                    <div class="col-xs-4 barcode-panel-left">
                        <SfNumericTextBox TValue="double" Value="@bottomMargin" Format="n0" Decimals=0 Min=-10 Max=30 Step=1 Width="110%">
                            <NumericTextBoxEvents TValue="double" ValueChange="BottomMarginChanged" />
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div class="col-xs-2 top barcode-panel-left">Size</div>
                <div class="col-xs-10">
                    <div style="padding-bottom: 8px">
                        <SfDropDownList TValue="string" TItem="MatrixSize" @bind-Value="@size" DataSource="@matrixSize" Width="100%">
                            <DropDownListFieldSettings Value="dataMatrix" Text="dataMatrix"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="MatrixSize" ValueChange="matrixSizeChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row">
                <div class="col-xs-2 top barcode-panel-left">Encoding</div>
                <div class="col-xs-10">
                    <div style="padding-bottom: 8px">
                        <SfDropDownList TValue="string" TItem="MatrixEncoding" @bind-Value="@encoding" DataSource="@encodingLevel" Width="100%">
                            <DropDownListFieldSettings Value="matrixEncoding" Text="matrixEncoding"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="MatrixEncoding" ValueChange="matrixEncodingChanged"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
            <div class="row sb-child-row" style="padding-top:20px">
                <div class="col-xs-4 barcode-panel-left">
                    <SfButton @onclick="ExportBarcode" Content="Download" iconCss="e-icons e-download"></SfButton>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .centercontrol {
        margin: auto;
        width: 50%;
        padding-left: 12%;
        padding-top: 5%;
        height: 50%;
    }

    .top {
        margin-top: 10px;
    }

    .sb-child-row {
        margin-top: 8px;
    }

    .col-xs-2 {
        width: 16.66666667%;
    }

    .allowedText {
        margin-left: 14px;
        margin-right: 17px;
        margin-top: 14px;
        width: auto;
        height: auto;
    }

    .row {
        margin-left: 0px;
        margin-right: 0px;
        display: block;
    }

    .texstyle {
        display: table;
        height: 35px;
        padding-right: 4px;
        padding-left: 0px;
        width: 50%;
        padding-top: 15px;
        float: left;
        position: relative;
        min-height: 1px;
    }

    .col-xs-6 {
        padding-left: 0px;
        padding-right: 0px;
        padding-top: 5px;
        float: left;
    }

    .property-section {
        padding-bottom: 20px;
        height: 740px;
        padding-right: 0px;
        display: inline-block;
    }

    .center {
        margin-left: 14px;
        margin-right: 17px;
        margin-top: 14px;
        min-width: 280px;
        width: auto;
        border: 2px solid lightgray;
        min-height: 55%;
        padding-top: 35px;
    }

    @@media screen and (max-width: 570px) {
        .centercontrol {
            width: 60%;
            padding-left: 0px;
        }
    }
</style>
@code
{
    string barcodeValue = "SYNCFUSION";
    bool textVisibility = true;
    double width = 200;
    double height = 150;
    string barcodeWidth = "200";
    string barcodeHeight = "150";
    string backgroundColor = "#FFFFFF";
    string foreColor = "#00000";
    double leftMargin = 10;
    double rightMargin = 10;
    double topMargin = 10;
    double bottomMargin = 10;
    double topTextMargin = 0;
    double bottomTextMargin = 0;
    private SfDataMatrixGenerator? dataMatrixGenerator;
    string CssClass { get; set; } = "e-success";
    string size = "Auto";
    DataMatrixSize dataMatrixSize = DataMatrixSize.Auto;
    public class MatrixSize
    {
        public string? dataMatrix { get; set; }
        public int value { get; set; }
    }
    List<MatrixSize> matrixSize = new List<MatrixSize> {
    new MatrixSize() { dataMatrix = "Auto"},
    new MatrixSize() { dataMatrix = "Size104x104"},
    new MatrixSize() { dataMatrix = "Size10x10"},
    new MatrixSize() { dataMatrix = "Size120x120"},
    new MatrixSize() { dataMatrix = "Size12x12"},
    new MatrixSize() { dataMatrix = "Size12x26"},
    new MatrixSize() { dataMatrix = "Size12x36"},
    new MatrixSize() { dataMatrix = "Size132x132"},
    new MatrixSize() { dataMatrix = "Size144x144"},
    new MatrixSize() { dataMatrix = "Size14x14"},
    new MatrixSize() { dataMatrix = "Size16x16"},
    new MatrixSize() { dataMatrix = "Size16x36"},
    new MatrixSize() { dataMatrix = "Size16x48"},
    new MatrixSize() { dataMatrix = "Size18x18"},
    new MatrixSize() { dataMatrix = "Size20x20"},
    new MatrixSize() { dataMatrix = "Size22x22"},
    new MatrixSize() { dataMatrix = "Size24x24"},
    new MatrixSize() { dataMatrix = "Size26x26"},
    new MatrixSize() { dataMatrix = "Size32x32"},
    new MatrixSize() { dataMatrix = "Size36x36" },
    new MatrixSize() { dataMatrix = "Size40x40"},
    new MatrixSize() { dataMatrix = "Size44x44"},
    new MatrixSize() { dataMatrix = "Size48x48"},
    new MatrixSize() { dataMatrix = "Size52x52"},
    new MatrixSize() { dataMatrix = "Size64x64"},
    new MatrixSize() { dataMatrix = "Size72x72"},
    new MatrixSize() { dataMatrix = "Size80x80"},
    new MatrixSize() { dataMatrix = "Size88x88"},
    new MatrixSize() { dataMatrix = "Size8x18"},
    new MatrixSize() { dataMatrix = "Size8x32"},
    new MatrixSize() { dataMatrix = "Size96x96" },
    };
    string encoding = "Auto";
    DataMatrixEncoding dataMatrixEncoding = DataMatrixEncoding.Auto;
    public class MatrixEncoding
    {
        public string? matrixEncoding { get; set; }
    }
    List<MatrixEncoding> encodingLevel = new List<MatrixEncoding> {
    new MatrixEncoding() { matrixEncoding = "Auto" },
    new MatrixEncoding() { matrixEncoding = "ASCII" },
    new MatrixEncoding() { matrixEncoding = "ASCIINumeric" },
    new MatrixEncoding() { matrixEncoding = "Base256" },
    };

    private void BarcodeWidthChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        barcodeWidth = args.Value.ToString();
        width = args.Value;
    }
    private void BarcodeHeightChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        barcodeHeight = args.Value.ToString();
        height = args.Value;
    }
    private void TextVisibilityChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
            textVisibility = true;
        else
            textVisibility = false;
    }
    public void BackgroundColorChange(ColorPickerEventArgs args)
    {
        backgroundColor = args.CurrentValue!.Hex!.ToString();
    }
    public void ForeColorChange(ColorPickerEventArgs args)
    {
        foreColor = args.CurrentValue!.Hex!.ToString();
    }
    public void TopMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        topMargin = args.Value;
    }
    public void BottomMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        bottomMargin = args.Value;
    }
    public void LeftMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        leftMargin = args.Value;
    }
    public void RightMarginChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        rightMargin = args.Value;
    }
    private void BarcodeValueChange(ChangeEventArgs args)
    {
        if (dataMatrixEncoding == DataMatrixEncoding.ASCIINumeric)
        {
            if (Regex.IsMatch(args.Value!.ToString()!, @"^\d+$"))
            {
                CssClass = "e-success";
                barcodeValue = args.Value.ToString()!;
            }
            else
            {
                CssClass = "e-error";
            }
        }
        else
        {
            CssClass = "e-success";
            barcodeValue = args.Value!.ToString()!;
        }
    }
    private void matrixSizeChanged(ChangeEventArgs<string, MatrixSize> args)
    {
        size = args.Value!;
        switch (size)
        {
            case "Auto":
                {
                    dataMatrixSize = (DataMatrixSize)0;
                    break;
                }
            case "Size104x104":
                {
                    dataMatrixSize = (DataMatrixSize)21;
                    break;
                }
            case "Size10x10":
                {
                    dataMatrixSize = (DataMatrixSize)6;
                    break;
                }
            case "Size120x120":
                {
                    dataMatrixSize = (DataMatrixSize)22;
                    break;
                }
            case "Size12x12":
                {
                    dataMatrixSize = (DataMatrixSize)12;
                    break;
                }
            case "Size12x26":
                {
                    dataMatrixSize = (DataMatrixSize)27;
                    break;
                }
            case "Size12x36":
                {
                    dataMatrixSize = (DataMatrixSize)28;
                    break;
                }
            case "Size132x132":
                {
                    dataMatrixSize = (DataMatrixSize)23;
                    break;
                }
            case "Size144x144":
                {
                    dataMatrixSize = (DataMatrixSize)24;
                    break;
                }
            case "Size14x14":
                {
                    dataMatrixSize = (DataMatrixSize)20;
                    break;
                }
            case "Size16x16":
                {
                    dataMatrixSize = (DataMatrixSize)4;
                    break;
                }
            case "Size16x36":
                {
                    dataMatrixSize = (DataMatrixSize)29;
                    break;
                }
            case "Size16x48":
                {
                    dataMatrixSize = (DataMatrixSize)30;
                    break;
                }
            case "Size18x18":
                {
                    dataMatrixSize = (DataMatrixSize)5;
                    break;
                }
            case "Size20x20":
                {
                    dataMatrixSize = (DataMatrixSize)6;
                    break;
                }
            case "Size22x22":
                {
                    dataMatrixSize = (DataMatrixSize)7;
                    break;
                }
            case "Size24x24":
                {
                    dataMatrixSize = (DataMatrixSize)8;
                    break;
                }
            case "Size26x26":
                {
                    dataMatrixSize = (DataMatrixSize)9;
                    break;
                }
            case "Size32x32":
                {
                    dataMatrixSize = (DataMatrixSize)10;
                    break;
                }
            case "Size36x36":
                {
                    dataMatrixSize = (DataMatrixSize)11;
                    break;
                }
            case "Size40x40":
                {
                    dataMatrixSize = (DataMatrixSize)12;
                    break;
                }
            case "Size44x44":
                {
                    dataMatrixSize = (DataMatrixSize)13;
                    break;
                }
            case "Size48x48":
                {
                    dataMatrixSize = (DataMatrixSize)14;
                    break;
                }
            case "Size52x52":
                {
                    dataMatrixSize = (DataMatrixSize)15;
                    break;
                }
            case "Size64x64":
                {
                    dataMatrixSize = (DataMatrixSize)16;
                    break;
                }
            case "Size72x72":
                {
                    dataMatrixSize = (DataMatrixSize)17;
                    break;
                }
            case "Size80x80":
                {
                    dataMatrixSize = (DataMatrixSize)18;
                    break;
                }
            case "Size88x88":
                {
                    dataMatrixSize = (DataMatrixSize)19;
                    break;
                }
            case "Size8x18":
                {
                    dataMatrixSize = (DataMatrixSize)24;
                    break;
                }
            case "Size8x32":
                {
                    dataMatrixSize = (DataMatrixSize)26;
                    break;
                }
            case "Size96x96":
                {
                    dataMatrixSize = (DataMatrixSize)20;
                    break;
                }
        }
    }
    public void matrixEncodingChanged(ChangeEventArgs<string, MatrixEncoding> args)
    {
        encoding = args.Value!;
        CssClass = "e-success";
        switch (encoding)
        {
            case "Auto":
                dataMatrixEncoding = DataMatrixEncoding.Auto;
                break;
            case "ASCII":
                dataMatrixEncoding = DataMatrixEncoding.ASCII;
                break;
            case "ASCIINumeric":
                if (Regex.IsMatch(dataMatrixGenerator!.Value, @"^\d+$"))
                {
                    dataMatrixEncoding = DataMatrixEncoding.ASCIINumeric;
                }
                else
                {
                    CssClass = "e-error";
                }
                break;
            case "Base256":
                dataMatrixEncoding = DataMatrixEncoding.Base256;
                break;
        }
    }
    private void ExportBarcode()
    {
        dataMatrixGenerator!.Export("DataMatrix", BarcodeExportType.JPG);
    }
}
