@page "/data-form/floating-label"

@*Hidden:Lines*@
@using BlazorDemos.Models.Form
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>The example below demonstrates the floating label functionality, DataType attribute, and display options custom attribute supported in the Blazor Data Form component.</p>
</SampleDescription>
<ActionDescription>
    <p>The <code>EnableFloatingLabel</code> API provides an elegant and user-friendly way to enhance the form's visual appeal and usability by dynamically moving the label above the input field when the user interacts with the form.</p>

    <p>The <code>DataType</code> attribute in the Blazor Data Form component provides essential metadata about the type of data a property represents. By incorporating this attribute, the Data Form gains improved UI adaptability and validation, especially with the auto-generate feature, ensuring a more seamless user experience and data integrity.</p>

    <p>The <code>DataFormDisplayOptions</code> is a custom attribute in Blazor Data Form component, providing display options. In the example, it includes `ColumnSpan` to set the column span for a specific field editor, useful for auto-generated fields in a column-classified container. This attribute enhances layout customization for individual Data Form fields.</p>
</ActionDescription>


@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars

<div class="col-lg-12 control-section">

    <div class="control-wrapper">
        <h4 class="control-header">Bus Ticket Booking</h4>
        <SfDataForm ID="Ticket-Booking" EnableFloatingLabel="true"
                    Model="@_ticketBooking"
                    ColumnCount=6
                    ColumnSpacing="10px"
                    ButtonsAlignment="FormButtonsAlignment.Center">
            <FormValidator>
                <DataAnnotationsValidator />
            </FormValidator>
            <FormItems>
                <FormAutoGenerateItems />

                <FormItem Field="@nameof(_ticketBooking.DepartureDate)">
                    <Template>
                        <SfDatePicker TValue="DateTime?" Min="DateTime.Today" Placeholder="Departure Date" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" @bind-Value="_ticketBooking.DepartureDate"></SfDatePicker>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(_ticketBooking.DepartureCity)">
                    <Template>
                        <SfDropDownList TValue="City?" CssClass="@Error_Class" TItem="string" Placeholder="Departure City" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" DataSource="Enum.GetNames(typeof(City))" @bind-Value="_ticketBooking.DepartureCity">
                            <DropDownListEvents TValue="City?" TItem="string" ValueChange="ChangeDepartureCity"></DropDownListEvents>
                        </SfDropDownList>
                        <span class="validation-message">@City_Validation</span>
                    </Template>
                </FormItem>
                <FormItem Field="@nameof(_ticketBooking.DestinationCity)">
                    <Template>
                        <SfDropDownList TValue="City?" TItem="string" CssClass="@Error_Class" Placeholder="Destination City" FloatLabelType="Syncfusion.Blazor.Inputs.FloatLabelType.Auto" DataSource="Enum.GetNames(typeof(City))" @bind-Value="_ticketBooking.DestinationCity">
                            <DropDownListEvents TValue="City?" TItem="string" ValueChange="ChangeDestinationCity"></DropDownListEvents>
                        </SfDropDownList>
                        <span class="validation-message">@City_Validation</span>
                    </Template>
                </FormItem>
            </FormItems>

            <FormButtons>
                <SfButton IsPrimary="true">Book Tickets</SfButton>
            </FormButtons>
        </SfDataForm>
    </div>
</div>
<style>
    .mobile .control-wrapper {
        max-width: 100%;
    }

    .control-wrapper {
        max-width: 50%;
        margin: 0 auto;
        padding: 0px 0px 0px;
    }

    .control-header {
        text-align: center;
    }
</style>

@code {
    public string City_Validation { get; set; } = " ";
    public string Error_Class { get; set; }
    private BookingDetails _ticketBooking = new BookingDetails();

    public void ChangeDepartureCity(Syncfusion.Blazor.DropDowns.ChangeEventArgs<City?, string> args)
    {
        if (args.Value.ToString() == _ticketBooking.DestinationCity.ToString())
        {
            City_Validation = "Departure city and destination city should not be same.";
            Error_Class = "e-error";
        }
        else
        {
            City_Validation = " ";
            Error_Class = "e-success";
        }
    }

    public void ChangeDestinationCity(Syncfusion.Blazor.DropDowns.ChangeEventArgs<City?, string> args)
    {
        if (args.Value.ToString() == _ticketBooking.DepartureCity.ToString())
        {
            City_Validation = "Departure city and destination city should not be same.";
            Error_Class = "e-error";
        }
        else
        {
            City_Validation = " ";
            Error_Class = "e-success";
        }
    }
}