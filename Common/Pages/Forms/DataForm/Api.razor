@page "/data-form/api"

@*Hidden:Lines*@
@using BlazorDemos.Models.Form
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        The following example shows how to use API references in the Blazor Data Form component. You can adjust the position of the Label and the alignment of the Button in the Form component dynamically using the property panel below.
    </p>
</SampleDescription>

<ActionDescription>
    <p>
        The <code>LabelPosition</code> api can be used to locate the label in the desired position. Here are its types.
    </p>
    <ul>
        <li><code>FormLabelPosition.Top</code></li>
        <li><code>FormLabelPosition.Left</code></li>
    </ul>

    <p>
        The <code>ButtonsAlignment</code> API allows you to modify the alignment of buttons as needed. The types it includes are:
    </p>
    <ul>
        <li><code>FormButtonsAlignment.Left</code></li>
        <li><code>FormButtonsAlignment.Center</code></li>
        <li><code>FormButtonsAlignment.Right</code></li>
    </ul>
</ActionDescription>

@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons

<div class="col-lg-12" style="margin-bottom:20px">
    <div class="col-lg-8 sb-property-border">
        <h4 class="control-header">Webinar on Time Management at Work</h4>

        In this webinar, we will discuss:
        <ul>
            <li>What is time management?</li>
            <li>Effects of poor time management at work</li>
            <li>5 simple steps to manage time better</li>
            <li>This webinar is open to everyone across all levels of our organization.</li>
        </ul>
   
        <SfDataForm ID="MyForm"
                    Model="@_registrationModel"
                    LabelPosition="Labelposition"
                    ButtonsAlignment="Buttonsalignment"
                    ValidationDisplayMode="ValidationDisplay"
                    OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
            <FormValidator>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidator>
            <FormItems>
                <FormItem Field="@nameof(_registrationModel.FirstName)" LabelText="Name" Placeholder="Enter your name"/>
                <FormItem Field="@nameof(_registrationModel.Email)" Placeholder="Enter your email address" />
            </FormItems>
            <FormButtons>
                <SfButton>Register</SfButton>
            </FormButtons>
        </SfDataForm>
    </div>
    <div class="col-lg-4">
        <div class='property-panel-section'>
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content e-data-form">
                <label class="example-label e-form-label">Label Position</label>
                <SfDropDownList TValue="FormLabelPosition" TItem="string" @bind-Value="@Labelposition" DataSource="LabelPosition"></SfDropDownList>
            </div>
            <div class="property-panel-content e-data-form" style="margin-top:20px">
                <label class="example-label e-form-label">Button Alignment</label>
                <SfDropDownList TValue="FormButtonsAlignment" TItem="string" @bind-Value="@Buttonsalignment" DataSource="ButtonAlignment"></SfDropDownList>

            </div>
            <div class="property-panel-content e-data-form" style="margin-top:20px">
                <label class="example-label e-form-label">Validation Display Mode</label>
                <SfDropDownList TValue="FormValidationDisplay" TItem="string" DataSource="ValidationMessageDisplay" @bind-Value="@ValidationDisplay"></SfDropDownList>

            </div>
        </div>
    </div>
</div>


<style>
    .mobile .control-wrapper {
        max-width: 100%;
    }
    .control-wrapper {
        max-width: 400px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }
     
    .control-header {
        text-align: center;
    }
</style>

@code {
    public FormButtonsAlignment Buttonsalignment = FormButtonsAlignment.Right;
    public FormLabelPosition Labelposition = FormLabelPosition.Top;
    public FormValidationDisplay ValidationDisplay = FormValidationDisplay.Tooltip;
    public string[] LabelPosition = Enum.GetNames(typeof(FormLabelPosition));
    public string[] ButtonAlignment = Enum.GetNames(typeof(FormButtonsAlignment));
    public string[] ValidationMessageDisplay = Enum.GetNames(typeof(FormValidationDisplay));
    private void FormUpdate(FormUpdateEventArgs args)
    {

    }
    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();
    }
    private EventRegistration _registrationModel = new EventRegistration();
}


<style>
    .form-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

        .form-container > * {
            width: 48%;
        }

    #PropertyPanel {
        margin-top: 2rem;
    }
</style>
