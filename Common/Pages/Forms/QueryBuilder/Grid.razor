@page "/query-builder/grid"

@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Grids
@using BlazorDemos.Models.QueryBuilderData

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to populate data in the Grid component based on filters created using the QueryBuilder component.</p>
</SampleDescription>
<ActionDescription>
    <p>This sample shows how to integrate the Data Grid component with the QueryBuilder component.</p>
    <p>The Grid component is automatically refreshed when filters in the QueryBuilder are edited.</p>
    <p>For more information about the Blazor QueryBuilder component, refer to this <a target="_blank" href="https://blazor.syncfusion.com/documentation/query-builder/getting-started/" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <SfQueryBuilder @ref="QueryBuilderComponent" TValue="HardWareDetails" DataSource="@HardwareRecords">
        <QueryBuilderRule Condition="and" Rules="@InitialRules"></QueryBuilderRule>
        <QueryBuilderEvents TValue="HardWareDetails" Created="OnQueryBuilderCreated" RuleChanged="OnRuleChanged"></QueryBuilderEvents>
        <QueryBuilderColumns>
            <QueryBuilderColumn Field="TaskID" Label="Task ID" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.Number></QueryBuilderColumn>
            <QueryBuilderColumn Field="Name" Label="Name" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
            <QueryBuilderColumn Field="Category" Label="Category" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
            <QueryBuilderColumn Field="SerialNo" Label="Serial No" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
            <QueryBuilderColumn Field="InvoiceNo" Label="Invoice No" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
            <QueryBuilderColumn Field="Status" Label="Status" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
        </QueryBuilderColumns>
    </SfQueryBuilder>
</div>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="HardWareDetails" DataSource="@FilteredGridData" AllowPaging="true">
                <GridEvents Created="OnGridCreated" TValue="HardWareDetails"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(HardWareDetails.TaskID) HeaderText="Task ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Name) HeaderText="Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Category) HeaderText="Category" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.SerialNo) HeaderText="Serial No" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.InvoiceNo) HeaderText="Invoice No" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(HardWareDetails.Status) HeaderText="Status" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    private SfQueryBuilder<HardWareDetails> QueryBuilderComponent { get; set; }
    private IEnumerable<HardWareDetails> FilteredGridData { get; set; }
    private IEnumerable<HardWareDetails> HardwareRecords { get; set; }
    const string CategoryField = "Category";
    const string StringType = "String";

    protected override void OnInitialized()
    {
        HardwareRecords = HardWareDetails.GetAllRecords();
    }

    private void OnQueryBuilderCreated()
    {
        OnGridCreated();
    }

    private List<RuleModel> InitialRules = new List<RuleModel>()
    {
        new RuleModel { Field = CategoryField, Label = CategoryField, Value = "Laptop", Operator = "equal", Type = StringType }
    };

    private void OnRuleChanged(Syncfusion.Blazor.QueryBuilder.RuleChangeEventArgs args)
    {
        FilterGridData();
        StateHasChanged();
    }

    private void FilterGridData()
    {
        FilteredGridData = QueryBuilderComponent.GetValidRules().Rules.Count > 0 ? QueryBuilderComponent.GetFilteredRecords().ToList() : HardwareRecords;
    }

    private void OnGridCreated()
    {
        FilteredGridData = QueryBuilderComponent.GetFilteredRecords().ToList().AsEnumerable<HardWareDetails>();
    }

}

<style>
    .e-grid {
        margin: 0 auto;
    }

    .control-section {
        min-height: auto;
    }
</style>