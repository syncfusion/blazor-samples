@page "/query-builder/mongo-query"

@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.Text.Json.Serialization
@using Syncfusion.Blazor.SplitButtons

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the Query Builder component by showing different types of queries such as SQL and MongoDB . The query preview can be changed using the tab component. Queries can be imported to the Query Builder using the import dropdown button.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this demo, Query Builder features include exporting and importing the query as an SQL query and MongoDB queries.
        MongoDB is a tool that allows users to search for error logs in a MongoDB database. It provides a user-friendly interface for constructing and executing queries and allows users to filter, sort, and export the results for further analysis.
    </p>
    <p>In mobile mode, the component is shown vertically.</p>
    <p>
        The following methods were used in this sample to perform mongo and SQL query related changes.
    </p>
    <ul>
        <li>SetMongoQuery</li>
        <li>GetMongoQuery</li>
        <li>SetParameterSql</li>
        <li>GetParameterSql</li>
        <li>SetNamedParameterSql</li>
        <li>GetNamedParameterSql</li>
    </ul>
    <p>More information about Blazor QueryBuilder component can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/query-builder/getting-started/" aria-label="documentation section">documentation </a>section.</p>
</ActionDescription>


<div class="e-main-content">
    <div class="e-top-content">
        <SfDropDownButton Content="Import" CssClass="e-caret-hide">
            <DropDownButtonEvents ItemSelected="ItemSelected"></DropDownButtonEvents>
            <DropDownMenuItems>
                <DropDownMenuItem Text="Import Mongo Query"></DropDownMenuItem>
                <DropDownMenuItem Text="Import Inline SQL"></DropDownMenuItem>
                <DropDownMenuItem Text="Import Parameter SQL"></DropDownMenuItem>
                <DropDownMenuItem Text="Import Named Parameter SQL"></DropDownMenuItem>
            </DropDownMenuItems>
        </SfDropDownButton>
    </div>
    <div>
        <SfQueryBuilder TValue="EmployeeDetails" @ref="QueryBuilderObj">
            <QueryBuilderEvents TValue="EmployeeDetails" Changed="QueryBuilderChanged"></QueryBuilderEvents>
            <QueryBuilderRule Condition="and" Rules="@Rules"></QueryBuilderRule>
            <QueryBuilderColumns>
                <QueryBuilderColumn Field="EmployeeID" Label="Employee ID" Type="ColumnType.Number"></QueryBuilderColumn>
                <QueryBuilderColumn Field="FirstName" Label="First Name" Type="ColumnType.String"></QueryBuilderColumn>
                <QueryBuilderColumn Field="LastName" Label="Last Name" Type="ColumnType.String"></QueryBuilderColumn>
                <QueryBuilderColumn Field="IsDeveloper" Label="IsDeveloper" Type="ColumnType.Boolean"></QueryBuilderColumn>
                <QueryBuilderColumn Field="Age" Label="Age" Type="ColumnType.Number"></QueryBuilderColumn>
                <QueryBuilderColumn Field="PrimaryFramework" Label="Primary Framework" Type="ColumnType.String"></QueryBuilderColumn>
                <QueryBuilderColumn Field="HireDate" Label="Hire Date" Type="ColumnType.Date"></QueryBuilderColumn>
                <QueryBuilderColumn Field="Country" Label="Country" Type="ColumnType.String"></QueryBuilderColumn>
            </QueryBuilderColumns>
        </SfQueryBuilder>
    </div>
    <div class="e-bottom-content">
        <div class="e-query-preview">
            <SfTab>
                <TabEvents Selected="TabChanged" Created="TabCreated">
                </TabEvents>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="SQL"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="preview">
                                <div class="content">
                                    <SfRadioButton CssClass="e-radio-btns" Label="Inline" Name="Inline" Value="Inline" TChecked="string" @onchange="OnChange" @bind-Checked="QueryType"></SfRadioButton>
                                    <SfRadioButton CssClass="e-radio-btns" Label="Parameter" Name="Parameter" Value="Parameter" TChecked="string" @onchange="OnChange" @bind-Checked="QueryType"></SfRadioButton>
                                    <SfRadioButton CssClass="e-radio-btns" Label="Named Parameter" Name="Named Parameter" Value="Named Parameter" TChecked="string" @onchange="OnChange" @bind-Checked="QueryType"></SfRadioButton>
                                    <div id="content" style="margin-top: 10px;">
                                        <SfTextBox Multiline=true Readonly=true Value="@ExportContent" CssClass="e-text-area-content e-sql-content"></SfTextBox>
                                    </div>
                                </div>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="MongoDB"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="content" style="margin-top: 10px;">
                                <SfTextBox Multiline=true Readonly=true Value="@ExportContent" CssClass="e-text-area-content e-mongo-content"></SfTextBox>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
            <SfDialog ShowCloseIcon="true" @ref="DialogObj" Height="420px" Width="700px" IsModal="true" @bind-Visible="@IsVisible">
                <DialogEvents OnOpen="@DialogOpen"></DialogEvents>
                <DialogTemplates>
                    <Header>@Header</Header>
                    <Content>
                        <form>
                            <textarea class="content-area" id="content-area" @bind="ImportContent"></textarea>
                            <span class="@ErrorValue">Invalid Query</span>
                        </form>
                    </Content>
                </DialogTemplates>
                <DialogAnimationSettings Effect="@DialogAnimationEffect" Duration=400 Delay="0" />
                <DialogButtons>
                    <DialogButton Content="Cancel" OnClick="@CancelClick" />
                    <DialogButton Content="Import" IsPrimary="true" OnClick="@ImportClick" />
                </DialogButtons>
            </SfDialog>
        </div>
    </div>
</div>

@code {
    private List<RuleModel> Rules = new List<RuleModel>()
    {
        new RuleModel { Label="First Name", Field="FirstName", Type="String", Operator="equal", Value = "Andre" },
        // new RuleModel { Label="Last Name", Field="LastName", Type="String", Operator="in", Value = new string[] { "Davolio", "Buchanan" } },
        new RuleModel { Label="Last Name", Field="LastName", Type="String", Operator="equal", Value = "Davolio" },
        new RuleModel { Label="Age", Field="Age", Type="Number", Operator="equal", Value = 29 },
        new RuleModel {
            Condition = "or", Rules = new List<RuleModel>() {
                new RuleModel { Label= "Is Developer", Field = "IsDeveloper", Type = "Boolean", Operator = "equal", Value = true },
                new RuleModel { Label= "Primary Framework", Field = "PrimaryFramework", Type = "String", Operator = "equal", Value = "React" }
            }
        }
    };

    public class EmployeeDetails
    {
        public int EmployeeID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int Age { get; set; }
        public bool IsDeveloper { get; set; }
        public string PrimaryFramework { get; set; }
        public DateTime HireDate { get; set; }
        public string Country { get; set; }
    }

    SfDialog DialogObj;
    SfQueryBuilder<EmployeeDetails> QueryBuilderObj { get; set; }
    private bool IsVisible { get; set; } = false;
    private string Header { get; set; }
    string ErrorValue = "error-msg-hide";
    private DialogEffect DialogAnimationEffect { get; set; } = DialogEffect.Zoom;
    private ParameterSql ParameterSql { get; set; }
    private NamedParameterSql ParameterNamedSQL { get; set; }
    private string SQL { get; set; }
    private string ExportContent { get; set; } = "";
    private string ImportContent { get; set; } = "";
    private string QueryType { get; set; } = "Inline";
    private int SelectedTabIndex { get; set; } = 0;

    private void ItemSelected(MenuEventArgs args)
    {
        this.IsVisible = true;
        switch(args.Item.Text)
        {
            case "Import Parameter SQL":
                ParameterSql = QueryBuilderObj.GetParameterSql(QueryBuilderObj.GetValidRules());
                ImportContent = JsonSerializer.Serialize(ParameterSql, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
                Header = "Parameter SQL";
                break;
            case "Import Inline SQL":
                ImportContent = QueryBuilderObj.GetSqlFromRules(QueryBuilderObj.GetValidRules());
                Header = "SQL";
                break;
            case "Import Named Parameter SQL":
                ParameterNamedSQL = QueryBuilderObj.GetNamedParameterSql(QueryBuilderObj.GetValidRules());
                ImportContent = JsonSerializer.Serialize(ParameterNamedSQL, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
                Header = "Named Parameter SQL";
                break;
            default:
                string mongoQuery = QueryBuilderObj.GetMongoQuery(QueryBuilderObj.GetValidRules());
                JsonDocument jsonDocument = JsonDocument.Parse(mongoQuery);
                ImportContent = JsonSerializer.Serialize(jsonDocument.RootElement, new JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
                Header = "MongoDB Query";
                break;
        }
    }

    private void CancelClick()
    {
        this.IsVisible = false;
    }

    private void DialogOpen()
    {
        ErrorValue = "error-msg-hide";
    }

    private void ImportClick()
    {
        try
        {
            if (Header != "SQL") {
                if (Header == "Named Parameter SQL")
                {
                    JsonSerializer.Deserialize<NamedParameterSql>(ImportContent);
                }
                if (Header == "Parameter SQL")
                {
                    JsonSerializer.Deserialize<ParameterSql>(ImportContent);
                }
            }
            if (Header == "MongoDB Query")
            {
                QueryBuilderObj.SetMongoQuery(ImportContent);
            }
            else if (Header == "Named Parameter SQL")
            {
                ParameterNamedSQL = JsonSerializer.Deserialize<NamedParameterSql>(ImportContent);
                QueryBuilderObj.SetNamedParameterSql(ParameterNamedSQL);
            }
            else if (Header == "Parameter SQL")
            {
                ParameterSql = JsonSerializer.Deserialize<ParameterSql>(ImportContent);
                QueryBuilderObj.SetParameterSql(ParameterSql);
            }
            else if (Header == "SQL")
            {
                QueryBuilderObj.SetRulesFromSql(ImportContent);
            }
            UpdateContent();
            this.IsVisible = false;
        }
        catch (Exception e)
        {
            ErrorValue = "error-msg";
        }

    }

    private void QueryBuilderChanged(Syncfusion.Blazor.QueryBuilder.ChangeEventArgs args)
    {
        UpdateContent();
    }

    public void TabCreated()
    {
        UpdateTextContent();
    }

    public void TabChanged(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        SelectedTabIndex = args.SelectedIndex;
        UpdateContent();
    }

    private void UpdateContent()
    {
        switch (SelectedTabIndex)
        {
            case 0:
                UpdateTextContent();
                break;
            case 1:
                ConvertMongoDBQuery();
                break;
        }
    }

    private void OnChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        QueryType = args.Value.ToString();
        UpdateTextContent();
    }

    private void UpdateTextContent()
    {
        RuleModel Rule = QueryBuilderObj.GetValidRules();
        switch (QueryType)
        {
            case "Inline":
                ExportContent = QueryBuilderObj.GetSqlFromRules(Rule);
                break;
            case "Parameter":
                ParameterSql = QueryBuilderObj.GetParameterSql(Rule);
                ExportContent = JsonSerializer.Serialize(ParameterSql, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
                break;
            case "Named Parameter":
                ParameterNamedSQL = QueryBuilderObj.GetNamedParameterSql(Rule);
                ExportContent = JsonSerializer.Serialize(ParameterNamedSQL, new JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping });
                break;
        }
    }

    private void ConvertMongoDBQuery()
    {
        string mongoQuery = (QueryBuilderObj.GetMongoQuery(QueryBuilderObj.GetValidRules()));
        JsonDocument jsonDocument = JsonDocument.Parse(mongoQuery);
        ExportContent = JsonSerializer.Serialize(jsonDocument.RootElement, new JsonSerializerOptions
            {
                WriteIndented = true
            });
    }

    public class CustomConverter : JsonConverter<RuleModel>
    {
        public override RuleModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            throw new NotImplementedException();
        }

        public override void Write(Utf8JsonWriter writer, RuleModel value, JsonSerializerOptions options)
        {
            writer.WriteStartObject();
            if (value.Condition != null)
            {
                writer.WriteString("Condition", value.Condition);
            }
            if (value.Operator != null)
            {
                writer.WriteString("Operator", value.Operator);
            }
            if (value.Field != null)
            {
                writer.WriteString("Field", value.Field);
            }
            if (value.Type != null)
            {
                writer.WriteString("Type", value.Type);
            }
            if (value.Not != null)
            {
                writer.WriteBoolean("Not", value.Not.Value);
            }
            if (value.Value != null)
            {
                writer.WritePropertyName("Value");
                JsonSerializer.Serialize(writer, value.Value, options);
            }
            if (value.Rules != null)
            {
                writer.WritePropertyName("Rules");
                JsonSerializer.Serialize(writer, value.Rules, options);
            }
            writer.WriteEndObject();
        }
    }
}
<style>
    .e-main-content {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 5px;
    }
    .e-settings-popup-content {
        width: 220px;
    }
    .e-bottom-content {
        margin-top: 50px;
    }
    .e-query-preview .e-tab {
        height: 200px;
    }
    .e-query-preview .preview {
        margin-top: 20px;
    }
    .e-query-preview .content {
        margin: 10px;
    }
    .e-text-area-content {
        margin: 10px;
        overflow: auto;
        border: none;
        height: 300px;
        width: 98%;
    }
    .e-text-area-content:focus-visible {
        outline: none;
    }
    .e-query-preview .e-sql-content,
    .e-query-preview .e-mongo-content,
    .e-query-preview .e-json-content {
        margin: 10px;
        border: none;
        height: 200px;
        width: 98%;
    }
    .e-query-preview .e-mongo-content,
    .e-query-preview .e-json-content {
        height: 320px;
    }
    .e-custom-radio-btn {
        margin-left: 20px;
    }
    .content-area {
        border: 1px solid black;
        height: 225px !important;
        width: 100% !important;
        overflow-x: hidden;
        padding: 10px;
    }
    .e-pre-content {
        width: 0px;
    }
    .e-radio-btns {
        margin-left: 20px;
    }
    .e-top-content {
        margin-bottom: 6px;
        height: 32px;
    }
    .e-top-content .e-icons.e-settings:before {
        padding-left: 8px;
    }
    .e-top-content .e-dropdown-btn {
        float: right;
    }
    .e-top-content .e-caret-hide {
        margin-left: 10px;
    }

    .error-msg-hide {
        display: none;
    }

    .error-msg {
        display: block;
        color: red;
        float: left;
    }

    .fluent-dark .json-content-area,
    .tailwind-dark .json-content-area,
    .highcontrast-dark .json-content-area,
    .bootstrap5\.3-dark .json-content-area,
    .bootstrap-dark .json-content-area,
    .material-dark  .json-content-area,
    .material3-dark .json-content-area,
    .fabric-dark .json-content-area,
    .highcontrast .json-content-area,
    .json-content-area .content-area,
    .fluent2-dark .content-area,
    .fluent2-highcontrast .content-area,
    .bootstrap5\.3-dark .content-area {
        background-color: #1f1f1f;
    }

    .tailwind3-dark .content-area {
        background: transparent;
        border-color: #374151;
    }
</style>
