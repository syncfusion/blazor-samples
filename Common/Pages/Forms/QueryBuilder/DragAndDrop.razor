@page "/query-builder/drag-and-drop"

@using Syncfusion.Blazor.QueryBuilder
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using System.Text.Json.Serialization
@using blazor_griddata

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the drag-and-drop support of the QueryBuilder component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, the QueryBuilder includes a drag-and-drop feature that allows you to move rules or groups to different positions. You can enable or disable this feature using the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.QueryBuilder.SfQueryBuilder-1.html#Syncfusion_Blazor_QueryBuilder_SfQueryBuilder_1_AllowDragAndDrop">AllowDragAndDrop</a> property.</p>
    <p>More information about the Blazor QueryBuilder component can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/query-builder/getting-started/" aria-label="documentation section">documentation</a> section.</p>
</ActionDescription>

<div class="e-main-content">
    <div>
        <SfQueryBuilder DataSource="@OrderDataSource" AllowDragAndDrop="true" @ref="QueryBuilder">
            <QueryBuilderEvents TValue="Orders" RuleChanged="OnQueryBuilderRuleChanged"></QueryBuilderEvents>
            <QueryBuilderRule Condition="and" Rules="@InitialRules"></QueryBuilderRule>
            <QueryBuilderColumns>
                <QueryBuilderColumn Field="CustomerID" Label="Customer ID" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                <QueryBuilderColumn Field="EmployeeID" Label="Employee ID" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.Number></QueryBuilderColumn>
                <QueryBuilderColumn Field="Verified" Label="Verified" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.Boolean></QueryBuilderColumn>
                <QueryBuilderColumn Field="ShipName" Label="Ship Name" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                <QueryBuilderColumn Field="OrderDate" Label="Order Date" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.Date Format="dd/MM/yyyy"></QueryBuilderColumn>
                <QueryBuilderColumn Field="ShipCountry" Label="Ship Country" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
                <QueryBuilderColumn Field="ShipAddress" Label="Ship Address" Type=Syncfusion.Blazor.QueryBuilder.ColumnType.String></QueryBuilderColumn>
            </QueryBuilderColumns>
        </SfQueryBuilder>
    </div>
    <div class="e-bottom-content">
        <div class="e-query-preview">
            <SfTab>
                <TabEvents Selected="OnTabSelected" Created="OnTabCreated"></TabEvents>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="SQL"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="preview">
                                <div class="content">
                                    <SfRadioButton CssClass="e-radio-btns" Label="Inline" Name="Inline" Value="Inline" TChecked="string" @onchange="OnQueryTypeChange" @bind-Checked="CurrentQueryType"></SfRadioButton>
                                    <SfRadioButton CssClass="e-radio-btns" Label="Parameter" Name="Parameter" Value="Parameter" TChecked="string" @onchange="OnQueryTypeChange" @bind-Checked="CurrentQueryType"></SfRadioButton>
                                    <SfRadioButton CssClass="e-radio-btns" Label="Named Parameter" Name="Named Parameter" Value="Named Parameter" TChecked="string" @onchange="OnQueryTypeChange" @bind-Checked="CurrentQueryType"></SfRadioButton>
                                    <div id="content" style="margin-top: 10px;">
                                        <SfTextBox Multiline="true" Readonly="true" Value="@ExportedQuery" CssClass="e-text-area-content e-sql-content"></SfTextBox>
                                    </div>
                                </div>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="JSON"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div id="content" style="margin-top: 10px;">
                                <SfTextBox Multiline="true" Readonly="true" Value="@ExportedQuery" CssClass="e-text-area-content e-json-content"></SfTextBox>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </div>
    </div>
</div>

@code {
    private SfQueryBuilder<Orders> QueryBuilder { get; set; }
    private string ExportedQuery { get; set; } = "";
    private string CurrentQueryType { get; set; } = "Inline";
    private int SelectedTabIndex { get; set; } = 0;
    private List<Orders> OrderDataSource { get; set; }
    const string EmployeeIdField = "EmployeeID";
    const string NumberType = "Number";
    const string CustomerIdField = "CustomerID";
    const string StringType = "String";

    private List<RuleModel> InitialRules = new List<RuleModel>()
    {
        new RuleModel { Label = "Employee ID", Field = EmployeeIdField, Type = NumberType, Operator = "equal", Value = 1001 },
        new RuleModel { Label = "Customer ID", Field = CustomerIdField, Type = StringType, Operator = "equal", Value = "FLKIN" },
        new RuleModel
        {
            Condition = "or",
            Rules = new List<RuleModel>
            {
                new RuleModel { Label = "Order Date", Field = "OrderDate", Type = "Date", Operator = "equal", Value = new DateTime(2024, 01, 12) },
                new RuleModel { Label = "Ship Country", Field = "ShipCountry", Type = StringType, Operator = "equal", Value = "USA" }
            }
        }
    };

    protected override void OnInitialized()
    {
        OrderDataSource = Orders.GetAllRecords();
    }

// Event Handlers
    private void OnQueryBuilderRuleChanged(Syncfusion.Blazor.QueryBuilder.RuleChangeEventArgs args)
    {
        UpdateExportedQuery();
    }

    private void OnTabCreated()
    {
        UpdateExportedQuery();
    }

    private void OnTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        SelectedTabIndex = args.SelectedIndex;
        UpdateExportedQuery();
    }

    private void OnQueryTypeChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        CurrentQueryType = args.Value.ToString();
        UpdateExportedQuery();
    }
    
    private void UpdateExportedQuery()
    {
        switch (SelectedTabIndex)
        {
            case 0:
                UpdateSQLContent();
                break;
            case 1:
                ConvertRulesToJSON();
                break;
        }
    }

    private void UpdateSQLContent()
    {
        var validRules = QueryBuilder.GetValidRules();
        ExportedQuery = CurrentQueryType switch
        {
            "Inline" => QueryBuilder.GetSqlFromRules(validRules),
            "Parameter" => JsonSerializer.Serialize(QueryBuilder.GetParameterSql(validRules), GetJsonOptions()),
            "Named Parameter" => JsonSerializer.Serialize(QueryBuilder.GetNamedParameterSql(validRules), GetJsonOptions()),
            _ => ExportedQuery
        };
    }

    private void ConvertRulesToJSON()
    {
        var validRules = QueryBuilder.GetValidRules();
        ExportedQuery = JsonSerializer.Serialize(validRules, GetJsonOptions());
    }

    private JsonSerializerOptions GetJsonOptions()
    {
        return new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            Converters = { new RuleModelJsonConverter() }
        };
    }

// Custom JSON Converter
    public class RuleModelJsonConverter : JsonConverter<RuleModel>
    {
        public override RuleModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            throw new NotImplementedException();
        }

        public override void Write(Utf8JsonWriter writer, RuleModel value, JsonSerializerOptions options)
        {
            writer.WriteStartObject();
            if (!string.IsNullOrEmpty(value.Condition)) writer.WriteString("Condition", value.Condition);
            if (!string.IsNullOrEmpty(value.Operator)) writer.WriteString("Operator", value.Operator);
            if (!string.IsNullOrEmpty(value.Field)) writer.WriteString("Field", value.Field);
            if (!string.IsNullOrEmpty(value.Type)) writer.WriteString("Type", value.Type);
            if (value.Not.HasValue) writer.WriteBoolean("Not", value.Not.Value);
            if (value.Value != null)
            {
                writer.WritePropertyName("Value");
                JsonSerializer.Serialize(writer, value.Value, options);
            }

            if (value.Rules != null)
            {
                writer.WritePropertyName("Rules");
                JsonSerializer.Serialize(writer, value.Rules, options);
            }

            writer.WriteEndObject();
        }
    }

}

<style>
    .e-query-builder {
        margin: 0 auto;
    }
    .material3 .e-query-builder .e-group-header .e-group-action .e-btn,
    .material3-dark .e-query-builder .e-group-header .e-group-action .e-btn { 
        box-shadow: none; 
    }
    .fluent .e-query-builder .e-group-header .e-group-action .e-btn { 
        background: #f3f2f1;
        border: 0 solid #f3f2f1;
    }
    .bootstrap5 .e-query-builder .e-group-header .e-group-action .e-btn { 
        background: #fff;
        box-shadow: none;
        color: #6c757d;
    }
    .e-main-content {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 5px;
    }
    .e-settings-popup-content {
        width: 220px;
    }
    .e-bottom-content {
        margin-top: 50px;
    }
    .e-query-preview .e-tab {
        height: 200px;
    }
    .e-query-preview .preview {
        margin-top: 20px;
    }
    .e-query-preview .content {
        margin: 10px;
    }
    .e-text-area-content {
        margin: 10px;
        overflow: auto;
        border: none;
        height: 300px;
        width: 98%;
    }
    .e-text-area-content:focus-visible {
        outline: none;
    }
    .e-query-preview .e-sql-content,
    .e-query-preview .e-mongo-content,
    .e-query-preview .e-json-content {
        margin: 10px;
        border: none;
        height: 200px;
        width: 98%;
    }
    .e-query-preview .e-mongo-content,
    .e-query-preview .e-json-content {
        height: 320px;
    }
    .e-custom-radio-btn {
        margin-left: 20px;
    }
    .content-area {
        border: 1px solid black;
        height: 225px !important;
        width: 100% !important;
        overflow-x: hidden;
        padding: 10px;
    }
    .e-pre-content {
        width: 0px;
    }
    .e-radio-btns {
        margin-left: 20px;
    }
    .error-msg-hide {
        display: none;
    }
    .error-msg {
        display: block;
        color: red;
        float: left;
    }
</style>