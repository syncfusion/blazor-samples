@page "/kanban/observable"
@using Syncfusion.Blazor.Kanban
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the data binding of <code>ObservableCollection</code> with Kanban component.</p>
</SampleDescription>
<ActionDescription>
    <p>Kanban automatically updates the UI, when the data objects are added and removed in the data source while using <code>ObservableCollection</code> as data source. 
        Also, Kanban automatically updates the UI for changes in the data object, and while the data object implements <code>INotifyPropertyChanged</code> interface.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper" id="toast-kanban-observable">
        <div class="row">
            <div class="btn" style="margin: 0 0 7px 7px;">
                <SfButton @onclick="AddRecord">Add Card</SfButton>
                <SfButton @onclick="DeleteRecord">Delete Card</SfButton>
                <SfButton @onclick="UpdateRecord">Update Card</SfButton>
            </div>
            <SfKanban KeyField="Status" DataSource="@TasksCollection">
                <KanbanColumns>
                    @foreach (ColumnModel item in ColumnData)
                    {
                        <KanbanColumn HeaderText="@item.HeaderText" KeyField="@item.KeyField" AllowAdding="true"/>
                    }
                </KanbanColumns>
                <KanbanCardSettings HeaderField="Id" ContentField="Summary"/>
            </SfKanban>
            <SfToast @ref="ToastObj" ID="toast_type" Content="@ToastContent" Timeout=2000 Target="@ToastTarget">
                <ToastPosition X="Right" Y="Top"/>
            </SfToast>
        </div>
    </div>
</div>

@code{
    private SfToast ToastObj;
    
    private List<ColumnModel> ColumnData = new List<ColumnModel>() 
    {
        new ColumnModel(){ HeaderText= "To Do", KeyField= new List<string>() { "Open" } },
        new ColumnModel(){ HeaderText= "In Progress", KeyField= new List<string>() { "In Progress" } },
        new ColumnModel(){ HeaderText= "Testing", KeyField= new List<string>() { "Testing" } },
        new ColumnModel(){ HeaderText= "Done", KeyField=new List<string>() { "Close" } }
    };

    public ObservableCollection<KanbanTask> TasksCollection { get; set; }
    private string ToastContent { get; set; }
    private int AddUniqueId { get; set; }
    private int UpdateUniqueId { get; set; }
    private string ToastTarget { get; set; } = "#toast-kanban-observable";

    protected override void OnInitialized()
    {
        var tasks = Enumerable.Range(1, 20).Select(x => new KanbanTask()
        {
            Id = "Task 1000" + x,
            Status = (new string[] { "Open", "In Progress", "Testing", "Close" })[new Random().Next(4)],
            Summary = (new string[] { "Analyze the new requirements gathered from the customer.", "Improve application performance", "Fix the issues reported in the IE browser.", "Validate new requirements", "Test the application in the IE browser." })[new Random().Next(5)],
            Assignee = (new string[] { "Nancy Davloio", "Andrew Fuller", "Janet Leverling", "Steven walker", "Margaret hamilt", "Michael Suyama", "Robert King" })[new Random().Next(7)],
        }).ToList();
        TasksCollection = new ObservableCollection<KanbanTask>(tasks);
    }

    public async Task AddRecord()
    {
        var TaskId = "Task 10000" + ++AddUniqueId;
        this.ToastContent = "<b>Open</b> Column, <b>" + TaskId + "</b> Card has been added";
        await Task.Delay(100);
        TasksCollection.Add(new KanbanTask() { Id = TaskId, Status = "Open", Summary = "Improve application performance", Assignee = "Janet Leverling" });
        await this.ToastObj.ShowAsync();
    }

    public async Task DeleteRecord()
    {
        if (TasksCollection.Any())
        {
            this.ToastContent = "<b>" + TasksCollection.First().Status + "</b> Column, <b>" + TasksCollection.First().Id + "</b> Card has been deleted";
            await Task.Delay(100);
            TasksCollection.Remove(TasksCollection.First());
            await this.ToastObj.ShowAsync();
        }
    }

    public async Task UpdateRecord()
    {
        if (TasksCollection.Any())
        {
            var updateId = ++UpdateUniqueId;
            var data = TasksCollection[updateId];
            this.ToastContent = "<b>" + data.Status + "</b> Column, <b>" + data.Id + "</b> Card has been updated";
            await Task.Delay(100);
            data.Summary = "Card Updated";
            data.Status = "Testing";
            await this.ToastObj.ShowAsync();
        }
    }

    public class KanbanTask : INotifyPropertyChanged
    {
        public string Id { get; set; }
        private string _status { get; set; }
        public string Status
        {
            get { return _status; }
            set
            {
                this._status = value;
                NotifyPropertyChanged("Status");
            }
        }
        public string Summary { get; set; }
        public string Assignee { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
