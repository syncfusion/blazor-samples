@page "/chips/api"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the most commonly used API functionalities of the Chips component. Select any combination of properties from the property pane to customize the appearance of the Chips. </p>
</SampleDescription>
<ActionDescription>
    <p>In this sample, the default Chips are rendered with minimal configuration.</p>
    <p>The Chips component can be customized further with the combination of Chip properties from the property pane. For example, </p>
    <ul>
        <li>The <a target="_blank" href="https://blazor.syncfusion.com/documentation/chip/customization#leading-icon" aria-label="Blazor Chip Leading icon documentation">Leading icon</a> can be customized with avatar initials, icons, and images from the property pane. </li>
        <li>The Color variant can be changed by selecting the color dropdown from the property pane. </li>
        <li>The Leading and <a target="_blank" href="https://blazor.syncfusion.com/documentation/chip/customization#trailing-icon" aria-label="Blazor Chip Trailing icons documentation">Trailing icons</a> can be enabled or disabled by using the leading and trailing icon checkbox from the property pane. </li>
        <li>The <a target="_blank" href="https://blazor.syncfusion.com/documentation/chip/customization#outline-chip" aria-label="Blazor Outline Chip documentation">Outline Chip</a> can be enabled or disabled by using the outline checkbox from the property pane. </li>
    </ul>
</ActionDescription>


<div class="col-lg-8 control-section sb-property-border">
    <div id="chip-wrapper">
        <SfChip CssClass="@ChipCssClass">
            <ChipItems>
                <ChipItem Text="Janet Leverling"
                          LeadingIconCss="@(AvatarIcon ? AvatarCssClass : LeadingIconCss ? "janet" : string.Empty)"
                          TrailingIconCss="@(TrailingIconCss ? "e-dlt-btn" : string.Empty)"
                          CssClass="@($"{ChipColor} {(Outline ? "e-outline" : string.Empty)}")"
                          LeadingText="@(LeadingIconText == "letter" ? "JL" : string.Empty)">
                </ChipItem>
            </ChipItems>
        </SfChip>
    </div>
</div>

<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div><div class="property-panel-content">
            <table id="property" class="property-panel-table">
                <tbody>
                    <tr>
                        <td class="e-width-50">
                            <div class="userselect">Avatar</div>
                        </td>
                        <td class="e-width-50 e-padding-right-10">
                            <div>
                                <SfDropDownList TValue="string" TItem="DropDownModel" DataSource="@AvatarData" Placeholder="Select a avatar type">
                                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" TItem="DropDownModel" ValueChange="@ChangeAvatar" />
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-width-50">
                            <div class="userselect">Color</div>
                        </td>
                        <td class="e-width-50 e-padding-right-10">
                            <div>
                                <SfDropDownList TValue="string" TItem="DropDownModel" DataSource="@ColorData" Placeholder="Select a color">
                                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" TItem="DropDownModel" ValueChange="@(e => { ChipColor = e.Value; })"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-width-50">
                            <div class="userselect">Leading icon</div>
                        </td>
                        <td class="e-width-50 e-padding-right-10">
                            <div class="e-padding-left-top-0">
                                <SfCheckBox TChecked="bool" ValueChange="@(e => { LeadingIconCss = (bool)e.Checked; })">
                                </SfCheckBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-width-50">
                            <div class="userselect">Trailing icon</div>
                        </td>
                        <td class="e-width-50 e-padding-right-10">
                            <div class="e-padding-left-top-0">
                                <SfCheckBox TChecked="bool" ValueChange="@(e => { TrailingIconCss = (bool)e.Checked; })"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-width-50">
                            <div class="userselect">Outline</div>
                        </td>
                        <td class="e-width-50 e-padding-right-10">
                            <div class="e-padding-left-top-0">
                                <SfCheckBox TChecked="bool" ValueChange="@(e => { Outline = (bool)e.Checked; })"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    // Specifies the color of the Chips based on the type like primary, success, info, danger, etc.
    private string ChipColor = string.Empty;
    // Specifies the text value of the leading icon.
    private string LeadingIconText = string.Empty;
    // Specifies the avatar icon CSS class of the Chips item.
    private string AvatarCssClass = string.Empty;
    // Specifies the CSS class to be added for Chips customization.
    private string ChipCssClass = string.Empty;
    // Specifies whether the chip is outline Chips or not.
    private bool Outline = false;
    // Specifies whether to show/hide the leading icon.
    private bool LeadingIconCss = false;
    //Specifies whether to show/hide the avatar as the leading icon.
    private bool AvatarIcon = false;
    // Specifies whether to show/hide the trailing icon.
    private bool TrailingIconCss = false;

    // Specifies the color data for the Chips type.
    private List<DropDownModel> ColorData = new List<DropDownModel>()
    {
        new DropDownModel { Text = "Default", Value = "e-default" },
        new DropDownModel { Text = "Primary", Value = "e-primary" },
        new DropDownModel { Text = "Success", Value = "e-success" },
        new DropDownModel { Text = "Danger", Value = "e-danger" },
        new DropDownModel { Text = "Warning", Value = "e-warning" },
        new DropDownModel { Text = "Info", Value = "e-info" },
    };
    // Specifes the avatar data.
    private List<DropDownModel> AvatarData = new List<DropDownModel>()
    {
        new DropDownModel { Text = "None", Value = "none" },
        new DropDownModel { Text = "Icon", Value = "icon" },
        new DropDownModel { Text = "Image", Value = "image" },
        new DropDownModel { Text = "Letter", Value = "letter" },
    };

    public class DropDownModel
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string Value { get; set; }
    }
    // Specifies the event handler for changing the avatar type.
    public void ChangeAvatar(ChangeEventArgs<string, DropDownModel> args)
    {
        ChipCssClass = "e-leading-avatar";
        AvatarIcon = true;
        AvatarCssClass = string.Empty;
        switch (args.Value)
        {
            case "image":
                AvatarCssClass = "janet";
                break;
            case "icon":
                AvatarCssClass = "e-icon";
                break;
            case "letter":
                LeadingIconText = args.Value;
                break;
            default:
                ChipCssClass = string.Empty;
                LeadingIconText = string.Empty;
                AvatarIcon = false;
                break;
        }
        StateHasChanged();
    }
}

<style>
    /* Sample specific styles */
    #chip-wrapper .janet {
        background-image: url(@(SampleService.WebAssetsPath + "images/chips/janet.png"));
    }

    #chip-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 100px;
    }
    .e-width-50 {
        width: 50%;
    }

    .e-padding-right-10 {
        padding-right: 10px;
    }

    .e-padding-left-top-0 {
        padding-left: 0;
        padding-top: 0;
    }
    /* Chips sample level icon related styles */
    .e-chip .e-chip-avatar.e-icon {
        font-family: 'e-user-icon';
    }
    .e-chip .e-chip-avatar.e-icon:before {
        content: "\e700";
    }
    @@font-face {
        font-family: 'e-user-icon';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj0gSRgAAAEoAAAAVmNtYXDnEOdaAAABjAAAADhnbHlmiAnWagAAAcwAAADwaGVhZBD04psAAADQAAAANmhoZWEHiwNuAAAArAAAACRobXR4C9AAAAAAAYAAAAAMbG9jYQAwAHgAAAHEAAAACG1heHABDwA1AAABCAAAACBuYW1lby+ImAAAArwAAAIxcG9zdGUbI4AAAATwAAAAOwABAAADUv9qAFoEAAAAAAAD3QABAAAAAAAAAAAAAAAAAAAAAwABAAAAAQAAWW9ja18PPPUACwPoAAAAANb8zuYAAAAA1vzO5gAAAAAD3QPqAAAACAACAAAAAAAAAAEAAAADACkAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQPwAZAABQAAAnoCvAAAAIwCegK8AAAB4AAxAQIAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAQNS/2oAWgPqAJYAAAABAAAAAAAABAAAAAPoAAAD6AAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAAkAAAABAAEAAEAAOcB//8AAOcA//8AAAABAAQAAAABAAIAAAAAADAAeAACAAAAAAO+A+oADQAZAAA3FBYXIT4BNS4BJyEOARMeARc+ATcuAScOAS4YFwMzFxgDq4H+zYGr4QOCY2KCAwOCYmGCnCtOISFOK3qiAwOiAe1igwICg2JjggICggAAAAACAAAAAAPdA+oAFAAoAAABDgEHIicjDgEHLgEnLgEnPgE3HgEFFBYfARYfATcXFhc2JDcmJCcGBAOkBfK3KioXEFcpBBEMRUsBBfK3tvL8cVRLDggBBsQKLDDPARMFBf7tz87+7QI+ndEEBwI/Izh2DS+RVZ3RBATRnWCmN3BIETecAgcBBPK1tfIEBPIAAAAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAgAAQABAAAAAAACAAcACQABAAAAAAADAAgAEAABAAAAAAAEAAgAGAABAAAAAAAFAAsAIAABAAAAAAAGAAgAKwABAAAAAAAKACwAMwABAAAAAAALABIAXwADAAEECQAAAAIAcQADAAEECQABABAAcwADAAEECQACAA4AgwADAAEECQADABAAkQADAAEECQAEABAAoQADAAEECQAFABYAsQADAAEECQAGABAAxwADAAEECQAKAFgA1wADAAEECQALACQBLyBDb250YWN0c1JlZ3VsYXJDb250YWN0c0NvbnRhY3RzVmVyc2lvbiAxLjBDb250YWN0c0ZvbnQgZ2VuZXJhdGVkIHVzaW5nIFN5bmNmdXNpb24gTWV0cm8gU3R1ZGlvd3d3LnN5bmNmdXNpb24uY29tACAAQwBvAG4AdABhAGMAdABzAFIAZQBnAHUAbABhAHIAQwBvAG4AdABhAGMAdABzAEMAbwBuAHQAYQBjAHQAcwBWAGUAcgBzAGkAbwBuACAAMQAuADAAQwBvAG4AdABhAGMAdABzAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAgEDAQQABHVzZXIKY2hhdC0wMS13ZgAAAA==) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
</style>
