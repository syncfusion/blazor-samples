@page "/linear-gauge/thermometer"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.LinearGauge
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows a thermometer that displays temperature in both degrees and fahrenheit.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a linear gauge to look like a thermometer. More information about containers can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/linear-gauge/linear-gauge-appearance#customizing-the-linear-gauge-container" aria-label="Blazor Custom Linear Gauge Container documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfLinearGauge Orientation="Orientation.Vertical" Theme="@Theme" Background="transparent">
        <LinearGaugeContainer Width="13" RoundedCornerRadius="5" Type="ContainerType.Thermometer">
            <LinearGaugeContainerBorder Width="1"></LinearGaugeContainerBorder>
            <LinearGaugeAxes>
                <LinearGaugeAxis Minimum="-20" Maximum="50">
                    <LinearGaugeLine Width="0" />
                    <LinearGaugeMajorTicks Interval="10" Height="7" />
                    <LinearGaugeMinorTicks Interval="5" Height="0" />
                    <LinearGaugeAxisLabelStyle>
                        <LinearGaugeAxisLabelFont FontFamily="inherit"></LinearGaugeAxisLabelFont>
                    </LinearGaugeAxisLabelStyle>
                    <LinearGaugePointers>
                        <LinearGaugePointer PointerValue="35" Color="#0074E3" MarkerType="MarkerType.Triangle" Placement="Placement.Center" Height="12" Width="12" Offset="3" />
                    </LinearGaugePointers>
                    <LinearGaugeAnnotations>
                        <LinearGaugeAnnotation AxisIndex="0" AxisValue="50" X="0" Y="0" ZIndex="1">
                            <ContentTemplate>
                                <div class="annotation-text">@Celius</div>
                            </ContentTemplate>
                        </LinearGaugeAnnotation>
                        <LinearGaugeAnnotation AxisIndex="1" AxisValue="120" X="0" Y="0" ZIndex="1">
                            <ContentTemplate>
                                <div class="content-text">@Degree</div>
                            </ContentTemplate>
                        </LinearGaugeAnnotation>
                    </LinearGaugeAnnotations>
                </LinearGaugeAxis>
                <LinearGaugeAxis Minimum="0" Maximum="120" OpposedPosition="true">
                    <LinearGaugeLine Width="0" />
                    <LinearGaugeMajorTicks Interval="20" Height="7" />
                    <LinearGaugeMinorTicks Interval="10" Height="0" />
                    <LinearGaugeAxisLabelStyle>
                        <LinearGaugeAxisLabelFont FontFamily="inherit"></LinearGaugeAxisLabelFont>
                    </LinearGaugeAxisLabelStyle>
                    <LinearGaugePointers>
                        <LinearGaugePointer PointerValue="94" Height="13" Width="13" Type="Point.Bar" Color="#0074E3" />
                    </LinearGaugePointers>
                </LinearGaugeAxis>
            </LinearGaugeAxes>
        </LinearGaugeContainer>
    </SfLinearGauge>
</div>

<style>
    .annotation-text {
        font-size: 13px;
        margin-left: -20px;
        margin-top: -30px;
    }

    .content-text {
        font-size: 13px;
        margin-left: 18px;
        margin-top: -30px;
    }
</style>

@code {
    public Theme Theme { get; set; }
    public string Celius = string.Format("{0}\u00B0C", "");
    public string Degree = string.Format("{0}\u00B0F", "");
    
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}