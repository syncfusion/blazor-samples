
@page "/rich-text-editor/types"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.RichTextEditor

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the different display modes supported by the Rich Text Editor's toolbar. Change the toolbar type to observe how it arranges items when they exceed the available viewing space.</p>
</SampleDescription>
<ActionDescription>
    <p>The Rich Text Editor allows supports to set different display modes using <code>Type</code> property of <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.RichTextEditorToolbarSettings.html" aria-label="Class reference of RichTextEditorToolbarSettings">RichTextEditorToolbarSettings</a>. The possible types are as follows,</p>
    <ul>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_Expand" aria-label="Class reference of Expand property in Rich Text Editor">Expand</a> - The Toolbar hides the overflowing items in the next row. Click the expand arrow to view the overflowing Toolbar items.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_MultiRow" aria-label="Class reference of MultiRow property in Rich Text Editor">MultiRow</a> - The Toolbar shows the overflowing items in the next row.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_Scrollable" aria-label="Class reference of Scrollable property in Rich Text Editor">Scrollable</a> -  The Toolbar displays all the items in a single line with horizontal scrolling enabled when commands overflow to available space.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_Popup" aria-label="Class reference of Popup property in Rich Text Editor">Popup</a> -  The Toolbar hides overflowing items in a popup menu when space is limited. The popup is displayed upon clicking the toolbar's overflow icon.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section">
    <div class="">
        <SfRichTextEditor @bind-Value="@RteValue">
            <RichTextEditorToolbarSettings Type="@Tooltype" Items="@Tools" />
        </SfRichTextEditor>
    </div>
</div>

<div class="col-lg-4 property-section">
    <div id="property" title="Properties">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div> Toolbar Type </div>
                    </td>
                    <td>
                        <div style="width: 200px">
                            <SfDropDownList TItem="ToolbarOption" TValue="ToolbarType" PopupHeight="200px" DataSource="@Options" aria-label="Toolbar Type Mode">
                                <DropDownListFieldSettings Text="text" Value="value" />
                                <DropDownListEvents TValue="ToolbarType" TItem="ToolbarOption" ValueChange="ValueChange" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    .property-section table td {
        width: 50%;
    }

    .property-section table div {
        padding-left: 10px;
        padding-top: 35px;
    }

    @@media print {
        a, a:visited {
            color: blue !important;
            text-decoration: underline;
        }

        a[href^="javascript:"]:after, a[href^="#"]:after {
            content: "";
        }

        a[href]:after {
            content: "";
        }
    }

    .sample-browser .sb-header {
        z-index: 10;
    }
</style>
@code{
    private String RteValue { get; set; }
    private ToolbarType Tooltype = ToolbarType.Expand;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Blockquote },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Video },
        new ToolbarItemModel() { Command = ToolbarCommand.Audio },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    protected override Task OnInitializedAsync()
    {
        this.RteValue = @"<p>The Rich Text Editor is a WYSIWYG ('what you see is what you get') editor useful to create and edit content and return the valid HTML markup or markdown of the content.</p><p><b>Toolbar</b></p><ol><li><p>The Toolbar contains commands to align the text, insert a link, insert an image, insert list, undo/redo operations, HTML view, etc </p></li><li><p>The Toolbar is fully customizable. </p></li></ol><p><b>Links</b></p><ol><li><p>You can insert a hyperlink with its corresponding dialog. </p></li><li><p>Attach a hyperlink to the displayed text. </p></li><li><p>Customize the quick toolbar based on the hyperlink. </p></li></ol><p><b>Validation</b></p><ul><li><p>The editor’s content can be validated on form submission by applying validation rules and validation message.</p></li></ul><p><b>Locale</b></p><ul><li><p>The editor provides an option to localize its static strings to adapt the editor to a local language.</p></li></ul><p><b>Image</b></p><ol><li><p>Allows you to insert images from an online source as well as the local computer. </p></li><li><p>You can upload an image. </p></li><li><p>Provides an option to customize the quick toolbar for an image. </p></li></ol><img alt='Logo' src='" + @SampleService.WebAssetsPath + "images/rich-text-editor/rte-image-feather.png'/>";
        return base.OnInitializedAsync();
    }

    private class ToolbarOption
    {
        public ToolbarType value { get; set; }
        public string text { get; set; }
    }

    private List<ToolbarOption> Options = new List<ToolbarOption>()
    {
        new ToolbarOption() { value = ToolbarType.Expand, text = "Expand" },
        new ToolbarOption() { value = ToolbarType.MultiRow, text = "Multi Row" },
        new ToolbarOption() { value = ToolbarType.Scrollable, text = "Scrollable" },
        new ToolbarOption() { value = ToolbarType.Popup, text = "Popup" }
    };

    private void ValueChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<ToolbarType, ToolbarOption> args)
    {
        this.Tooltype = args.ItemData.value;
        StateHasChanged();
    }
}
