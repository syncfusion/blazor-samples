
@page "/rich-text-editor/api"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.RichTextEditor

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the usage of API in Rich Text Editor. Use the properties panel to change the maximum length, read only mode, disable status, to get value, enable HTML encode, select all content and get selected HTML from the Rich Text Editor.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, ensure the API's behavior by doing the following:</p>
    <ul>
        <li>Change the value of <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_MaxLength" aria-label="Class reference of MaxLength property in Rich Text Editor">MaxLength</a> textbox to change maximum Length of the character.</li>
        <li>Click the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_Readonly" aria-label="Class reference of ReadOnly property in Rich Text Editor">ReadOnly</a> check box to enable/disable editable and non-editable modes of the RTE.</li>
        <li>Click the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_Enabled" aria-label="Class reference of Enabled property in Rich Text Editor">Enabled</a> check box to enable/disable the RTE component.</li>
        <li>Click the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_EnableHtmlEncode" aria-label="Class reference of EnableHtmlEncode property in Rich Text Editor">EnableHtmlEncode</a> check box to enableHtmlEncode/disableHtmlEncode the RTE component.</li>
        <li>Click the <code>GetValue</code> button which shows the RTE values in the alert window.</li>
        <li>Click the <code>SelectAll</code> button to select all the text content in the RTE.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section" id="target">
    <div class="control-wrapper">
        <div class="sample-container">
            <div class="default-section">
                <SfDialog @ref="DialogObj" @bind-Visible="@Visibility" Header="@Header" Target="#target" Height="270px"
                          Width="400px" ShowCloseIcon="true">
                     <DialogTemplates>
                        <Content>
                                @Content
                        </Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton Content="OK" IsPrimary="true" OnClick="@DialogButtonClick" />
                    </DialogButtons>
                </SfDialog>
                <SfRichTextEditor @ref="DefaultAPIObj" @bind-Value="@RteValue" ShowCharCount="true" MaxLength="@MaxLength" Readonly="@ReadOnly"
                                  Enabled="@Enabled" EnableHtmlEncode="@EnableHtmlEncode" />
            </div>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div id="property" title="Properties">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div>Maximum Length </div>
                    </td>
                    <td>
                        <div>
                            <SfNumericTextBox Step="1" @bind-Value="@MaxLength" Min="555" Max="2000" Format="n0" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>ReadOnly </div>
                    </td>
                    <td>
                        <div style="padding-left: 0px">
                            <SfCheckBox @bind-Checked="@IsReadonly" ValueChange="ReadOnlyChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Enabled </div>
                    </td>
                    <td>
                        <div style="padding-left: 0px">
                            <SfCheckBox @bind-Checked="@IsEnable" ValueChange="EnableChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Enable Html Encode </div>
                    </td>
                    <td>
                        <div style="padding-left: 0px">
                            <SfCheckBox @bind-Checked="@IsEnableHtmlEncode" ValueChange="EnableHtmlChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <div>
                            <button id="getVal" aria-label="Get current Rich Text Editor value" class="btn btn-default" @onclick="GetValueClick">Get Value</button>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <div>
                            <button id="selectall" aria-label="Select All Content" class="btn btn-default" @onclick="SelectAllonClick">Select All </button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    .property-section table td {
        width: 50%;
    }

    .property-section table div {
        padding-left: 10px;
        padding-top: 10px;
    }
    .bootstrap-dark button#getVal,
    .fluent-dark button#getVal,
    .fluent2-dark button#getVal,
    .bootstrap5-dark button#getVal,
    .bootstrap5\.3-dark button#getVal,
    .tailwind-dark button#getVal,
    .tailwind3-dark button#getVal,
    .highcontrast button#getVal,
    .material3-dark  button#getVal {
        color:  #FFFFFF;
        background: #000000;
    }
    .bootstrap-dark button#selectall,
    .fluent-dark button#selectall,
    .fluent2-dark button#selectall,
    .bootstrap5-dark button#selectall,
    .bootstrap5\.3-dark button#selectall,
    .tailwind-dark button#selectall,
    .tailwind3-dark button#selectall,
    .highcontrast button#selectall,
    .material3-dark  button#selectall {
        color:  #FFFFFF;
        background: #000000;
    }
    .e-dialog .e-dlg-content{
        margin-bottom: 2px;  
    }
    .e-dialog .e-footer-content, .e-dialog .e-dlg-header-content {
        padding-top: 10px;
        padding-bottom: 10px;
    }

</style>

@code {
    private SfDialog DialogObj;
    private SfRichTextEditor DefaultAPIObj;

    private string Content;
    private bool Enabled = true;
    private bool ReadOnly = false;
    private bool Visibility = false;
    private bool EnableHtmlEncode = false;
    private int MaxLength { get; set; } = 560;
    private bool IsEnable { get; set; } = true;
    private bool IsReadonly { get; set; } = false;
    private bool IsEnableHtmlEncode { get; set; } = false;
    private string Header = "RichTextEditor's Value";
    private string RteValue = @"<p>Rich Text Editor is a WYSIWYG editing control which will reduce the effort for users while trying to express their formatting word content as HTML or Markdown format.</p><p><b>API’s:</b></p><ul><li><p>MaxLength - allows restricting the maximum length to be entered.</p></li><li><p>ReadOnly - allows to change it as a non-editable state.</p></li><li><p>Enabled - enable or disable the RTE component.</p></li><li><p>EnableHtmlEncode - Get the encoded string value through value property and source code panel</p></li><li><p>GetValue - get the value of RTE.</p></li></ul>";
    
    private void ReadOnlyChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.ReadOnly = args.Checked;
    }

    private void EnableChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.Enabled = args.Checked;
    }

    private void EnableHtmlChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableHtmlEncode = args.Checked;
    }

    private async Task GetValueClick()
    {
        this.Content = this.RteValue;
        await this.DialogObj.ShowAsync();
    }

    private async Task SelectAllonClick()
    {
        await this.DefaultAPIObj.SelectAllAsync();
    }

    private async Task DialogButtonClick(object arg)
    {
        await this.DialogObj.HideAsync();
    }
}
