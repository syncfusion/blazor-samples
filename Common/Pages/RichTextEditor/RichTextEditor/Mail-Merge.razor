@page "/rich-text-editor/mail-merge"
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using System.Text.RegularExpressions;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates how to implement a mail merge in the Rich Text Editor sample by inserting placeholders into the editor using custom toolbar item, which are then replaced with actual data to create personalized content.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The mail merge in the Rich Text Editor sample enables users to insert placeholders for personalized content. These placeholders are replaced with actual data when generating the final content, making it easy
        to create customized letters, invoices, and more.
    </p>
    <p>The following configurations are used in this sample:</p>
    <ul>
        <li>
            The <code>Button</code> and <code>DropDownButton</code> components are configured in the custom toolbar of
            the Rich Text Editor.
        </li>
        <li>The <code>Button</code> click action performs the merge of the editor placeholder content.</li>
        <li>
            The <code>DropDownButton</code> component provides a list of available fields, such as "First Name" or
            "Email Address." A selected field from this dropdown is inserted into the editor as a placeholder.
        </li>
        <li>
            The <code>Mention</code> component allows insertion of merge fields by pressing the mention character, such
            as <code>{</code>, in the editor and selecting an item. These chips make it easy to see and select fields
            directly within the content.
        </li>
    </ul>
</ActionDescription>

<div class="control-section">
    <div class="control-wrapper">
        <div class="">
           <SfRichTextEditor ID="_mailMergeEditor" @bind-Value="_rteValue" SaveInterval="1" @ref="_mailMergeEditor">
                <RichTextEditorToolbarSettings Items="@_tools">
                    <RichTextEditorEvents OnActionComplete="@OnActionCompleteHandler" />
                    <RichTextEditorCustomToolbarItems>
                        <RichTextEditorCustomToolbarItem Name="MergeData">
                            <Template>
                                <SfButton CssClass="@_buttonClass" OnClick="OnClickHandler" id="merge_data" tabindex="-1" aria-label="Merge User-specific Data" Disabled="@_sourceCodeEnabled">
                                    <div class="e-tbar-btn-text">Merge Data</div>
                                </SfButton>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                        <RichTextEditorCustomToolbarItem Name="InsertField">
                            <Template>
                                <SfDropDownButton CssClass="@_dropDownButtonClass" id="insertField" Items="@_items" aria-label="Insert Merge Field" Disabled="@_sourceCodeEnabled">
                                    <ChildContent>
                                        <span style="display:inline-flex;">
                                            <span class="e-rte-dropdown-btn-text">Insert Field</span>
                                        </span>
                                        <DropDownButtonEvents ItemSelected="OnItemSelect" OnOpen="OnDropDownOpen" Closed="OnDropDownClose"></DropDownButtonEvents>
                                    </ChildContent>
                                </SfDropDownButton>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                    </RichTextEditorCustomToolbarItems>
                </RichTextEditorToolbarSettings>
            </SfRichTextEditor>
            <SfMention DataSource="_mergeData" TItem="MergeData" Target="#_mailMergeEditor" MentionChar="_mentionChar" AllowSpaces="true" PopupWidth='250px' PopupHeight='200px' @ref="mentionObj">
                <DisplayTemplate>
                    <span>{{@((context as MergeData).Value)}}</span>
                </DisplayTemplate>
                <ChildContent>
                    <MentionFieldSettings Text="Text"></MentionFieldSettings>
                </ChildContent>
            </SfMention>
        </div>
    </div>
</div>

<style>
    .tailwind #insertField,
    .tailwind3 #insertField {
    font-size: 14px
    }
    
    .tailwind3 #merge_data,
    .tailwind3-dark #merge_data {
        font-weight:400;
    }
</style>

@code {
    private SfMention<MergeData> mentionObj;
    private SfRichTextEditor _mailMergeEditor;

    private string _buttonClass = "e-tbar-btn e-tbar-btn-text";
    private string _dropDownButtonClass = "e-rte-elements e-rte-dropdown-menu";
    private bool _sourceCodeEnabled = false;
    private string _rteValue = @"<p>Dear <span contenteditable=""false"" class=""e-mention-chip""><span>{{FirstName}}</span></span> <span contenteditable=""false"" class=""e-mention-chip""><span>{{LastName}}</span></span>,</p>
    <p>We are thrilled to have you with us! Your unique promotional code for this month is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{PromoCode}}</span></span>.</p>
    <p>Your current subscription plan is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{SubscriptionPlan}}</span></span>.</p>
    <p>Your customer ID is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{CustomerID}}</span></span>.</p>
    <p>Your promotional code expires on: <span contenteditable=""false"" class=""e-mention-chip""><span>{{ExpirationDate}}</span></span>.</p>
    <p>Feel free to browse our latest offerings and updates. If you need any assistance, don't hesitate to contact us at <a href=""mailto:{{SupportEmail}}""><span contenteditable=""false"" class=""e-mention-chip""><span>{{SupportEmail}}</span></span></a> or call us at <span contenteditable=""false"" class=""e-mention-chip""><span>{{SupportPhoneNumber}}</span></span>.</p>
    <p>Best regards,<br>The <span contenteditable=""false"" class=""e-mention-chip""><span>{{CompanyName}}</span></span> Team</p>";

    private char _mentionChar = '{';

    public class MergeData
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    private List<MergeData> _mergeData = new List<MergeData>
    {
        new MergeData { Text = "First Name", Value = "FirstName" },
        new MergeData { Text = "Last Name", Value = "LastName" },
        new MergeData { Text = "Support Email", Value = "SupportEmail" },
        new MergeData { Text = "Company Name", Value = "CompanyName" },
        new MergeData { Text = "Promo Code", Value = "PromoCode" },
        new MergeData { Text = "Support Phone Number", Value = "SupportPhoneNumber" },
        new MergeData { Text = "Customer ID", Value = "CustomerID" },
        new MergeData { Text = "Expiration Date", Value = "ExpirationDate" },
        new MergeData { Text = "Subscription Plan", Value = "SubscriptionPlan" }
    };

    private List<ToolbarItemModel> _tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Name = "MergeData", TooltipText = "Merge Data" },
        new ToolbarItemModel() { Name = "InsertField", TooltipText = "Insert Field" },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
    };

    private List<DropDownMenuItem> _items = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "First Name" },
        new DropDownMenuItem { Text = "Last Name" },
        new DropDownMenuItem { Text = "Support Email" },
        new DropDownMenuItem { Text = "Company Name" },
        new DropDownMenuItem { Text = "Promo Code" },
        new DropDownMenuItem { Text = "Support Phone Number" },
        new DropDownMenuItem { Text = "Customer ID" },
        new DropDownMenuItem { Text = "Expiration Date" },
        new DropDownMenuItem { Text = "Subscription Plan" }
    };

    private Dictionary<string, string> _placeholderData = new Dictionary<string, string>
    {
        { "FirstName", "John" },
        { "LastName", "Doe" },
        { "PromoCode", "ABC123" },
        { "SubscriptionPlan", "Premium" },
        { "CustomerID", "123456" },
        { "ExpirationDate", "2024-12-31" },
        { "SupportEmail", "support@example.com" },
        { "SupportPhoneNumber", "+1-800-555-5555" },
        { "CompanyName", "Example Inc." }
    };

    public void OnClickHandler()
    {
        if (this._mailMergeEditor != null)
        {
            var editorContent = this._mailMergeEditor.Value;
            var mergedContent = ReplacePlaceholders(editorContent, this._placeholderData);
            _rteValue = mergedContent;
        }
    }

    public async Task OnDropDownOpen()
    {
        if (this._mailMergeEditor != null)
        {
            await this._mailMergeEditor.SaveSelectionAsync();
        }
    }

    public async Task OnDropDownClose()
    {
        if (this._mailMergeEditor != null)
        {
            await this._mailMergeEditor.RestoreSelectionAsync();
        }
    }

    public async Task OnItemSelect(MenuEventArgs args)
    {
        if (args.Item.Text != null)
        {
            var value = _mergeData.FirstOrDefault(md => md.Text == args.Item.Text)?.Value;
            string htmlContent = $"<span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{{{{value}}}}}</span></span>&nbsp;";
            var undoOption = new ExecuteCommandOption { Undo = true };
            this._mailMergeEditor.ExecuteCommandAsync(CommandName.InsertHTML, htmlContent, undoOption);
            await this._mailMergeEditor.SaveSelectionAsync();
        }
    }

    private void OnActionCompleteHandler(Syncfusion.Blazor.RichTextEditor.ActionCompleteEventArgs args)
    {
        if (args.RequestType == "SourceCode")
        {
            this._buttonClass = "e-tbar-btn e-tbar-btn-text e-overlay";
            this._dropDownButtonClass = "e-rte-elements e-rte-dropdown-menu e-overlay";
            this._sourceCodeEnabled = true;
        }
        if (args.RequestType == "Preview")
        {
            this._buttonClass = "e-tbar-btn e-tbar-btn-text";
            this._dropDownButtonClass = "e-rte-elements e-rte-dropdown-menu";
            this._sourceCodeEnabled = false;
        }
    }

    public static string ReplacePlaceholders(string template, Dictionary<string, string> data)
    {
        return Regex.Replace(template, @"{{\s*(\w+)\s*}}", match =>
        {
            string key = match.Groups[1].Value.Trim();
            return data.TryGetValue(key, out var value) ? value : match.Value;
        });
    }
}