@page "/rich-text-editor/format-painter"

@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This demo showcases the Format Painter feature of the Rich Text Editor component, which allows users to copy formatting from one section of content and apply it to another.</p>
</SampleDescription>
<ActionDescription>
    <p>The <b>Format Painter</b> feature allows you to copy the formats and apply them to content without formatting thus saving time to reformat the content.</p>
    <ul>
        <li>
            Format painter can be accessed via the toolbar or the keyboard shortcuts.
        </li>
        <li>
            The sticky mode can be enabled by double-clicking the toolbar button, and it can be utilized to apply a format to multiple locations.
        </li>
    </ul>
    <p><b>Keyboard Shortcut</b></p>
    <ul>
        <li>
            <kbd>ALT + SHIFT + C</kbd> - Copy the selection format or current range.
        </li>
        <li>
            <kbd>ALT + SHIFT + V</kbd> - Paint the copied format.
        </li>
        <li>
            <kbd>ESC</kbd> - Remove the previously copied format and disable the sticky mode.
        </li>
    </ul>
    <p>The following settings are available to customize the format painter in the <code>RichTextEditorFormatPainterSettings</code> property.</p>
    <ul>
        <li><p>Fill the <code>Allowed Formats</code> input with selectors only whose format styles will be allowed. For example: </p></li>
        <li>
            <code>span; strong; em; </code> as the input allows only the span, strong, and em format styles to be copied.
        </li>
        <li>
            <p>Fill the <code>Denied Formats</code> input with selectors only whose format styles will be explicitly prohibited. For example:</p>
            <ul>
                <li>
                    <code>span(important)[title]{background-color,color}</code> as the input will remove only the <code>important</code> class,
                    <code>title</code> attribute, <code>color,</code> and <code>background-color</code>
                    of the span element. All other format styles will be copied.
                </li>
            </ul>
        </li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section" id="rte-format-painter">
    <SfRichTextEditor>
        <RichTextEditorToolbarSettings Items="@tools" />
        <RichTextEditorFormatPainterSettings AllowedFormats="@allowedFormats" DeniedFormats="@deniedFormats" />
        <h3>Format Painter in Rich Text Editor</h3><p>The <strong data-start="50" data-end="68">Format Painter</strong> allows you to quickly copy and apply text formatting within the editor, saving time and ensuring consistency.</p><h5>How to Use Format Painter?</h5>
        <ul><li><strong>Select the text</strong> with the formatting you want to copy.</li><li>Click the <strong>Format Painter</strong> button (paintbrush icon) in the toolbar.</li><li>The cursor changes to a <strong>paintbrush</strong> icon.</li><li><strong>Click and drag</strong> over the text where you want to apply the copied format.</li><li>Release the mouse button, and the formatting will be applied.</li></ul><h5>Why Use Format Painter?</h5>
        <ul><li><strong>Saves time</strong> when formatting large documents.</li><li><strong>Ensures consistency</strong> in text styles. </li><li><strong>Easy to use</strong> for writers, editors, and content creators.</li></ul>
    </SfRichTextEditor>
</div>

<div class="property-section-title">Properties</div>
<div class="col-lg-4 property-section">
    <div id="property" title="Properties" class="property-panel-table">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div>Allowed Formats</div>
                    </td>
                    <td>
                        <div>
                            <input type="text" @bind="@allowedFormatText" class="e-input" @onblur="allowedFormatsPainterBlur" placeholder="span; strong; em; sup; sub; code;" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Denied Formats</div>
                    </td>
                    <td>
                        <div>
                            <input type="text" @bind="@deniedFormatText" class="e-input" @onblur="deniedFormatPainterBlur" placeholder="span(important)[title]{background-color,color};" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    .property-section-title {
    padding-top: 20px;
    font-size: 16px;
    font-weight: 600;
    }
    .property-section {
    padding-top: 20px;
    }
</style>

@code {
    private string allowedFormatText { get; set; }
    private string allowedFormats { get; set; } = "b; em; font; sub; sup; kbd; i; s; u; code; strong; span; p; div; h1; h2; h3; h4; h5; h6; blockquote; ol; ul; li; pre;";
    private string deniedFormats { get; set; } = null;
    private string deniedFormatText { get; set; }

    private void allowedFormatsPainterBlur ( Microsoft.AspNetCore.Components.Web.FocusEventArgs e )
    {
        if (!string.IsNullOrWhiteSpace (this.allowedFormatText))
        {
            this.allowedFormats = this.allowedFormatText;
        }
        else
        {
            this.allowedFormats = "b; em; font; sub; sup; kbd; i; s; u; code; strong; span; p; div; h1; h2; h3; h4; h5; h6; blockquote; table; thead; tbody; tr; td; th; ol; ul; li; pre; (*)[*]{*}";
        }
    }

    private void deniedFormatPainterBlur ( Microsoft.AspNetCore.Components.Web.FocusEventArgs e )
    {
        if (!string.IsNullOrWhiteSpace (this.deniedFormatText))
        {
            this.deniedFormats = this.deniedFormatText;
        }
        else
        {
            this.deniedFormats = null;
        }
    }
    private List<ToolbarItemModel> tools = new List<ToolbarItemModel> ()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.FormatPainter },
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
}