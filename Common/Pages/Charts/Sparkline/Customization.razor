@page "/sparkline/customization"

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample depicts the various customization options available in the sparkline component.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to customize the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SparklineMarkerSettings.html" aria-label="Marker">Marker</a>, <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SparklineDataLabelSettings.html" aria-label="Datalabel">DataLabel</a>, <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SparklineTrackLineSettings.html" aria-label="Trackline">TrackLine</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SparklineAxisSettings.html" aria-label="AxisLine">AxisLine</a> in Sparklines. Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over the data points or tap on a data point in touch-enabled devices.</p>
    <p>More information about the marker can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/sparkline/markers" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="control-section">
        <div id="spark-container" class="row">
            <div class="cols-sample-area" align="center">
                <p>
                    <font size=4> Worldwide car sales by brand - 2017</font>
                </p>
                <table style="width:100%;">
                    <tr>
                        <td align="center" style="width: 30%;">Sales Percentage</td>
                        <td style="width: 30%;">
                            <div id="percentage" style="height: 200px;">
                                <SfSparkline Theme="@CurrentTheme" ID="salespercentage" @ref="@SalesPercentageSparkline"  XName="xval" YName="yval" EnableRtl="@IsRtlEnabled" DataSource=@PercentageData Type="@Syncfusion.Blazor.Charts.SparklineType.Column" ValueType="@Syncfusion.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings MinY="@PercentageAxisMinY" MaxY="PercentageAxisMaxY" Value="@PercentageAxisValue">
                                        <SparklineAxisLineSettings Visible="@IsPercentageAxisLineVisible" Color="@PercentageAxisLineColor" Width="@PercentageAxisLineWidth">
                                        </SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Fill="red" Size="5" Visible="@PercentageMarkerVisibility"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@PercentageDataLabelVisibility"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings TValue="SparkData" Visible="@IsPercentageTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@IsPercentageTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>
                                </SfSparkline>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="center">Sales Count</td>
                        <td style="width: 30%;">
                            <div id="Sales" style="height: 200px;">
                                <SfSparkline Theme="@CurrentTheme" ID="SalesCount" @ref="@SalesCountSparkline"  XName="xval" YName="yval" DataSource=@SalData EnableRtl="@IsRtlEnabled" Type="@Syncfusion.Blazor.Charts.SparklineType.Column" ValueType="@Syncfusion.Blazor.Charts.SparklineValueType.Category" Width="200px" Height="200px" LineWidth="2">
                                    <SparklineAxisSettings MinY="@SalesAxisMinY" MaxY="SalesAxisMaxY" Value="@SalesAxisValue">
                                        <SparklineAxisLineSettings Visible="@IsPercentageAxisLineVisible" Color="@PercentageAxisLineColor" Width="@PercentageAxisLineWidth">
                                        </SparklineAxisLineSettings>
                                    </SparklineAxisSettings>
                                    <SparklineMarkerSettings Visible="@PercentageMarkerVisibility" Fill="red" Size="5"></SparklineMarkerSettings>
                                    <SparklineDataLabelSettings Visible="@PercentageDataLabelVisibility"></SparklineDataLabelSettings>
                                    <SparklineTooltipSettings TValue="SparkData" Visible="@IsPercentageTooltipVisible" Format="${xval}: ${yval}">
                                        <SparklineTrackLineSettings Visible="@IsPercentageTrackLineVisible" Color="red" Width="1"></SparklineTrackLineSettings>
                                    </SparklineTooltipSettings>
                                </SfSparkline>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div style="float: right; margin-right: 10px;">
        Source:
        <a href=" http://carsalesbase.com/global-car-sales-2017" target="_blank">carsalesbase.com</a>
    </div>
</div>
<div class="col-lg-4 property-section">
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" style="width:100%" title="Properties">
                <tbody>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Special Points
                        </td>
                        <td style="width: 50%">
                            <table>
                                <tr>
                                    <td style="padding: 5px;">All</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="all" ValueChange="@AllCheckbox" Checked="@IsAllCheckboxEnabled" TChecked="bool"></SfCheckBox>

                                    </td> &nbsp; &nbsp;
                                    <td style="padding: 5px;">Negative</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="negative" ValueChange="@NegativeCheckbox" Checked="@IsNegativeCheckboxChecked" Disabled="@IsNegativeCheckboxDisabled" TChecked="bool"></SfCheckBox>

                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">First</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="first" ValueChange="@FirstCheckbox" Checked="IsFirstCheckboxChecked" Disabled="@IsFirstCheckboxDisabled" TChecked="bool"></SfCheckBox>

                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Last</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="last" ValueChange="@LastCheckbox" Checked="@IsLastCheckboxChecked" Disabled="@IsLastCheckboxDisabled" TChecked="bool"></SfCheckBox>

                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px;">High</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="high" ValueChange="@HighCheckbox" Checked="@IsHighCheckboxChecked" Disabled="@IsHighCheckboxDisabled" TChecked="bool"></SfCheckBox>

                                    </td>&nbsp; &nbsp;
                                    <td style="padding: 5px;">Low</td>&nbsp; &nbsp;
                                    <td style="padding-left:10px ; padding-top:10px ;">
                                        <SfCheckBox id="low" ValueChange="@LowCheckbox" Checked="@IsLowCheckboxChecked" Disabled="@IsLowCheckboxDisabled" TChecked="bool"></SfCheckBox>

                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Marker
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="marker" Checked="@IsMarkerChanged" ValueChange="@Marker" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px ; ">
                        <td style="width: 50%">
                            Data Label
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="datalabel" Checked="@IsDataLabelChanged" ValueChange="@Datalabel" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Enable RTL
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="rtl" Checked="@IsRtlChanged" ValueChange="@RTL" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Tooltip
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="tooltip" Checked="@IsTooltipChanged" ValueChange="@ToolTip" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Track Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="trackline" Checked="@IsTrackLineChanged" ValueChange="@TrackLine" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 30px">
                        <td style="width: 50%">
                            Axis Line
                        </td>
                        <td style="width: 50% ; padding-left:10px ; padding-top:10px ;">
                            <SfCheckBox id="axis1" Checked="@IsAxisLineChanged" ValueChange="@AxisLine" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    
    public Theme CurrentTheme { get; set; }
    public SfSparkline<SparkData>? SalesPercentageSparkline { get; set; }
    public SfSparkline<SparkData>? SalesCountSparkline { get; set; }

    public double PercentageAxisMinY { get; set; } = -10;
    public double PercentageAxisMaxY { get; set; } = 10;
    public double PercentageAxisValue { get; set; } = 0;
    public string PercentageAxisLineColor { get; set; } = "red";
    public double PercentageAxisLineWidth { get; set; } = 2;

    public double SalesAxisMinY { get; set; } = 0;
    public double SalesAxisMaxY { get; set; } = 0;
    public double SalesAxisValue { get; set; } = 0;

    public bool IsPercentageAxisLineVisible { get; set; } = false;
    public bool IsPercentageTooltipVisible { get; set; } = false;
    public bool IsPercentageTrackLineVisible { get; set; } = false;

    public List<VisibleType> PercentageMarkerVisibility { get; set; } = new List<VisibleType>();
    public List<VisibleType> PercentageDataLabelVisibility { get; set; } = new List<VisibleType>();

    public bool IsRtlEnabled { get; set; } = false;

    public bool IsNegativeCheckboxDisabled { get; set; } = true;
    public bool IsLowCheckboxDisabled { get; set; } = true;
    public bool IsHighCheckboxDisabled { get; set; } = true;
    public bool IsFirstCheckboxDisabled { get; set; } = true;
    public bool IsLastCheckboxDisabled { get; set; } = true;
    public bool IsAllCheckboxEnabled { get; set; } = true;

    public bool IsNegativeCheckboxChecked { get; set; }
    public bool IsHighCheckboxChecked { get; set; }
    public bool IsLowCheckboxChecked { get; set; }
    public bool IsFirstCheckboxChecked { get; set; }
    public bool IsLastCheckboxChecked { get; set; }

    public bool IsMarkerChanged { get; set; } = false;
    public bool IsDataLabelChanged { get; set; }
    public bool IsRtlChanged { get; set; } = false;
    public bool IsTooltipChanged { get; set; }
    public bool IsTrackLineChanged { get; set; }
    public bool IsAxisLineChanged { get; set; }
    
    public class SparkData
    {
        public Double x { get; set; }
        public string? xval { get; set; }
        public double yval { get; set; }
    }
    private List<SparkData> PercentageData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1  },
        new SparkData { x = 1, xval = "BMW", yval = 5 },
        new SparkData { x = 2, xval = "BUICK", yval = -1 },
        new SparkData { x = 3, xval = "CETROEN", yval = -6 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 0 },
        new SparkData { x = 5, xval = "FIAT", yval = 1 },
        new SparkData { x = 6, xval = "FORD", yval = -2 },
        new SparkData { x = 7, xval = "HONDA", yval = 7 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = -9 },
        new SparkData { x = 9, xval = "JEEP", yval = 0 },
        new SparkData { x = 10, xval = "KIA", yval = -10 },
        new SparkData { x = 11, xval = "MAZDA", yval = 3 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 13 },
        new SparkData { x = 13, xval = "NISSAN", yval = 5 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = -6 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 0 },
        new SparkData { x = 16, xval = "RENAULT", yval = 7 },
        new SparkData { x = 17, xval = "SKODA", yval = 5 },
        new SparkData { x = 18, xval = "SUBARU", yval = 5 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 11 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 5 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 3 },
    };
    private List<SparkData> SalData = new List<SparkData>
{
        new SparkData { x = 0, xval = "AUDI", yval = 1847613 },
        new SparkData { x = 1, xval = "BMW", yval = 2030331 },
        new SparkData { x = 2, xval = "BUICK", yval = 1465823 },
        new SparkData { x = 3, xval = "CETROEN", yval = 999888 },
        new SparkData { x = 4, xval = "CHEVROLET", yval = 3857388 },
        new SparkData { x = 5, xval = "FIAT", yval = 1503806 },
        new SparkData { x = 6, xval = "FORD", yval = 5953122 },
        new SparkData { x = 7, xval = "HONDA", yval = 4967689 },
        new SparkData { x = 8, xval = "HYUNDAI", yval = 3951176 },
        new SparkData { x = 9, xval = "JEEP", yval = 1390130 },
        new SparkData { x = 10, xval = "KIA", yval = 2511293 },
        new SparkData { x = 11, xval = "MAZDA", yval = 1495557 },
        new SparkData { x = 12, xval = "MERCEDES", yval = 2834181 },
        new SparkData { x = 13, xval = "NISSAN", yval = 4834694 },
        new SparkData { x = 14, xval = "OPEL/VHALL", yval = 996559 },
        new SparkData { x = 15, xval = "PEUGEOT", yval = 1590300 },
        new SparkData { x = 16, xval = "RENAULT", yval = 2275227 },
        new SparkData { x = 17, xval = "SKODA", yval = 1180672 },
        new SparkData { x = 18, xval = "SUBARU", yval = 1050390 },
        new SparkData { x = 19, xval = "SUZUKI", yval = 2891415 },
        new SparkData { x = 20, xval = "TOYOTA", yval = 7843423 },
        new SparkData { x = 21, xval = "VOLKSWAGEN", yval = 6639250 },
    };
    private void AllCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsAllCheckboxEnabled  = args.Checked;
        IsNegativeCheckboxDisabled = IsAllCheckboxEnabled ;
        IsHighCheckboxDisabled = IsAllCheckboxEnabled ;
        IsLowCheckboxDisabled = IsAllCheckboxEnabled ;
        IsFirstCheckboxDisabled = IsAllCheckboxEnabled ;
        IsLastCheckboxDisabled  = IsAllCheckboxEnabled ;
        PercentageMarkerVisibility = (IsAllCheckboxEnabled  && IsMarkerChanged) ? new List<VisibleType> { VisibleType.All } : (IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsAllCheckboxEnabled  && IsDataLabelChanged) ? new List<VisibleType> { VisibleType.All } : (IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void Datalabel(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args1)
    {
        IsDataLabelChanged = args1.Checked;
        PercentageDataLabelVisibility = (IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void NegativeCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args2)
    {
        IsNegativeCheckboxChecked = args2.Checked;
        PercentageMarkerVisibility = (IsNegativeCheckboxChecked || IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsNegativeCheckboxChecked || IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void LowCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args8)
    {
        IsLowCheckboxChecked = args8.Checked;
        PercentageMarkerVisibility = (IsLowCheckboxChecked || IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsLowCheckboxChecked || IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void HighCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args9)
    {
        IsHighCheckboxChecked = args9.Checked;
        PercentageMarkerVisibility = (IsHighCheckboxChecked || IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsHighCheckboxChecked || IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void FirstCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args10)
    {
        IsFirstCheckboxChecked = args10.Checked;
        PercentageMarkerVisibility = (IsFirstCheckboxChecked || IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsFirstCheckboxChecked || IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }

    private void LastCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args11)
    {
        IsLastCheckboxChecked = args11.Checked;
        PercentageMarkerVisibility = (IsLastCheckboxChecked || IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        PercentageDataLabelVisibility = (IsLastCheckboxChecked || IsDataLabelChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private void Marker(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args3)
    {
        IsMarkerChanged = args3.Checked;
        PercentageMarkerVisibility = (IsMarkerChanged) ? GetVisible() : new List<VisibleType> { VisibleType.None };
        this.StateHasChanged();
    }
    private async Task RTL(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args4)
    {
        IsRtlChanged = args4.Checked;
        IsRtlEnabled = args4.Checked;
        if (SalesPercentageSparkline != null)
        await SalesPercentageSparkline.RefreshAsync();
        if (SalesCountSparkline != null)
        await SalesCountSparkline.RefreshAsync();
        this.StateHasChanged();
    }
    private void ToolTip(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args5)
    {
        IsTooltipChanged = args5.Checked;
        IsPercentageTooltipVisible = args5.Checked;
        this.StateHasChanged();
    }
    private void TrackLine(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args6)
    {
        IsTrackLineChanged = args6.Checked;
        IsPercentageTrackLineVisible = args6.Checked;
        this.StateHasChanged();
    }
    private void AxisLine(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args7)
    {
        IsAxisLineChanged = args7.Checked;
        IsPercentageAxisLineVisible = IsAxisLineChanged;
        PercentageAxisLineWidth = 2;
        PercentageAxisLineColor = "red";
        this.StateHasChanged();
    }
    protected override void OnInitialized()
    {
        
        CurrentTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
         
    }
    List<VisibleType> GetVisible()
    {
        List<VisibleType> typ = new List<VisibleType> { };
        if (IsAllCheckboxEnabled ) { typ.Add(VisibleType.All); return typ; }
        if (IsNegativeCheckboxChecked) { typ.Add(VisibleType.Negative); }
        if (IsHighCheckboxChecked) { typ.Add(VisibleType.High); }
        if (IsLowCheckboxChecked) { typ.Add(VisibleType.Low); }
        if (IsFirstCheckboxChecked) { typ.Add(VisibleType.Start); }
        if (IsLastCheckboxChecked) { typ.Add(VisibleType.End); }
        return typ;
    }
}

<style>

    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    .control-section {
        min-height: 450px;
    }

    #range > * {
        padding: 0px !important;
    }

    label {
        height: 32px !important;
    }
</style>