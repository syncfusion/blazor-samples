@page "/chart-3d/column"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Chart3D
@using PointRender

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@
<SampleDescription>
    <p>
        This demo showcases the top-selling electric car models in China using a 3D column chart. The visualization leverages the default column series to present sales data in an engaging three-dimensional format. Tapping or mouse over the data points reveals detailed tooltips, providing specific information about each data point.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure a 3D column chart. The 3D column chart is used to compare the frequency, count, total, or average of data across different categories. <code>Tooltip</code> functionality is enabled, allowing you to see the tooltip in action by hovering over a point or tapping on a point on touch-enabled devices. 
        Additionally, the <code>PointRendering</code> event for the 3D chart is triggered to render each point in the series with a distinct fill color.
    </p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart3D
        WallColor="transparent"
        EnableRotation="true"
        RotationAngle="7"
        TiltAngle="10"
        Depth="100"
        Width="@ChartWidth"
        Height="@ChartHeight"
        Title="Top Selling Electric Cars in China"
        Theme="@CurrentTheme"
        PointRendering="OnPointRender"
        AxisLabelRendering="OnAxisLabelRender">

        <Chart3DPrimaryXAxis
            ValueType="Syncfusion.Blazor.Chart3D.ValueType.Category"
            LabelRotationAngle="-45"
            LabelPlacement="LabelPlacement.BetweenTicks">
        </Chart3DPrimaryXAxis>

        <Chart3DPrimaryYAxis
            Maximum="150000"
            Interval="30000">
        </Chart3DPrimaryYAxis>

        <Chart3DSeriesCollection>
            <Chart3DSeries
                DataSource="@SalesData"
                XName="Category"
                YName="SalesCount"
                ColumnSpacing="0.1"
                Type="Chart3DSeriesType.Column">
            </Chart3DSeries>
        </Chart3DSeriesCollection>

        <Chart3DTooltipSettings
            Enable="true"
            Header="${point.x}"
            Format="Sales Count : <b>${point.y}">
        </Chart3DTooltipSettings>
    </SfChart3D>
</div>

@code {
    private Theme CurrentTheme { get; set; }
    public string? ChartWidth { get; set; }
    public string ChartHeight { get; set; } = "400";

    public List<ChartData> SalesData { get; set; } = new List<ChartData>
    {
        new ChartData { Category = "Tesla", SalesCount = 137429 },
        new ChartData { Category = "Aion", SalesCount = 80308 },
        new ChartData { Category = "Wuling", SalesCount = 76418 },
        new ChartData { Category = "Changan", SalesCount = 52849 },
        new ChartData { Category = "Geely", SalesCount = 47234 },
        new ChartData { Category = "Nio", SalesCount = 31041 },
        new ChartData { Category = "Neta", SalesCount = 22449 },
        new ChartData { Category = "BMW", SalesCount = 18733 }
    };

    protected override void OnInitialized()
    {
        ApplyThemeSettings(null!);
        ChartWidth = SampleService != null && SampleService.IsDevice ? "100%" : "75%";
    }

    public void OnAxisLabelRender(Chart3DAxisLabelRenderEventArgs args)
    {
        if (args.Axis.Name == "PrimaryYAxis")
        {
            if (double.TryParse(args.Text, out double value))
            {
                args.Text = $"{value / 1000}k";
            }
        }
    }

    public void OnPointRender(Chart3DPointRenderEventArgs args)
    {
        ApplyThemeSettings(args);
    }

    private void ApplyThemeSettings(Chart3DPointRenderEventArgs args)
    {
        string uri = NavigationManager.Uri.ToLower();
        bool isDark = uri.Contains("dark");
        bool isHighContrast = uri.Contains("highcontrast");

        if (uri.Contains("material3"))
        {
            CurrentTheme = isDark ? Theme.Material3Dark : Theme.Material3;
            if (args != null)
                args.Fill = isDark ? PointColor.Material3DarkColors[args.Point.Index % 10] : PointColor.Material3Colors[args.Point.Index % 10];
        }
        else if (uri.Contains("material"))
        {
            CurrentTheme = isDark ? Theme.MaterialDark : Theme.Material;
            if (args != null)
                args.Fill = isDark ? PointColor.MaterialDarkColors[args.Point.Index % 10] : PointColor.MaterialColors[args.Point.Index % 10];
        }
        else if (uri.Contains("fabric"))
        {
            CurrentTheme = isDark ? Theme.FabricDark : Theme.Fabric;
            if (args != null)
                args.Fill = PointColor.FabricColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap5"))
        {
            CurrentTheme = isDark ? Theme.Bootstrap5Dark : Theme.Bootstrap5;
            if (args != null)
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 10];
        }
        else if (uri.Contains("fluent2"))
        {
            if (isHighContrast)
                CurrentTheme = Theme.Fluent2HighContrast;
            else if (isDark)
                CurrentTheme = Theme.Fluent2Dark;
            else
                CurrentTheme = Theme.Fluent2;

            if (args != null)
                args.Fill = isHighContrast ? PointColor.Fluent2HighContrastColors[args.Point.Index % 10] :
                    isDark ? PointColor.Fluent2DarkColors[args.Point.Index % 10] :
                    PointColor.Fluent2Colors[args.Point.Index % 10];
        }
        else if (uri.Contains("fluent"))
        {
            CurrentTheme = isDark ? Theme.FluentDark : Theme.Fluent;
            if (args != null)
                args.Fill = isDark ? PointColor.FluentDarkColors[args.Point.Index % 10] : PointColor.FluentColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap4"))
        {
            CurrentTheme = Theme.Bootstrap4;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap"))
        {
            CurrentTheme = isDark ? Theme.BootstrapDark : Theme.Bootstrap;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (uri.Contains("tailwind3"))
        {
            CurrentTheme = isDark ? Theme.Tailwind3Dark : Theme.Tailwind3;
            if (args != null)
                args.Fill = isDark ? PointColor.Tailwind3DarkColors[args.Point.Index % 10] : PointColor.Tailwind3Colors[args.Point.Index % 10];
        }
        else if (uri.Contains("tailwind"))
        {
            CurrentTheme = isDark ? Theme.TailwindDark : Theme.Tailwind;
            if (args != null)
                args.Fill = isDark ? PointColor.TailwindDarkColors[args.Point.Index % 10] : PointColor.TailwindColors[args.Point.Index % 10];
        }
        else if (uri.Contains("highcontrast"))
        {
            CurrentTheme = Theme.HighContrast;
            if (args != null)
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            CurrentTheme = Theme.Bootstrap4;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public class ChartData
    {
        public string? Category { get; set; }
        public double SalesCount { get; set; }
    }

}
