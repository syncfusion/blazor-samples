@page "/chart-3d/back-to-back-column"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Chart3D
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@
<SampleDescription>
    <p>
        This sample displays a 3D column chart with four series, each column positioned behind the preceding one. Click on the legend to toggle the visibility of the series for better comparison.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure a 3D column chart with each column positioned behind the preceding one. The <code>Depth</code> property is used to add perspective and volume to the 3D chart, while the <code>EnableSideBySidePlacement</code> property positions the columns behind each other for a layered effect.
    </p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart3D EnableSideBySidePlacement="false" RotationAngle="@RotationAngle" Depth="500" Width="@ChartWidth" Height="@ChartHeight" Title="Fruit Consumption by Individuals" Theme="@ChartTheme">
        <Chart3DPrimaryXAxis ValueType="Syncfusion.Blazor.Chart3D.ValueType.Category" Interval="1" LabelRotationAngle="-45" LabelPlacement="LabelPlacement.BetweenTicks"></Chart3DPrimaryXAxis>
        <Chart3DPrimaryYAxis Interval="@YAxisInterval"></Chart3DPrimaryYAxis>
        <Chart3DSeriesCollection>
            <Chart3DSeries DataSource="@GrapesData" XName="X" YName="Y" Name="Grapes" ColumnWidth="0.2"></Chart3DSeries>
            <Chart3DSeries DataSource="@OrangeData" XName="X" YName="Y" Name="Orange" ColumnWidth="0.2"></Chart3DSeries>
            <Chart3DSeries DataSource="@AppleData" XName="X" YName="Y" Name="Apple" ColumnWidth="0.2"></Chart3DSeries>
            <Chart3DSeries DataSource="@TotalData" XName="X" YName="Y" Name="Total" ColumnWidth="0.2"></Chart3DSeries>
        </Chart3DSeriesCollection>
        <Chart3DTooltipSettings Enable="true"></Chart3DTooltipSettings>
        <Chart3DLegendSettings EnableHighlight="true"></Chart3DLegendSettings>
    </SfChart3D>
</div>

@code {
    public Theme ChartTheme { get; set; }
    public string? ChartWidth { get; set; }
    public string ChartHeight { get; set; } = "400";
    public double YAxisInterval { get; set; }
    public double RotationAngle { get; set; }

    public List<ChartData> GrapesData { get; set; } = new List<ChartData>()
    {
        new ChartData { X = "Jamesh", Y = 1 },
        new ChartData { X = "Michael", Y = 2 },
        new ChartData { X = "John", Y = 2 },
        new ChartData { X = "Jack", Y = 1 },
        new ChartData { X = "Lucas", Y = 1 }
    };

    public List<ChartData> OrangeData { get; set; } = new List<ChartData>()
    {
        new ChartData { X = "Jamesh", Y = 4 },
        new ChartData { X = "Michael", Y = 3 },
        new ChartData { X = "John", Y = 4 },
        new ChartData { X = "Jack", Y = 2 },
        new ChartData { X = "Lucas", Y = 3 }
    };

    public List<ChartData> AppleData { get; set; } = new List<ChartData>()
    {
        new ChartData { X = "Jamesh", Y = 5 },
        new ChartData { X = "Michael", Y = 4 },
        new ChartData { X = "John", Y = 5 },
        new ChartData { X = "Jack", Y = 5 },
        new ChartData { X = "Lucas", Y = 6 }
    };

    public List<ChartData> TotalData { get; set; } = new List<ChartData>()
    {
        new ChartData { X = "Jamesh", Y = 10 },
        new ChartData { X = "Michael", Y = 9 },
        new ChartData { X = "John", Y = 11 },
        new ChartData { X = "Jack", Y = 8 },
        new ChartData { X = "Lucas", Y = 10 }
    };

    protected override void OnInitialized()
    {
        ChartTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        ChartWidth = SampleService != null && SampleService.IsDevice ? "100%" : "75%";
        YAxisInterval = SampleService != null && SampleService.IsDevice ? 4 : 2;
        RotationAngle = SampleService != null && SampleService.IsDevice ? 5 : 25;
    }

    public class ChartData
    {
        public string? X { get; set; }
        public double Y { get; set; }
    }
}