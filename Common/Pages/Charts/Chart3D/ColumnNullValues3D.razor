@page "/chart-3d/empty-point"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Chart3D
@using PointRender
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@
<SampleDescription>
    <p>
        This example showcases a 3D column chart visualizing the medal count from the Tokyo Olympics using default column series points. The chart employs different colors to represent medal counts, including handling of null and zero value data within the 3D chart.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This example demonstrates rendering and configuring a 3D column chart, adeptly handling null and zero values. Null points signify missing data, while zero is treated as a valid value within the 3D chart. 
        The <code>PointRendering</code> event for the 3D chart is utilized to render each point in the series with a distinct fill color.
        Furthermore, the <code>Chart3DTooltipSettings.Header</code> property has been employed to format the tooltip's header, while the <code>Chart3DTooltipSettings.Format</code> property can be utilized to format the tooltip's text in a 3D chart's tooltip.
    </p>
</ActionDescription>

<div class="control-section" align="center">
    <SfChart3D
        WallColor="transparent"
        EnableRotation="true"
        RotationAngle="7"
        TiltAngle="10"
        Depth="100"
        Width="@ChartWidth"
        Height="@ChartHeight"
        Title="Olympic Gold Medal Counts - Tokyo 2020"
        Theme="@CurrentTheme"
        PointRendering="OnPointRender">
        <Chart3DPrimaryXAxis
            ValueType="Syncfusion.Blazor.Chart3D.ValueType.Category"
            LabelRotationAngle="-45"
            Interval="1"
            LabelPlacement="LabelPlacement.BetweenTicks">
        </Chart3DPrimaryXAxis>
        <Chart3DPrimaryYAxis
            Maximum="20"
            Interval="4">
        </Chart3DPrimaryYAxis>
        <Chart3DSeriesCollection>
            <Chart3DSeries
                DataSource="@ChartData"
                XName="X"
                YName="Y"
                Name="Gold"
                ColumnSpacing="0.1"
                Type="Chart3DSeriesType.Column">
            </Chart3DSeries>
        </Chart3DSeriesCollection>
        <Chart3DTooltipSettings
            Enable="true"
            Header="${point.x}"
            Format="Gold Medal : <b>${point.y}"></Chart3DTooltipSettings>
        <Chart3DLegendSettings Visible="false"></Chart3DLegendSettings>
    </SfChart3D>
</div>

@code {
    private Theme CurrentTheme { get; set; }
    public string? ChartWidth { get; set; }
    public string ChartHeight { get; set; } = "400";

    public List<ColumnChart3DData> ChartData { get; set; } = new List<ColumnChart3DData>
    {
        new ColumnChart3DData { X = "Italy", Y = 10 },
        new ColumnChart3DData { X = "Kenya", Y = 4 },
        new ColumnChart3DData { X = "France", Y = 10 },
        new ColumnChart3DData { X = "Hungary", Y = 0 },
        new ColumnChart3DData { X = "Australia", Y = 17 },
        new ColumnChart3DData { X = "Brazil", Y = 7 },
        new ColumnChart3DData { X = "Netherlands", Y = 10 },
        new ColumnChart3DData { X = "Unspecified", Y = double.NaN },
        new ColumnChart3DData { X = "Germany", Y = 10 },
        new ColumnChart3DData { X = "Serbia", Y = 3 }
    };

    protected override void OnInitialized()
    {
        ApplyTheme(null!);
        ChartWidth = SampleService != null && SampleService.IsDevice ? "100%" : "75%";
    }

    public void OnPointRender(Chart3DPointRenderEventArgs args)
    {
        ApplyTheme(args);
    }
    
    private void ApplyTheme(Chart3DPointRenderEventArgs args)
    {
        var uri = NavigationManager.Uri;

        if (uri.Contains("material3"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.Material3Dark : Theme.Material3;
            if (args != null)
                args.Fill = uri.Contains("dark") ? PointColor.Material3DarkColors[args.Point.Index % 10] : PointColor.Material3Colors[args.Point.Index % 10];
        }
        else if (uri.Contains("material"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.MaterialDark : Theme.Material;
            if (args != null)
                args.Fill = uri.Contains("dark") ? PointColor.MaterialDarkColors[args.Point.Index % 10] : PointColor.MaterialColors[args.Point.Index % 10];
        }
        else if (uri.Contains("fabric"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.FabricDark : Theme.Fabric;
            if (args != null)
                args.Fill = PointColor.FabricColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap5"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.Bootstrap5Dark : Theme.Bootstrap5;
            if (args != null)
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 8];
        }
        else if (uri.Contains("fluent2"))
        {
            CurrentTheme = uri.Contains("highcontrast") ? Theme.Fluent2HighContrast : (uri.Contains("dark") ? Theme.Fluent2Dark : Theme.Fluent2);
            if (args != null)
                args.Fill = uri.Contains("highcontrast") ? PointColor.Fluent2HighContrastColors[args.Point.Index % 10] : (uri.Contains("dark") ? PointColor.Fluent2DarkColors[args.Point.Index % 10] : PointColor.Fluent2Colors[args.Point.Index % 10]);
        }
        else if (uri.Contains("fluent"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.FluentDark : Theme.Fluent;
            if (args != null)
                args.Fill = uri.Contains("dark") ? PointColor.FluentDarkColors[args.Point.Index % 10] : PointColor.FluentColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap4"))
        {
            CurrentTheme = Theme.Bootstrap4;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (uri.Contains("bootstrap"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.BootstrapDark : Theme.Bootstrap;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (uri.Contains("tailwind3"))
        {
            CurrentTheme = uri.Contains("dark") ? Theme.Tailwind3Dark : Theme.Tailwind3;
            if (args != null)
                args.Fill = uri.Contains("dark") ? PointColor.Tailwind3DarkColors[args.Point.Index % 8] : PointColor.Tailwind3Colors[args.Point.Index % 8];
        }
        else if (uri.Contains("highcontrast"))
        {
            CurrentTheme = Theme.HighContrast;
            if (args != null)
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            CurrentTheme = Theme.Bootstrap4;
            if (args != null)
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public class ColumnChart3DData
    {
        public string? X { get; set; }
        public double Y { get; set; }
    }

}