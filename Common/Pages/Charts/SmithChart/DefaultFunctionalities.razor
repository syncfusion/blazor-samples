@page "/smith-chart/default-functionalities"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@using ThemeHelper
@inject NavigationManager NavigationManager

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes two different transmissions in the smith chart. The Render Type option can be used to change the way the smith chart is rendered.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render a smith chart with multiple series. The legend provides information about the series in the smith chart.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on the point on touch-enabled devices.</p>
    <p>More information about the smith chart can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/smith-chart/getting-started-webapp" aria-label="Documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-9 control-section sb-property-border">
    <SfSmithChart RenderType="@ChartRenderType" Theme="@CurrentTheme">
        <SmithChartTitle Visible="true" Text="Transmission Details">
        </SmithChartTitle>
        <SmithChartLegendSettings Visible="true" Shape="Shape.Circle">
        </SmithChartLegendSettings>
        <SmithChartSeriesCollection>
            <SmithChartSeries Name="Transmission-1" DataSource="@FirstTransmissionData" Resistance="Resistance" Reactance="Reactance"
                              EnableAnimation="true">
                <SmithChartSeriesTooltip Visible="true"></SmithChartSeriesTooltip>
                <SmithChartSeriesMarker Visible="true" Shape="Shape.Circle">
                    <SmithChartSeriesMarkerBorder Width="2">
                    </SmithChartSeriesMarkerBorder>
                </SmithChartSeriesMarker>
            </SmithChartSeries>
            <SmithChartSeries Name="Transmission-2" DataSource="@SecondTransmissionData" Resistance="Resistance" Reactance="Reactance"
                              EnableAnimation="true">
                <SmithChartSeriesTooltip Visible="true"></SmithChartSeriesTooltip>
                <SmithChartSeriesMarker Visible="true" Shape="Shape.Circle">
                    <SmithChartSeriesMarkerBorder Width="2">
                    </SmithChartSeriesMarkerBorder>
                </SmithChartSeriesMarker>
            </SmithChartSeries>
        </SmithChartSeriesCollection>
    </SfSmithChart>
</div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tbody>
                <tr>
                    <td style="width:42%">
                        <div class="property-text">Render Type</div>
                    </td>
                    <td style="width:70%">
                        <div>
                            <SfDropDownList TValue="string" TItem="RenderData" DataSource="@RenderDataSource" @bind-Value="@TypeValue">
                                <DropDownListEvents TValue="string" TItem="RenderData" ValueChange="RenderTypeChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public Theme CurrentTheme { get; set; }
    public RenderType ChartRenderType { get; set; } = RenderType.Impedance;
    public string TypeValue { get; set; } = "Impedance";

    public class SmithDataSource
    {
        public double? Resistance { get; set; }
        public double? Reactance { get; set; }
    }

    public List<SmithDataSource> FirstTransmissionData { get; set; } = new List<SmithDataSource>
    {
        new SmithDataSource { Resistance = 10, Reactance = 25 },
        new SmithDataSource { Resistance = 8, Reactance = 6 },
        new SmithDataSource { Resistance = 6, Reactance = 4.5 },
        new SmithDataSource { Resistance = 4.5, Reactance = 2 },
        new SmithDataSource { Resistance = 3.5, Reactance = 1.6 },
        new SmithDataSource { Resistance = 2.5, Reactance = 1.3 },
        new SmithDataSource { Resistance = 2, Reactance = 1.2 },
        new SmithDataSource { Resistance = 1.5, Reactance = 1 },
        new SmithDataSource { Resistance = 1, Reactance = 0.8 },
        new SmithDataSource { Resistance = 0.5, Reactance = 0.4 },
        new SmithDataSource { Resistance = 0.3, Reactance = 0.2 },
        new SmithDataSource { Resistance = 0, Reactance = 0.15 }
    };

    public List<SmithDataSource> SecondTransmissionData { get; set; } = new List<SmithDataSource>
    {
        new SmithDataSource { Resistance = 20, Reactance = -50 },
        new SmithDataSource { Resistance = 10, Reactance = -10 },
        new SmithDataSource { Resistance = 9, Reactance = -4.5 },
        new SmithDataSource { Resistance = 8, Reactance = -3.5 },
        new SmithDataSource { Resistance = 7, Reactance = -2.5 },
        new SmithDataSource { Resistance = 6, Reactance = -1.5 },
        new SmithDataSource { Resistance = 5, Reactance = -1 },
        new SmithDataSource { Resistance = 4.5, Reactance = -0.5 },
        new SmithDataSource { Resistance = 2, Reactance = 0.5 },
        new SmithDataSource { Resistance = 1.5, Reactance = 0.4 },
        new SmithDataSource { Resistance = 1, Reactance = 0.4 },
        new SmithDataSource { Resistance = 0.5, Reactance = 0.2 },
        new SmithDataSource { Resistance = 0.3, Reactance = 0.1 },
        new SmithDataSource { Resistance = 0, Reactance = 0.05 }
    };

    public class RenderData
    {
        public string? Name { get; set; }
    }

    public List<RenderData> RenderDataSource { get; set; } = new List<RenderData>
    {
        new RenderData { Name = "Impedance" },
        new RenderData { Name = "Admittance" }
    };

    protected override void OnInitialized()
    {
        CurrentTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public void RenderTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, RenderData> args)
    {
        TypeValue = args.Value;
        ChartRenderType = args.Value == "Admittance" ? RenderType.Admittance : RenderType.Impedance;
    }

}

<style>
    .printIconCss {
        float: right;
        background: transparent;
        box-shadow: none;
        border-color: transparent;
        border-radius: 2px;
        color: inherit;
        font-size: 12px;
        text-transform: capitalize;
        margin-top: 4px;
        height: 28px;
        font-weight: 400;
        font-family: inherit;
    }

    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    .e-de-icon-Print:before {
        content: "\e723";
    }
</style>