@page "/stock-chart/ohlc"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using ThemeHelper
@using System.Net.Http.Json
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>This <a target="_blank" href="https://www.syncfusion.com/blazor-components/blazor-stock-chart" aria-label="Blazor Stock Chart">Blazor Stock Chart</a> example visualizes the AAPL stock price with OHLC chart. Tooltip and crosshair show the information about the data and period.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the stock chart with <code>HILO Open Close</code> type series. The horizontal lines on the left and the right are used to show the open and close values of the stock, and the vertical line represents both high and low values.</p>
    <p>
       The stock chart provides support to 6 types of <a target="_blank" href="https://blazor.syncfusion.com/documentation/stock-chart/trend-lines" aria-label="trendlines">trendlines</a> namely <code>Linear</code>, <code>Exponential</code>, <code>Logarithmic</code>, <code>Polynomial</code>, <code>Power</code>, <code>Moving Average</code>. By using trendline dropdown button, the required trendline type can be added or removed.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover the chart or tap on it in touch enabled devices.
    </p>
    <p>
        More information about the series type can be found in this
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/stock-chart/series-types" aria-label="documentation section" >documentation section</a>.
    </p>
</ActionDescription>

@if (StockData == null)
{
    <div class="stockchart-loader"></div>
}
else
{
    <div class="@LoaderClass"></div>
    <div class="@ChartContainerClass">
        <SfStockChart Title="AAPL Stock Price" Theme="@CurrentTheme">
            <StockChartEvents OnLoaded="@OnChartLoaded" SharedTooltipRendering="@CustomizeTooltipText"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
            </StockChartPrimaryYAxis>
            <StockChartTooltipSettings Enable="true" TooltipPosition="TooltipPosition.Nearest"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@StockData" Type="ChartSeriesType.HiloOpenClose" XName="x"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchart-loader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }
        .stockchart-container {
            visibility: hidden;
        }

        div[id*="_stockChart_rangeSelector_leftTooltip"], div[id*="_stockChart_rangeSelector_rightTooltip"] {
            top: 10px !important;
        }

        div[id*="_selector_Secondary_Element"] {
            transform: translate(0px, @TranslateY) !important;
        }

        .e-tbar-btn {
            border-color: transparent !important;
        }
    </style>
}
@code{

    private ChartData[]? StockData;
    private string TranslateY { get; set; } = "-5px";

    protected override async Task OnInitializedAsync()
    {
        SetTheme();
        StockData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/stock-chart/googl.json");
        
    }

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    private string LoaderClass { get; set; } = "stockchart-loader";
    private string ChartContainerClass { get; set; } = "stockchart-container";
    
    private Theme CurrentTheme { get; set; } = Theme.Bootstrap4;

    private void SetTheme()
    {
        CurrentTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (CurrentTheme == Theme.Material3 || 
            CurrentTheme == Theme.Material3Dark || 
            CurrentTheme == Theme.Bootstrap4 || 
            CurrentTheme == Theme.Material || 
            CurrentTheme == Theme.MaterialDark)
        {
            TranslateY = "-7px";
        }
    }

    private void OnChartLoaded(StockChartEventArgs args)
    {
        LoaderClass = string.Empty;
        ChartContainerClass = string.Empty;
        StateHasChanged();
    }

    public void CustomizeTooltipText(SharedTooltipRenderEventArgs args)
    {
        for (int i = 0; i < args.Text.Count; i++)
        {
            string pattern = @"<b>(\d+)[.,]\d+</b>";
            string modifiedText = System.Text.RegularExpressions.Regex.Replace(args.Text[i], pattern, match => "<b>" + match.Groups[1].Value + "</b>");
            args.Text[i] = modifiedText;
        }
    }
}