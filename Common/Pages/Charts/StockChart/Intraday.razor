@page "/stock-chart/intraday"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using ThemeHelper
@*Hidden:Lines*@
@inherits SampleBaseComponent;



@*End:Hidden*@

@if (StockChartData == null)
{
    <div class="stockchart-loader"></div> 
}
else
{
    <div class="@LoaderClass"></div>
    <div class="@ChartContainerClass">
        <SfStockChart Title="AAPL Stock Price" Theme="@CurrentTheme" SeriesType="@EmptySeriesList" TrendlineType="@EmptyTrendlineList" IndicatorType="@EmptyIndicatorList" ExportType="@EmptyExportTypeList">
            <StockChartEvents OnLoaded="@OnChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>
            <StockChartTooltipSettings Enable="false"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@StockChartData" Type="ChartSeriesType.Spline" YName="High"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
            <StockChartPeriods>
                <StockChartPeriod IntervalType="RangeIntervalType.Minutes" Interval="1" Text="1m"></StockChartPeriod>
                <StockChartPeriod IntervalType="RangeIntervalType.Minutes" Interval="30" Text="30m"></StockChartPeriod>
                <StockChartPeriod IntervalType="RangeIntervalType.Hours" Interval="1" Text="1H"></StockChartPeriod>
                <StockChartPeriod IntervalType="RangeIntervalType.Hours" Interval="12" Text="12H" Selected="true"></StockChartPeriod>
                <StockChartPeriod Text="1D"></StockChartPeriod>
            </StockChartPeriods>
        </SfStockChart>
    </div>
    <style>
        .stockchart-loader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchart-container {
            visibility: hidden;
        }

        div[id*="_stockChart_rangeSelector_leftTooltip"], div[id*="_stockChart_rangeSelector_rightTooltip"] {
            top: 10px !important;
        }

        div[id*="_selector_Secondary_Element"] {
            transform: translate(0px, @TranslateY) !important;
        }

        .e-tbar-btn {
            border-color: transparent !important;
        }
    </style>
}

@code {

    private Random RandomGenerator = new Random();
    public int StockPriceValue { get; set; } = 80;
    public List<ChartSeriesType> EmptySeriesList { get; set; } = new List<ChartSeriesType>();
    public List<TrendlineTypes> EmptyTrendlineList { get; set; } = new List<TrendlineTypes>();
    public List<TechnicalIndicators> EmptyIndicatorList { get; set; } = new List<TechnicalIndicators>();
    public List<ExportType> EmptyExportTypeList { get; set; } = new List<ExportType>();
    private List<StockData>? StockChartData { get; set; }
    private string TranslateY { get; set; } = "-5px";

    protected override async Task OnInitializedAsync()
    {
        SetTheme();
        StockChartData = await Task.Run(() => GenerateStockData());
    }

    private List<StockData> GenerateStockData()
    {
        var dataList = new List<StockData>();
        for (int i = 1; i < 1440; i++)
        {
            StockPriceValue += RandomGenerator.Next(-10, 10) > 0.5 ? RandomGenerator.Next(5, 10) : -RandomGenerator.Next(5, 10);
            dataList.Add(new StockData
            {
                Date = new DateTime(2000, 1, 1).AddMinutes(i),
                High = StockPriceValue
            });
        }
        return dataList;
    }

    public class StockData
    {
        public DateTime Date { get; set; }
        public double High { get; set; }
    }

    private string LoaderClass { get; set; } = "stockchart-loader";
    private string ChartContainerClass { get; set; } = "stockchart-container";

    private void OnChartLoaded(StockChartEventArgs args)
    {
        LoaderClass = string.Empty;
        ChartContainerClass = string.Empty;
        StateHasChanged();
    }

    private Theme CurrentTheme { get; set; } = Theme.Bootstrap4;

    private void SetTheme()
    {
        CurrentTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (CurrentTheme == Theme.Material3 || CurrentTheme == Theme.Material3Dark ||
            CurrentTheme == Theme.Bootstrap4 || CurrentTheme == Theme.Material ||
            CurrentTheme == Theme.MaterialDark)
        {
            TranslateY = "-7px";
        }
    }
}