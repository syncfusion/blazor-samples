@page "/range-selector/empty-point"
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json
@using Syncfusion.Blazor
@inject NavigationManager NavigationManager
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent

@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the functionality of empty points in the range navigator series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see range navigator with empty points. <code>AreaSeries</code> is used to represent the data.</p>
    <p><code>Tooltip</code> is enabled to show the selected data range, while the selected range is changed.</p>
    <p>More information about the range navigator can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/range-selector/getting-started" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

@if (StockChartData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 style="font-family: Segoe UI; font-weight: 500; font-size: 15px;">AAPL 2012-17</h4>
        <div>
            <SfRangeNavigator @bind-Value="@SelectedRange" LabelPosition="AxisPosition.Outside" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" Theme="@CurrentTheme">
                <RangeNavigatorEvents Changed="OnRangeChanged"></RangeNavigatorEvents>
                <RangeNavigatorMajorGridLines Width="0"></RangeNavigatorMajorGridLines>
                <RangeNavigatorMajorTickLines Width="0"></RangeNavigatorMajorTickLines>
                <RangeNavigatorBorder Width="0"></RangeNavigatorBorder>
                <RangeNavigatorRangeTooltipSettings Enable="true" DisplayMode="TooltipDisplayMode.Always"></RangeNavigatorRangeTooltipSettings>
                <RangeNavigatorSeriesCollection>
                    <RangeNavigatorSeries Fill="@AreaFillColor" DataSource="@StockChartData" Width="2" XName="x" Type="RangeNavigatorType.Area" YName="open">
                        <RangeNavigatorSeriesBorder Width="2" Color="@AreaBorderColor"></RangeNavigatorSeriesBorder>
                    </RangeNavigatorSeries>
                </RangeNavigatorSeriesCollection>
            </SfRangeNavigator>
        </div>
        <div>
            <SfChart Theme="@CurrentTheme">
                <ChartArea>
                    <ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder>
                </ChartArea>
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift" ZoomFactor="@ZoomFactor" ZoomPosition="@ZoomPosition">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis RangePadding="ChartRangePadding.Normal">
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries Fill="@AreaFillColor" DataSource="@StockChartData" XName="x" YName="open" Name="Sales" Width="2" Type="ChartSeriesType.Area">
                        <ChartSeriesBorder Width="2" Color="@AreaBorderColor"></ChartSeriesBorder>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
}

@code{
    // Properties with clear and meaningful names
    public double ZoomFactor { get; set; } = 1;
    public double ZoomPosition { get; set; } = 0;
    public ChartData[]? StockChartData { get; set; }
    public string? AreaBorderColor { get; set; }
    public string? AreaFillColor { get; set; }
    public string GradientUrl { get; set; } = "url";
    public Theme CurrentTheme { get; set; }
    public object SelectedRange { get; set; } = new object[] { new DateTime(2013, 12, 27), new DateTime(2015, 03, 23) };

    // Load data and apply null checks
    protected override async Task OnInitializedAsync()
    {
        StockChartData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/chart-data.json");
        
        for (int i = 46; i < StockChartData?.Length; i += 50)
        {
            StockChartData[i].open = null;
        }
    }

    // Event handler for range selection
    public void OnRangeChanged(ChangedEventArgs args)
    {
        ZoomFactor = args.ZoomFactor;
        ZoomPosition = args.ZoomPosition;
        StateHasChanged();
    }

    // Set theme based on URL
    protected override void OnInitialized()
    {
        var CurrentUri = NavigationManager.Uri;

        if (CurrentUri.Contains("material3"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.Material3Dark, "#4EAAFF", "#material3-dark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Material3, "#6355C7", "#material3-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("material"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.MaterialDark, "#9ECB08", "#materialdark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Material, "#00bdae", "#material-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("fabric"))
        {
            SetTheme(Theme.Fabric, "#4472c4", "#fabric-gradient-chart");
        }
        else if (CurrentUri.Contains("bootstrap5"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.Bootstrap5Dark, "#FD7E14", "#bootstrap5dark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Bootstrap5, "#FD7E14", "#bootstrap5-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("fluent2"))
        {
            if (CurrentUri.Contains("highcontrast"))
            {
                SetTheme(Theme.Fluent2HighContrast, "#9BB449", "#fluent2highcontrast-gradient-chart");
            }
            else if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.Fluent2Dark, "#9BB449", "#fluent2dark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Fluent2, "#6200EE", "#fluent2-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("fluent"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.FluentDark, "#1AC9E6", "#fluentdark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Fluent, "#1AC9E6", "#fluent-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("bootstrap4"))
        {
            SetTheme(Theme.Bootstrap4, "#a16ee5", "#bootstrap4-gradient-chart");
        }
        else if (CurrentUri.Contains("bootstrap"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.BootstrapDark, "#a16ee5", "#bootstrapdark-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Bootstrap, "#a16ee5", "#bootstrap-gradient-chart");
            }
        }
        else if (CurrentUri.Contains("highcontrast"))
        {
            SetTheme(Theme.HighContrast, "#79ECE4", "#highcontrast-gradient-chart");
        }
        else if (CurrentUri.Contains("tailwind3"))
        {
            if (CurrentUri.Contains("dark"))
            {
                SetTheme(Theme.Tailwind3Dark, "#8029F1", "#tailwind3-gradient-chart");
            }
            else
            {
                SetTheme(Theme.Tailwind3, "#2F4074", "#tailwind3-gradient-chart");
            }
        }
        else
        {
            SetTheme(Theme.Bootstrap4, "#a16ee5", "#bootstrap4-gradient-chart");
        }
    }

// Helper method to set the theme, border color, and fill color
private void SetTheme(Theme theme, string borderColor, string gradientId)
{
    CurrentTheme = theme;
    AreaBorderColor = borderColor;
    AreaFillColor = $"{GradientUrl}({gradientId})";
}


    // Data model class
    public class ChartData
    {
        public DateTime x { get; set; }
        public double? open { get; set; }
    }
}

<style>
    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #materialdark-gradient-chart stop {
        stop-color: #9ECB08;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }
    
    #bootstrap5-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #bootstrap5dark-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #fluent-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #fluentdark-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    #material3-gradient-chart stop {
        stop-color: #6355C7;
    }

    #material3-gradient-chart stop {
        stop-color: #6355C7;
    }

    #material3-dark-gradient-chart stop {
        stop-color: #4EAAFF;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }

    #tailwind-gradient-chart stop {
        stop-color: #2F4074;
    }

    #tailwinddark-gradient-chart stop {
        stop-color: #8029F1;
    }

    #tailwind3-gradient-chart stop {
        stop-color: #2F4074; // used same color as tailwind
    }

    #tailwind3dark-gradient-chart stop {
        stop-color: #8029F1; // used same color as tailwind dark
    }

    #fluent2-gradient-chart stop {
        stop-color: #6200EE;
    }

    #fluent2dark-gradient-chart stop {
        stop-color: #9BB449;
    }

    #fluent2highcontrast-gradient-chart stop {
        stop-color: #9BB449;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="materialdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
		<linearGradient id="fluent-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluentdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwinddark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind3dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>