@page "/range-selector/filter"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@using ThemeHelper
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample filters the data by hire date using date-time axis.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to bind the value of the range navigator to the grid control using the <code>Changed</code> event.</p>
    <p>More information about the range navigator can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/range-selector/getting-started" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

@if (EmployeeData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 align="center" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;"> Filter from Hire Date</h4>
        <div>
            <SfRangeNavigator ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime"
                              AllowSnapping="true" IntervalType="RangeIntervalType.Quarter"
                              EnableGrouping="true" GroupBy="RangeIntervalType.Years" Theme="@CurrentTheme"
                              @bind-Value="@HireDateRange" DataSource="@EmployeeData"
                              XName="HireDate" YName="yValue">
                <RangeNavigatorStyleSettings SelectedRegionColor="@SelectedRegionColor"></RangeNavigatorStyleSettings>
                <RangeNavigatorEvents Changed="OnRangeChanged" LabelRender="OnAxisLabelRender"></RangeNavigatorEvents>
            </SfRangeNavigator>
        </div> <br>
        <div>
            <SfGrid Width="80%" @ref="GridReference" DataSource="@FilteredEmployeeData" TValue="EmployeeDataModel" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field="EmployeeID" HeaderText="Employee ID" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                    <GridColumn Field="FirstName" HeaderText="Name" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                    <GridColumn Field="Title" HeaderText="Title" TextAlign="TextAlign.Center" Width="200"></GridColumn>
                    <GridColumn Field="HireDate" HeaderText="Hire Date" TextAlign="TextAlign.Center" Format="d/M/yyyy" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
}

@code{
    public SfGrid<EmployeeDataModel>? GridReference { get; set; }
    public EmployeeDataModel[]? EmployeeData { get; set; }
    public EmployeeDataModel[]? FilteredEmployeeData { get; set; }
    public string? SelectedRegionColor { get; set; }
    public Theme CurrentTheme { get; set; }
    public object HireDateRange { get; set; } = new object[] { new DateTime(1992, 06, 1), new DateTime(1993, 05, 1) };

    protected override async Task OnInitializedAsync()
    {
        EmployeeData = await Http.GetFromJsonAsync<EmployeeDataModel[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/employee-data.json");
        FilteredEmployeeData = EmployeeData;
        SetTheme();
    }

    public class EmployeeDataModel
    {
        public double EmployeeID { get; set; }
        public double yValue { get; set; }
        public string? FirstName { get; set; }
        public string? Title { get; set; }
        public DateTime HireDate { get; set; }
    }

    protected void OnRangeChanged(ChangedEventArgs args)
    {
        FilteredEmployeeData = EmployeeData?
            .Where(employee => employee.HireDate >= Convert.ToDateTime(args.Start) && employee.HireDate <= Convert.ToDateTime(args.End))
            .ToArray();
        StateHasChanged();
    }

    public void OnAxisLabelRender(RangeLabelRenderEventArgs args)
    {
        args.Text = args.Text.Contains("Quarter", StringComparison.InvariantCulture) ? args.Text.Replace("Quarter", "Quarter-") : args.Text;
    }

    private void SetTheme()
    {
        CurrentTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        SelectedRegionColor = CurrentTheme switch
        {
            Theme.Material3Dark => "#4EAAFF",
            Theme.Material3 => "#6355C7",
            Theme.MaterialDark => "#9ECB08",
            Theme.Material => "#00bdae",
            Theme.FabricDark => "#4472c4",
            Theme.Fabric => "#4472c4",
            Theme.Bootstrap5Dark => "#FD7E14",
            Theme.Bootstrap5 => "#FD7E14",
            Theme.Fluent2HighContrast => "#9BB449",
            Theme.Fluent2Dark => "#9BB449",
            Theme.Fluent2 => "#6200EE",
            Theme.FluentDark => "#1AC9E6",
            Theme.Fluent => "#1AC9E6",
            Theme.BootstrapDark => "#a16ee5",
            Theme.Bootstrap => "#a16ee5",
            Theme.HighContrast => "#79ECE4",
            Theme.Tailwind3Dark => "#8B5CF6",
            Theme.Tailwind3 => "#5A61F6",
            _ => "#a16ee5",
        };
    }
}