@page "/range-selector/print-export"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using ThemeHelper

@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates client-side printing and exporting of the range selector, allowing you to export its data to <code>Excel</code> and <code>CSV</code> formats. It also allows you to save the range selector in image formats such as <code>JPEG</code>, <code>PNG</code>, <code>SVG</code>, and <code>PDF</code>.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how the print and export functionality works. The rendered range selector can be exported in <code>JPEG</code>, <code>PNG</code>, <code>SVG</code>, and <code>PDF</code> formats. Data from the range selector can also be exported to <code>Excel</code> and <code>CSV</code> files.
    </p>
    <p>
        By clicking the <code>Print</code> button, you can print the range navigator directly from the browser by invoking its public method <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SfRangeNavigator.html#Syncfusion_Blazor_Charts_SfRangeNavigator_PrintAsync_Microsoft_AspNetCore_Components_ElementReference_' aria-label="PrintAsync">PrintAsync</a>.
    </p>
    <p>
        By clicking the <code>Export</code> button, you can export the range selector to a specific type using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.SfRangeNavigator.html#Syncfusion_Blazor_Charts_SfRangeNavigator_ExportAsync_Syncfusion_Blazor_Charts_ExportType_System_String_System_Nullable_Syncfusion_PdfExport_PdfPageOrientation__System_Boolean_' aria-label="ExportAsync">ExportAsync</a> method. When using this method, parameters such as the export type and file name are vital.
    </p>
     <p>More information about the print and export can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/range-selector/export' aria-label="documentation section" >documentation section</a>.</p>
</ActionDescription>

@if (ExportData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section col-lg-9 sb-property-border" align="center">
        <SfRangeNavigator @ref="RangeObj" @bind-Value="@RangeValue" LabelFormat="MMM" Theme="@RangeNavigatorTheme" EnableGrouping="true" IntervalType="RangeIntervalType.Months" Interval="@interval"
                      DataSource="@ExportData" XName="xDate" YName="Close" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime">
            <RangeNavigatorStyleSettings SelectedRegionColor="@SelectedRegionColor"></RangeNavigatorStyleSettings>
            <RangeNavigatorEvents LabelRender="AxisLabelRendering"></RangeNavigatorEvents>
        </SfRangeNavigator>
    </div>
    <div class="col-lg-3 property-section">
        <div class="property-panel-header">Properties</div>
        <table style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div style="margin-top:-3%">
                            Export Type
                        </div>
                    </td>
                    <td style="width: 100%;margin-top:4%;">
                        <div style="width:100%;margin-left:5%">
                            <SfDropDownList TValue="string" TItem="FileFormatType" DataSource="@ExportTypes" @bind-Value="@RangeNavigatorExportType">
                                <DropDownListEvents TValue="string" TItem="FileFormatType" ValueChange="ChartFileValueChange" />
                                <DropDownListFieldSettings Text="Text" Value="Text" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div>File Name</div>
                    </td>
                    <td style="width: 70%;">
                        <div class="e-float-input" style='margin-top:5%;margin-left:5%'>
                            <SfTextBox Value="@FileName" ValueChange="@NameChange" />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <div style="height: 45px; text-transform:none !important;width:100%;margin-left:40%">
            <SfButton IsPrimary="true" OnClick="ExportChart" IsToggle="true">Export</SfButton>
        </div>
        <div style="height: 45px; text-transform:none !important;width:100%;margin-left:40%">
             <SfButton IsPrimary="true" IsToggle="true" OnClick="PrintRangeNavigator">Print</SfButton>
        </div>
    </div>
}

@code {
    
    public ChartData[]? ExportData { get; set; }
    public SfRangeNavigator? RangeObj { get; set; }
    public Theme RangeNavigatorTheme { get; set; }
    public object RangeValue { get; set; } = new object[] { new DateTime(2013, 05, 01), new DateTime(2013, 08, 01) };
    public string RangeNavigatorExportType { get; set; } = "JPEG";
    public string FileName { get; set; } = "RangeNavigator";
    string? SelectedRegionColor;
    public double interval { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ExportData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/export-data.json");
    }

    public class ChartData
    {
        public DateTime xDate { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
    }

    public async Task PrintRangeNavigator(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        if (RangeObj != null)
        await RangeObj.PrintAsync();
    }

    public class FileFormatType
    {
        public string? Id { get; set; }
        public string? Text { get; set; }
    }
    private List<FileFormatType> ExportTypes = new List<FileFormatType>() {
        new FileFormatType(){ Id= "JPEG", Text= "JPEG" },
        new FileFormatType(){ Id= "PNG", Text= "PNG" },
        new FileFormatType(){ Id= "SVG", Text= "SVG" },
        new FileFormatType(){ Id= "PDF", Text= "PDF" },
        new FileFormatType(){ Id= "XLSX", Text= "XLSX" },
        new FileFormatType(){ Id= "CSV", Text= "CSV" }
    };

    public void AxisLabelRendering(RangeLabelRenderEventArgs args)
    {
        args.Text = args.Text.Contains("Quarter", StringComparison.InvariantCulture) ? args.Text.Replace("Quarter", "Quarter-") : args.Text;
    }

    private void NameChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FileName = args.Value;
    }
    private void ChartFileValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FileFormatType> args)
    {
        RangeNavigatorExportType = args.Value;
    }
    public async Task ExportChart(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        ExportType ExportFileType = ExportType.JPEG;
        switch (RangeNavigatorExportType) {
            case "JPEG":
                ExportFileType = ExportType.JPEG;
                break;
            case "PNG":
                ExportFileType = ExportType.PNG;
                break;
            case "SVG":
                ExportFileType = ExportType.SVG;
                break;
            case "PDF":
                ExportFileType = ExportType.PDF;
                break;
            case "XLSX":
                ExportFileType = ExportType.XLSX;
                break;
            case "CSV":
                ExportFileType = ExportType.CSV;
                break;
        }
        if (RangeObj != null)
        await RangeObj.ExportAsync(ExportFileType, FileName);
    }
    protected override void OnInitialized()
    {
        interval = SampleService != null && SampleService.IsDevice ? 2 : 1;
        SetThemeAndColor();
    }
    private void SetThemeAndColor()
    {
        // Get the current theme using a helper method
        RangeNavigatorTheme  = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    
        // Use switch expression to set the selected region color based on the theme
        SelectedRegionColor  = RangeNavigatorTheme switch
        {
            Theme.Material3Dark => "#4EAAFF",
            Theme.Material3 => "#6355C7",
            Theme.MaterialDark => "#9ECB08",
            Theme.Material => "#00bdae",
            Theme.FabricDark => "#4472c4",
            Theme.Fabric => "#4472c4",
            Theme.Bootstrap5Dark => "#FD7E14",
            Theme.Bootstrap5 => "#FD7E14",
            Theme.Fluent2HighContrast => "#9BB449",
            Theme.Fluent2Dark => "#9BB449",
            Theme.Fluent2 => "#6200EE",
            Theme.FluentDark => "#1AC9E6",
            Theme.Fluent => "#1AC9E6",
            Theme.BootstrapDark => "#a16ee5",
            Theme.Bootstrap => "#a16ee5",
            Theme.HighContrast => "#79ECE4",
            Theme.Tailwind3Dark => "#8029F1",
            Theme.Tailwind3 => "#2F4074",
            _ => "#a16ee5" // Default color
        };
    }
}

<style>

    #control-container {
        padding: 0px !important;
    }

    .e-export-icon::before {
        content: '\e728';
    }

    .e-print-icon::before {
        content: '\e813';
    }

    .btn-style {
        margin: 5px;
        width: 75px;
    }
    #button-control {
        width: 100%;
        margin: 8% 0;
        text-align: center;
    }
    #button-control .e-btn {
        float: left;
    }
    @@media only screen and (max-width: 500px) {
        #button-control {
            margin-left: -3%;
        }
    }
    .button-section {
        width: 80%;
        margin: auto;
    }
    #button-control .col-xs-12 {
        margin: 15px 0;
    }
    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    .e-play-icon::before {
        content: '\e701';
    }
    .e-pause-icon::before {
        content: '\e705';
    }
    .e-open-icon::before {
        content: '\e70d';
    }
    .e-add-icon::before {
        content: '\e70a';
    }
</style>