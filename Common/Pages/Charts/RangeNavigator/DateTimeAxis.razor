@page "/range-selector/date-time-axis"
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json
@using Syncfusion.Blazor
@inject NavigationManager NavigationManager
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample represents the exchange rate analysis for USD to EUR with datetime axis.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, date-time data is used, and the selected range values are displayed with a tooltip. Date-time axis displays date-time data as axis labels and utilises a date-time scale. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.RangeValueType.html' aria-label="ValueType">ValueType</a> to DateTime to display a date-time axis. The format of the axis label will be determined by the range navigator's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.RangeIntervalType.html' aria-label="IntervalType">IntervalType</a>. The LabelFormat property can also be used to set the format directly.</p>
    <p>More information about the range navigator can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/range-selector/data#datetime' aria-label="documentation section" >documentation section</a>.</p>
</ActionDescription>

@if (ExchangeRateData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 style="font-family: Segoe UI; font-weight: 500; font-size: 15px;">EUR Exchange Rate from USD</h4>
        <SfRangeNavigator @bind-Value="@SelectedRange" LabelPosition="AxisPosition.Outside" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime" Theme="@ChartTheme" Interval="@YearlyInterval" IntervalType="RangeIntervalType.Years">
            <RangeNavigatorEvents Changed="OnRangeChanged"></RangeNavigatorEvents>
            <RangeNavigatorMajorGridLines Width="0"></RangeNavigatorMajorGridLines>
            <RangeNavigatorRangeTooltipSettings Enable="true" Format="yyyy/MM/dd" DisplayMode="TooltipDisplayMode.Always"></RangeNavigatorRangeTooltipSettings>
            <RangeNavigatorSeriesCollection>
                <RangeNavigatorSeries Fill="@ChartFillColor" DataSource="@ExchangeRateData" Width="2" XName="x" Type="RangeNavigatorType.Area" YName="y">
                    <RangeNavigatorSeriesBorder Width="2" Color="@ChartBorderColor"></RangeNavigatorSeriesBorder>
                </RangeNavigatorSeries>
            </RangeNavigatorSeriesCollection>
        </SfRangeNavigator>
        
        <SfChart Theme="@ChartTheme">
            <ChartArea><ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift" ZoomFactor="@ZoomFactor" ZoomPosition="@ZoomPosition">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Interval="0.1" Minimum="0.6" Maximum="1" LabelFormat="n1">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries Fill="@ChartFillColor" DataSource="@ExchangeRateData" XName="x" YName="y" Name="Exchange Rate" Width="2" Type="ChartSeriesType.Spline">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
                <ChartCrosshairLine Color="transparent" Width="0"></ChartCrosshairLine>
            </ChartCrosshairSettings>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
        </SfChart>
    </div>
}

@code{
    private ChartData[]? ExchangeRateData;
    public double ZoomFactor { get; set; } = 1;
    public double ZoomPosition { get; set; } = 0;
    public string? ChartBorderColor { get; set; }
    public string? ChartFillColor { get; set; }
    private const string ImageBaseUrl = "url";
    public Theme ChartTheme { get; set; }
    public double YearlyInterval { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ExchangeRateData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/stock-data.json");
    }

    public class ChartData
    {
        public DateTime x { get; set; }
        public double y { get; set; }
    }

    private object SelectedRange { get; set; } = new object[] { new DateTime(2011, 01, 01), new DateTime(2013, 12, 31) };

    public void OnRangeChanged(ChangedEventArgs args)
    {
        ZoomFactor = args.ZoomFactor;
        ZoomPosition = args.ZoomPosition;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        string currentUri = NavigationManager.Uri;
        YearlyInterval = SampleService != null && SampleService.IsDevice ? 2 : 1;

        SetTheme(currentUri);
    }

    private void SetTheme(string uri)
    {
        if (uri.Contains("material3"))
        {
            ApplyTheme(uri, Theme.Material3, Theme.Material3Dark, "#6355C7", "#4EAAFF", "material3");
        }
        else if (uri.Contains("material"))
        {
            ApplyTheme(uri, Theme.Material, Theme.MaterialDark, "#00bdae", "#9ECB08", "material");
        }
        else if (uri.Contains("fabric"))
        {
            ApplyTheme(uri, Theme.Fabric, Theme.FabricDark, "#4472c4", "#4472c4", "fabric");
        }
        else if (uri.Contains("bootstrap5"))
        {
            ApplyTheme(uri, Theme.Bootstrap5, Theme.Bootstrap5Dark, "#FD7E14", "#FD7E14", "bootstrap5");
        }
        else if (uri.Contains("bootstrap4"))
        {
            ChartTheme = Theme.Bootstrap4;
            ChartBorderColor = "#a16ee5";
            ChartFillColor = $"{ImageBaseUrl}(#bootstrap4-gradient-chart)";
        }
        else if (uri.Contains("bootstrap"))
        {
            ApplyTheme(uri, Theme.Bootstrap, Theme.BootstrapDark, "#a16ee5", "#a16ee5", "bootstrap");
        }
        else if (uri.Contains("tailwind3"))
        {
            ApplyTheme(uri, Theme.Tailwind3, Theme.Tailwind3Dark, "#2F4074", "#8B5CF6", "tailwind3");
        }
        else if (uri.Contains("fluent2"))
        {
            if (uri.Contains("highcontrast"))
            {
                ChartTheme = Theme.HighContrast;
                ChartBorderColor = "#79ECE4";
                ChartFillColor = $"{ImageBaseUrl}(#highcontrast-gradient-chart)";
            }
            else
            {
                ApplyTheme(uri, Theme.Fluent2, Theme.Fluent2Dark, "#6200EE", "#9BB449", "fluent2");
            }
        }
        else if (uri.Contains("highcontrast"))
        {
            ChartTheme = Theme.HighContrast;
            ChartBorderColor = "#79ECE4";
            ChartFillColor = $"{ImageBaseUrl}(#highcontrast-gradient-chart)";
        }
        else if (uri.Contains("fluent"))
        {
            ApplyTheme(uri, Theme.Fluent, Theme.FluentDark, "#1AC9E6", "#1AC9E6", "fluent");
        }
        else
        {
            ChartTheme = Theme.Bootstrap4;
            ChartBorderColor = "#a16ee5";
            ChartFillColor = $"{ImageBaseUrl}(#bootstrap4-gradient-chart)";
        }
    }

    private void ApplyTheme(string uri, Theme lightTheme, Theme darkTheme, string lightColor, string darkColor, string gradientName)
    {
        if (uri.Contains("dark"))
        {
            ChartTheme = darkTheme;
            ChartBorderColor = darkColor;
            ChartFillColor = $"{ImageBaseUrl}(#{gradientName}dark-gradient-chart)";
        }
        else
        {
            ChartTheme = lightTheme;
            ChartBorderColor = lightColor;
            ChartFillColor = $"{ImageBaseUrl}(#{gradientName}-gradient-chart)";
        }
    }
}
<style>

    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #materialdark-gradient-chart stop {
        stop-color: #9ECB08;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }
    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap5-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #bootstrap5dark-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    #tailwind3-gradient-chart stop {
        stop-color: #2F4074;
    }

    #tailwind3dark-gradient-chart stop {
        stop-color: #8029F1; // used same color as like tailwinddark
    }

    #fluent-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #fluentdark-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #material3-gradient-chart stop {
        stop-color: #6355C7;
    }

    #material3dark-gradient-chart stop {
        stop-color: #4EAAFF;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.9;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0.3;
    }

    #fluent2-gradient-chart stop {
        stop-color: #6200EE;
    }

    #fluent2dark-gradient-chart stop {
        stop-color: #9BB449;
    }

    #fluent2highcontrast-gradient-chart stop {
        stop-color: #9BB449;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="materialdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
         <linearGradient id="tailwind3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind3dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluentdark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
            <linearGradient id="fluent2-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
            <linearGradient id="fluent2dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
            <linearGradient id="fluent2highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
                <stop offset="0"></stop>
                <stop offset="1"></stop>
            </linearGradient>
        </linearGradient>
    </defs>
</svg>