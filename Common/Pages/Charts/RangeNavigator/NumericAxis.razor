@page "/range-selector/numeric-axis"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using ThemeHelper
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample depicts cricket match data between two countries using the numeric axis in the range navigator.</p>
</SampleDescription>
<ActionDescription>
    <p>The numeric axis is used to plot numeric data in the range navigator. To render a numeric axis, set the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.RangeValueType.html" aria-label="ValueType">ValueType</a> to <code>Double</code>.</p>
    <p>
        <code>Tooltip</code> is enabled to display the selected data range while the range is being changed.
    </p>
    <p>More information about the range navigator can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/range-selector/data#numeric" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

@if (AustraliaData == null && SriLankaData == null)
{
    <div class="loading-spinner"></div>
}
else
{
    <div class="control-section" align="center">
        <h4 style="font-family: Segoe UI; font-weight: 500; font-size: 15px;">Score Comparison: AUS vs SL</h4>
        <div>
            <SfRangeNavigator LabelPosition="AxisPosition.Outside" @bind-Value="@RangeValues" Theme="@ChartTheme">
                <RangeNavigatorEvents Changed="OnRangeChanged"></RangeNavigatorEvents>
                <RangeNavigatorRangeTooltipSettings Enable="true"></RangeNavigatorRangeTooltipSettings>
                <RangeNavigatorSeriesCollection>
                    <RangeNavigatorSeries DataSource="@AustraliaData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y"></RangeNavigatorSeries>
                    <RangeNavigatorSeries DataSource="@SriLankaData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y"></RangeNavigatorSeries>
                </RangeNavigatorSeriesCollection>
            </SfRangeNavigator>
        </div>
        <div id="chart-container">
            <SfChart Theme="@ChartTheme">
                <ChartArea>
                    <ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder>
                </ChartArea>
                <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" Title="Overs" ZoomFactor="@ZoomFactor" ZoomPosition="@ZoomPosition">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis Minimum="0" Title="Runs">
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@AustraliaData" XName="x" YName="y" Name="AUS" Width="2" Type="ChartSeriesType.Spline">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                    <ChartSeries DataSource="@SriLankaData" XName="x" YName="y" Name="SL" Width="2" Type="ChartSeriesType.Spline">
                        <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartTooltipSettings Enable="false"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
}
@code {
    private ChartData[]? AustraliaData { get; set; }
    private ChartData[]? SriLankaData { get; set; }
    private double ZoomFactor { get; set; } = 1;
    private double ZoomPosition { get; set; } = 0;
    private object RangeValues { get; set; } = new object[] { 31, 50 };
    private Theme ChartTheme { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AustraliaData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/double-data-aus.json");
        SriLankaData = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/range-navigator/double-data-sl.json");
    }

    public class ChartData
    {
        public double x { get; set; }
        public double y { get; set; }
        public bool isWicket { get; set; }
    }

    private void OnRangeChanged(ChangedEventArgs args)
    {
        ZoomFactor = args.ZoomFactor;
        ZoomPosition = args.ZoomPosition;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ChartTheme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}
