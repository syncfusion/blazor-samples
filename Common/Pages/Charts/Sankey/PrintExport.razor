@page "/sankey/print-export"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Sankey
@using ThemeHelper

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This Blazor Sankey Chart demonstrates the global supply chain of smartphones, from raw materials through manufacturing and distribution to end consumers. The chart emphasizes the complex nature of modern electronics production and distribution, highlighting the flow of materials and components across different stages of the supply chain.</p>
</SampleDescription>

<ActionDescription>
    <p>The chart allows for detailed analysis of the smartphone supply chain, starting with raw materials such as metals and plastics, flowing through component manufacturing, assembly, and distribution channels, and finally reaching consumers in different regions.</p>
    <p>
        Users can explore this interactive chart to gain insights into the smartphone production and distribution patterns. Additionally, this chart supports printing and exporting features, enabling users to save or share the visualization for presentations and reports. To use these features, click the respective buttons on the toolbar. For more detailed information, refer to the <a target='_blank' href='https://blazor.syncfusion.com/documentation/sankey' aria-label="Navigate to the documentation for Sankey chart">documentation</a>.
    </p>
</ActionDescription>

<div class="control-section" align='center'>
    <div class="content-wrapper">
        <SfSankey @ref="_Sankey" ID="smartCitySankey" EnableAnimation="false" Width="@_width" Nodes=@Nodes Links=@Links Theme="@_theme" LabelRendering="OnLabelRendering">
        </SfSankey>
    </div>
    <div class="btn-container">
        <SfButton CssClass="e-primary" @onclick="PrintChart">Print Sankey</SfButton>
        <SfButton CssClass="e-primary" @onclick="ExportChart">Export as SVG</SfButton>
    </div>
</div>

<style>
    .control-section {
        padding: 20px;
    }
    .btn-container {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 20px;
    }
    
</style>

@code {
    Theme _theme;
    string _width = "90%";
    SfSankey? _Sankey;
    public List<SankeyDataNode> Nodes = new List<SankeyDataNode>();
    public List<SankeyDataLink> Links = new List<SankeyDataLink>();

    protected override void OnInitialized()
    {
        _theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        string themeName = _theme.ToString().ToLower();
        if (SampleService != null && !SampleService.IsDevice)
        {
            Nodes = new List<SankeyDataNode>()
        {
            // Raw Materials
            new SankeyDataNode() { Id = "Metals", Label = new SankeyDataLabel() { Text = "Metals" } },
            new SankeyDataNode() { Id = "Plastics", Label = new SankeyDataLabel() { Text = "Plastics" } },
            new SankeyDataNode() { Id = "RareEarths", Label = new SankeyDataLabel() { Text = "Rare Earths" } },

            // Components
            new SankeyDataNode() { Id = "Processors", Label = new SankeyDataLabel() { Text = "Processors" } },
            new SankeyDataNode() { Id = "Displays", Label = new SankeyDataLabel() { Text = "Displays" } },
            new SankeyDataNode() { Id = "Batteries", Label = new SankeyDataLabel() { Text = "Batteries" } },
            new SankeyDataNode() { Id = "Cameras", Label = new SankeyDataLabel() { Text = "Cameras" } },

            // Assembly
            new SankeyDataNode() { Id = "Assembly", Label = new SankeyDataLabel() { Text = "Assembly" } },

            // // Distribution
            new SankeyDataNode() { Id = "Manufacturers", Label = new SankeyDataLabel() { Text = "Manufacturers" } },
            new SankeyDataNode() { Id = "Retailers", Label = new SankeyDataLabel() { Text = "Retailers" } },
            new SankeyDataNode() { Id = "OnlineStores", Label = new SankeyDataLabel() { Text = "Online Stores" } },

            // Consumers
            new SankeyDataNode() { Id = "NorthAmerica", Label = new SankeyDataLabel() { Text = "North America" } },
            new SankeyDataNode() { Id = "Europe", Label = new SankeyDataLabel() { Text = "Europe" } },
            new SankeyDataNode() { Id = "AsiaPacific", Label = new SankeyDataLabel() { Text = "Asia Pacific" } },
            new SankeyDataNode() { Id = "RestOfWorld", Label = new SankeyDataLabel() { Text = "Rest of World" } }
        };

            Links = new List<SankeyDataLink>()
        {
            // Raw Materials to Components
            new SankeyDataLink() { SourceId = "Metals", TargetId = "Processors", Value = 100 },
            new SankeyDataLink() { SourceId = "Metals", TargetId = "Batteries", Value = 80 },
            new SankeyDataLink() { SourceId = "Plastics", TargetId = "Displays", Value = 90 },
            new SankeyDataLink() { SourceId = "Plastics", TargetId = "Cameras", Value = 70 },
            new SankeyDataLink() { SourceId = "RareEarths", TargetId = "Processors", Value = 50 },
            new SankeyDataLink() { SourceId = "RareEarths", TargetId = "Displays", Value = 60 },

            // Components to Assembly
            new SankeyDataLink() { SourceId = "Processors", TargetId = "Assembly", Value = 150 },
            new SankeyDataLink() { SourceId = "Displays", TargetId = "Assembly", Value = 150 },
            new SankeyDataLink() { SourceId = "Batteries", TargetId = "Assembly", Value = 80 },
            new SankeyDataLink() { SourceId = "Cameras", TargetId = "Assembly", Value = 70 },

            // Assembly to Distribution
            new SankeyDataLink() { SourceId = "Assembly", TargetId = "Manufacturers", Value = 450 },

            // Distribution to Retail Channels
            new SankeyDataLink() { SourceId = "Manufacturers", TargetId = "Retailers", Value = 250 },
            new SankeyDataLink() { SourceId = "Manufacturers", TargetId = "OnlineStores", Value = 200 },

            // Retail Channels to Consumers
            new SankeyDataLink() { SourceId = "Retailers", TargetId = "NorthAmerica", Value = 80 },
            new SankeyDataLink() { SourceId = "Retailers", TargetId = "Europe", Value = 70 },
            new SankeyDataLink() { SourceId = "Retailers", TargetId = "AsiaPacific", Value = 60 },
            new SankeyDataLink() { SourceId = "Retailers", TargetId = "RestOfWorld", Value = 40 },
            new SankeyDataLink() { SourceId = "OnlineStores", TargetId = "NorthAmerica", Value = 60 },
            new SankeyDataLink() { SourceId = "OnlineStores", TargetId = "Europe", Value = 50 },
            new SankeyDataLink() { SourceId = "OnlineStores", TargetId = "AsiaPacific", Value = 70 },
            new SankeyDataLink() { SourceId = "OnlineStores", TargetId = "RestOfWorld", Value = 20 }
        };
        }
        else
        {
            Nodes = new List<SankeyDataNode>()
{
    // Income Sources
    new SankeyDataNode() { Id = "Salary", Label = new SankeyDataLabel() { Text = "Salary" } },
    new SankeyDataNode() { Id = "Freelance", Label = new SankeyDataLabel() { Text = "Freelance" } },

    // Distribution
    new SankeyDataNode() { Id = "Essentials", Label = new SankeyDataLabel() { Text = "Essentials" } },
    new SankeyDataNode() { Id = "Discretionary", Label = new SankeyDataLabel() { Text = "Discretionary" } },
    new SankeyDataNode() { Id = "Savings", Label = new SankeyDataLabel() { Text = "Savings" } }
};
            Links = new List<SankeyDataLink>()
{
    // Income Sources to Distribution
    new SankeyDataLink() { SourceId = "Salary", TargetId = "Essentials", Value = 2000 },
    new SankeyDataLink() { SourceId = "Salary", TargetId = "Savings", Value = 500 },
    new SankeyDataLink() { SourceId = "Freelance", TargetId = "Discretionary", Value = 800 },
    new SankeyDataLink() { SourceId = "Freelance", TargetId = "Savings", Value = 200 }
};

        }
        base.OnInitialized();
        if (SampleService != null && SampleService.IsDevice)
        {
            _width = "100%";
            StateHasChanged();
        }
    }

    private async Task PrintChart()
    {
        if (_Sankey != null)
        await _Sankey.PrintAsync();
    }

    private async Task ExportChart()
    {
        if (_Sankey != null)
        await _Sankey.ExportAsync(SankeyExportType.SVG, $"Sankey{DateTime.Now.Ticks}", null);
    }

    void OnLabelRendering(SankeyLabelRenderEventArgs args)
    {
        if (SampleService != null && SampleService.IsDevice)
        {
            args.Text = args.Text.Substring(0, 3).ToUpper();
        }
    }
}
