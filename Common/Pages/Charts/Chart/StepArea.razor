@page "/chart/step-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This Blazor Step Area Chart example visualizes the trend of unit sales over several months. It highlights changes in sales units using a step area style, providing clear insights into how sales have fluctuated over time.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a step area chart. This series forms a step progress by connecting points through vertical and horizontal lines with the area being filled.</p>
    <p>More information about the step area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/step-area' aria-label="Navigate to the documentation for step-area in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
     <SfChart Title="Unit Sold Trend" SubTitle="CM vs LM | By Month" Width="@Width" Theme="@Theme">
     <ChartEvents OnAxisLabelRender="LabelRender"></ChartEvents>
     <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
     <ChartPrimaryXAxis PlotOffsetLeft="50" PlotOffsetRight="50" LabelFormat="MMM-yy" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
         <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
         <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
     </ChartPrimaryXAxis>
     <ChartPrimaryYAxis Title="Units" OpposedPosition="true" LabelFormat="N0" Minimum="120" Maximum="200" Interval="20">
         <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
         <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
     </ChartPrimaryYAxis>
     <ChartTooltipSettings Header="<b>Unit Sold</b>" Enable="true" Shared="true" Format="${point.x} : <b>${point.y}K</b>"></ChartTooltipSettings>
     <ChartSeriesCollection>
            <ChartSeries StepPosition="StepPosition.Center" DataSource="@ChartPoints" XName="Period"
         Opacity="0.5" YName="Unit" Type="ChartSeriesType.StepArea">
         <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
         <ChartSeriesBorder Width="2"></ChartSeriesBorder>
             <ChartMarker IsFilled="true" Visible="true" Width="7" Height="7">
                 <ChartMarkerBorder></ChartMarkerBorder>
                 <ChartDataLabel Visible="true" Position="LabelPosition.Auto">
                     <Template>
                         @{
                             var data = context as ChartDataPointInfo;
                             double currentY = Convert.ToDouble(data.Y);

                             double? difference = null;
                             if (ChartPoints != null)
                             {
                                 int index = ChartPoints.FindIndex(d => d.Period == (DateTime)data.X);
                                 if (index > 0)
                                 {
                                     difference = currentY - ChartPoints[index - 1].Unit;
                                 }
                             }

                             string percentage = difference.HasValue && ChartPoints != null
                             ? $"{(difference.Value / ChartPoints[ChartPoints.FindIndex(d => d.Period == (DateTime)data.X) - 1].Unit) * 100:F1}%"
                             : string.Empty;


                             string triangleClass = difference.HasValue && difference >= 0 ? "green-triangle" : "red-triangle";
                         }
                         <div style="text-align: center;">
                            <span>@($"{currentY}K")</span>
                            @if (difference.HasValue)
                            {
                                <div style="display: flex; align-items: center; justify-content: center;">
                                    <div class="@triangleClass"></div>
                                    <span style="margin-left: 5px;">@percentage</span>
                                </div>
                            }
                         </div>
                     </Template>
                 </ChartDataLabel>
             </ChartMarker>
         </ChartSeries>
     </ChartSeriesCollection>
 </SfChart>
</div>
<style>
    .green-triangle {
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 10px solid green;
    }

    .red-triangle {
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 10px solid red;
    }
</style>
@code{

    public void LabelRender(AxisLabelRenderEventArgs args)
    {
     if (args.Axis.Name == "PrimaryYAxis")
     {
         args.Text = args.Text + "K";
     }
    }
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StepAreaChartData> ChartPoints = new List<StepAreaChartData>
    {
        new StepAreaChartData { Period = new DateTime(2023, 02, 01), Unit = 137 },
        new StepAreaChartData { Period = new DateTime(2023, 03, 01), Unit = 163 },
        new StepAreaChartData { Period = new DateTime(2023, 04, 01), Unit = 145 },
        new StepAreaChartData { Period = new DateTime(2023, 05, 01), Unit = 175 },
        new StepAreaChartData { Period = new DateTime(2023, 06, 01), Unit = 151 },
        new StepAreaChartData { Period = new DateTime(2023, 07, 01), Unit = 159 },
        new StepAreaChartData { Period = new DateTime(2023, 08, 01), Unit = 168 },
        new StepAreaChartData { Period = new DateTime(2023, 09, 01), Unit = 168 },
        new StepAreaChartData { Period = new DateTime(2023, 10, 01), Unit = 177 },
        new StepAreaChartData { Period = new DateTime(2023, 11, 01), Unit = 147 },
        new StepAreaChartData { Period = new DateTime(2023, 12, 01), Unit = 172 },
        new StepAreaChartData { Period = new DateTime(2024, 01, 01), Unit = 173 },
        new StepAreaChartData { Period = new DateTime(2024, 02, 02), Unit = 143 }
    };

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public class StepAreaChartData
    {
        public DateTime Period { get; set; }
        public double Unit { get; set; }
    }
}
