@page "/chart/synchronized-charts"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@
<SampleDescription>
    <p>This demo showcases the history of currency exchange rates using synchronized charts with crosshair, tooltip, and zooming functionalities synchronized across the charts. Hover over or zoom in on one chart to observe the corresponding impact on the other charts as well.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, chart mouse events are used to synchronize interactions across multiple charts. Public methods like <code>ShowTooltip</code> and <code>ShowCrosshair</code> are invoked for seamless integration of <code>Tooltip</code> and <code>Crosshair</code> functionalities. The demo also features a sophisticated <code>Zooming</code> capability achieved through consistent ZoomFactor and ZoomPosition settings across all chart axes.</p>
    <p>More information on the user interaction can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/cross-hair-and-track-ball' aria-label="Navigate to the documentation for Crosshair and Trackball in chart component">documentation section</a>.</p>
</ActionDescription>
<div class="control-section">
    @if (Environment.Version.Major >= 7)
    {
        <div class="row">
            <div class="col" @onmouseleave="OnMouseLeaveChart1">
                <SfChart Title="USD to EUR" @ref="_chart1" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart1" ChartMouseUp="OnMouseLeaveChart1" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near"  TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="0.86" Maximum="0.96" LabelFormat="n2" Interval="0.025">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="EUR" Type="ChartSeriesType.Line" Width="2" Fill="@themeColors[0]">
                            <ChartEmptyPointSettings Mode="EmptyPointMode.Drop"></ChartEmptyPointSettings>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>€${point.y}</b> <br> ${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
            <div class="col" @onmouseleave="OnMouseLeaveChart2">
                <SfChart Title="USD to JPY" @ref="_chart2" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart2" ChartMouseUp="OnMouseLeaveChart2" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="120" Maximum="152" LabelFormat="{value}" Interval="8" LabelPadding="7.64">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="JPY" Type="ChartSeriesType.Line" Width="2" Fill="@themeColors[1]">
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>¥${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
        </div>
        <div class="row">
            <div class="col" @onmouseleave="OnMouseLeaveChart3">
                <SfChart Title="USD to SGD" @ref="_chart3" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart3" ChartMouseUp="OnMouseLeaveChart3" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="1.30" Maximum="1.37" LabelFormat="n2" Interval="0.0175">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="SGD" Type="ChartSeriesType.Area" Width="2" Opacity="0.6" Fill="@themeColors[2]">
                            <ChartSeriesBorder Width="2"></ChartSeriesBorder>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>$${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
            <div class="col" @onmouseleave="OnMouseLeaveChart4">
                <SfChart Title="USD to INR" @ref="_chart4" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart4" ChartMouseUp="OnMouseLeaveChart4" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="79" Maximum="85" LabelFormat="n1" Interval="1.5">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="INR" Type="ChartSeriesType.Area" Width="2" Opacity="0.6" Fill="@themeColors[3]">
                            <ChartSeriesBorder Width="2"></ChartSeriesBorder>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>₹${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">
                <SfChart Title="USD to EUR" @ref="_chart1" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart1" ChartMouseUp="OnMouseLeaveChart1" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near"  TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="0.86" Maximum="0.96" LabelFormat="n2" Interval="0.025">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="EUR" Type="ChartSeriesType.Line" Width="2" Fill="@themeColors[0]">
                            <ChartEmptyPointSettings Mode="EmptyPointMode.Drop"></ChartEmptyPointSettings>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>€${point.y}</b> <br> ${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
            <div class="col">
                <SfChart Title="USD to JPY" @ref="_chart2" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart2" ChartMouseUp="OnMouseLeaveChart2" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="120" Maximum="152" LabelFormat="{value}" Interval="8" LabelPadding="7.64">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="JPY" Type="ChartSeriesType.Line" Width="2" Fill="@themeColors[1]">
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>¥${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <SfChart Title="USD to SGD" @ref="_chart3" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart3" ChartMouseUp="OnMouseLeaveChart3" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="1.30" Maximum="1.37" LabelFormat="n2" Interval="0.0175">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="SGD" Type="ChartSeriesType.Area" Width="2" Opacity="0.6" Fill="@themeColors[2]">
                            <ChartSeriesBorder Width="2"></ChartSeriesBorder>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>$${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
            <div class="col">
                <SfChart Title="USD to INR" @ref="_chart4" Theme="@Theme">
                    <ChartEvents ChartMouseMove="OnMouseEventChart4" ChartMouseUp="OnMouseLeaveChart4" ChartMouseDown="ChartMouseDown" OnCrosshairMove="OnCrosshairMove" OnZoomEnd="ZoomEvent" OnZooming="ZoomEvent"></ChartEvents>
                    <ChartArea>
                        <ChartTitleStyle TextAlignment="Alignment.Near"  TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartPrimaryXAxis ZoomFactor=@zoomfactor ZoomPosition=@zoomPosition ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Minimum="new DateTime(2023, 02, 18)" Maximum="new DateTime(2023, 08, 18)" LabelFormat="MMM d" EdgeLabelPlacement="@(SampleService != null && SampleService.IsDevice ? EdgeLabelPlacement.None : EdgeLabelPlacement.Shift)" LabelRotation="@(SampleService != null && SampleService.IsDevice ? -45 : 0)" Interval="@(SampleService != null && SampleService.IsDevice ? 2 : 1)" IntervalType="IntervalType.Months" LabelIntersectAction="LabelIntersectAction.Hide">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="79" Maximum="85" LabelFormat="n1" Interval="1.5">
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    </ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@ChartPoints" XName="USD" YName="INR" Type="ChartSeriesType.Area" Width="2" Opacity="0.6" Fill="@themeColors[3]">
                            <ChartSeriesBorder Width="2"></ChartSeriesBorder>
                        </ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true" FadeOutDuration="@(SampleService != null && SampleService.IsDevice ? 2500 : 1000)" Shared="true" Header="" Format="<b>₹${point.y}</b> <br>${point.x} 2023" EnableMarker="false"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true" DashArray="2,2" LineType="LineType.Vertical"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="true" EnablePinchZooming="true" EnableScrollbar="false" EnableDeferredZooming="false" EnablePan="true" Mode="ZoomMode.X" ToolbarItems="@toolbarItems"></ChartZoomSettings>
                </SfChart>
            </div>
        </div>
    }
</div>
<style>
    #control-container {
        padding: 1px !important;
    }

    .row {
        display: flex;
    }

    .col {
        width: 50%;
        margin: 10px;
        height: 270px;
    }
</style>
@code{
    List<ToolbarItems> toolbarItems = new List<ToolbarItems>() { ToolbarItems.Pan, ToolbarItems.Reset };
    double zoomfactor = 1, zoomPosition = 0;
    #nullable enable
    public SfChart? _chart1;
    public SfChart? _chart2;
    public SfChart? _chart3;
    public SfChart? _chart4;
    private bool isTapHold = false;
    List<string> themeColors = new List<string>();
    List<string> materialColors = new List<string> { "#00bdae", "#404041", "#357cd2", "#e56590" };
    List<string> materialDarkColors = new List<string> { "#9ECB08", "#56AEFF", "#C57AFF", "#61EAA9" };
    List<string> fabricColors = new List<string> { "#4472c4", "#ed7d31", "#ffc000", "#70ad47" };
    List<string> bootstrapColors = new List<string> { "#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e" };
    List<string> highContrastColors = new List<string> { "#79ECE4", "#E98272", "#DFE6B6", "#C6E773" };
    List<string> bootstrap4Colors = new List<string> { "#a16ee5", "#f7ce69", "#55a5c2", "#7ddf1e" };
    List<string> bootstrap5Colors = new List<string> { "#FD7E14", "#6610F2", "#6F42C1", "#D63384" };
    List<string> fluentColors = new List<string> { "#1AC9E6", "#DA4CB2", "#EDBB40", "#AF4BCF" };
    List<string> tailwindColors = new List<string> { "#5A61F6", "#65A30D", "#334155", "#14B8A6" };
    List<string> tailwindDarkColors = new List<string> { "#8B5CF6", "#22D3EE", "#F87171", "#4ADE80" };
    List<string> tailwind3Colors = new List<string> { "#2F4074", "#03B4B4", "#0D72DE", "#FF5733" };
    List<string> tailwind3DarkColors = new List<string> { "#8029F1", "#1ABC9C", "#0D72DE", "#FF5733" };
    List<string> fabricdarkColors = new List<string> { "#4472c4", "#ed7d31", "#ffc000", "#70ad47" };
    List<string> material3Colors = new List<string> { "#6355C7", "#00AEE0", "#FFB400", "#F7523F" };
    List<string> material3DarkColors = new List<string> { "#4EAAFF", "#FA4EAB", "#FFF500", "#17EA58" };
    List<string> fluent2Colors = new List<string> { "#6200EE", "#09AF74", "#0076E5", "#CB3587" };
    List<string> fluent2DarkColors = new List<string> { "#9BB449", "#2A72D5", "#43B786", "#3F579A" };
    List<string> fluent2HighContrastColors = new List<string> { "#9BB449", "#2A72D5", "#43B786", "#3F579A" };
    private Theme Theme { get; set; }
    public CurrencyRates[] ChartPoints { get; set; } = new CurrencyRates[] { };
    private bool isMouseMoveUpDetected;
    private bool isTouch;
    private bool isZooming;

    protected override async Task OnInitializedAsync()
    {

        ChartPoints = await Http.GetFromJsonAsync<CurrencyRates[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/chart/synchronized-data.json") ?? null!;
    }

    protected override void OnInitialized()
    {        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        
        switch (Theme)
        {
            case Theme.MaterialDark:
                themeColors = materialDarkColors;
                break;
            case Theme.Material:
                themeColors = materialColors;
                break;
            case Theme.Fabric:
                themeColors = fabricColors;
                break;
            case Theme.FabricDark:
                themeColors = fabricdarkColors;
                break;
            case Theme.Bootstrap5Dark:
            case Theme.Bootstrap5:
                themeColors = bootstrap5Colors;
                break;
            case Theme.Bootstrap4:
                themeColors = bootstrap4Colors;
                break;
            case Theme.Tailwind3Dark:
                themeColors = tailwind3DarkColors;
                break;
            case Theme.Tailwind3:
                themeColors = tailwind3Colors;
                break;
            case Theme.HighContrast:
                themeColors = highContrastColors;
                break;
            case Theme.FluentDark:
                themeColors = fluentColors;
                break;
            case Theme.Bootstrap:
                themeColors = bootstrapColors;
                break;
            case Theme.BootstrapDark:
                themeColors = bootstrapColors;
                break;
            case Theme.Material3:
                themeColors = material3Colors;
                break;
            case Theme.Material3Dark:
                themeColors = material3DarkColors;
                break;
            case Theme.Fluent2:
                themeColors = fluent2Colors;
                break;
            case Theme.Fluent2Dark:
                themeColors = fluent2DarkColors;
                break;
            case Theme.Fluent2HighContrast:
                themeColors = fluent2HighContrastColors;
                break;
            default:
                themeColors = fluentColors;
                break;
        }
    }

    public class CurrencyRates
    {
        public DateTime USD { get; set; }
        public double EUR { get; set; }
        public double JPY { get; set; }
        public double SGD { get; set; }
        public double INR { get; set; }
    }

    public async void ZoomEvent(ZoomingEventArgs args)
    {
        isZooming = args.Name == "OnZooming";
        if (args.AxisCollection != null && args.AxisCollection.Count > 0){
            zoomfactor = args.AxisCollection?.Find(item => item.AxisName == "PrimaryXAxis")?.ZoomFactor ?? 0;
            zoomPosition = args.AxisCollection?.Find(item => item.AxisName == "PrimaryXAxis")?.ZoomPosition ?? 0;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void OnCrosshairMove(CrosshairMoveEventArgs changeEventArgs)
    {
        isTapHold = isMouseMoveUpDetected ? false : ((SampleService != null && SampleService.IsDevice) || isTouch);
    }

    public void ChartMouseDown(ChartMouseEventArgs changeEventArgs)
    {
        isMouseMoveUpDetected = false;
        isTouch = true;
        isZooming = false;
    }

    public void OnMouseEventChart1(ChartMouseEventArgs args)
    {
        if ((((SampleService != null && SampleService.IsDevice) || isTouch) && isTapHold && !isZooming) || ((!isTouch || (SampleService != null && !SampleService.IsDevice)) && !isTapHold && !isZooming))
        {
            _chart2?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart3?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart4?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart2?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart3?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart4?.ShowCrosshair(args.MouseX, args.MouseY);
        }
        isTapHold = false;
    }
    public void OnMouseEventChart2(ChartMouseEventArgs args)
    {
        if ((((SampleService != null && SampleService.IsDevice) || isTouch) && isTapHold && !isZooming) || ((!isTouch || (SampleService != null && !SampleService.IsDevice)) && !isTapHold && !isZooming))
        {
            _chart1?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart3?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart4?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart1?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart3?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart4?.ShowCrosshair(args.MouseX, args.MouseY);           
        } 
        isTapHold = false;
    }
    public void OnMouseEventChart3(ChartMouseEventArgs args)
    {
        if ((((SampleService != null && SampleService.IsDevice) || isTouch) && isTapHold && !isZooming) || ((!isTouch || (SampleService != null && !SampleService.IsDevice)) && !isTapHold && !isZooming))
        {
            _chart2?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart1?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart4?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart2?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart1?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart4?.ShowCrosshair(args.MouseX, args.MouseY);
        }
        isTapHold = false;
    }
    public void OnMouseEventChart4(ChartMouseEventArgs args)
    {
        if ((((SampleService != null && SampleService.IsDevice) || isTouch) && isTapHold && !isZooming) || ((!isTouch || (SampleService != null && !SampleService.IsDevice)) && !isTapHold && !isZooming))
        {
            _chart2?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart3?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart1?.ShowTooltip(args.MouseX, args.MouseY, false);
            _chart2?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart3?.ShowCrosshair(args.MouseX, args.MouseY);
            _chart1?.ShowCrosshair(args.MouseX, args.MouseY);
        }
        isTapHold = false;
    }
    public void OnMouseLeaveChart1()
    {
        isZooming = false;
        _chart2?.HideTooltip();
        _chart3?.HideTooltip();
        _chart4?.HideTooltip();
        _chart2?.HideCrosshair();
        _chart3?.HideCrosshair();
        _chart4?.HideCrosshair();
    }
    public void OnMouseLeaveChart2()
    {
        isZooming = false;
        _chart1?.HideTooltip();
        _chart3?.HideTooltip();
        _chart4?.HideTooltip();
        _chart1?.HideCrosshair();
        _chart3?.HideCrosshair();
        _chart4?.HideCrosshair();
    }
    public void OnMouseLeaveChart3()
    {
        isZooming = false;
        _chart1?.HideTooltip();
        _chart2?.HideTooltip();
        _chart4?.HideTooltip();
        _chart1?.HideCrosshair();
        _chart2?.HideCrosshair();
        _chart4?.HideCrosshair();
    }
    public void OnMouseLeaveChart4()
    {
        isZooming = false;
        _chart1?.HideTooltip();
        _chart3?.HideTooltip();
        _chart2?.HideTooltip();
        _chart1?.HideCrosshair();
        _chart3?.HideCrosshair();
        _chart2?.HideCrosshair();
    }
    public void OnMouseLeaveChart1(ChartMouseEventArgs args)
    {
        if ((SampleService != null && SampleService.IsDevice) || isTouch)
        {
            isTapHold = false;
            isTouch = false;
            isMouseMoveUpDetected = true;
            _chart2?.HideTooltip();
            _chart3?.HideTooltip();
            _chart4?.HideTooltip();
            _chart2?.HideCrosshair();
            _chart3?.HideCrosshair();
            _chart4?.HideCrosshair();
        }
        isZooming = false;
    }
    public void OnMouseLeaveChart2(ChartMouseEventArgs args)
    {
        if ((SampleService != null && SampleService.IsDevice) || isTouch)
        {
            isTapHold = false;
            isTouch = false;
            isMouseMoveUpDetected = true;
            _chart1?.HideTooltip();
            _chart3?.HideTooltip();
            _chart4?.HideTooltip();
            _chart1?.HideCrosshair();
            _chart3?.HideCrosshair();
            _chart4?.HideCrosshair();
        }
        isZooming = false;
    }
     public void OnMouseLeaveChart3(ChartMouseEventArgs args)
    {
        if ((SampleService != null && SampleService.IsDevice) || isTouch)
        {
            isTapHold = false;
            isTouch = false;
            isMouseMoveUpDetected = true;
            _chart2?.HideTooltip();
            _chart1?.HideTooltip();
            _chart4?.HideTooltip();
            _chart2?.HideCrosshair();
            _chart1?.HideCrosshair();
            _chart4?.HideCrosshair();
        }
        isZooming = false;
    }
    public void OnMouseLeaveChart4(ChartMouseEventArgs args)
    {
        if (SampleService != null && SampleService.IsDevice || isTouch)
        {
            isTapHold = false;
            isTouch = false;
            isMouseMoveUpDetected = true;
            _chart2?.HideTooltip();
            _chart3?.HideTooltip();
            _chart1?.HideTooltip();
            _chart2?.HideCrosshair();
            _chart3?.HideCrosshair();
            _chart1?.HideCrosshair();
        }
        isZooming = false;
    }
}
