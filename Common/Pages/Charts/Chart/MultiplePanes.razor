@page "/chart/multiple-panes"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@


<SampleDescription>
    <p>This sample illustrates the annual weather in New York using multiple panes to represent average temperature and precipitation.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, multiple panes are used to separate weather-related data, such as temperature and precipitation, across different y-axes. Each variable is displayed on a distinct pane to provide a clearer visual comparison between these metrics, which have different ranges and trends. The panes help avoid overlapping data and make it easier to interpret each trend individually.</p>
    <p>More information about the multiple panes can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/multiple-panes#rows' aria-label="Navigate to the documentation for multiple chart series in chart component">documentation section</a>.</p>
</ActionDescription>


<div class="control-section" align='center'>
    <SfChart Title="Annual Weather in New York, USA" Theme="@Theme" Width="@Width" Height="500px">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Months"
            LabelFormat="MMMM">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Precipitation, inch" Maximum="6" Minimum="0" Interval="1" PlotOffsetTop="25">
        </ChartPrimaryYAxis>
        <ChartRows>
            <ChartRow Height="50%" />
            <ChartRow Height="50%" />
        </ChartRows>
        <ChartAxes>
            <ChartAxis Maximum="100" Minimum="20" Interval="20" Name="TemperatureAxis" Title="Temperature, °F" RowIndex="1" OpposedPosition="true">
            </ChartAxis>
        </ChartAxes>
        <ChartSeriesCollection>
            <ChartSeries DataSource="WeatherData" Type="ChartSeriesType.RangeArea" XName="Date" High="MaxTemperatureF"
                Low="MinTemperatureF" YAxisName="TemperatureAxis" Name="Temperature Range"
                LegendShape="LegendShape.Rectangle" Opacity="0.5">
                <ChartSeriesBorder Width="0"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="WeatherData" Type="ChartSeriesType.Spline" XName="Date" YName="AverageTemperatureF"
                YAxisName="TemperatureAxis" Width="2" Opacity="1" Name="Average Temperature"
                LegendShape="LegendShape.Rectangle">
                <ChartMarker Visible="true" IsFilled="true" Height="10" Width="10" Shape="ChartShape.Circle">
                    <ChartDataLabel Visible="true" Format="{value} °F" Rx=0 Ry=0>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="WeatherData" Type="ChartSeriesType.Column" XName="Date" YName="PrecipitationInch"
                Name="Precipitation" LegendShape="LegendShape.Rectangle">
                <ChartCornerRadius TopLeft="4" TopRight="4"></ChartCornerRadius>
                <ChartMarker>
                    <ChartDataLabel Visible="true" Format="{value} inch" Rx=0 Ry=0>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true" Alignment="Alignment.Center" Position="LegendPosition.Bottom"></ChartLegendSettings>
    </SfChart>
</div>

@code {


    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";


    private List<WeatherEntry> WeatherData = new List<WeatherEntry>
    {
        new WeatherEntry { Date = new DateTime(2025, 1, 1), AverageTemperatureF = (39 + 26) / 2.0, MinTemperatureF = 26, MaxTemperatureF = 39, PrecipitationInch = 3.90 },
        new WeatherEntry { Date = new DateTime(2025, 2, 1), AverageTemperatureF = (42 + 29) / 2.0, MinTemperatureF = 29, MaxTemperatureF = 42, PrecipitationInch = 2.95 },
        new WeatherEntry { Date = new DateTime(2025, 3, 1), AverageTemperatureF = (50 + 35) / 2.0, MinTemperatureF = 35, MaxTemperatureF = 50, PrecipitationInch = 4.06 },
        new WeatherEntry { Date = new DateTime(2025, 4, 1), AverageTemperatureF = (60 + 44) / 2.0, MinTemperatureF = 44, MaxTemperatureF = 60, PrecipitationInch = 3.94 },
        new WeatherEntry { Date = new DateTime(2025, 5, 1), AverageTemperatureF = (71 + 55) / 2.0, MinTemperatureF = 55, MaxTemperatureF = 71, PrecipitationInch = 4.45 },
        new WeatherEntry { Date = new DateTime(2025, 6, 1), AverageTemperatureF = (79 + 64) / 2.0, MinTemperatureF = 64, MaxTemperatureF = 79, PrecipitationInch = 3.50 },
        new WeatherEntry { Date = new DateTime(2025, 7, 1), AverageTemperatureF = (85 + 70) / 2.0, MinTemperatureF = 70, MaxTemperatureF = 85, PrecipitationInch = 4.53 },
        new WeatherEntry { Date = new DateTime(2025, 8, 1), AverageTemperatureF = (83 + 69) / 2.0, MinTemperatureF = 69, MaxTemperatureF = 83, PrecipitationInch = 4.13 },
        new WeatherEntry { Date = new DateTime(2025, 9, 1), AverageTemperatureF = (76 + 61) / 2.0, MinTemperatureF = 61, MaxTemperatureF = 76, PrecipitationInch = 3.98 },
        new WeatherEntry { Date = new DateTime(2025, 10, 1), AverageTemperatureF = (65 + 50) / 2.0, MinTemperatureF = 50, MaxTemperatureF = 65, PrecipitationInch = 3.39 },
        new WeatherEntry { Date = new DateTime(2025, 11, 1), AverageTemperatureF = (54 + 41) / 2.0, MinTemperatureF = 41, MaxTemperatureF = 54, PrecipitationInch = 3.82 },
        new WeatherEntry { Date = new DateTime(2025, 12, 1), AverageTemperatureF = (44 + 32) / 2.0, MinTemperatureF = 32, MaxTemperatureF = 44, PrecipitationInch = 3.58 }
    };

    public class WeatherEntry
    {
        public DateTime Date { get; set; }
        public double MaxTemperatureF { get; set; }
        public double MinTemperatureF { get; set; }
        public double AverageTemperatureF { get; set; }
        public double PrecipitationInch { get; set; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }
}