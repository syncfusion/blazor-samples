@page "/chart/column-drilldown"

@using Syncfusion.Blazor
@using ThemeHelper
@using PointRender
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>
        This drilldown column chart example visualizes the population distribution across different continents. Users can click on the columns to explore further details, allowing for an interactive analysis of population statistics by country within each continent.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure a drilldown column chart. Each column represents a continent, and users can drill down to view detailed population statistics by country upon selection. This functionality enhances data exploration and provides a clearer understanding of demographic distributions.
    </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.
    </p>
    <p>
        More information about the column series can be found in this 
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/chart/chart-types/column" aria-label="Navigate to the documentation for column chart">
            documentation section
        </a>.
    </p>
</ActionDescription>

<div style="padding-top: 20px; visibility: @(IsDivVisible ? "visible" : "hidden");">
    <span @onclick="NavigateToDefault" id="category" style="visibility: @(IsDivVisible ? "visible" : "hidden"); color: #337ab7; display:inline-block" >Population</span>
    <p style="visibility: @(IsDivVisible ? "visible" : "hidden"); display:inline-block" id="symbol">&nbsp;&gt;&gt;&nbsp;</p>
    <p style="visibility: @(IsDivVisible ? "visible" : "hidden"); display:inline-block;">@RegionName</p>
</div>
<div class="control-section" align='center'>
    <SfChart @ref="ChartObj" Title="@ChartTitle" SubTitle="@ChartSubTitle" Theme="@Theme" Width="@Width">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartEvents OnPointRender="PointRender" OnPointClick="OnPointClick" OnAxisLabelClick="AxisLabelClick">
        </ChartEvents>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1"
            LabelIntersectAction="@LabelIntersectActions" LabelRotation="@LabelRotation">
            <ChartAxisLabelStyle Color="@Color"></ChartAxisLabelStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Population (in Millions)" Interval=@Interval>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries  Fill="@Fill" DataSource="@DataSource" Name="Population" XName="Drilldown" Width="2" Opacity="1"
                YName="Y" Type="ChartSeriesType.Column"
                CornerRadius="@(new ChartCornerRadius { TopLeft = 5, TopRight = 5})">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Position="LabelPosition.Outer"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartLegendSettings Visible="false" />
            <ChartTooltipSettings Enable="true" Header="<b>Population - 2023</b>"
                Format="${point.x}: <b>${point.y}M</b>"></ChartTooltipSettings>
        </ChartSeriesCollection>
    </SfChart>
</div>

<style>
    .control-section {
        padding: 0px;
    }
    #category:hover {
        cursor: pointer;
        color: #23527c !important;
        text-decoration: underline;
    }
    g[id*="AxisLabels0"] text[id*="AxisLabel_"] {
        text-decoration: @TextDecoration;
        cursor: pointer;
    }
    g[id*="SeriesGroup0"] path[id*="Series_0_Point_"] {
        cursor: pointer;
    }
</style>

@code {
    private SfChart? ChartObj;
    public string TextDecoration = "underline";
    public string Fill = string.Empty;
    public List<string> Colors { get; set; } = new List<string>();
    public string Color = "blue";
    public double Interval = 1000;
    private bool clicked = false;
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    private Syncfusion.Blazor.Charts.LabelIntersectAction LabelIntersectActions { get; set; } = Syncfusion.Blazor.Charts.LabelIntersectAction.Rotate90;
    private int LabelRotation { get; set; } = 0;
    private String ChartTitle { get; set; } = "Top Populated Continents of 2023";
    private String ChartSubTitle { get; set; } = "A Look at Population Rankings and Trends in 2023";
    private bool IsDivVisible { get; set; } = false;
    private string RegionName { get; set; } = string.Empty;
    public List<PopulationData> DataSource { get; set; } = new List<PopulationData>
    {
        new PopulationData { Drilldown = "Asia", Y = 4778},
        new PopulationData { Drilldown = "Africa", Y = 1481 },
        new PopulationData { Drilldown = "Europe", Y = 746 },
        new PopulationData { Drilldown = "North America", Y = 379 },
        new PopulationData { Drilldown = "Oceania", Y = 46 }
    };
    public class PopulationData
    {
        public int Y { get; set; }
        public string? Drilldown { get; set; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
         if (SampleService != null && SampleService.IsDevice)
        {
            LabelIntersectActions = Syncfusion.Blazor.Charts.LabelIntersectAction.None;
            Width = "100%";
            LabelRotation = -45;
        }
        this.SetTheme(null!);
    }

    private void NavigateToDefault()
    {
        if (clicked)
        {
            TextDecoration = "underline";
            Color = "blue";
            clicked = false;
            Interval= 1000;
            RegionName = "";
            IsDivVisible = false;
            ChartTitle = "Top Populated Continents of 2023";
            DataSource =
            new List<PopulationData>
            {
                new PopulationData { Drilldown = "Asia", Y = 4778 },
                new PopulationData { Drilldown = "Africa", Y = 1481 },
                new PopulationData { Drilldown = "Europe", Y = 746 },
                new PopulationData { Drilldown = "North America", Y = 379 },
                new PopulationData { Drilldown = "Oceania", Y = 46 }
            };
            ChartObj?.PreventRender(false);
        }
        StateHasChanged();
    }

    public void AxisLabelClick(AxisLabelClickEventArgs args)
    {
        if (args.Index != 6) {

             if (!Theme.ToString().Contains("Dark") && Theme != Theme.HighContrast && Theme != Theme.Fluent2HighContrast)
            {
                Color = "black";
            }
            else if (Theme == Theme.Material3Dark)
            {
                Color = "#CAC4D0";
            }
            else if (Theme == Theme.FluentDark)
            {
                Color = "#C8C6C4";
            }
            else if (Theme == Theme.Fluent2Dark)
            {
                Color = "#ADADAD";
            }
            else if (Theme == Theme.Bootstrap5Dark)
            {
                Color = "#DEE2E6";
            }
            else if (Theme == Theme.TailwindDark)
            {
                Color = "#9CA3AF";
            }
            else if (Theme == Theme.Tailwind3Dark)
            {
                Color = "#D1D5DB";
            }
            else if (Theme == Theme.HighContrast)
            {
                Color = "#969696";
            }
            else if (Theme == Theme.Fluent2HighContrast)
            {
                Color = "#FFFFFF";
            }
            if (!clicked)
            {
                TextDecoration = "none";
                Fill = Colors[args.Index % 10];
                IsDivVisible = true;
                Interval = Double.NaN;
                switch (args.Index)
                {
                    case 0:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Asia - 2023";
                        RegionName = "Asia";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 1422, Drilldown = "China" },
                            new PopulationData { Y = 1438, Drilldown = "India" },
                            new PopulationData { Y = 278, Drilldown = "Indonesia" },
                            new PopulationData { Y = 240, Drilldown = "Pakistan" },
                            new PopulationData { Y = 173, Drilldown = "Bangladesh" },
                            new PopulationData { Y = 125, Drilldown = "Japan" },
                            new PopulationData { Y = 117, Drilldown = "Philippines" },
                            new PopulationData { Y = 99, Drilldown = "Vietnam" }
                        };
                        break;

                    case 1:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Africa - 2023";
                        RegionName = "Africa";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 223, Drilldown = "Nigeria" },
                            new PopulationData { Y = 126, Drilldown = "Ethiopia" },
                            new PopulationData { Y = 113, Drilldown = "Egypt" },
                            new PopulationData { Y = 68, Drilldown = "Tanzania" },
                            new PopulationData { Y = 60, Drilldown = "South Africa" },
                            new PopulationData { Y = 55, Drilldown = "Kenya" },
                            new PopulationData { Y = 48, Drilldown = "Uganda" }
                        };
                        break;

                    case 2:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Europe - 2023";
                        RegionName = "Europe";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 143, Drilldown = "Russia" },
                            new PopulationData { Y = 84, Drilldown = "Germany" },
                            new PopulationData { Y = 67, Drilldown = "United Kingdom" },
                            new PopulationData { Y = 65, Drilldown = "France" },
                            new PopulationData { Y = 59, Drilldown = "Italy" },
                            new PopulationData { Y = 47, Drilldown = "Spain" }
                        };
                        break;

                    case 3:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of North America - 2023";
                        RegionName = "North America";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 339, Drilldown = "United States" },
                            new PopulationData { Y = 127, Drilldown = "Mexico" },
                            new PopulationData { Y = 39, Drilldown = "Canada" },
                            new PopulationData { Y = 19, Drilldown = "Guatemala" },
                            new PopulationData { Y = 10, Drilldown = "Honduras" },
                            new PopulationData { Y = 6, Drilldown = "El Salvador" },
                            new PopulationData { Y = 6, Drilldown = "Nicaragua" },
                            new PopulationData { Y = 5, Drilldown = "Costa Rica" }
                        };
                        break;

                    case 4:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Oceania - 2023";
                        RegionName = "Oceania";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 26, Drilldown = "Australia" },
                            new PopulationData { Y = 9, Drilldown = "Papua New Guinea" },
                            new PopulationData { Y = 5, Drilldown = "New Zealand" }
                        };
                        break;
                }
                StateHasChanged();
            }
        }
    }
    public void OnPointClick(PointEventArgs args)
    {
         if (args.Point.Index != 6) {
                       
            if (!Theme.ToString().Contains("Dark") && Theme != Theme.HighContrast && Theme != Theme.Fluent2HighContrast)
            {
                Color = "black";
            }
            else if (Theme == Theme.Material3Dark)
            {
                Color = "#CAC4D0";
            }
            else if (Theme == Theme.FluentDark)
            {
                Color = "#C8C6C4";
            }
            else if (Theme == Theme.Fluent2Dark)
            {
                Color = "#ADADAD";
            }
            else if (Theme == Theme.Bootstrap5Dark)
            {
                Color = "#DEE2E6";
            }
            else if (Theme == Theme.TailwindDark)
            {
                Color = "#9CA3AF";
            }
            else if (Theme == Theme.Tailwind3Dark)
            {
                Color = "#D1D5DB";
            }
            else if (Theme == Theme.HighContrast)
            {
                Color = "#969696";
            }
            else if (Theme == Theme.Fluent2HighContrast)
            {
                Color = "#FFFFFF";
            }
            if (!clicked)
            {
                TextDecoration = "none";
                Interval = Double.NaN;
                Fill = Colors[args.Point.Index % 10];
                IsDivVisible = true;
                switch (args.Point.Index)
                {
                    case 0:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Asia - 2023";
                        RegionName = "Asia";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 1422, Drilldown = "China" },
                            new PopulationData { Y = 1438, Drilldown = "India" },
                            new PopulationData { Y = 278, Drilldown = "Indonesia" },
                            new PopulationData { Y = 240, Drilldown = "Pakistan" },
                            new PopulationData { Y = 173, Drilldown = "Bangladesh" },
                            new PopulationData { Y = 125, Drilldown = "Japan" },
                            new PopulationData { Y = 117, Drilldown = "Philippines" },
                            new PopulationData { Y = 99, Drilldown = "Vietnam" }
                        };
                        break;

                    case 1:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Africa - 2023";
                        RegionName = "Africa";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 223, Drilldown = "Nigeria" },
                            new PopulationData { Y = 126, Drilldown = "Ethiopia" },
                            new PopulationData { Y = 113, Drilldown = "Egypt" },
                            new PopulationData { Y = 68, Drilldown = "Tanzania" },
                            new PopulationData { Y = 60, Drilldown = "South Africa" },
                            new PopulationData { Y = 55, Drilldown = "Kenya" },
                            new PopulationData { Y = 48, Drilldown = "Uganda" }
                        };
                        break;

                    case 2:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Europe - 2023";
                        RegionName = "Europe";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 143, Drilldown = "Russia" },
                            new PopulationData { Y = 84, Drilldown = "Germany" },
                            new PopulationData { Y = 67, Drilldown = "United Kingdom" },
                            new PopulationData { Y = 65, Drilldown = "France" },
                            new PopulationData { Y = 59, Drilldown = "Italy" },
                            new PopulationData { Y = 47, Drilldown = "Spain" }
                        };
                        break;

                    case 3:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of North America - 2023";
                        RegionName = "North America";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 339, Drilldown = "United States" },
                            new PopulationData { Y = 127, Drilldown = "Mexico" },
                            new PopulationData { Y = 39, Drilldown = "Canada" },
                            new PopulationData { Y = 19, Drilldown = "Guatemala" },
                            new PopulationData { Y = 10, Drilldown = "Honduras" },
                            new PopulationData { Y = 6, Drilldown = "El Salvador" },
                            new PopulationData { Y = 6, Drilldown = "Nicaragua" },
                            new PopulationData { Y = 5, Drilldown = "Costa Rica" }
                        };
                        break;

                    case 4:
                        clicked = true;
                        ChartTitle = "Top Populated Countries of Oceania - 2023";
                        RegionName = "Oceania";
                        DataSource = new List<PopulationData>
                        {
                            new PopulationData { Y = 26, Drilldown = "Australia" },
                            new PopulationData { Y = 9, Drilldown = "Papua New Guinea" },
                            new PopulationData { Y = 5, Drilldown = "New Zealand" }
                        };
                        break;
                }
            }
            else{
                ChartObj?.PreventRender();
            }
        }
    }

    public void PointRender(PointRenderEventArgs args)
    {
        if (!clicked)
        {
            this.SetTheme(args);
        }
    }

     private void SetTheme(PointRenderEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (args == null)
            {
                if (NavigationManager.Uri.IndexOf("dark") > -1)
                {
                    Theme = Theme.Bootstrap5Dark;
                }
                else
                {
                    Theme = Theme.Bootstrap5;
                }
            }
            else
            {
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % PointColor.Bootstrap5Colors.Count];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2HighContrast;
                else
                    args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            }
            else if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Tailwind3Dark;
                else
                    args.Fill = PointColor.Tailwind3DarkColors[args.Point.Index % 8];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind3;
                else
                    args.Fill = PointColor.Tailwind3Colors[args.Point.Index % 8];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        if (args != null) {
            Colors.Add(args.Fill);
        }
    }

    public void TooltipRender(TooltipRenderEventArgs args)
    {
        double pointYValue = Convert.ToDouble(args.Data.PointY);
        string value = pointYValue.ToString("N0", System.Globalization.CultureInfo.InvariantCulture);
        args.Text = $"{args.Data.PointX}: <b>{value}M</b>";
    }
    
}
