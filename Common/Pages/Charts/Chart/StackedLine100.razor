@page "/chart/percent-stacked-line"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This Blazor 100% Stacked Line Chart example visualizes the blood type distribution across different countries.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the 100% stacked line chart. This chart displays multiple series of data as stacked lines, ensuring that the cumulative proportion of each stacked element always totals 100%. <code>ChartMarkers</code> are used to represent individual data and its values.</p>
    <p><code>Tooltip</code> is enabled in this example. To see a tooltip in action, hover over or tap on the chart.</p>
    <p>More information about the 100% stacked line series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stack-line' aria-label="Navigate to the documentation for stack-line in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Blood Type Distribution by Country" SubTitle="Source: wikipedia.org" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="@Label" LabelRotation="@Rotation">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="20" Title="Population Share (%)">
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y} (${point.percentage}%)</b>" EnableHighlight="true" ShowNearestTooltip="true"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData1" Name="Canada" XName="X" YName="Y" Width="2"
                         Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Circle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData2" Name="Algeria" XName="X" YName="Y" Width="2"
                       Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData3" Name="Ireland" XName="X" YName="Y" Width="2"
                         Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="5" Width="5" Shape="ChartShape.Rectangle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData4" Name="Armenia" XName="X" YName="Y" Width="2"
                          Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="6" Width="6" Shape="ChartShape.Triangle">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public double Rotation { get; set; } = 0;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    public List<StackedChartData> ChartData1 = new List<StackedChartData>
    {
        new StackedChartData { X = "O+ve", Y = 39.0 },
        new StackedChartData { X = "A+ve", Y = 36.0 },
        new StackedChartData { X = "B+ve", Y = 7.6 },
        new StackedChartData { X = "AB+ve", Y = 2.5 },
        new StackedChartData { X = "O-ve", Y = 7.0 },
        new StackedChartData { X = "A-ve", Y = 6.0 },
        new StackedChartData { X = "B-ve", Y = 1.4 },
        new StackedChartData { X = "AB-ve", Y = 0.5 }
    };
    
    public List<StackedChartData> ChartData2 = new List<StackedChartData>
    {
        new StackedChartData { X = "O+ve", Y = 40.0 },
        new StackedChartData { X = "A+ve", Y = 30.0 },
        new StackedChartData { X = "B+ve", Y = 15.0 },
        new StackedChartData { X = "AB+ve", Y = 4.25 },
        new StackedChartData { X = "O-ve", Y = 6.6 },
        new StackedChartData { X = "A-ve", Y = 2.3 },
        new StackedChartData { X = "B-ve", Y = 1.1 },
        new StackedChartData { X = "AB-ve", Y = 0.75 }
    };
    
    public List<StackedChartData> ChartData3 = new List<StackedChartData>
    {
        new StackedChartData { X = "O+ve", Y = 47.0 },
        new StackedChartData { X = "A+ve", Y = 26.0 },
        new StackedChartData { X = "B+ve", Y = 9.0 },
        new StackedChartData { X = "AB+ve", Y = 2.0 },
        new StackedChartData { X = "O-ve", Y = 8.0 },
        new StackedChartData { X = "A-ve", Y = 5.0 },
        new StackedChartData { X = "B-ve", Y = 2.0 },
        new StackedChartData { X = "AB-ve", Y = 1.0 }
    };
    
    public List<StackedChartData> ChartData4 = new List<StackedChartData>
    {
        new StackedChartData { X = "O+ve", Y = 29.0 },
        new StackedChartData { X = "A+ve", Y = 46.3 },
        new StackedChartData { X = "B+ve", Y = 12.0 },
        new StackedChartData { X = "AB+ve", Y = 5.6 },
        new StackedChartData { X = "O-ve", Y = 2.0 },
        new StackedChartData { X = "A-ve", Y = 3.7 },
        new StackedChartData { X = "B-ve", Y = 1.0 },
        new StackedChartData { X = "AB-ve", Y = 0.4 }
    };

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            Width = "100%";
            Rotation = -45;
        }
    }

    public class StackedChartData
    {
        public string? X { get; set; }
        public double Y { get; set; }
    }
}
