@page "/chart/pyramid"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/pyramid-chart' aria-label="Navigate to explore the Blazor Pyramid Chart">Blazor Pyramid Chart</a> visualizes food consumption data by using pyramid series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a pyramid chart. This chart is shaped like a triangle, with lines dividing it into sections of varying widths. Depending on the Y coordinate, the width indicates a level of hierarchy among other categories. The <code>DataLabel</code> represents individual data and its value.</p>
    <p><code>Tooltip</code> is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the pyramid series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/accumulation-chart/chart-types/pyramid' aria-label="Navigate to the documentation for pyramid in accumulation chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfAccumulationChart Title="Food Consumption Pyramid" SubTitle="Source: wikipedia.org" Theme="@Theme">
        <AccumulationChartLegendSettings Visible="false">
        </AccumulationChartLegendSettings>
        <AccumulationChartTooltipSettings Header="" Format="${point.x}: <b>${point.y}% of Daily Intake </b>" Enable="true" EnableHighlight="true"></AccumulationChartTooltipSettings>
        <AccumulationChartSeriesCollection>
            <AccumulationChartSeries DataSource="@PyramidChartPoints" XName="Foods" YName="Percentage" Type="AccumulationType.Pyramid" Width="45%" Height="80%"
                                     NeckWidth="15%" GapRatio="0.03" Name="Food" Explode="false">
                <AccumulationDataLabelSettings Visible="true" TextWrap="@Wrap" MaxWidth="@Width" Position="AccumulationLabelPosition.Outside" Name="DataLabelMappingName">
                    <AccumulationChartDataLabelFont FontWeight="600" Size=@Size></AccumulationChartDataLabelFont>
                    <AccumulationChartConnector Length=@ConnectorLength></AccumulationChartConnector>
                </AccumulationDataLabelSettings>
            </AccumulationChartSeries>
        </AccumulationChartSeriesCollection>
    </SfAccumulationChart>
</div>
@code{

    
    private Theme Theme { get; set; }
    public TextWrap Wrap { get; set; } = TextWrap.Normal;
    public double Width { get; set; } = double.NaN;
    public string ConnectorLength { get; set; } = "20px";
    public string Size { get; set; } = "12px";
    public List<PyramidData> PyramidChartPoints { get; set; } = new List<PyramidData>
    {
          new PyramidData { Foods = "Oils", Percentage = 2, DataLabelMappingName = "Oils: 2%" },
          new PyramidData { Foods = "Protein", Percentage = 10, DataLabelMappingName = "Protein: 10%" },
          new PyramidData { Foods = "Fruits", Percentage = 15, DataLabelMappingName = "Fruits: 15%" },
          new PyramidData { Foods = "Dairy", Percentage = 23, DataLabelMappingName = "Dairy: 23%" },
          new PyramidData { Foods = "Vegetables", Percentage = 23, DataLabelMappingName = "Vegetables: 23%" },
          new PyramidData { Foods = "Grains", Percentage = 27, DataLabelMappingName = "Grains: 27%"}
    };

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Wrap = TextWrap.Wrap;
            Width = 80;
            ConnectorLength = "4px";
            Size = "7px";
        }
    }

    public class PyramidData
    {
        public string? Foods { get; set; }
        public double Percentage { get; set; }
        public string? DataLabelMappingName { get; set; }
    }
}

