@page "/chart/dataSorting"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using System.Globalization

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the different modes of sorting available in the chart.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you will see how to sort data in a chart in ascending and descending order. The <code>PropertyName</code> and <code>Direction</code> properties in the <code>ChartSorting</code> determine which data value to sort by and in what order. The property <code>PropertyName</code> accepts the following values:</p>
    <ul>
        <li><b>None</b>: Turns off the sorting.</li>
        <li><b>Sort by X</b>: Sorts by the values on the x-axis.</li>
        <li><b>Sort by Y</b>: Sorts by the values on the y-axis.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfChart Title="Motor Vehicle Production by Year" SubTitle="Source: wikipedia.org" IsTransposed="false" Width="@Width" Theme="@Theme" >
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
        <ChartSorting Direction="@direction" PropertyName="@propertyName"></ChartSorting>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelIntersectAction="@AxislabelRotation" LabelRotation="@Rotation">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Vehicles Production (In Billions)">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" EnableHighlight="true" Format="${point.x}: <b>${point.y}B</b>"></ChartTooltipSettings>
        <ChartSeriesCollection>

            <ChartSeries @ref="FirstSeries" Fill="@fillSeries1" DataSource="@SalesReports" XName="X" YName="Y2019" Name="2019" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                <ChartCornerRadius TopRight="@TopRight1" TopLeft="@TopLeft1"></ChartCornerRadius>
            </ChartSeries>

            <ChartSeries @ref="SecondSeries" Fill="@fillSeries2" DataSource="@SalesReports" XName="X" YName="Y2020" Name="2020" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                <ChartCornerRadius TopRight="@TopRight2" TopLeft="@TopLeft2"></ChartCornerRadius>
            </ChartSeries>

            <ChartSeries @ref="ThirdSeries" Fill="@fillSeries3" DataSource="@SalesReports" XName="X" YName="Y2023" Name="2023" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                <ChartCornerRadius TopRight="@TopRight3" TopLeft="@TopLeft3"></ChartCornerRadius>
            </ChartSeries>

            <ChartSeries @ref="FourthSeries" Fill="@fillSeries4" DataSource="@SalesReports" XName="X" YName="Y2024" Name="2024" Type="ChartSeriesType.StackingColumn">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                <ChartCornerRadius TopRight="@TopRight4" TopLeft="TopLeft4"></ChartCornerRadius>
            </ChartSeries>
            <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        </ChartSeriesCollection>
        <ChartEvents OnLegendClick="LegendClickEvent"></ChartEvents>
    </SfChart>
</div>

<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tbody>
                    <tr style="height: 50px">
                        <td style="width:50%">
                            <div>Property Name</div>
                        </td>
                        <td style="width:50%">
                            <SfDropDownList TValue="string" TItem="DropDownData" Placeholder="None" DataSource="@Modes">
                                <DropDownListEvents TValue="string" TItem="DropDownData" ValueChange="ChangeMode"></DropDownListEvents>
                                <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td style="width:50%">
                            <div> Sort Order </div>
                        </td>
                        <td style="width:50%">
                            <SfDropDownList TValue="ListSortDirection" TItem="string" Placeholder="None" DataSource="@EnumValues" @bind-Value="@direction" Enabled="@enabled">
                                <DropDownListEvents TValue="ListSortDirection" TItem="string" ValueChange="@ChangeSortOrder"></DropDownListEvents>
                            </SfDropDownList>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    private ChartSeries? FirstSeries;
    private ChartSeries? SecondSeries;
    private ChartSeries? ThirdSeries;
    private ChartSeries? FourthSeries;
    private Theme Theme { get; set; }
    private string propertyName { get; set; } = null!;
    private ListSortDirection direction = ListSortDirection.Ascending;
    public string[] EnumValues = Enum.GetNames(typeof(ListSortDirection));
    public LabelIntersectAction AxislabelRotation { get; set; } = LabelIntersectAction.Rotate45;
    public double Rotation { get; set; } = 0;
    public string Width { get; set; } = "90%";
    public bool enabled { get; set; }
    private string fillSeries1 { get; set; } = null!;
    private string fillSeries2 { get; set; } = null!;
    private string fillSeries3 { get; set; } = null!;
    private string fillSeries4 { get; set; } = null!;
    private double TopRight1 { get; set; } = 0;
    private double TopLeft1 { get; set; } = 0;
    private double TopRight2 { get; set; } = 0;
    private double TopLeft2 { get; set; } = 0;
    private double TopRight3 { get; set; } = 0;
    private double TopLeft3 { get; set; } = 0;
    private double TopRight4 { get; set; } = 4;
    private double TopLeft4 { get; set; } = 4;

    public class ChartData
    {
        public string? X { get; set; }
        public double Y2018 { get; set; }
        public double Y2019 { get; set; }
        public double Y2020 { get; set; }
        public double Y2023 { get; set; }
        public double Y2024 { get; set; }

    }
    public List<DropDownData> Modes { get; set; } = new List<DropDownData>
    {
        new DropDownData() { Type = "None" },
        new DropDownData() { Type = "Sort by X" },
        new DropDownData() { Type = "Sort by Y" }
    };

    public List<ChartData> SalesReports = new List<ChartData>
    {
        new ChartData { X = "Ford",    Y2019 = 5385.972, Y2020 = 4231.549, Y2023 = 4413.545, Y2024 = 3900.000 },
        new ChartData { X = "Hyundai", Y2019 = 7189.893, Y2020 = 6353.514, Y2023 = 7302.451, Y2024 = 7230.000 },
        new ChartData { X = "Renault", Y2019 = 3749.815, Y2020 = 2949.871, Y2023 = 2235.345, Y2024 = 2260.000 },
        new ChartData { X = "Nissan",  Y2019 = 5176.211, Y2020 = 4029.174, Y2023 = 3374.271, Y2024 = 3370.000 },
        new ChartData { X = "Honda",   Y2019 = 5323.319, Y2020 = 4790.438, Y2023 = 4188.039, Y2024 = 3810.000 }
    };


    protected override void OnInitialized()
    {

        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        SetSeriesFill(Theme);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }

    }

    public void LegendClickEvent(LegendClickEventArgs args)
    {
        if (args.Series.Name == "2019")
        {
            if (FourthSeries != null && FourthSeries.Visible)
            {
                TopRight4 = 4;
                TopLeft4 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            } 
            else if (ThirdSeries != null && ThirdSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (SecondSeries != null && SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (FirstSeries != null && !FirstSeries.Visible)
            {
                TopLeft1 = 4;
                TopRight1 = 4;
            }
        }
        else if (args.Series.Name == "2020")
        {
            if (FourthSeries != null && FourthSeries.Visible)
            {
                TopRight4 = 4;
                TopLeft4 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
                TopLeft2 = 0;
                TopRight2 = 0;
                TopLeft3 = 0;
                TopRight3 = 0;
            }
            else if (ThirdSeries != null && ThirdSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (SecondSeries != null && !SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else
            {
                TopLeft1 = 4;
                TopRight1 = 4;
            }
        }
        else if (args.Series.Name == "2023")
        {
            if (FourthSeries != null && FourthSeries.Visible)
            {
                TopRight4 = 4;
                TopLeft4 = 4;
                TopRight3 = 0;
                TopLeft3 = 0;
            }
            else if (ThirdSeries != null && !ThirdSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight2 = 0;
                TopLeft2 = 0;
            }
            else if (SecondSeries != null && SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else
            {
                TopLeft1 = 4;
                TopRight1 = 4;
            }
        }
        else if (args.Series.Name == "2024")
        {
            if (FourthSeries != null && !FourthSeries.Visible)
            {
                TopLeft4 = 4;
                TopRight4 = 4;
                TopLeft3 = 0;
                TopRight3 = 0;
                TopLeft2 = 0;
                TopRight2 = 0;
                TopLeft1 = 0;
                TopRight1 = 0;
            }
            else if (ThirdSeries != null && ThirdSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (SecondSeries != null && SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else
            {
                TopLeft1 = 4;
                TopRight1 = 4;
            }
        }
    }

    private void SetSeriesFill(Theme currentTheme)
    {
        if (currentTheme == Theme.Fluent)
        {
            fillSeries1 = "#FFE066";
            fillSeries2 = "#FAB666";
            fillSeries3 = "#F68F6A";
            fillSeries4 = "#F3646A";
        }
        else if (currentTheme == Theme.Bootstrap5)
        {
            fillSeries1 = "#C7E9B6";
            fillSeries2 = "#81CCBB";
            fillSeries3 = "#45B5C3";
            fillSeries4 = "#2390BE";
        }
    }

    public void ChangeMode(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownData> args)
    {
        switch (args.Value.ToUpper())
        {
            case "SORT BY X":
                {
                    enabled = true;
                    propertyName = "X";
                    break;
                }
            case "SORT BY Y":
                {
                    enabled = true;
                    propertyName = "Y";
                    break;
                }
            case "NONE":
                {
                    propertyName = null!;
                    enabled = false;
                    break;
                }

        }

    }

    void axisLabel(AxisLabelRenderEventArgs args)
    {
        if (args.Value > 999999 || args.Value < -999999)
        {
            args.Text = args.Value.ToString("0,,.##M", CultureInfo.InvariantCulture);
        }
    }

    public void ChangeSortOrder(Syncfusion.Blazor.DropDowns.ChangeEventArgs<ListSortDirection, string> args)
    {
        direction = args.Value;
    }

    public class DropDownData
    {
        public string? Type { get; set; }
    }

}
