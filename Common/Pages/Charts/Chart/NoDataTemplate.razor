@page "/chart/no-data-template"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using System.Globalization;

@inject NavigationManager NavigationManager

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This Blazor Chart sample illustrates handling the empty data chart using no data template. This template is used to display a custom message or image when the data is not available in the chart.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, the <code>NoDataTemplate</code> property is assigned with an HTML template that includes an image, a message indicating data unavailability, and a button to load new data into the chart. Once data is provided, a line chart is displayed.
    </p>
    <p><b>Tooltip</b> is enabled in the chart. To view a tooltip, hover over a data point or tap on it if you're using a touch-enabled device.</p>
</ActionDescription>


<SfChart Title="Milk Production in US - 2025" SubTitle="Source: nass.usda.gov" Theme="@Theme" @ref="chart">
    <NoDataTemplate>
        <div class="noDataTemplateContainerStyle @(GetThemeClass())">       
                <div><img src='@(SampleService?.WebAssetsPath + "images/chart/no-data.png")' alt="No Data" style="height: 150px;" /></div>
                <div style="font-size: 15px;"><strong>No data available to display.</strong></div><br>
                <SfButton IconCss="e-icons e-refresh" OnClick="@LoadData">Load Data</SfButton>
        </div>
    </NoDataTemplate>
    <ChildContent>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" >
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryYAxis Title="Production (in million pounds)" Minimum="@YAxisMin" Maximum="@YAxisMax" Interval="@YAxisInterval">
            <ChartAxisTitleStyle FontWeight="bold"></ChartAxisTitleStyle>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@chartData" XName="Month" YName="Value" Type="ChartSeriesType.Line" Width="2" Name="Milk Production">
                <ChartMarker Visible="true" Width="7" Height="7"></ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y}M</b>"></ChartTooltipSettings>
    </ChildContent>
</SfChart>

<style>
    .noDataTemplateContainerStyle {
        height: inherit;
        width: inherit;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }
    
    .dark-bg {
        background-color: #000000;
        color: #ffffff;
    }

    .material-dark .dark-bg { 
        background-color: #262626; 
    }

    .material3-dark .dark-bg, .fluent2-dark .dark-bg, .fluent2-highcontrast .dark-bg { 
        background-color: #1C1B1F; 
    }

    .fabric-dark .dark-bg { 
        background-color: #201F1F; 
    }

    .fluent-dark .dark-bg { 
        background-color: #1B1A19; 
    }

    .bootstrap-dark .dark-bg { 
        background-color: #1A1A1A; 
    }

    .bootstrap5-dark .dark-bg, .bootstrap5\.3-dark .dark-bg { 
        background-color: #212529; 
    }

    .tailwind-dark .dark-bg { 
        background-color: #1E242F; 
    }
    
    .tailwind3-dark .dark-bg { 
        background-color: #111827; 
    }

    .light-bg {
        background-color: #fafafa;
        color: #000000;
    }

</style>

@code {
    public SfChart? chart;
    public Theme Theme { get; set; }
    public ObservableCollection<Data> chartData = new ObservableCollection<Data>();
    public double YAxisMin { get; set; }
    public double YAxisMax { get; set; }
    public double YAxisInterval { get; set; }

    public string GetThemeClass()
    {
        string themeStr = Theme.ToString();
        if (themeStr.Contains("HighContrast", StringComparison.OrdinalIgnoreCase) || themeStr.Contains("Dark", StringComparison.OrdinalIgnoreCase))
        {
            return "dark-bg";
        }
        return "light-bg";
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class Data
    {
        public string? Month { get; set; }
        public double Value { get; set; }
        public string Text => Month ?? string.Empty;
    }

    public async void LoadData()
    {
        chartData = new ObservableCollection<Data>
        {
            new Data { Month = "January", Value = 19173 },
            new Data { Month = "February", Value = 17726 },
            new Data { Month = "March", Value = 19874 },
            new Data { Month = "April", Value = 19391 },
            new Data { Month = "May", Value = 20072 },
            new Data { Month = "June", Value = 19233 }
        };

        var min = chartData.Min(d => d.Value);
        var max = chartData.Max(d => d.Value);
        var range = max - min;

        YAxisMin = Math.Floor(min - range * 0.1);
        YAxisMax = Math.Ceiling(max + range * 0.1);
        YAxisInterval = Math.Ceiling(range / 5);

        if (chart != null)
            await chart.RefreshAsync();
    }
}
