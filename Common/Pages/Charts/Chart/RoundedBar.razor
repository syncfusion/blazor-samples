@page "/chart/rounded-bar"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample showcases a bar chart with rounded corners, illustrating the anticipated growth rates across various sectors in 2024.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure the bar chart. The bar chart is similar to the column chart, but the orientation of the y-axis is horizontal rather than vertical. You can use the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartCornerRadius.html' aria-label="Navigate to the class reference for ChartCornerRadius">ChartCornerRadius</a> option to customize the horizontal rectangle, resulting in a rounded bar.
    </p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Top Performing Market Sectors by Growth Rate (2024)" SubTitle="Source: visualcapitalist.com" Width="@Width" Theme="@Theme" Height="500px">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartTooltipSettings Enable="true" Header="<b>${point.x}</b>" Format="Growth Rate : <b>${point.tooltip}</b>"></ChartTooltipSettings>
        <ChartTitleStyle Position="ChartTitlePosition.Bottom" TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartEvents OnPointRender="PointRender"></ChartEvents>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="0" Maximum="50" Title="Percentage Growth in 2024" Interval="10" OpposedPosition="true" LabelFormat="{value}%">
            <ChartAxisTitleStyle TextAlignment="Alignment.Center"></ChartAxisTitleStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries TooltipMappingName="Text" DataSource="@RoundedColumnData" XName="X" YName="Y" Type="ChartSeriesType.Bar" ColumnWidth="0.5">
                <ChartMarker>
                    <ChartDataLabel EnableRotation="@Rotate" Angle="-90" Visible="true" Name="Text" Position="LabelPosition.Outer">
                        <ChartDataLabelFont FontWeight="600"></ChartDataLabelFont>
                    </ChartDataLabel>
                </ChartMarker>
                <ChartCornerRadius TopLeft="10" TopRight="10" BottomLeft="10" BottomRight="10"></ChartCornerRadius>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
    </SfChart>
</div>

@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public bool Rotate { get; set; } = false;
    public LabelIntersectAction AxislabelRotation { get; set; } = LabelIntersectAction.Rotate45;
    public double Rotation { get; set; } = 0;
    public List<ChartData> RoundedColumnData = new List<ChartData>
    {
        new ChartData { X = "Healthcare", Y = 0.9, Text = "0.9%" },
        new ChartData { X = "Real Estate", Y = 1.3, Text = "1.3%" },
        new ChartData { X = "Energy", Y = 2.3, Text = "2.3%" },
        new ChartData { X = "Consumer Staples", Y = 12.0, Text = "12.0%" },
        new ChartData { X = "Industrials", Y = 15.6, Text = "15.6%" },
        new ChartData { X = "Utilities", Y = 19.6, Text = "19.6%" },
        new ChartData { X = "S&P 500 Average", Y = 23.3, Text = "23.3%" },
        new ChartData { X = "Financials", Y = 28.4, Text = "28.4%" },
        new ChartData { X = "Consumer Discretionary", Y = 29.1, Text = "29.1%" },
        new ChartData { X = "Information Technology", Y = 35.7, Text = "35.7%" },
        new ChartData { X = "Communication Services", Y = 38.9, Text = "38.9%" }
    };

    public class ChartData
    {
        public string? X { get; set; }
        public double Y { get; set; }
        public string? Text { get; set; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            AxislabelRotation = LabelIntersectAction.None;
            Rotation = -45;
            Width = "100%";
            Rotate = true;
        }
    }

    public void PointRender(PointRenderEventArgs args)
    {
        if (SampleService != null && SampleService.IsDevice)
        {
            if (args.Point.Index >= 2 && args.Point.Index <= 9)
            {
                args.Series.CornerRadius.BottomLeft  = 7;
                args.Series.CornerRadius.TopLeft  = 7;
                args.Series.CornerRadius.TopRight  = 7;
                args.Series.CornerRadius.BottomRight  = 7;
            }
            else
            {
                args.Series.CornerRadius.BottomLeft  = 5;
                args.Series.CornerRadius.TopLeft  = 5;
                args.Series.CornerRadius.TopRight  = 5;
                args.Series.CornerRadius.BottomRight  = 5;
            }
        }
        else
        {
            args.Series.CornerRadius.BottomLeft  = 10;
            args.Series.CornerRadius.TopLeft  = 10;
            args.Series.CornerRadius.TopRight  = 10;
            args.Series.CornerRadius.BottomRight  = 10;
        }
    }
}
