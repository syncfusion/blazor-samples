@page "/chart/Category-axis"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using PointRender

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample shows a category axis in a chart with details about internet users across different countries.</p>
</SampleDescription>
<ActionDescription>
    <p>You can use the category axis to represent string values instead of numbers in the chart. To use the category axis, set <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_ValueType' aria-label="Navigate to the ValueType property reference for chart axis">ValueType</a> in axis to <b>Category</b>.</p>
    <p>More information about the category axis can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/category-axis' aria-label="Navigate to the documentation for category axis in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Internet Users – 2021" SubTitle="Source: ourworldindata.org" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis EnableTrim="false" ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}B" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" TooltipMappingName="TooltipMappingName" Name="Users" XName="Country" YName="Users" Width="2" Type="ChartSeriesType.Bar">
                <ChartCornerRadius BottomRight="4" TopRight="4"></ChartCornerRadius><ChartMarker>
                    <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                        <ChartDataLabelFont Size="@Size" FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartEvents OnPointRender="PointRender"></ChartEvents>
    </SfChart>
</div>
<style>
    [id*="_Text_0"] {
        text-shadow: 1px 1px black;
    }
</style>

@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public string Size { get; set; } = "11px";
    public List<CategoryData> ChartPoints { get; set; } = new List<CategoryData>
    {
        new CategoryData { Country = "Germany", Users = 0.076, TooltipMappingName = "GER: 0.076" },
        new CategoryData { Country = "Russia", Users = 0.128, TooltipMappingName = "RUS: 0.128" },
        new CategoryData { Country = "Brazil", Users = 0.169, TooltipMappingName = "BRZ: 0.169" },
        new CategoryData { Country = "India", Users = 0.654, TooltipMappingName = "IND: 0.654" },
        new CategoryData { Country = "China", Users = 1.04, TooltipMappingName = "CHN: 1.04" },
        new CategoryData { Country = "United States", Users = 0.312, TooltipMappingName = "USA: 0.312" },
        new CategoryData { Country = "Europe", Users = 0.654, TooltipMappingName = "EUR: 0.654" },
        new CategoryData { Country = "Africa", Users = 0.553, TooltipMappingName = "AFR: 0.553" }
     };

    protected override void OnInitialized()
    {
        
        this.SetTheme(null!);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
            Size = "7px";
        }
    }

    public void PointRender(PointRenderEventArgs args)
    {
        this.SetTheme(args);
    }

    private void SetTheme(PointRenderEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material3;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (args == null)
            {
                if (NavigationManager.Uri.IndexOf("dark") > -1)
                {
                    Theme = Theme.Bootstrap5Dark;
                }
                else
                {
                    Theme = Theme.Bootstrap5;
                }
            }
            else
            {
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2HighContrast;
                else
                    args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            }
            else if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
		else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Tailwind3Dark;
                else
                    args.Fill = PointColor.Tailwind3DarkColors[args.Point.Index % 8];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind3;
                else
                    args.Fill = PointColor.Tailwind3Colors[args.Point.Index % 8];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public class CategoryData
    {
        public string? Country { get; set; }
        public double Users { get; set; }
        public string? TooltipMappingName { get; set; }
    }
}
