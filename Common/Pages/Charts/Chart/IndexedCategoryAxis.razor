@page "/chart/indexed-category-axis"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample shows an indexed category axis in a chart with details about GDP growth across different countries.</p>
</SampleDescription>
<ActionDescription>
    <p>The category axis is also rendered on the basis of the index values in the data source. To render the indexed category axis, set <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_ValueType' aria-label="Navigate to the ValueType property reference for chart axis">ValueType</a> to <b>Category</b> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_IsInversed' aria-label="Navigate to the IsIndexed property reference for chart axis">IsIndexed</a> property to <b>true</b>.</p>
    <p>More information about the indexed category axis can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/category-axis/#indexed-category-axis' aria-label="Navigate to the documentation for Indexed category axis in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-10 control-section sb-property-border">
    <SfChart Title="GDP by Countries" SubTitle="Source: ourworldindata.org" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="@Label" LabelRotation="@LabelRotate" Interval="1" IsIndexed="@Indexed">
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}%">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@GDP_2021" Name="2021" XName="Country" Width="2" Opacity="1" YName="GDPGrowthRate" Type="@Series1">
                <ChartCornerRadius TopLeft="4" TopRight="4"></ChartCornerRadius>
                <ChartMarker Visible="@Marker1" Height="10" Width="10">
                    <ChartDataLabel Visible="true" EnableRotation="@Rotation" Angle="@RotateAngle" Position="Syncfusion.Blazor.Charts.LabelPosition.Top" Name="TextMapping">
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@GDP_2022" Name="2022" XName="Country" Width="2" Opacity="1" YName="GDPGrowthRate" Type="@Series2">
                <ChartCornerRadius TopLeft="4" TopRight="4"></ChartCornerRadius>
                <ChartMarker Visible="@Marker2" Height="10" Width="10">
                     <ChartDataLabel Visible="true" EnableRotation="@Rotation" Angle="@RotateAngle" Position="Syncfusion.Blazor.Charts.LabelPosition.Top" Name="TextMapping">
                     </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true"></ChartLegendSettings>
    </SfChart>
</div>

<div class="col-lg-2 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Indexed: </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <SfCheckBox Checked="@Indexed" ValueChange="@CheckValue" TChecked="bool"></SfCheckBox>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
@code{


    private Theme Theme { get; set; }
    bool Rotation { get; set; } = false;
    public double RotateAngle {get; set;} = 0;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Rotate45;
    public List<CategoryData> GDP_2021 { get; set; } = new List<CategoryData>
    {
        new CategoryData { Country = "India", GDPGrowthRate = 9.05 },
        new CategoryData { Country = "Nepal", GDPGrowthRate = 4.84 },
        new CategoryData { Country = "Bangladesh", GDPGrowthRate = 6.94 },
        new CategoryData { Country = "Cambodia", GDPGrowthRate = 3.03 },
        new CategoryData { Country = "China", GDPGrowthRate = 8.45 },
    };
    public List<CategoryData> GDP_2022 { get; set; } = new List<CategoryData>
    {
        new CategoryData { Country = "Australia", GDPGrowthRate = 4.27 },
        new CategoryData { Country = "Poland", GDPGrowthRate = 5.26 },
        new CategoryData { Country = "Singapore", GDPGrowthRate = 3.65 },
        new CategoryData { Country = "Canada", GDPGrowthRate = 3.82 },
        new CategoryData { Country = "Germany", GDPGrowthRate = 1.81 },
    };
    private bool Indexed = true, Marker1 = false, Marker2 = false;
    private ChartSeriesType Series1 = ChartSeriesType.Column, Series2 = ChartSeriesType.Column;
    private double LabelRotate;
    protected override void OnInitialized()
    {

        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            LabelRotate = -45;
            Rotation = true;
            RotateAngle = -90;
        }
    }

    private void CheckValue(ChangeEventArgs<bool> args)
    {
        Indexed = args.Checked;
        if (Indexed)
        {
            Series1 = Series2 = ChartSeriesType.Column;
            Marker1 = Marker2 = false;
            LabelRotate = SampleService != null && SampleService.IsDevice ? -45 : 0;
            Label = SampleService != null && SampleService.IsDevice ? LabelIntersectAction.None : LabelIntersectAction.Rotate45;
        }
        else
        {
            Series1 = Series2 = ChartSeriesType.Line;
            Marker1 = Marker2 = true;
            LabelRotate = 90;
        }
    }

    public class CategoryData
    {
        public string? Country { get; set; }
        public double GDPGrowthRate { get; set; }
    }
}
