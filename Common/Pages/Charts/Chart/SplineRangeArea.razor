@page "/chart/spline-range-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using System.IO
@using System.Net.Http.Json
@*Hidden:Lines*@
@inherits SampleBaseComponent;


@*End:Hidden*@

<SampleDescription>
    <p>This Blazor Spline Range Area Chart example visualizes minimum and maximum temperatures of different days with default spline range area series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the spline range area chart. This chart is used to display continuous data points as a set of curved lines varying between high and low values over a certain time period.</p>
    <p>More information about the spline range area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/spline-range-area' aria-label="Navigate to the documentation for spline-range-area in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Temperature Variation by Month" Width="@Width" Theme="@Theme">
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartTooltipSettings Enable="true" Format="Temperature : <b>${point.low} - ${point.high}</b>" Shared="true"></ChartTooltipSettings>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Format="dd MMM">
            <ChartAxisMajorGridLines Width="0"/>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}ËšC" Interval="5" Minimum="-5" Maximum="25">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"/>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" XName="X" High="High" Low="Low" Fill="@Fill" Opacity="0.2" Type="ChartSeriesType.SplineRangeArea">
                <ChartMarker Visible="false"></ChartMarker>
                <ChartSeriesBorder Width="2" Color="@BorderColor"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true"/>
    </SfChart>
</div>
 
@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public string? Fill { get; set; }
    public string? BorderColor { get; set; }
    public EdgeLabelPlacement EdgeLabelPlacement { get; set; } = EdgeLabelPlacement.Hide;
    public ChartData[]? ChartPoints { get; set; }

    public List<ChartData> ChartPoints1 = new List<ChartData>()
    {
        new ChartData { X = "Jan", High = 29, Low = 19 },
        new ChartData { X = "Feb", High = 32, Low = 22 },
        new ChartData { X = "Mar", High = 35, Low = 25 },
        new ChartData { X = "Apr", High = 37, Low = 27 },
        new ChartData { X = "May", High = 35, Low = 25 },
        new ChartData { X = "Jun", High = 32, Low = 22 },
        new ChartData { X = "Jul", High = 30, Low = 20 },
        new ChartData { X = "Aug", High = 32, Low = 22 },
        new ChartData { X = "Sep", High = 35, Low = 25 },
        new ChartData { X = "Oct", High = 37, Low = 27 },
        new ChartData { X = "Nov", High = 35, Low = 25 },
        new ChartData { X = "Dec", High = 32, Low = 22 }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender) {
            if (SampleService != null && SampleService.IsDevice)
            {
                Width = "100%";
                EdgeLabelPlacement = EdgeLabelPlacement.Shift;
                StateHasChanged();
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        ChartPoints = new ChartData[] { };
        ChartPoints = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService?.WebAssetsPath + "data/chart/range-data.json") ?? null!;

    }

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        SetTheme();
    }
    private void SetTheme()
    {
        switch (Theme)
        {
            case Theme.Bootstrap5:
                Fill = "#6355C7";
                BorderColor = "#6355C7";
                break;
            case Theme.Fluent:
                Fill = "#1AC9E6";
                BorderColor = "#1AC9E6";
                break;
        }
    }
    
    public class ChartData
    {
        public string? X { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
    }
}
