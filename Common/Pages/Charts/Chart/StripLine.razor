@page "/chart/strip-line"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample highlights a certain temperature range recorded over a year using the strip line feature.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a strip line for the chart. Use the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartStripline.html#Syncfusion_Blazor_Charts_ChartStripline_Start' aria-label="Navigate to the Start property reference for chart strip-line">Start</a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartStripline.html#Syncfusion_Blazor_Charts_ChartStripline_End' aria-label="Navigate to the End property reference for chart strip-line">End</a> properties in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartStripline.html' aria-label="Navigate to the class reference for ChartStripline">ChartStripline</a> option to add a strip line to an axis. You can add more than one strip line to the axis.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap one on touch-enabled devices.</p>
    <p>More information about the stripline can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/strip-line' aria-label="Navigate to the documentation for strip-line in chart component">documentation section</a>.</p>
</ActionDescription>
<style>
     }
    .productA {
        width: 10px;
        height: 10px;
        color: black;
        font-weight: bold;
    }
    .productB {
        width: 10px;
        height: 10px;
        color: black;
        font-weight: bold;
    }
    .productC {
        width: 10px;
        height: 10px;
        color: black;
        font-weight: bold;
    }

 </style>

<div class="control-section" align='center'>
    <SfChart Title="Customer Satisfaction Rating" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="80" Maximum="100" Interval="5" LabelFormat="{value}%" RangePadding="Syncfusion.Blazor.Charts.ChartRangePadding.None">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Color="#808080"></ChartAxisLineStyle>
            <ChartStriplines>
                <ChartStripline Start="95" End="100" Text="Good" Color="#74e870" HorizontalAlignment="Anchor.Middle" Visible="true">
                    <ChartStriplineTextStyle Size="16px" Color="#ffffff" FontWeight="500"></ChartStriplineTextStyle>
                    <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                </ChartStripline>
                <ChartStripline Start="85" End="95" Text="Ok" Color="#cde870" HorizontalAlignment="Anchor.Middle" Visible="true">
                    <ChartStriplineTextStyle Size="16px" Color="#ffffff" FontWeight="500"></ChartStriplineTextStyle>
                    <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                </ChartStripline>
                <ChartStripline Start="80" End="85" Text="Average" Color="#e5c76c" HorizontalAlignment="Anchor.Middle" Visible="true">
                    <ChartStriplineTextStyle Size="16px" Color="#ffffff" FontWeight="500"></ChartStriplineTextStyle>
                    <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                </ChartStripline>
            </ChartStriplines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries Name="Product A" Type="ChartSeriesType.Spline" DataSource="@WeatherReportsA"  XName="Day" YName="Temperature" Width="2">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
             <ChartSeries Name="Product B" Type="ChartSeriesType.Spline" DataSource="@WeatherReportsB" XName="Day" YName="Temperature" Width="2">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
             <ChartSeries Name="Product C" Type="ChartSeriesType.Spline"  DataSource="@WeatherReportsC" XName="Day" YName="Temperature" Width="2">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Header="" Format="<b>${point.x}</b> <br> Ratings : <b>${point.y}</b>" EnableHighlight="true"></ChartTooltipSettings>
      
    </SfChart>
</div>

@code{
    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StripLineData> WeatherReportsA { get; set; } = new List<StripLineData>
    {
        new StripLineData { Day = "Jan", Temperature = 90 },
        new StripLineData { Day = "Feb", Temperature = 92 },
        new StripLineData { Day = "Mar", Temperature = 94 },
        new StripLineData { Day = "Apr", Temperature = 95 },
        new StripLineData { Day = "May", Temperature = 94 },
        new StripLineData { Day = "Jun", Temperature = 96 },
        new StripLineData { Day = "Jul", Temperature = 97 },
        new StripLineData { Day = "Aug", Temperature = 98 },
        new StripLineData { Day = "Sep", Temperature = 97 },
        new StripLineData { Day = "Oct", Temperature = 95 },
        new StripLineData { Day = "Nov", Temperature = 90 },
        new StripLineData { Day = "Dec", Temperature = 95 },

    };
     public List<StripLineData> WeatherReportsB { get; set; } = new List<StripLineData>
    {
        new StripLineData { Day = "Jan", Temperature = 85 },
        new StripLineData { Day = "Feb", Temperature = 86 },
        new StripLineData { Day = "Mar", Temperature = 87},
        new StripLineData { Day = "Apr", Temperature = 88 },
        new StripLineData { Day = "May", Temperature = 87 },
        new StripLineData { Day = "Jun", Temperature = 90 },
        new StripLineData { Day = "Jul", Temperature = 91 },
        new StripLineData { Day = "Aug", Temperature = 90 },
        new StripLineData { Day = "Sep", Temperature = 93 },
        new StripLineData { Day = "Oct", Temperature = 90 },
        new StripLineData { Day = "Nov", Temperature = 85 },
        new StripLineData { Day = "Dec", Temperature = 90 },
    };
     public List<StripLineData> WeatherReportsC { get; set; } = new List<StripLineData>
    {
        new StripLineData { Day = "Jan", Temperature = 80 },
        new StripLineData { Day = "Feb", Temperature = 81 },
        new StripLineData { Day = "Mar", Temperature = 82 },
        new StripLineData { Day = "Apr", Temperature = 83 },
        new StripLineData { Day = "May", Temperature = 84 },
        new StripLineData { Day = "Jun", Temperature = 83 },
        new StripLineData { Day = "Jul", Temperature = 82 },
        new StripLineData { Day = "Aug", Temperature = 81 },
        new StripLineData { Day = "Sep", Temperature = 85 },
        new StripLineData { Day = "Oct", Temperature = 84 },
        new StripLineData { Day = "Nov", Temperature = 83 },
        new StripLineData { Day = "Dec", Temperature = 82 },
    };

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public class StripLineData
    {
        public string? Day { get; set; }
        public double Temperature { get; set; }
    }

}