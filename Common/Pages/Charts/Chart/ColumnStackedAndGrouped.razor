@page "/chart/column-stacked-and-grouped"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This stacked and grouped column chart visualizes global coffee production by country from 2021 to 2023. Each group of columns represents the total production for a given year, with individual column segments showing the contributions from Brazil, Vietnam, Colombia, and India.</p>
</SampleDescription>
<ActionDescription>
    <p>This example demonstrates how to render and configure a stacked and grouped column chart. The chart can be stacked by setting the <code>Type</code> property of <code>ChartSeries</code> to <code>StackingColumn</code>. The stacking group is created by specifying the grouping data value in the <code>StackingGroup</code> property and defining the group name in the <code>GroupName</code> property.</p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.
    </p>
    <p>
        More information about the Stacked and Grouped Column chart can be found in this 
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/chart/chart-types/stacked-column#stacking-group" aria-label="Navigate to the documentation for Stacked and Grouped Column chart">
            documentation section
        </a>.
    </p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Global Coffee Production by Country (2021-2023)"  Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Production (60KG Bags)" LabelFormat="{value} M" Interval="20">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Header="<b>Coffee Production in ${point.x}</b>" Format="${series.name} : <b>${point.y}</b> (60KG Bags)"></ChartTooltipSettings>
        <ChartEvents OnLegendClick="OnLegendClick"></ChartEvents>        
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartSeriesCollection>
            <ChartSeries @ref="FirstSeries" DataSource="@CoffeeProductions" XName="Year" YName="Vietnam"
                StackingGroup="Asia" Type="ChartSeriesType.StackingColumn" GroupName="SameGroup" ColumnWidth="0.7"
                ColumnSpacing="0.1" Name="Vietnam" LegendShape="LegendShape.Circle">
                <ChartCornerRadius TopLeft="@TopLeft1" TopRight="@TopRight1"></ChartCornerRadius>
            </ChartSeries>
            <ChartSeries @ref="SecondSeries" DataSource="@CoffeeProductions" XName="Year" YName="India"
                StackingGroup="Asia" Type="ChartSeriesType.StackingColumn" GroupName="SameGroup" ColumnWidth="0.7"
                ColumnSpacing="0.1" Name="India" LegendShape="LegendShape.Circle">
                <ChartCornerRadius TopLeft="@TopLeft2" TopRight="@TopRight2"></ChartCornerRadius>
            </ChartSeries>
            <ChartSeries @ref="ThirdSeries" DataSource="@CoffeeProductions" XName="Year" YName="Colombia"
                StackingGroup="South America" Type="ChartSeriesType.StackingColumn" GroupName="SameGroup" ColumnWidth="0.7"
                ColumnSpacing="0.1" Name="Colombia" LegendShape="LegendShape.Circle">
                <ChartCornerRadius TopLeft="@TopLeft3" TopRight="@TopRight3"></ChartCornerRadius>            </ChartSeries>
            <ChartSeries @ref="FourthSeries" DataSource="@CoffeeProductions" XName="Year" YName="Brazil"
                StackingGroup="South America" Type="ChartSeriesType.StackingColumn" GroupName="SameGroup" ColumnWidth="0.7"
                ColumnSpacing="0.1" Name="Brazil" LegendShape="LegendShape.Circle">
                <ChartCornerRadius TopLeft="@TopLeft4" TopRight="@TopRight4"></ChartCornerRadius>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings EnableHighlight="true" ToggleVisibility="true"></ChartLegendSettings>
    </SfChart>
</div>

@code {


    private ChartSeries? FirstSeries;
    private ChartSeries? SecondSeries;
    private ChartSeries? ThirdSeries;
    private ChartSeries? FourthSeries;
    private int TopLeft1 { get; set; } = 0;
    private int TopRight1 { get; set; } = 0;
    private int TopLeft2 { get; set; } = 4;
    private int TopRight2 { get; set; } = 4;
    private int TopLeft3 { get; set; } = 0;
    private int TopRight3 { get; set; } = 0;
    private int TopLeft4 { get; set; } = 4;
    private int TopRight4 { get; set; } = 4;
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }
    
    public class CoffeeProduction
    {
        public int Year { get; set; }
        public double Vietnam { get; set; }
        public double India { get; set; }
        public double Colombia { get; set; }
        public double Brazil { get; set; }
    }

    public List<CoffeeProduction> CoffeeProductions = new List<CoffeeProduction>
    {
        new CoffeeProduction { Year = 2021, Vietnam = 31.6, India = 57, Colombia = 11.8, Brazil = 58.1 },
        new CoffeeProduction { Year = 2022, Vietnam = 28.3, India = 59, Colombia = 10.7, Brazil = 62.6 },
        new CoffeeProduction { Year = 2023, Vietnam = 27.5, India = 61, Colombia = 12.8, Brazil = 66.3 }
    };

    public void OnLegendClick(LegendClickEventArgs args)
    {
        if (args.Series.Name == "Vietnam")
        {
            if (SecondSeries != null && SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (FirstSeries != null && !FirstSeries.Visible && SecondSeries != null && !SecondSeries.Visible)
            {
                TopRight1 = 4;
                TopLeft1 = 4;
                TopRight2 = 0;
                TopLeft2 = 0;
            }
            else
            {
                TopRight1 = 0;
                TopLeft1 = 0;
                TopRight2 = 0;
                TopLeft2 = 0;
            }
        }
        else if (args.Series.Name == "India")
        {
            if (SecondSeries != null && !SecondSeries.Visible)
            {
                TopRight2 = 4;
                TopLeft2 = 4;
                TopRight1 = 0;
                TopLeft1 = 0;
            }
            else if (FirstSeries != null && FirstSeries.Visible)
            {
                TopRight1 = 4;
                TopLeft1 = 4;
                TopRight2 = 0;
                TopLeft2 = 0;
            }
            else
            {
                TopRight1 = 0;
                TopLeft1 = 0;
                TopRight2 = 0;
                TopLeft2 = 0;
            }
        }
        else if (args.Series.Name == "Colombia")
        {
            if (FourthSeries != null && FourthSeries.Visible)
            {
                TopRight4 = 4;
                TopLeft4 = 4;
                TopRight3 = 0;
                TopLeft3 = 0;
            }
            else if (ThirdSeries != null && !ThirdSeries.Visible && FourthSeries != null && !FourthSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight4 = 0;
                TopLeft4 = 0;
            }
            else
            {
                TopRight3 = 0;
                TopLeft3 = 0;
                TopRight4 = 0;
                TopLeft4 = 0;
            }
        }
        else if (args.Series.Name == "Brazil")
        {
            if (FourthSeries != null && !FourthSeries.Visible)
            {
                TopRight4 = 4;
                TopLeft4 = 4;
                TopRight3 = 0;
                TopLeft3 = 0;
            }
            else if (ThirdSeries != null && ThirdSeries.Visible)
            {
                TopRight3 = 4;
                TopLeft3 = 4;
                TopRight4 = 0;
                TopLeft4 = 0;
            }
            else
            {
                TopRight3 = 0;
                TopLeft3 = 0;
                TopRight4 = 0;
                TopLeft4 = 0;
            }
        }
    }

}
