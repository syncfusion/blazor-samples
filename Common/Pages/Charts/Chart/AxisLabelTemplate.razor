@page "/chart/axis-label-template"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using PointRender

@inject NavigationManager NavigationManager

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@


<SampleDescription>
    <p>This sample demonstrates axis label template support in charts. Each axis label is rendered using a customizable template, allowing for enhanced formatting and styling.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The Blazor Charts axis label template feature allows users to customize the appearance and behavior of axis labels using the <code>LabelTemplate</code> property in <a target='_blank' href="https://blazor.syncfusion.com/documentation/chart/axis-customization" aria-label="Navigate to the documentation for Chart Axis in chart component">ChartAxis</a>.
        This enables formatting axis labels with HTML content, applying conditional styling, or including icons and images for enhanced visual representation.
    </p>
    <p>More information on the axis label template can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/axis-labels' aria-label="Navigate to the documentation for axis label template in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart ID="chart" Title="Men's Olympics - 2024" SubTitle="Source: basketball-reference.com" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Countries">
            <ChildContent>
                <ChartAxisTitleStyle FontWeight="bold" />
            </ChildContent>
            <LabelTemplate>
                @{
                    var data = context as ChartAxisLabelInfo;
                    var country = SampleService != null && SampleService.IsDevice ? GetCountryLabel(data.Text) : data.Text;
                    var imagePath = GetCountryImagePath(data.Text);
                    var textColor = IsDarkMode() ? "white" : "black";

                    <div style="align-items: center; text-align: center; color:@textColor">
                        <img src="@(SampleService?.WebAssetsPath + imagePath)" alt="@country flag" width="27" height="27" style="border: 2px solid black; border-radius: 50%" />
                        <br>
                        <span style="font-size: 12px;">@country</span>
                    </div>
                }
            </LabelTemplate>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double"
                           Title="Games Won">
            <ChartAxisTitleStyle FontWeight="bold" />
        </ChartPrimaryYAxis>

        <ChartSeriesCollection>
            <ChartSeries DataSource="@OlympicsData" XName="Country" YName="Count" Type="ChartSeriesType.Column">
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartEvents OnPointRender="PointRender"></ChartEvents>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    </SfChart>
</div>

@code {
    private Theme Theme { get; set; }
    public string? Width { get; set; } = "90%";
    public List<ChartData> OlympicsData = new List<ChartData>
    {
        new ChartData { Country = "United States", Count = 6},
        new ChartData { Country = "Canada", Count = 3},
        new ChartData { Country = "France", Count = 4},
        new ChartData { Country = "Germany", Count = 4},
        new ChartData { Country = "Serbia", Count = 4},
        new ChartData { Country = "Spain", Count = 1}
    };

    protected override void OnInitialized()
    {
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
        this.SetTheme(null);
    }

    public class ChartData
    {
        public string? Country { get; set; }
        public double Count { get; set; }
    }

    public void PointRender(PointRenderEventArgs args)
    {
        this.SetTheme(args);
    }

    private void SetTheme(PointRenderEventArgs? args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material3;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (args == null)
            {
                if (NavigationManager.Uri.IndexOf("dark") > -1)
                {
                    Theme = Theme.Bootstrap5Dark;
                }
                else
                {
                    Theme = Theme.Bootstrap5;
                }
            }
            else
            {
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % PointColor.Bootstrap5Colors.Count];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2HighContrast;
                else
                    args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            }
            else if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Tailwind3Dark;
                else
                    args.Fill = PointColor.Tailwind3DarkColors[args.Point.Index % 8];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind3;
                else
                    args.Fill = PointColor.Tailwind3Colors[args.Point.Index % 8];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    private bool IsDarkMode()
    {
        var uri = NavigationManager.Uri.ToLower();
        return uri.Contains("dark") || uri.Contains("highcontrast");
    }

    private string GetCountryLabel(string country)
    {
        return country switch
        {
            "United States" => "USA",
            "Canada" => "CAN",
            "France" => "FRA",
            "Germany" => "GER",
            "Serbia" => "SRB",
            "Spain" => "ESP",
            _ => ""
        };
    }

    private string GetCountryImagePath(string country)
    {
        return country switch
        {
            "United States" => "images/chart/united-states.png",
            "Canada" => "images/chart/canada.png",
            "France" => "images/chart/france.png",
            "Germany" => "images/chart/germany.png",
            "Serbia" => "images/chart/serbia.png",
            "Spain" => "images/chart/spain.png",
            _ => "🏳️"
        };
    }
}