@page "/chart/crosshair"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample depicts the crosshair behavior in the charts. To view the crosshair and its tooltip, hover over the chart or tap on it in touch-enabled devices.</p>
</SampleDescription>
<ActionDescription>
    <p>The crosshair is used to inspect or focus on an individual data point using a vertical and a horizontal line. You can enable the crosshair using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartCrosshairSettings.html#Syncfusion_Blazor_Charts_ChartCrosshairSettings_Enable' aria-label="Navigate to the Enable property reference for chart cross hair settings">Enable</a> property in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartCrosshairSettings.html' aria-label="Navigate to the class reference for ChartCrosshairSettings">ChartCrosshairSettings</a> class and customize its tooltip by using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxisCrosshairTooltip.html' aria-label="Navigate to the class reference for ChartAxisCrosshairTooltip">ChartAxisCrosshairTooltip</a> in the axis.</p>
    <p>The <code>SnapToData</code> property snaps the crosshair to the nearest data point instead of following the exact mouse position, providing a more precise focus on data points.</p>
    <p>More information about the crosshair can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/cross-hair-and-track-ball' aria-label="Navigate to the documentation for Crosshair and Trackball in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Intraday Stock Price Movement" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="288" Maximum="318" Title="Stock Value">
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
             <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartCrosshairSettings Enable="true" SnapToData="true" DashArray="5,5"></ChartCrosshairSettings>
        <ChartTooltipSettings Enable="true" Shared="true" Format="<b>${point.x}</b> <br>Stock Price : ${point.y}" Header="" EnableMarker="false"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries Width="2" Fill="@FillColor" DataSource="@ChartPoints" Name="Stock Value" Type="ChartSeriesType.SplineArea" XName="Time" YName="Value">
                <ChartSeriesBorder Width="2" Color="@BorderColor"></ChartSeriesBorder>
                <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

<style>
    #control-container {
        padding: 0px !important;
    }

    #material-gradient-chart stop {
        stop-color: #00bdae;
    }

    #fabric-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #bootstrap4-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #fluent-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #fluent-dark-gradient-chart stop {
        stop-color: #1AC9E6;
    }

    #highcontrast-gradient-chart stop {
        stop-color: #79ECE4;
    }

    #tailwind3-gradient-chart stop {
        stop-color: #2F4074;
    }

    #bootstrap5-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #material-dark-gradient-chart stop {
        stop-color: #9ECB08;
    }

    #fabric-dark-gradient-chart stop {
        stop-color: #4472c4;
    }

    #bootstrap-dark-gradient-chart stop {
        stop-color: #a16ee5;
    }

    #tailwind3-dark-gradient-chart stop {
        stop-color: #8029F1;
    }

    #bootstrap5-dark-gradient-chart stop {
        stop-color: #FD7E14;
    }

    #material3-gradient-chart stop {
        stop-color: #6355C7;
    }

    #material3-dark-gradient-chart stop {
        stop-color: #4EAAFF;
    }

    #fluent2-gradient-chart stop {
        stop-color: #6200EE;
    }

    #fluent2-highcontrast-gradient-chart stop {
        stop-color: #9BB449;
    }

    #fluent2-dark-gradient-chart stop {
        stop-color: #9BB449;
    }

    .chart-gradient stop[offset="0"] {
        stop-opacity: 0.50;
    }

    .chart-gradient stop[offset="0.3"] {
        stop-opacity: 0.40;
    }

    .chart-gradient stop[offset="0.6"] {
        stop-opacity: 0.2;
    }

    .chart-gradient stop[offset="1"] {
        stop-opacity: 0;
    }

</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="material-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap4-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fabric-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="tailwind3-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="bootstrap5-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="material3-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="0.3"></stop>
            <stop offset="0.6"></stop>
            <stop offset="1"></stop>

        </linearGradient>
        <linearGradient id="fluent2-highcontrast-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="fluent2-dark-gradient-chart" style="opacity: 0.75" class="chart-gradient" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>

@code{
    public string Width { get; set; } = "75%";
    public string FillColor { get; set; } = "";
    string ValueUrl = "url";
    public string BorderColor { get; set; } = "";
    public string CurrentUri { get; set; } = "";
    private Theme Theme { get; set; }
    
    List<CrosshairData> ChartPoints = new List<CrosshairData>
    {
            new CrosshairData { Time = "09:00", Value = 289.92 },
            new CrosshairData { Time = "09:05", Value = 289.33 },
            new CrosshairData { Time = "09:10", Value = 289.73 },
            new CrosshairData { Time = "09:15", Value = 299.39 },
            new CrosshairData { Time = "09:20", Value = 298.95 },
            new CrosshairData { Time = "09:25", Value = 297.14 },
            new CrosshairData { Time = "09:30", Value = 297.13 },
            new CrosshairData { Time = "09:35", Value = 296.63 },
            new CrosshairData { Time = "09:40", Value = 293.42 },
            new CrosshairData { Time = "09:45", Value = 295.84 },
            new CrosshairData { Time = "09:50", Value = 297.90 },
            new CrosshairData { Time = "09:55", Value = 298.07 },
            new CrosshairData { Time = "10:00", Value = 300.50 },
            new CrosshairData { Time = "10:05", Value = 300.75 },
            new CrosshairData { Time = "10:10", Value = 301.39 },
            new CrosshairData { Time = "10:15", Value = 305.91 },
            new CrosshairData { Time = "10:20", Value = 305.19 },
            new CrosshairData { Time = "10:25", Value = 304.72 },
            new CrosshairData { Time = "10:30", Value = 304.40 },
            new CrosshairData { Time = "10:35", Value = 303.64 },
            new CrosshairData { Time = "10:40", Value = 302.80 },
            new CrosshairData { Time = "10:45", Value = 302.08 },
            new CrosshairData { Time = "10:50", Value = 301.90 },
            new CrosshairData { Time = "10:55", Value = 300.62 },
            new CrosshairData { Time = "11:00", Value = 297.24 },
            new CrosshairData { Time = "11:05", Value = 297.49 },
            new CrosshairData { Time = "11:10", Value = 297.37 },
            new CrosshairData { Time = "11:15", Value = 297.10 },
            new CrosshairData { Time = "11:20", Value = 296.84 },
            new CrosshairData { Time = "11:25", Value = 296.07 },
            new CrosshairData { Time = "11:30", Value = 292.96 },
            new CrosshairData { Time = "11:35", Value = 296.05 },
            new CrosshairData { Time = "11:40", Value = 294.97 },
            new CrosshairData { Time = "11:45", Value = 297.45 },
            new CrosshairData { Time = "11:50", Value = 291.37 },
            new CrosshairData { Time = "11:55", Value = 296.01 },
            new CrosshairData { Time = "12:00", Value = 294.21 },
            new CrosshairData { Time = "12:05", Value = 294.77 },
            new CrosshairData { Time = "12:10", Value = 293.22 },
            new CrosshairData { Time = "12:15", Value = 293.50 },
            new CrosshairData { Time = "12:20", Value = 293.78 },
            new CrosshairData { Time = "12:25", Value = 295.67 },
            new CrosshairData { Time = "12:30", Value = 294.68 },
            new CrosshairData { Time = "12:35", Value = 294.21 },
            new CrosshairData { Time = "12:40", Value = 293.31 },
            new CrosshairData { Time = "12:45", Value = 298.67 },
            new CrosshairData { Time = "12:50", Value = 292.96 },
            new CrosshairData { Time = "12:55", Value = 293.29 },
            new CrosshairData { Time = "13:00", Value = 293.65 },
            new CrosshairData { Time = "13:05", Value = 293.60 },
            new CrosshairData { Time = "13:10", Value = 293.43 },
            new CrosshairData { Time = "13:15", Value = 292.48 },
            new CrosshairData { Time = "13:20", Value = 292.21 },
            new CrosshairData { Time = "13:25", Value = 291.46 },
            new CrosshairData { Time = "13:30", Value = 292.20 },
            new CrosshairData { Time = "13:35", Value = 293.68 },
            new CrosshairData { Time = "13:40", Value = 291.76 },
            new CrosshairData { Time = "13:45", Value = 291.40 },
            new CrosshairData { Time = "13:50", Value = 290.75 },
            new CrosshairData { Time = "13:55", Value = 294.13 },
            new CrosshairData { Time = "14:00", Value = 296.75 },
            new CrosshairData { Time = "14:05", Value = 297.97 },
            new CrosshairData { Time = "14:10", Value = 299.41 },
            new CrosshairData { Time = "14:15", Value = 300.87 },
            new CrosshairData { Time = "14:20", Value = 300.82 },
            new CrosshairData { Time = "14:25", Value = 301.87 },
            new CrosshairData { Time = "14:30", Value = 300.80 },
            new CrosshairData { Time = "14:35", Value = 301.33 },
            new CrosshairData { Time = "14:40", Value = 301.83 },
            new CrosshairData { Time = "14:45", Value = 303.68 },
            new CrosshairData { Time = "14:50", Value = 303.01 },
            new CrosshairData { Time = "14:55", Value = 303.97 },
            new CrosshairData { Time = "15:00", Value = 303.86 },
            new CrosshairData { Time = "15:05", Value = 306.28 },
            new CrosshairData { Time = "15:10", Value = 304.54 },
            new CrosshairData { Time = "15:15", Value = 304.23 },
            new CrosshairData { Time = "15:20", Value = 301.14 },
            new CrosshairData { Time = "15:25", Value = 302.12 },
            new CrosshairData { Time = "15:30", Value = 301.91 },
            new CrosshairData { Time = "15:35", Value = 304.58 },
            new CrosshairData { Time = "15:40", Value = 302.32 },
            new CrosshairData { Time = "15:45", Value = 302.89 },
            new CrosshairData { Time = "15:50", Value = 302.45 },
            new CrosshairData { Time = "15:55", Value = 302.12 },
            new CrosshairData { Time = "16:00", Value = 302.76 },
            new CrosshairData { Time = "16:05", Value = 303.23 },
            new CrosshairData { Time = "16:10", Value = 303.98 },
            new CrosshairData { Time = "16:15", Value = 304.54 },
            new CrosshairData { Time = "16:20", Value = 304.01 },
            new CrosshairData { Time = "16:25", Value = 304.67 },
            new CrosshairData { Time = "16:30", Value = 305.12 },
            new CrosshairData { Time = "16:35", Value = 305.45 },
            new CrosshairData { Time = "16:40", Value = 306.23 },
            new CrosshairData { Time = "16:45", Value = 306.87 },
            new CrosshairData { Time = "16:50", Value = 306.32 },
            new CrosshairData { Time = "16:55", Value = 307.98 },
            new CrosshairData { Time = "17:00", Value = 310.65 },
            new CrosshairData { Time = "17:05", Value = 309.43 },
            new CrosshairData { Time = "17:10", Value = 308.21 },
            new CrosshairData { Time = "17:15", Value = 307.89 },
            new CrosshairData { Time = "17:20", Value = 307.54 },
            new CrosshairData { Time = "17:25", Value = 305.32 },
            new CrosshairData { Time = "17:30", Value = 305.76 },
            new CrosshairData { Time = "17:35", Value = 304.23 },
            new CrosshairData { Time = "17:40", Value = 304.65 },
            new CrosshairData { Time = "17:45", Value = 304.01 },
            new CrosshairData { Time = "17:50", Value = 304.43 },
            new CrosshairData { Time = "17:55", Value = 305.76 },
            new CrosshairData { Time = "18:00", Value = 305.12 },
            new CrosshairData { Time = "18:05", Value = 306.45 },
            new CrosshairData { Time = "18:10", Value = 306.23 },
            new CrosshairData { Time = "18:15", Value = 304.98 },
            new CrosshairData { Time = "18:20", Value = 304.65 },
            new CrosshairData { Time = "18:25", Value = 304.32 },
            new CrosshairData { Time = "18:30", Value = 304.98 },
            new CrosshairData { Time = "18:35", Value = 303.65 },
            new CrosshairData { Time = "18:40", Value = 303.32 },
            new CrosshairData { Time = "18:45", Value = 303.01 },
            new CrosshairData { Time = "18:50", Value = 302.76 },
            new CrosshairData { Time = "18:55", Value = 301.54 },
            new CrosshairData { Time = "19:00", Value = 301.32 },
            new CrosshairData { Time = "19:05", Value = 301.21 },
            new CrosshairData { Time = "19:10", Value = 300.43 },
            new CrosshairData { Time = "19:15", Value = 300.76 },
            new CrosshairData { Time = "19:20", Value = 301.12 },
            new CrosshairData { Time = "19:25", Value = 301.54 },
            new CrosshairData { Time = "19:30", Value = 300.89 },
            new CrosshairData { Time = "19:35", Value = 300.23 },
            new CrosshairData { Time = "19:40", Value = 300.56 },
            new CrosshairData { Time = "19:45", Value = 299.87 }
    };

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.Material3Dark;
                BorderColor = "#4EAAFF";
                FillColor = String.Concat(ValueUrl, "(#material3-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Material3;
                BorderColor = "#6355C7";
                FillColor = String.Concat(ValueUrl, "(#material3-gradient-chart)");
            }

        }
        else if (CurrentUri.IndexOf("material") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.MaterialDark;
                BorderColor = "#9ECB08";
                FillColor = String.Concat(ValueUrl, "(#material-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Material;
                BorderColor = "#00bdae";
                FillColor = String.Concat(ValueUrl, "(#material-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.FabricDark;
            }
            else
            {
                Theme = Theme.Fabric;
            }
            BorderColor = "#4472c4";
            FillColor = String.Concat(ValueUrl, "(#fabric-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap5") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.Bootstrap5Dark;
                BorderColor = "#FD7E14";
                FillColor = String.Concat(ValueUrl, "(#bootstrap5-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Bootstrap5;
                BorderColor = "#FD7E14";
                FillColor = String.Concat(ValueUrl, "(#bootstrap5-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fluent2") > -1)
        {
            if (CurrentUri.IndexOf("highcontrast") > -1)
            {
                Theme = Theme.Fluent2HighContrast;
                BorderColor = "#9BB449";
                FillColor = String.Concat(ValueUrl, "(#fluent2-highcontrast-gradient-chart)");
            }
            else if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.Fluent2Dark;
                BorderColor = "#9BB449";
                FillColor = String.Concat(ValueUrl, "(#fluent2-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Fluent2;
                BorderColor = "#6200EE";
                FillColor = String.Concat(ValueUrl, "(#fluent2-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("fluent") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.FluentDark;
                BorderColor = "#1AC9E6";
                FillColor = String.Concat(ValueUrl, "(#fluent-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Fluent;
                BorderColor = "#1AC9E6";
                FillColor = String.Concat(ValueUrl, "(#fluent-gradient-chart)");
            }
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Theme = Theme.Bootstrap4;
            BorderColor = "#a16ee5";
            FillColor = String.Concat(ValueUrl, "(#bootstrap4-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.BootstrapDark;
            }
            else
            {
                Theme = Theme.Bootstrap;
            }
            BorderColor = "#a16ee5";
            FillColor = String.Concat(ValueUrl, "(#bootstrap-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Theme = Theme.HighContrast;
            BorderColor = "#79ECE4";
            FillColor = String.Concat(ValueUrl, "(#highcontrast-gradient-chart)");
        }
        else if (CurrentUri.IndexOf("tailwind3") > -1)
        {
            if (CurrentUri.IndexOf("dark") > -1)
            {
                Theme = Theme.Tailwind3Dark;
                BorderColor = "#8029F1";
                FillColor = String.Concat(ValueUrl, "(#tailwind3-dark-gradient-chart)");
            }
            else
            {
                Theme = Theme.Tailwind3;
                BorderColor = "#2F4074";
                FillColor = String.Concat(ValueUrl, "(#tailwind3-gradient-chart)");
            }
        }
        else
        {
            Theme = Theme.Bootstrap4;
            BorderColor = "#a16ee5";
            FillColor = String.Concat(ValueUrl, "(#bootstrap4-gradient-chart)");
        }
    }

    public class CrosshairData
    {
        public string? Time { get; set; }
        public double Value { get; set; }
    }
}