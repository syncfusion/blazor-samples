@page "/chart/stacked-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/stacked-area-chart' aria-label="Navigate to explore the Blazor Stacked Area">Blazor Stacked Area</a> example visualizes the diary product export market with default stacked area series. A legend in the sample shows information about the series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the stacked area chart. This chart visualizes data with y-values stacked one over another in a series order. It shows the relationship between individual values to the total sum of points.</p>
    <p><code>Tooltip</code> is enabled in this example. To see a tooltip in action, hover over or tap on the chart.</p>
    <p>More information about the stacked area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stacked-area' aria-label="Navigate to the documentation for stacked-area in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Diary Products Export Market" SubTitle="Source: fas.usda.gov" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartTooltipSettings Enable="true" EnableHighlight="true" ShowNearestTooltip="true"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true" ></ChartLegendSettings>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="yyyy" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Products Export (in Billions)" Minimum="0" Maximum="6" Interval="1" LabelFormat="{value} B">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" Name="Mexico" XName="Period" Width="2"
                         Opacity="1" YName="Mexico" Type="ChartSeriesType.StackingArea">
                <ChartSeriesBorder Width="1" Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Canada" XName="Period" Width="2"
                         Opacity="1" YName="Canada" Type="ChartSeriesType.StackingArea">
                <ChartSeriesBorder Width="1"  Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="China" XName="Period" Width="2"
                         Opacity="1" YName="China" Type="ChartSeriesType.StackingArea">
                <ChartSeriesBorder Width="1"  Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="South Korea" XName="Period" Width="2"
                         Opacity="1" YName="SouthKorea" Type="ChartSeriesType.StackingArea">
                <ChartSeriesBorder Width="1" Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code {
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StackedAreaChartData> ChartPoints { get; set; } = new List<StackedAreaChartData>
    {
        new StackedAreaChartData { Period = new DateTime(2015, 01, 01), Mexico = 1.26, Canada = 0.62554, China = 0.45161, SouthKorea = 0.30543 },
        new StackedAreaChartData { Period = new DateTime(2016, 01, 01), Mexico = 1.20, Canada = 0.69708, China = 0.38652, SouthKorea = 0.23111 },
        new StackedAreaChartData { Period = new DateTime(2017, 01, 01), Mexico = 1.29, Canada = 0.69938, China = 0.57655, SouthKorea = 0.27875 },
        new StackedAreaChartData { Period = new DateTime(2018, 01, 01), Mexico = 1.37, Canada = 0.69950, China = 0.49785, SouthKorea = 0.29030 },
        new StackedAreaChartData { Period = new DateTime(2019, 01, 01), Mexico = 1.53, Canada = 0.72817, China = 0.37277, SouthKorea = 0.33001 },
        new StackedAreaChartData { Period = new DateTime(2020, 01, 01), Mexico = 1.40, Canada = 0.73609, China = 0.53852, SouthKorea = 0.37009 },
        new StackedAreaChartData { Period = new DateTime(2021, 01, 01), Mexico = 1.79, Canada = 0.85466, China = 0.70072, SouthKorea = 0.42017 },
        new StackedAreaChartData { Period = new DateTime(2022, 01, 01), Mexico = 2.44, Canada = 1.03, China = 0.80281, SouthKorea = 0.56855 },
        new StackedAreaChartData { Period = new DateTime(2023, 01, 01), Mexico = 2.32, Canada = 1.09, China = 0.60730, SouthKorea = 0.32027 },
        new StackedAreaChartData { Period = new DateTime(2024, 01, 01), Mexico = 2.47, Canada = 1.14, China = 0.58400, SouthKorea = 0.38566 },
    };

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public class StackedAreaChartData
    {
        public DateTime Period { get; set; }
        public double Mexico { get; set; }
        public double Canada { get; set; }
        public double China { get; set; }
        public double SouthKorea { get; set; }
    }

}