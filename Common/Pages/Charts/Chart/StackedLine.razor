@page "/chart/stacked-line"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This Blazor Stacked Line Chart example visualizes the yearly renewable energy generation in India from 2015 to 2023.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the stacked line chart. The stacked line chart visualizes data with y-values stacked one over another in a series order. It shows the relationship between individual values to the total sum of points.</p>
    <p><code>Tooltip</code> is enabled in this example. To see a tooltip in action, hover over or tap on the chart.</p>
    <p>More information about the stacked line series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stacked-line' aria-label="Navigate to the documentation for stacked-line in chart component">documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Yearly Renewable Energy Generation in India (2015-2023)" SubTitle="Source: wikipedia.org" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" LabelIntersectAction="@Label" LabelRotation="@Rotation">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}TWh" Title="Energy Generation (TWh)">
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" EnableHighlight="true" ShowNearestTooltip="true" Header="<b>${series.name}</b>" Format="${point.x} : <b>${point.y}</b>"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData1" XName="X" Name="Wind" Width="2"
                         YName="Y" Type="ChartSeriesType.StackingLine">
                <ChartMarker IsFilled="true" Visible="true" Height="7"  Width="7" Shape="ChartShape.Circle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData2" XName="X" Name="Bio mass" Width="2"
                         YName="Y" Type="ChartSeriesType.StackingLine">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData3" XName="X" Name="Small Hydro" Width="2"
                         YName="Y" Type="ChartSeriesType.StackingLine">
                <ChartMarker IsFilled="true" Visible="true" Height="5" Width="5" Shape="ChartShape.Rectangle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData4" XName="X" Name="Solar" Width="2"
                         YName="Y" Type="ChartSeriesType.StackingLine">
                <ChartMarker IsFilled="true" Visible="true" Height="6" Width="6" Shape="ChartShape.Triangle">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public double Rotation { get; set; } = 0;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;
    public class ChartData
    {
        public int X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> ChartData1 = new List<ChartData>
    {
        new ChartData { X = 2015, Y = 28.2 },
        new ChartData { X = 2016, Y = 28.6 },
        new ChartData { X = 2017, Y = 46.0 },
        new ChartData { X = 2018, Y = 52.7 },
        new ChartData { X = 2019, Y = 62.0 },
        new ChartData { X = 2020, Y = 64.6 },
        new ChartData { X = 2021, Y = 60.1 },
        new ChartData { X = 2022, Y = 68.6 },
        new ChartData { X = 2023, Y = 71.81 }
    };

    public List<ChartData> ChartData2 = new List<ChartData>
    {
        new ChartData { X = 2015, Y = 15.0 },
        new ChartData { X = 2016, Y = 16.7 },
        new ChartData { X = 2017, Y = 14.2 },
        new ChartData { X = 2018, Y = 15.3 },
        new ChartData { X = 2019, Y = 16.4 },
        new ChartData { X = 2020, Y = 13.9 },
        new ChartData { X = 2021, Y = 14.8 },
        new ChartData { X = 2022, Y = 16.1 },
        new ChartData { X = 2023, Y = 16.02 }
    };

    public List<ChartData> ChartData3 = new List<ChartData>
    {
        new ChartData { X = 2015, Y = 8.1 },
        new ChartData { X = 2016, Y = 8.4 },
        new ChartData { X = 2017, Y = 7.73 },
        new ChartData { X = 2018, Y = 5.1 },
        new ChartData { X = 2019, Y = 8.7 },
        new ChartData { X = 2020, Y = 9.4 },
        new ChartData { X = 2021, Y = 10.3 },
        new ChartData { X = 2022, Y = 10.4 },
        new ChartData { X = 2023, Y = 11.17 }
    };

    public List<ChartData> ChartData4 = new List<ChartData>
    {
        new ChartData { X = 2015, Y = 4.6 },
        new ChartData { X = 2016, Y = 7.5 },
        new ChartData { X = 2017, Y = 12.1 },
        new ChartData { X = 2018, Y = 25.9 },
        new ChartData { X = 2019, Y = 39.3 },
        new ChartData { X = 2020, Y = 50.1 },
        new ChartData { X = 2021, Y = 60.4 },
        new ChartData { X = 2022, Y = 73.5 },
        new ChartData { X = 2023, Y = 102.01 }
    };

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            Width = "100%";
            Rotation = -45;
        }
    }

}
