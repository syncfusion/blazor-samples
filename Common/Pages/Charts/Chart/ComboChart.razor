

@page "/chart/combo-chart"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes wages, benefits, and total compensation across various worker sectors using line, column, and pie charts.</p>
</SampleDescription>

<ActionDescription>
    <p>In this example, a combo chart is created by combining column and line series to represent wage and benefit distributions across worker sectors. The columns display sector-specific data, while the line highlights trends in average compensation. Additionally, a pie chart breaks down total compensation based on the data from the column chart.</p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point on touch-enabled devices.
    </p>
    <p>
        More information about the mixed chart can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-series#combination-chart-series' aria-label="Navigate to the documentation for mixed chart">documentation section</a>.
    </p>
</ActionDescription>

<div class="control-section" align='center' style="position: relative;">
    <SfChart Width="@Width" Theme="@Theme"
        Title="Breakdown of Employer Costs Per Hour Worked for Employee Compensation â€“ September 2024">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="20" Maximum="100" LabelFormat="${value}">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartAnnotations>
	        <ChartAnnotation X="@data" Y="23" Region="Regions.Series" CoordinateUnits="Units.Point">
	            <ContentTemplate>
	                <div style="font-size:14px;font-weight:600; text-align: center; display:@Display">Average</div>
	            </ContentTemplate>
	        </ChartAnnotation>
        </ChartAnnotations>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartEvents OnLegendClick="OnLegendClick"></ChartEvents>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" XName="Category" YName="CivilianWorkers"
                Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column" Name="Civilian Workers"
                LegendShape="LegendShape.Circle" ColumnWidth="0.7" ColumnSpacing="0.1" CornerRadius="@(new ChartCornerRadius { TopLeft = 8, TopRight = 5})"></ChartSeries>
            <ChartSeries DataSource="@DataSource" XName="Category" YName="PrivateIndustryWorkers"
                Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column" Name="Private Industry Workers"
                LegendShape="LegendShape.Circle" ColumnWidth="0.7" ColumnSpacing="0.1" CornerRadius="@(new ChartCornerRadius { TopLeft = 8, TopRight = 5})"></ChartSeries>
            <ChartSeries DataSource="@DataSource" XName="Category" YName="StateLocalGovernmentWorkers"
                Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column" Name="State Local Government Workers"
                LegendShape="LegendShape.Circle" ColumnWidth="0.7" ColumnSpacing="0.1" CornerRadius="@(new ChartCornerRadius { TopLeft = 8, TopRight = 5})"></ChartSeries>
            <ChartSeries DataSource="@DataSource" XName="Category" YName="Average"
                Type="Syncfusion.Blazor.Charts.ChartSeriesType.Line" Name="Average" Width="2">
                <ChartMarker Visible="true"></ChartMarker>
            </ChartSeries>
            <div style="position: absolute; top: 12%; right: 10%; background-color: transparent;">
                <SfAccumulationChart EnableBorderOnMouseMove="false" Background="transparent" Width="150px"
                    Height="150px" Theme="@Theme">   
                    <AccumulationChartAnnotations>
                        <AccumulationChartAnnotation Region="Regions.Series" X="50%" Y="50%">
                            <ContentTemplate>
                                <div style="font-size:14px; font-weight:600; text-align: center;">
                                    $308.32
                                </div>
                            </ContentTemplate>
                        </AccumulationChartAnnotation>
                    </AccumulationChartAnnotations>
                    <AccumulationChartTooltipSettings Header="" Format="<b>${point.x}</b><br>Total: <b>$${point.y}</b>"
                        Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@DataSource" XName="Category" YName="Total"
                            Radius="90%" InnerRadius="60%" Explode="false">
                            <AccumulationDataLabelSettings Visible="false"></AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                </SfAccumulationChart>
            </div>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code {


    private string data = "Total Benefits";
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    string Display ="block";
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public class Data
    {
        public string? Category { get; set; }
        public double CivilianWorkers { get; set; }
        public double PrivateIndustryWorkers { get; set; }
        public double StateLocalGovernmentWorkers { get; set; }
        public double Average { get; set; }
        public double Total { get; set; }
    }

    private List<Data> DataSource = new List<Data>
    {
        new Data { Category = "Total Compensation", CivilianWorkers = 46.84, PrivateIndustryWorkers = 44.40,
        StateLocalGovernmentWorkers = 62.92, Average = 51.38, Total= 154.16 },
        new Data { Category = "Wages and Salaries", CivilianWorkers = 32.25, PrivateIndustryWorkers = 31.25,
        StateLocalGovernmentWorkers = 38.86, Average = 34.12, Total= 102.36 },
        new Data { Category = "Total Benefits", CivilianWorkers = 14.59, PrivateIndustryWorkers = 13.15,
        StateLocalGovernmentWorkers = 24.06, Average = 17.26, Total= 51.8 }
    };

    public void OnLegendClick(LegendClickEventArgs args)
    { 
        if(args.Series.Name == "Average")
        {
            if(Display == "block")
            {
                Display ="none";
            }
            else
            {
                Display = "block";
            }
        }
    }
}
