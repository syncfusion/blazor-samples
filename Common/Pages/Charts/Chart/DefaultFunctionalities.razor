@page "/chart/line"

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using ThemeHelper

@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/line-chart' aria-label="Navigate to explore the Blazor Line Chart">Blazor Line Chart</a> example represents the crude steel production annual growth data with default line series in the chart. Data points are enhanced with markers and tooltips.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the line type charts. Line type charts are used to represent time-dependent data, showing trends in data at equal intervals. You can use <code>DashArray</code>, <code>Width</code>, <code>Fill</code> properties to customize the line. <code>ChartMarker</code> and <code>ChartDataLabel</code> are used to represent individual data and its value.</p>
    <p>
        <code>Tooltips</code> are enabled in this example. To see a tooltip in action, hover over or tap on the chart. The <code>EnableHighlight</code> property in the tooltip allows the corresponding series to be highlighted when a data point is hovered over. The <code>ShowNearestTooltip</code> property displays tooltips for the nearest data point to the cursor.
    </p>
    <p>
        More information about the line series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/line' aria-label="Navigate to the documentation for line chart">documentation section</a>.
    </p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Annual Crude Steel Production by Country (2016–2024)" SubTitle="Source: wikipedia.org" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Volume in million metric tons" Minimum="0" Interval="5" Maximum="25" RangePadding="ChartRangePadding.None">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" EnableHighlight="true" ShowNearestTooltip="true" Header="<b>${series.name}</b>" Format="${point.x} : <b>${point.y}M</b>"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@VietnamData" Name="Vietnam" XName="X" Width="2"
                         Opacity="1" YName="Y" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="7" Height="7" IsFilled="true" Shape="ChartShape.Circle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@IndonesiaData" Name="Indonesia" XName="X" Width="2"
                         Opacity="1" YName="Y" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="6" IsFilled="true" Height="6" Shape="ChartShape.Triangle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@FranceData" Name="France" XName="X" Width="2"
                         Opacity="1" YName="Y" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="7" IsFilled="true" Height="7" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@PolandData" Name="Poland" XName="X" Width="2"
                         Opacity="1" YName="Y" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="5" IsFilled="true" Height="5" Shape="ChartShape.Rectangle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@MexicoData" Name="Mexico" XName="X" Width="2"
                         Opacity="1" YName="Y" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Width="7" IsFilled="true"  Height="7" Shape="ChartShape.Pentagon">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
    </SfChart>
</div>

@code{

    
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";

    protected override void OnInitialized()
    {
        
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

   public class ChartData
    {
        public DateTime X { get; set; }
        public double Y { get; set; }
    }

    public List<ChartData> VietnamData = new List<ChartData>
    {
       new ChartData { X = new DateTime(2016, 01, 01), Y = 7.8 },
       new ChartData { X = new DateTime(2017, 01, 01), Y = 10.3 },
       new ChartData { X = new DateTime(2018, 01, 01), Y = 15.5 },
       new ChartData { X = new DateTime(2019, 01, 01), Y = 17.5 },
       new ChartData { X = new DateTime(2020, 01, 01), Y = 19.5 },
       new ChartData { X = new DateTime(2021, 01, 01), Y = 23.0 },
       new ChartData { X = new DateTime(2022, 01, 01), Y = 20.0 },
       new ChartData { X = new DateTime(2023, 01, 01), Y = 19.0 },
       new ChartData { X = new DateTime(2024, 01, 01), Y = 22.1 }
    };

    public List<ChartData> IndonesiaData = new List<ChartData>
    {
       new ChartData { X = new DateTime(2016, 01, 01), Y = 4.8 },
       new ChartData { X = new DateTime(2017, 01, 01), Y = 5.2 },
       new ChartData { X = new DateTime(2018, 01, 01), Y = 6.2 },
       new ChartData { X = new DateTime(2019, 01, 01), Y = 7.8 },
       new ChartData { X = new DateTime(2020, 01, 01), Y = 9.3 },
       new ChartData { X = new DateTime(2021, 01, 01), Y = 14.3 },
       new ChartData { X = new DateTime(2022, 01, 01), Y = 15.6 },
       new ChartData { X = new DateTime(2023, 01, 01), Y = 16.0 },
       new ChartData { X = new DateTime(2024, 01, 01), Y = 17.0 }
    };

    public List<ChartData> FranceData = new List<ChartData>
    {
       new ChartData { X = new DateTime(2016, 01, 01), Y = 14.6 },
       new ChartData { X = new DateTime(2017, 01, 01), Y = 15.5 },
       new ChartData { X = new DateTime(2018, 01, 01), Y = 15.4 },
       new ChartData { X = new DateTime(2019, 01, 01), Y = 14.4 },
       new ChartData { X = new DateTime(2020, 01, 01), Y = 11.6 },
       new ChartData { X = new DateTime(2021, 01, 01), Y = 13.9 },
       new ChartData { X = new DateTime(2022, 01, 01), Y = 12.1 },
       new ChartData { X = new DateTime(2023, 01, 01), Y = 10.0 },
       new ChartData { X = new DateTime(2024, 01, 01), Y = 10.8 }
    };

    public List<ChartData> PolandData = new List<ChartData>
    {
       new ChartData { X = new DateTime(2016, 01, 01), Y = 8.9 },
       new ChartData { X = new DateTime(2017, 01, 01), Y = 10.3 },
       new ChartData { X = new DateTime(2018, 01, 01), Y = 10.8 },
       new ChartData { X = new DateTime(2019, 01, 01), Y = 9.0 },
       new ChartData { X = new DateTime(2020, 01, 01), Y = 7.9 },
       new ChartData { X = new DateTime(2021, 01, 01), Y = 8.5 },
       new ChartData { X = new DateTime(2022, 01, 01), Y = 7.4 },
       new ChartData { X = new DateTime(2023, 01, 01), Y = 6.4 },
       new ChartData { X = new DateTime(2024, 01, 01), Y = 7.1 }
    };

    public List<ChartData> MexicoData = new List<ChartData>
    {
       new ChartData { X = new DateTime(2016, 01, 01), Y = 19.0 },
       new ChartData { X = new DateTime(2017, 01, 01), Y = 20.0 },
       new ChartData { X = new DateTime(2018, 01, 01), Y = 20.2 },
       new ChartData { X = new DateTime(2019, 01, 01), Y = 18.4 },
       new ChartData { X = new DateTime(2020, 01, 01), Y = 16.8 },
       new ChartData { X = new DateTime(2021, 01, 01), Y = 18.5 },
       new ChartData { X = new DateTime(2022, 01, 01), Y = 18.4 },
       new ChartData { X = new DateTime(2023, 01, 01), Y = 16.3 },
       new ChartData { X = new DateTime(2024, 01, 01), Y = 13.7 }
    };
}