@page "/chart/column-rotated-labels"

@using Syncfusion.Blazor
@using ThemeHelper
@using PointRender
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the profit analysis across different companies with a column chart.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can learn how to render and configure a column chart with rotated axis labels and data labels, improving the visibility of longer text or dense data categories.</p>
    <p>To rotate the labels on the x-axis, set the rotation angle using the <code>LabelRotation</code> property of the <code>ChartPrimaryXAxis</code>. To rotate the data labels, set the <code>EnableRotation</code> property to <b>true</b> and specify the rotation angle using the <code>Angle</code> property of the <code>ChartDataLabel</code>.</p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.
    </p>
    <p>
        More information about the axis labels can be found in this 
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/chart/axis-labels" aria-label="Navigate to the documentation for axis labels in chart">
            documentation section
        </a>.
    </p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Annual Profit Overview of Major Companies in 2024" SubTitle="Source: wikipedia.org" Width="@Width" Theme="@Theme">
        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelRotation="-45">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartEvents OnPointRender="PointRender" TooltipRender="TooltipRender" OnDataLabelRender="OnDataLabelRender" OnAxisLabelRender="OnAxisLabelRender"></ChartEvents>
        <ChartPrimaryYAxis Title="Profit (in USD millions)">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries Fill="url(#grad1)" Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column"
                DataSource="@CompanyDetails" XName="Name" YName="Profit">
                <ChartCornerRadius TopLeft="4" TopRight="4"></ChartCornerRadius>
                <ChartMarker>
                    <ChartDataLabel Visible="true" EnableRotation="true" Angle="-90" Position="LabelPosition.Top">
                        <ChartDataLabelFont Color="White" Size="13px"></ChartDataLabelFont>
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartTooltipSettings Enable="true" EnableHighlight="true" Header="2024"></ChartTooltipSettings>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
    </SfChart>
</div>
<style>
    [id*="_Text_0"] {
        text-shadow: 1px 1px black;
    }
</style>

@code {


    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";

    private List<Company> CompanyDetails = new List<Company>
    {
        new Company { Name = "ExxonMobil", Country = "United States", Profit = 36010 },
        new Company { Name = "UnitedHealth Group", Country = "United States", Profit = 22381 },
        new Company { Name = "TotalEnergies", Country = "France", Profit = 21384 },
        new Company { Name = "Chevron", Country = "United States", Profit = 21369 },
        new Company { Name = "Shell", Country = "United Kingdom", Profit = 19359 },
        new Company { Name = "Schwarz Gruppe", Country = "Germany", Profit = 16988 },
        new Company { Name = "Walmart", Country = "United States", Profit = 15511 },
        new Company { Name = "Amazon", Country = "United States", Profit = 15511 },
        new Company { Name = "BP", Country = "United Kingdom", Profit = 15239 },
        new Company { Name = "Vitol", Country = "Switzerland", Profit = 13000 },
        new Company { Name = "CVS Health", Country = "United States", Profit = 8344 },
        new Company { Name = "Trafigura", Country = "Singapore", Profit = 7393 }
    };

    public class Company
    {
        public string? Name { get; set; }
        public string? Country { get; set; }
        public double Profit { get; set; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService != null && SampleService.IsDevice)
        {
            Width = "100%";
        }
        this.SetTheme(null!);
    }

    public void PointRender(PointRenderEventArgs args)
    {
        this.SetTheme(args);
    }

     private void SetTheme(PointRenderEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Material3Dark;
                else
                    args.Fill = PointColor.Material3DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.Material3Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                    args.Fill = PointColor.MaterialDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                    args.Fill = PointColor.MaterialColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                    args.Fill = PointColor.FabricColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (args == null)
            {
                if (NavigationManager.Uri.IndexOf("dark") > -1)
                {
                    Theme = Theme.Bootstrap5Dark;
                }
                else
                {
                    Theme = Theme.Bootstrap5;
                }
            }
            else
            {
                args.Fill = PointColor.Bootstrap5Colors[args.Point.Index % PointColor.Bootstrap5Colors.Count];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent2") > -1)
        {
            if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2HighContrast;
                else
                    args.Fill = PointColor.Fluent2HighContrastColors[args.Point.Index % 10];
            }
            else if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Fluent2Dark;
                else
                    args.Fill = PointColor.Fluent2DarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent2;
                else
                    args.Fill = PointColor.Fluent2Colors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                    args.Fill = PointColor.FluentDarkColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                    args.Fill = PointColor.FluentColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                    args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind3") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Tailwind3Dark;
                else
                    args.Fill = PointColor.Tailwind3DarkColors[args.Point.Index % 8];
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind3;
                else
                    args.Fill = PointColor.Tailwind3Colors[args.Point.Index % 8];
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
                args.Fill = PointColor.HighContrastColors[args.Point.Index % 10];
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
                args.Fill = PointColor.BootstrapColors[args.Point.Index % 10];
        }
    }

    public void OnAxisLabelRender(AxisLabelRenderEventArgs args)
    {
       if (args.Value >= 1000)
        {
            args.Text = (args.Value / 1000).ToString("0") + "K";
        }
    }

    public void OnDataLabelRender(TextRenderEventArgs args)
    {
        double text = Convert.ToDouble(args.Text);
        string value = text.ToString("N0", System.Globalization.CultureInfo.CurrentCulture);
        args.Text = value;
    }

    public void TooltipRender(TooltipRenderEventArgs args)
    { 
        double pointYValue = Convert.ToDouble(args.Data.PointY);
        string value = pointYValue.ToString("N0", System.Globalization.CultureInfo.CurrentCulture);
        args.Text = $"{args.Data.PointX}: <b>${value}</b>";
    }
}
