@page "/gantt-chart/timezone"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using System.IO
@using System.Net
@using ej2_blazor_timezonedata
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@


<SampleDescription>
    <p>
        This example demonstrates how to plan and coordinate a multi-region marketing campaign using the Gantt Chart component. It showcases automatic adjustment of task dates and times based on the selected timezone, ensuring consistent scheduling accuracy across different geographic locations.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_Timezone" target="_blank">Timezone</a>
        property ensures all dates such as task start/end, baselines, indicators, and event markers are displayed according to the selected timezone.
        A dropdown enables switching between timezones at runtime, updating the chart instantly without needing a page reload.
    </p>
    <p>
        The component also handles Daylight Saving Time (DST) automatically, ensuring schedule accuracy throughout the year.
        This helps teams plan and coordinate projects across regions with consistent time references.
    </p>
    <p>
        For more details, refer to the
        <a aria-label="Navigate to the documentation for timezone support in Gantt Chart" target="_blank" href="https://blazor.syncfusion.com/documentation/gantt-chart/timezone">
            documentation section.
        </a>
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt @ref="GanttInstance" DataSource="@TaskCollection" Toolbar="@toolbarItems" DateFormat="MMM dd, hh:mm tt" IncludeWeekend="true" DurationUnit="DurationUnit.Hour" Height="550px" Timezone="@TimeZone" Width="100%" ProjectStartDate="@projectStart"
                     AllowSelection="true" TreeColumnIndex="1"
                     ScrollToTaskbarOnClick="true">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 Dependency="Predecessor" ParentID="ParentId"></GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="TaskId" Width="100" Visible="false"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency"></GanttColumn>
                </GanttColumns>
                <GanttDayWorkingTimeCollection>
                    <GanttDayWorkingTime From="0" To="24"></GanttDayWorkingTime>
                </GanttDayWorkingTimeCollection>
                <GanttEventMarkers>
                    <GanttEventMarker Day="new DateTime(2025, 10, 10, 11, 0, 0)" Label="Executive Brief & Stakeholder Sync"></GanttEventMarker>
                    <GanttEventMarker Day="new DateTime(2025, 10, 12, 03, 0, 0)" Label="Creative & Copy Approved"></GanttEventMarker>
                    <GanttEventMarker Day="new DateTime(2025, 10, 12, 07, 0, 0)" Label="First Ad Campaign Live"></GanttEventMarker>
                    <GanttEventMarker Day="new DateTime(2025, 10, 13, 10, 0, 0)" Label="Campaign Wrap-Up"></GanttEventMarker>
                </GanttEventMarkers>
                <GanttLabelSettings LeftLabel="TaskName" TValue="TimezoneData.TaskData"></GanttLabelSettings>
                <GanttSplitterSettings ColumnIndex="2"></GanttSplitterSettings>
                <GanttTimelineSettings TimelineViewMode="@TimelineViewMode" TimelineUnitSize="50">
                    <GanttTopTierSettings Unit="TimelineViewMode.Day" Format="@TopFormat"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Hour" Format="@BottomFormat"></GanttBottomTierSettings>
                </GanttTimelineSettings>
                <GanttEvents Created="OnGanttCreatedHandler" TValue="TimezoneData.TaskData"></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>
@code {
    private List<TimezoneData.TaskData>? TaskCollection { get; set; }
    private SfGantt<TimezoneData.TaskData>? GanttInstance;
    private List<Object>? toolbarItems;
    public string TimeZone { get; set; } = TimeZoneValues[21].Id!;
    public TimelineViewMode TimelineViewMode { get; set; } = TimelineViewMode.Day;
    public string TopFormat { get; set; } = "MMM dd, yyyy";
    public string BottomFormat { get; set; } = "hh tt";
    public DateTime projectStart = new DateTime(2025, 10, 09);
    public class TimeZoneFields
    {
        public string? Id { get; set; }
        public string? Text { get; set; }
    }
    private static List<TimeZoneFields> TimeZoneValues = new List<TimeZoneFields>()
    {
        new TimeZoneFields { Id = "Etc/GMT+12", Text = "(UTC-12:00) International Date Line West" },
        new TimeZoneFields { Id = "Etc/GMT+11", Text = "(UTC-11:00) Coordinated Universal Time-11" },
        new TimeZoneFields { Id = "America/Adak", Text = "(UTC-10:00) Aleutian Islands" },
        new TimeZoneFields { Id = "Pacific/Honolulu", Text = "(UTC-10:00) Hawaii" },
        new TimeZoneFields { Id = "Pacific/Marquesas", Text = "(UTC-09:30) Marquesas Islands" },
        new TimeZoneFields { Id = "America/Anchorage", Text = "(UTC-09:00) Alaska" },
        new TimeZoneFields { Id = "Etc/GMT+9", Text = "(UTC-09:00) Coordinated Universal Time-09" },
        new TimeZoneFields { Id = "America/Tijuana", Text = "(UTC-08:00) Baja California" },
        new TimeZoneFields { Id = "Etc/GMT+8", Text = "(UTC-08:00) Coordinated Universal Time-08" },
        new TimeZoneFields { Id = "America/Los_Angeles", Text = "(UTC-08:00) Pacific Time (US & Canada)" },
        new TimeZoneFields { Id = "America/Phoenix", Text = "(UTC-07:00) Arizona" },
        new TimeZoneFields { Id = "America/Chihuahua", Text = "(UTC-07:00) Chihuahua, La Paz, Mazatlan" },
        new TimeZoneFields { Id = "America/Denver", Text = "(UTC-07:00) Mountain Time (US & Canada)" },
        new TimeZoneFields { Id = "America/Whitehorse", Text = "(UTC-07:00) Yukon" },
        new TimeZoneFields { Id = "America/Guatemala", Text = "(UTC-06:00) Central America" },
        new TimeZoneFields { Id = "America/Chicago", Text = "(UTC-06:00) Central Time (US & Canada)" },
        new TimeZoneFields { Id = "Pacific/Easter", Text = "(UTC-06:00) Easter Island" },
        new TimeZoneFields { Id = "America/Mexico_City", Text = "(UTC-06:00) Guadalajara, Mexico City, Monterrey" },
        new TimeZoneFields { Id = "America/Regina", Text = "(UTC-06:00) Saskatchewan" },
        new TimeZoneFields { Id = "America/Bogota", Text = "(UTC-05:00) Bogota, Lima, Quito, Rio Branco" },
        new TimeZoneFields { Id = "America/Cancun", Text = "(UTC-05:00) Chetumal" },
        new TimeZoneFields { Id = "America/New_York", Text = "(UTC-05:00) Eastern Time (US & Canada)" },
        new TimeZoneFields { Id = "America/Port-au-Prince", Text = "(UTC-05:00) Haiti" },
        new TimeZoneFields { Id = "America/Havana", Text = "(UTC-05:00) Havana" },
        new TimeZoneFields { Id = "America/Indiana/Indianapolis", Text = "(UTC-05:00) Indiana (East)" },
        new TimeZoneFields { Id = "America/Grand_Turk", Text = "(UTC-04:00) Turks and Caicos" },
        new TimeZoneFields { Id = "America/Asuncion", Text = "(UTC-04:00) Asuncion" },
        new TimeZoneFields { Id = "America/Halifax", Text = "(UTC-04:00) Atlantic Time (Canada)" },
        new TimeZoneFields { Id = "America/Caracas", Text = "(UTC-04:00) Caracas" },
        new TimeZoneFields { Id = "America/Cuiaba", Text = "(UTC-04:00) Cuiaba" },
        new TimeZoneFields { Id = "America/La_Paz", Text = "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan" },
        new TimeZoneFields { Id = "America/Santiago", Text = "(UTC-04:00) Santiago" },
        new TimeZoneFields { Id = "America/St_Johns", Text = "(UTC-03:30) Newfoundland" },
        new TimeZoneFields { Id = "America/Araguaina", Text = "(UTC-03:00) Araguaina" },
        new TimeZoneFields { Id = "America/Sao_Paulo", Text = "(UTC-03:00) Brasilia" },
        new TimeZoneFields { Id = "America/Cayenne", Text = "(UTC-03:00) Cayenne, Fortaleza" },
        new TimeZoneFields { Id = "America/Argentina/Buenos_Aires", Text = "(UTC-03:00) City of Buenos Aires" },
        new TimeZoneFields { Id = "America/Godthab", Text = "(UTC-03:00) Greenland" },
        new TimeZoneFields { Id = "America/Montevideo", Text = "(UTC-03:00) Montevideo" },
        new TimeZoneFields { Id = "America/Punta_Arenas", Text = "(UTC-03:00) Punta Arenas" },
        new TimeZoneFields { Id = "America/Miquelon", Text = "(UTC-03:00) Saint Pierre and Miquelon" },
        new TimeZoneFields { Id = "America/Bahia", Text = "(UTC-03:00) Salvador" },
        new TimeZoneFields { Id = "Etc/GMT+2", Text = "(UTC-02:00) Coordinated Universal Time-02" },
        new TimeZoneFields { Id = "Atlantic/Azores", Text = "(UTC-01:00) Azores" },
        new TimeZoneFields { Id = "Atlantic/Cape_Verde", Text = "(UTC-01:00) Cabo Verde Is." },
        new TimeZoneFields { Id = "Etc/UTC", Text = "(UTC) Coordinated Universal Time" },
        new TimeZoneFields { Id = "Europe/London", Text = "(UTC+00:00) Dublin, Edinburgh, Lisbon, London" },
        new TimeZoneFields { Id = "Atlantic/Reykjavik", Text = "(UTC+00:00) Monrovia, Reykjavik" },
        new TimeZoneFields { Id = "Africa/Sao_Tome", Text = "(UTC+00:00) Sao Tome" },
        new TimeZoneFields { Id = "Europe/Berlin", Text = "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna" },
        new TimeZoneFields { Id = "Europe/Budapest", Text = "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague" },
        new TimeZoneFields { Id = "Europe/Paris", Text = "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris" },
        new TimeZoneFields { Id = "Europe/Warsaw", Text = "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb" },
        new TimeZoneFields { Id = "Africa/Lagos", Text = "(UTC+01:00) West Central Africa" },
        new TimeZoneFields { Id = "Asia/Amman", Text = "(UTC+02:00) Amman" },
        new TimeZoneFields { Id = "Europe/Bucharest", Text = "(UTC+02:00) Athens, Bucharest" },
        new TimeZoneFields { Id = "Asia/Beirut", Text = "(UTC+02:00) Beirut" },
        new TimeZoneFields { Id = "Africa/Cairo", Text = "(UTC+02:00) Cairo" },
        new TimeZoneFields { Id = "Europe/Chisinau", Text = "(UTC+02:00) Chisinau" },
        new TimeZoneFields { Id = "Asia/Damascus", Text = "(UTC+02:00) Damascus" },
        new TimeZoneFields { Id = "Asia/Hebron", Text = "(UTC+02:00) Gaza, Hebron" },
        new TimeZoneFields { Id = "Africa/Harare", Text = "(UTC+02:00) Harare, Pretoria" },
        new TimeZoneFields { Id = "Europe/Kiev", Text = "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius" },
        new TimeZoneFields { Id = "Asia/Jerusalem", Text = "(UTC+02:00) Jerusalem" },
        new TimeZoneFields { Id = "Europe/Kaliningrad", Text = "(UTC+02:00) Kaliningrad" },
        new TimeZoneFields { Id = "Africa/Khartoum", Text = "(UTC+02:00) Khartoum" },
        new TimeZoneFields { Id = "Africa/Tripoli", Text = "(UTC+02:00) Tripoli" },
        new TimeZoneFields { Id = "Africa/Windhoek", Text = "(UTC+02:00) Windhoek" },
        new TimeZoneFields { Id = "Asia/Baghdad", Text = "(UTC+03:00) Baghdad" },
        new TimeZoneFields { Id = "Europe/Istanbul", Text = "(UTC+03:00) Istanbul" },
        new TimeZoneFields { Id = "Asia/Riyadh", Text = "(UTC+03:00) Kuwait, Riyadh" },
        new TimeZoneFields { Id = "Europe/Minsk", Text = "(UTC+03:00) Minsk" },
        new TimeZoneFields { Id = "Europe/Moscow", Text = "(UTC+03:00) Moscow, St. Petersburg" },
        new TimeZoneFields { Id = "Africa/Nairobi", Text = "(UTC+03:00) Nairobi" },
        new TimeZoneFields { Id = "Europe/Volgograd", Text = "(UTC+03:00) Volgograd" },
        new TimeZoneFields { Id = "Asia/Tehran", Text = "(UTC+03:30) Tehran" },
        new TimeZoneFields { Id = "Asia/Dubai", Text = "(UTC+04:00) Abu Dhabi, Muscat" },
        new TimeZoneFields { Id = "Europe/Astrakhan", Text = "(UTC+04:00) Astrakhan, Ulyanovsk" },
        new TimeZoneFields { Id = "Asia/Baku", Text = "(UTC+04:00) Baku" },
        new TimeZoneFields { Id = "Europe/Samara", Text = "(UTC+04:00) Izhevsk, Samara" },
        new TimeZoneFields { Id = "Indian/Mauritius", Text = "(UTC+04:00) Port Louis" },
        new TimeZoneFields { Id = "Europe/Saratov", Text = "(UTC+04:00) Saratov" },
        new TimeZoneFields { Id = "Asia/Tbilisi", Text = "(UTC+04:00) Tbilisi" },
        new TimeZoneFields { Id = "Asia/Yerevan", Text = "(UTC+04:00) Yerevan" },
        new TimeZoneFields { Id = "Asia/Kabul", Text = "(UTC+04:30) Kabul" },
        new TimeZoneFields { Id = "Asia/Tashkent", Text = "(UTC+05:00) Ashgabat, Tashkent" },
        new TimeZoneFields { Id = "Asia/Yekaterinburg", Text = "(UTC+05:00) Ekaterinburg" },
        new TimeZoneFields { Id = "Asia/Karachi", Text = "(UTC+05:00) Islamabad, Karachi" },
        new TimeZoneFields { Id = "Asia/Qyzylorda", Text = "(UTC+05:00) Qyzylorda" },
        new TimeZoneFields { Id = "Asia/Kolkata", Text = "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi" },
        new TimeZoneFields { Id = "Asia/Colombo", Text = "(UTC+05:30) Sri Jayawardenepura" },
        new TimeZoneFields { Id = "Asia/Kathmandu", Text = "(UTC+05:45) Kathmandu" },
        new TimeZoneFields { Id = "Asia/Almaty", Text = "(UTC+06:00) Astana" },
        new TimeZoneFields { Id = "Asia/Dhaka", Text = "(UTC+06:00) Dhaka" },
        new TimeZoneFields { Id = "Asia/Omsk", Text = "(UTC+06:00) Omsk" },
        new TimeZoneFields { Id = "Asia/Yangon", Text = "(UTC+06:30) Yangon (Rangoon)" },
        new TimeZoneFields { Id = "Asia/Bangkok", Text = "(UTC+07:00) Bangkok, Hanoi, Jakarta" },
        new TimeZoneFields { Id = "Asia/Barnaul", Text = "(UTC+07:00) Barnaul, Gorno-Altaysk" },
        new TimeZoneFields { Id = "Asia/Hovd", Text = "(UTC+07:00) Hovd" },
        new TimeZoneFields { Id = "Asia/Krasnoyarsk", Text = "(UTC+07:00) Krasnoyarsk" },
        new TimeZoneFields { Id = "Asia/Novosibirsk", Text = "(UTC+07:00) Novosibirsk" },
        new TimeZoneFields { Id = "Asia/Tomsk", Text = "(UTC+07:00) Tomsk" },
        new TimeZoneFields { Id = "Asia/Shanghai", Text = "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi" },
        new TimeZoneFields { Id = "Asia/Irkutsk", Text = "(UTC+08:00) Irkutsk" },
        new TimeZoneFields { Id = "Asia/Singapore", Text = "(UTC+08:00) Kuala Lumpur, Singapore" },
        new TimeZoneFields { Id = "Australia/Perth", Text = "(UTC+08:00) Perth" },
        new TimeZoneFields { Id = "Asia/Taipei", Text = "(UTC+08:00) Taipei" },
        new TimeZoneFields { Id = "Asia/Ulaanbaatar", Text = "(UTC+08:00) Ulaanbaatar" },
        new TimeZoneFields { Id = "Australia/Eucla", Text = "(UTC+08:45) Eucla" },
        new TimeZoneFields { Id = "Asia/Chita", Text = "(UTC+09:00) Chita" },
        new TimeZoneFields { Id = "Asia/Tokyo", Text = "(UTC+09:00) Osaka, Sapporo, Tokyo" },
        new TimeZoneFields { Id = "Asia/Pyongyang", Text = "(UTC+09:00) Pyongyang" },
        new TimeZoneFields { Id = "Asia/Seoul", Text = "(UTC+09:00) Seoul" },
        new TimeZoneFields { Id = "Asia/Yakutsk", Text = "(UTC+09:00) Yakutsk" },
        new TimeZoneFields { Id = "Australia/Adelaide", Text = "(UTC+09:30) Adelaide" },
        new TimeZoneFields { Id = "Australia/Darwin", Text = "(UTC+09:30) Darwin" },
        new TimeZoneFields { Id = "Australia/Brisbane", Text = "(UTC+10:00) Brisbane" },
        new TimeZoneFields { Id = "Australia/Sydney", Text = "(UTC+10:00) Canberra, Melbourne, Sydney" },
        new TimeZoneFields { Id = "Pacific/Port_Moresby", Text = "(UTC+10:00) Guam, Port Moresby" },
        new TimeZoneFields { Id = "Australia/Hobart", Text = "(UTC+10:00) Hobart" },
        new TimeZoneFields { Id = "Asia/Vladivostok", Text = "(UTC+10:00) Vladivostok" },
        new TimeZoneFields { Id = "Australia/Lord_Howe", Text = "(UTC+10:30) Lord Howe Island" },
        new TimeZoneFields { Id = "Pacific/Bougainville", Text = "(UTC+11:00) Bougainville Island" },
        new TimeZoneFields { Id = "Asia/Srednekolymsk", Text = "(UTC+11:00) Chokurdakh" },
        new TimeZoneFields { Id = "Asia/Magadan", Text = "(UTC+11:00) Magadan" },
        new TimeZoneFields { Id = "Pacific/Norfolk", Text = "(UTC+11:00) Norfolk Island" },
        new TimeZoneFields { Id = "Asia/Sakhalin", Text = "(UTC+11:00) Sakhalin" },
        new TimeZoneFields { Id = "Pacific/Guadalcanal", Text = "(UTC+11:00) Solomon Is., New Caledonia" },
        new TimeZoneFields { Id = "Asia/Kamchatka", Text = "(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky" },
        new TimeZoneFields { Id = "Pacific/Auckland", Text = "(UTC+12:00) Auckland, Wellington" },
        new TimeZoneFields { Id = "Etc/GMT-12", Text = "(UTC+12:00) Coordinated Universal Time+12" },
        new TimeZoneFields { Id = "Pacific/Fiji", Text = "(UTC+12:00) Fiji" },
        new TimeZoneFields { Id = "Pacific/Chatham", Text = "(UTC+12:45) Chatham Islands" },
        new TimeZoneFields { Id = "Etc/GMT-13", Text = "(UTC+13:00) Coordinated Universal Time+13" },
        new TimeZoneFields { Id = "Pacific/Tongatapu", Text = "(UTC+13:00) Nuku'alofa" },
        new TimeZoneFields { Id = "Pacific/Apia", Text = "(UTC+13:00) Samoa" },
        new TimeZoneFields { Id = "Pacific/Kiritimati", Text = "(UTC+14:00) Kiritimati Island" }
    };
    public string SelectedTimeZone { get; set; } = TimeZoneValues[21].Id!;
    private static readonly List<string> TimelineModeValues = new List<string> { "Day", "Week","Month" };
    private string SelectedTimelineMode { get; set; } = TimelineModeValues[0];
    protected override void OnInitialized()
    {
        TaskCollection = TimezoneData.GetTimezoneData().ToList();
        toolbarItems = new List<Object>()
        {
            new ItemModel
            {
                Id = "TimezoneLable",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "margin-right: 10px;");
                    builder.AddContent(2, "Time Zone:");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "TimeZoneDropDown",
                Align = ItemAlign.Left,
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfDropDownList<string, TimeZoneFields>>(0);
                    builder.AddAttribute(1, "Width", "350px");
                    builder.AddAttribute(2, "DataSource", TimeZoneValues);
                    builder.AddAttribute(3, "Placeholder", "Select a Timezone");
                    builder.AddAttribute(4, "Value", SelectedTimeZone);
                    builder.AddAttribute(5, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SelectedTimeZone = v));
                    builder.AddAttribute(6, "Text", "Text");
                    builder.AddAttribute(7, "ValueField", "Id");
                    builder.AddAttribute(8, "TItem", typeof(TimeZoneFields));
                    builder.AddAttribute(9, "ChildContent", (RenderFragment)(childBuilder =>
                    {
                        childBuilder.OpenComponent<DropDownListFieldSettings>(0);
                        childBuilder.AddAttribute(1, "Text", "Text");
                        childBuilder.AddAttribute(2, "Value", "Id");
                        childBuilder.CloseComponent();

                        childBuilder.OpenComponent<DropDownListEvents<string, TimeZoneFields>>(3);
                        childBuilder.AddAttribute(4, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<string, TimeZoneFields>>(this, OnTimeZoneChanged));
                        childBuilder.CloseComponent();
                    }));
                    builder.CloseComponent();
                })
            },
            new ItemModel
            {
				TooltipText = "Previous time span",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfButton>(0);
                    builder.AddAttribute(1, "CssClass", "previous-timespan");
                    builder.AddAttribute(2, "IconCss", "e-icons e-chevron-left");
                    builder.AddAttribute(3, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, (MouseEventArgs e) => ButtonClickHandler("PreviousTimeSpan")));
                    builder.AddAttribute(4, "Id", "previous-btn");
                    builder.CloseComponent();
                }),
                Align = ItemAlign.Right
            },
            new ItemModel
            {
                Type=ItemType.Separator,
                Align = ItemAlign.Right
            },
            new ItemModel
            {
                Id = "TimelineMode",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfDropDownList<string, string>>(0);
                    builder.AddAttribute(1, "Width", "100px");
                    builder.AddAttribute(2, "DataSource", TimelineModeValues);
                    builder.AddAttribute(3, "Value", SelectedTimelineMode);
                    builder.AddAttribute(4, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SelectedTimelineMode = v));
                    builder.AddAttribute(5, "ChildContent", (RenderFragment)(childBuilder =>
                    {
                        childBuilder.OpenComponent<DropDownListEvents<string, string>>(0);
                        childBuilder.AddAttribute(1, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<string, string>>(this, OnTimeLineModeChanged));
                        childBuilder.CloseComponent();
                    }));
                    builder.CloseComponent();
                }),
                Align = ItemAlign.Right
            },
            new ItemModel
            {
                Type = ItemType.Separator, 
                Align = ItemAlign.Right
            },
            new ItemModel
            {
				TooltipText = "Next time span",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<Syncfusion.Blazor.Buttons.SfButton>(0);
                    builder.AddAttribute(1, "CssClass", "next-timespan");
                    builder.AddAttribute(2, "IconCss", "e-icons e-chevron-right");
                    builder.AddAttribute(3, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, (MouseEventArgs e) => ButtonClickHandler("NextTimeSpan")));
                    builder.AddAttribute(4, "Id", "next-btn");
                    builder.CloseComponent();
                }),
                Align = ItemAlign.Right
            },
        };
    }
    public async Task ButtonClickHandler(string timeSpan)
    {
        if (timeSpan == "PreviousTimeSpan")
        {
            await JSRuntime.InvokeVoidAsync("removeFocus", "previous-btn");
            GanttInstance?.PreviousTimeSpan();
        }
        else if (timeSpan == "NextTimeSpan")
        {
            await JSRuntime.InvokeVoidAsync("removeFocus", "next-btn");
            GanttInstance?.NextTimeSpan();
        }
    }
    public async void OnTimeZoneChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, TimeZoneFields> args)
    {
        if (!string.IsNullOrEmpty(args.Value))
        {
            SelectedTimeZone = args.Value;
            TimeZone = args.Value;
        }
        await Task.CompletedTask;
    }
    public async void OnTimeLineModeChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        if(args.Value == "Day")
        {
            TimelineViewMode = TimelineViewMode.Day;
            TopFormat  = "MMM dd, yyyy";
            BottomFormat = "hh tt";
        }
        else if (args.Value == "Week")
        {
            TimelineViewMode = TimelineViewMode.Week;
            TopFormat = "ddd MMM dd";
            BottomFormat = "ddd";
        }
        else if (args.Value == "Month")
        {
            TimelineViewMode = TimelineViewMode.Month;
            TopFormat = "MMM dd, yyyy";
            BottomFormat = "MMM dd";
        }
        await Task.CompletedTask;
    }
    public async void OnGanttCreatedHandler(object args)
    {
        if (GanttInstance != null)
            await GanttInstance.ScrollToTimelineAsync(new DateTime(2025, 10, 9, 19, 0, 0));
    }
}
<style>
    .showhide {
        font-size: 14px;
        font-weight: 700;
        margin-bottom: 0px;
    }

    .previous-timespan,
    .next-timespan {
        height: 32px !important;
        width: 32px !important;
        padding: 0 !important;
    }

    .e-bigger .previous-timespan,
    .e-bigger .next-timespan {
        height: 40px !important;
        width: 40px !important;
        padding: 0 !important;
    }

    .e-bigger .previous-timespan{
        margin-left: 10px !important;
    }

    .bootstrap5\.3 .previous-timespan .e-icons,
    .bootstrap5\.3 .next-timespan .e-icons,
    .bootstrap5 .previous-timespan .e-icons,
    .bootstrap5 .next-timespan .e-icons {
        color: white;
    }

    .e-bigger .showhide {
        font-size: 16px;
        font-weight: 700;
    }

</style>
<script>
    window.removeFocus = function (id) {
        var btn = document.getElementById(id);
        if (btn) {
            btn.blur();
        }
    };
</script>