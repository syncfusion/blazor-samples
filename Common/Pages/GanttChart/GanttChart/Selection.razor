@page "/gantt-chart/selection"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Buttons;

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>The selection feature enables you to highlight a row or cell. It can be enabled by setting <a aria-label="Navigate to the allow selection property reference for gantt chart component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_AllowSelection">AllowSelection</a> to <b>true</b>.</p>
</SampleDescription>
<ActionDescription>
    <p>The Gantt component supports two types of selection that can be set by using the <a aria-label="Navigate to the type property reference for gantt selection settings" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttSelectionSettings.html#Syncfusion_Blazor_Gantt_GanttSelectionSettings_Type">SelectionSettings.Type</a> property. They are:</p>
    <ul>
        <li><code>Single</code> - Allows selecting only one row or cell at a time.</li>
        <li><code>Multiple</code> - Allows selecting multiple rows or cells. To perform the multi-selection, press and hold the Ctrl or Shift key and click the desired rows or cells.</li>
    </ul>
    <p>It also supports three types of selection modes that can be set by using the <a aria-label="Navigate to the mode property reference for gantt selection settings" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttSelectionSettings.html#Syncfusion_Blazor_Gantt_GanttSelectionSettings_Mode">SelectionSettings.Mode</a> property. They are:</p>
    <ul>
        <li><code>Row</code> - Allows selecting only rows, and it is the default mode of selection in Gantt.</li>
        <li><code>Cell</code> - Allows selecting only cells.</li>
        <li><code>Both</code> - Allows selecting both rows and cells at the same time.</li>
    </ul>
    <p>Toggle selection can be enabled by using the <a aria-label="Navigate to the enable toggle property reference for gantt selection settings" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttSelectionSettings.html#Syncfusion_Blazor_Gantt_GanttSelectionSettings_EnableToggle">SelectionSettings.EnableToggle</a> property.
        The taskbar that is not visible in the viewport can be auto-scrolled to make it viewable by selecting the row and setting the <code>ScrollToTaskbarOnClick</code> property to true. 
        The <code>EnableRowHover</code> feature allows users to easily identify the current row by highlighting it when the mouse hovers over it. This feature can be activated by setting the <a aria-label="Navigate to the enable row hover property reference for gantt chart component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_EnableRowHover">EnableRowHover</a> property to true.</p>
    <p>More information about the Selection feature can be found in this <a aria-label="Navigate to the documentation for selection in gantt chart component" target="_blank" href="https://blazor.syncfusion.com/documentation/gantt-chart/selection">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section ">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt @ref="GanttComponent" DataSource="@Tasks" TreeColumnIndex="1" Height="450px" Width="100%" ProjectStartDate="@ProjectStartDate" ProjectEndDate="@ProjectEndDate" AllowSelection="@IsSelectionEnabled" SelectedRowIndex="@SelectedRowIndex" ScrollToTaskbarOnClick="@IsAutoScrollEnabled" EnableRowHover="@IsRowHoverEnabled" Toolbar="@toolbarItems">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId" Dependency="Predecessor">
                </GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="TaskId" Width="100"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency"></GanttColumn>
                </GanttColumns>
                <GanttSelectionSettings Mode="@GanttSelectionMode" Type="@GanttSelectionType" EnableToggle="@IsToggleEnabled"></GanttSelectionSettings>
                <GanttLabelSettings LeftLabel="TaskName" TValue="SelectionData.TaskData"></GanttLabelSettings>
                <GanttSplitterSettings Position="58%"></GanttSplitterSettings>
            </SfGantt>
        </div>
    </div>
</div>

<style>
    .showhide {
    font-size: 15px;
    font-weight: 400;
    margin-bottom: 1px;
    }
    .e-switch-control {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    }
    .e-mastertext {
    font-size: 15px;
    font-family: Roboto;
    font-weight: bolder;
    opacity: 0.87;
    padding: 0.7em;
    }
    .e-selection-mode {
    min-width: 90px !important;
    }
    .e-selection-type {
    min-width: 110px !important;
    }

    .e-switch-wrapper:focus{
    box-shadow: none !important;
    }
</style>

@code {
    private SfGantt<SelectionData.TaskData>? GanttComponent { get; set; }
    private bool IsToggleEnabled { get; set; }
    private SfDropDownList<string, DropDownOption> ModeDropdown { get; set; }
    private SfDropDownList<string, DropDownOption> TypeDropdown { get; set; }
    private DateTime ProjectStartDate { get; set; } = new DateTime(2021, 3, 27);
    private DateTime ProjectEndDate { get; set; } = new DateTime(2021, 7, 6);
    private bool IsAutoScrollEnabled { get; set; }
    private bool IsRowHoverEnabled { get; set; }

    private List<DropDownOption> SelectionModes { get; set; } = new List<DropDownOption>
    {
        new DropDownOption { ID = "Row", Mode = "Row" },
        new DropDownOption { ID = "Cell", Mode = "Cell" }
    };

    private string? SelectedMode { get; set; }

    private List<DropDownOption> SelectionTypes { get; set; } = new List<DropDownOption>
    {
        new DropDownOption { ID = "Single", Mode = "Single" },
        new DropDownOption { ID = "Multiple", Mode = "Multiple" }
    };

    private string? SelectedType { get; set; }
    private Syncfusion.Blazor.Grids.SelectionMode GanttSelectionMode { get; set; } = Syncfusion.Blazor.Grids.SelectionMode.Row;
    private Syncfusion.Blazor.Grids.SelectionType GanttSelectionType { get; set; } = Syncfusion.Blazor.Grids.SelectionType.Single;
    private bool IsSelectionEnabled { get; set; } = true;
    private int SelectedRowIndex { get; set; } = -1;
    private List<SelectionData.TaskData> Tasks { get; set; } = new List<SelectionData.TaskData>();
    private List<Object> toolbarItems;
    public class DropDownOption
    {
        public string ID { get; set; } = string.Empty;
        public string Mode { get; set; } = string.Empty;
    }

    public void HandleToggleChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsToggleEnabled = args.Checked;
    }

    public void HandleAutoScrollChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsAutoScrollEnabled = args.Checked;
    }

    public void HandleRowHoverChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsRowHoverEnabled = args.Checked;
    }

    public void OnModeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownOption> args)
    {
        GanttSelectionMode = args.Value == "Cell" ? Syncfusion.Blazor.Grids.SelectionMode.Cell : Syncfusion.Blazor.Grids.SelectionMode.Row;
    }

    public void OnTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownOption> args)
    {
        GanttSelectionType = args.Value == "Single" ? Syncfusion.Blazor.Grids.SelectionType.Single : Syncfusion.Blazor.Grids.SelectionType.Multiple;
    }

    protected override void OnInitialized()
    {
        Tasks = SelectionData.GetTaskCollection();
        SelectedMode = GanttSelectionMode.ToString();
        SelectedType = GanttSelectionType.ToString();
        toolbarItems = new List<Object>
        {
            new ItemModel
            {
                Id = "ModeLabel",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "padding: 10px 15px 10px 10px");
                    builder.AddContent(3, "Mode");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "ModeDropdown",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfDropDownList<string, DropDownOption>>(0);
                    builder.AddAttribute(1, "Width", "90px");
                    builder.AddAttribute(2, "DataSource", SelectionModes);
                    builder.AddAttribute(3, "Value", SelectedMode);
                    builder.AddAttribute(4, "Placeholder", "e.g. Cell");
                    builder.AddAttribute(5, "CssClass", "e-selection-mode");
                    builder.AddAttribute(6, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SelectedMode = v));
                    builder.AddAttribute(7, "ChildContent", (RenderFragment)(childBuilder =>
                    {
                        childBuilder.OpenComponent<DropDownListEvents<string, DropDownOption>>(0);
                        childBuilder.AddAttribute(1, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<string, DropDownOption>>(this, OnModeChange));
                        childBuilder.CloseComponent();

                        childBuilder.OpenComponent<DropDownListFieldSettings>(2);
                        childBuilder.AddAttribute(3, "Text", "Mode");
                        childBuilder.AddAttribute(4, "Value", "ID");
                        childBuilder.CloseComponent();
                    }));
                    builder.CloseComponent();
                })
            },
            new ItemModel
            {
                Id = "TypeLabel",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "padding: 10px 15px 10px 25px");
                    builder.AddContent(3, "Type");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "TypeDropdown",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfDropDownList<string, DropDownOption>>(0);
                    builder.AddAttribute(1, "Width", "110px");
                    builder.AddAttribute(2, "DataSource", SelectionTypes);
                    builder.AddAttribute(3, "Value", SelectedType);
                    builder.AddAttribute(4, "Placeholder", "e.g. Multiple");
                    builder.AddAttribute(5, "CssClass", "e-selection-type");
                    builder.AddAttribute(6, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SelectedType = v));
                    builder.AddAttribute(7, "ChildContent", (RenderFragment)(childBuilder =>
                    {
                        childBuilder.OpenComponent<DropDownListEvents<string, DropDownOption>>(0);
                        childBuilder.AddAttribute(1, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<string, DropDownOption>>(this, OnTypeChange));
                        childBuilder.CloseComponent();

                        childBuilder.OpenComponent<DropDownListFieldSettings>(2);
                        childBuilder.AddAttribute(3, "Text", "Mode");
                        childBuilder.AddAttribute(4, "Value", "ID");
                        childBuilder.CloseComponent();
                    }));
                    builder.CloseComponent();
                })
            },
            new ItemModel
            {
                Id = "ToggleLabel",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "padding: 10px 10px 10px 25px");
                    builder.AddContent(3, "Toggle");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "ToggleSwitch",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfSwitch<bool>>(0);
                    builder.AddAttribute(1, "Checked", IsToggleEnabled);
                    builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<bool>(this, v => IsToggleEnabled = v));
                    builder.AddAttribute(3, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<bool>>(this, HandleToggleChange));
                    builder.CloseComponent();
                })
            },
            new ItemModel
            {
                Id = "AutoScrollLabel",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "padding: 10px 10px 10px 25px");
                    builder.AddContent(3, "Autoscroll to taskbar");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "AutoScrollSwitch",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfSwitch<bool>>(0);
                    builder.AddAttribute(1, "Checked", IsAutoScrollEnabled);
                    builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<bool>(this, v => IsAutoScrollEnabled = v));
                    builder.AddAttribute(3, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<bool>>(this, HandleAutoScrollChange));
                    builder.CloseComponent();
                })
            },
            new ItemModel
            {
                Id = "RowHoverLabel",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenElement(0, "label");
                    builder.AddAttribute(1, "class", "showhide");
                    builder.AddAttribute(2, "style", "padding: 10px 10px 10px 25px");
                    builder.AddContent(3, "Enable row hover");
                    builder.CloseElement();
                })
            },
            new ItemModel
            {
                Id = "RowHoverSwitch",
                Template = (RenderFragment)(builder =>
                {
                    builder.OpenComponent<SfSwitch<bool>>(0);
                    builder.AddAttribute(1, "Checked", IsRowHoverEnabled);
                    builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<bool>(this, v => IsRowHoverEnabled = v));
                    builder.AddAttribute(3, "ValueChange", EventCallback.Factory.Create<ChangeEventArgs<bool>>(this, HandleRowHoverChange));
                    builder.CloseComponent();
                })
            }
        };

    }

}