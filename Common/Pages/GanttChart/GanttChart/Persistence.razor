@page "/gantt-chart/persistence"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Navigations
@using ej2_blazor_defaultdata
@inject IJSRuntime JsInterop

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates state management in Gantt Chart. State management allows users to save the current Gantt state in the browser’s local storage so that properties of the Gantt will be retained even after refreshing the page.</p>
</SampleDescription>
<ActionDescription>
    <p> In this example, you can see how to save Gantt state, reset the current state and refresh gantt chart with original state, load gantt chart with already saved state.
        Following are the Gantt properties persisted in local storage.
    </p>
    <ul>
        <li>
            <b>GRID</b>
            <ul>
                <li>Sorting </li>
                <li>Filtering </li>
                <li>Column (resizing, reorder, show/hide columns) </li>
                <li>Searching </li>
                <li>TreeColumnIndex </li>
            </ul>
        </li>
        <li>
            <b>SPLITTER</b>
            <ul>
                <li> Position</li>
                <li> Collapsible</li>
            </ul>
        </li>
        <li>
            <b>CHART</b>
            <ul>
                <li> Time span</li>
                <li> Zooming level</li>
            </ul>
        </li>
    </ul>
    <p>More information on the state management can be found in this <a aria-label="Navigate to the documentation for state management in gantt chart component" target="_blank" href="https://blazor.syncfusion.com/documentation/gantt-chart/state-management">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt ID="Persist" @ref="GanttInstance" DataSource="@TaskCollection" Height="450px" Width="100%"
            ProjectStartDate="@ProjectStartDate" ProjectEndDate="@ProjectEndDate"
            Toolbar="ToolbarItems" AllowReordering="true" AllowFiltering="true"
            AllowSorting="true" AllowResizing="true" ShowColumnMenu="true"
            EnablePersistence="true" ScrollToTaskbarOnClick="true">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate"
                EndDate="EndDate" Duration="Duration" Progress="Progress"
                Dependency="Predecessor" ParentID="ParentId">
                </GanttTaskFields>
                <GanttLabelSettings LeftLabel="TaskName" TValue="DefaultData.TaskData">
                </GanttLabelSettings>
                <GanttEvents OnToolbarClick="HandleToolbarClick" TValue="DefaultData.TaskData"></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>

@code {
    private SfGantt<DefaultData.TaskData>? GanttInstance;

// Toolbar items for the Gantt chart
#pragma warning disable BL0005 // Component parameter should not be set outside of its component.
    private List<object> ToolbarItems { get; } = new List<object>
    {
        "ZoomIn",
        "ZoomOut",
        "ZoomToFit",
        new ToolbarItem { Text = "Save state", TooltipText = "Save state", Id = "GetPersistence", PrefixIcon = "e-savestate" },
        new ToolbarItem { Text = "Load state", TooltipText = "Load state", Id = "SetPersistence", PrefixIcon = "e-setstate" },
        new ToolbarItem { Text = "Reset state", TooltipText = "Reset state", Id = "ClearPersistence", PrefixIcon = "e-resetstate" },
        new ToolbarItem { Text = "Reload page", TooltipText = "Reload page", Id = "ReloadPage", PrefixIcon = "e-reloadpage" }
    };

    private string? PersistedState { get; set; } = null;
    private List<DefaultData.TaskData> TaskCollection { get; set; } = new List<DefaultData.TaskData>();
    public DateTime ProjectStartDate { get; set; } = new DateTime(2021, 03, 25);
    public DateTime ProjectEndDate { get; set; } = new DateTime(2021, 07, 17);

    protected override void OnInitialized()
    {
        TaskCollection = DefaultData.ProjectNewData();
    }

    private async void HandleToolbarClick(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "GetPersistence":
                PersistedState = await GanttInstance.GetPersistDataAsync();
                break;
            case "SetPersistence":
                await GanttInstance.SetPersistDataAsync(PersistedState);
                break;
            case "ClearPersistence":
                await GanttInstance.ResetPersistDataAsync();
                break;
            case "ReloadPage":
                await JsInterop.InvokeVoidAsync("window.location.reload");
                break;
        }
    }

}
<style>
    .bootstrap4 .e-savestate::before {
       content: '\e74d';
    }
    .bootstrap4 .e-setstate::before {
       content: '\e75d';
    }
    .bootstrap4 .e-reloadpage::before {
       content: '\e716';
    }
    .bootstrap5\.3 .e-savestate::before,
    .bootstrap5\.3-dark .e-savestate::before,
    .bootstrap5 .e-savestate::before,
    .bootstrap5-dark .e-savestate::before,
    .tailwind3 .e-savestate::before,
    .fluent .e-savestate::before,
    .fluent-dark .e-savestate::before,
    .tailwind3-dark .e-savestate::before,
    .material3 .e-savestate::before,
    .material3-dark .e-savestate::before,
    .fluent2 .e-savestate::before,
    .fluent2-dark .e-savestate::before,
    .fluent2-highcontrast .e-savestate::before {
       content: '\e7c8';
    }
    .bootstrap5\.3 .e-setstate::before,
    .bootstrap5\.3-dark .e-setstate::before,
    .bootstrap5 .e-setstate::before,
    .bootstrap5-dark .e-setstate::before,
    .tailwind3-dark .e-setstate::before,
    .tailwind3 .e-setstate::before,
    .fluent .e-setstate::before,
    .fluent-dark .e-setstate::before,
    .material3 .e-setstate::before,
    .material3-dark .e-setstate::before,
    .fluent2 .e-setstate::before,
    .fluent2-dark .e-setstate::before,
    .fluent2-highcontrast .e-setstate::before {
       content: '\e7a1';
    }
    .bootstrap5\.3 .e-reloadpage::before,
    .bootstrap5\.3-dark .e-reloadpage::before,
    .bootstrap5 .e-reloadpage::before,
    .bootstrap5-dark .e-reloadpage::before,
    .tailwind3-dark .e-reloadpage::before,
    .tailwind3 .e-reloadpage::before,
    .fluent .e-reloadpage::before,
    .fluent-dark .e-reloadpage::before,
    .material3 .e-reloadpage::before,
    .material3-dark .e-reloadpage::before,
    .fluent2 .e-reloadpage::before,
    .fluent2-dark .e-reloadpage::before,
    .fluent2-highcontrast .e-reloadpage::before {
       content: '\e706';
    }
    .bootstrap .e-savestate::before,
    .bootstrap-dark .e-savestate::before {
       content: '\e701';
    }
    .bootstrap .e-setstate::before,
    .bootstrap-dark .e-setstate::before{
       content: '\ec32';
    }
    .bootstrap .e-reloadpage::before,
    .bootstrap-dark .e-reloadpage::before{
       content: '\e975';
    }
    .fabric .e-savestate::before,
    .fabric-dark .e-savestate::before,
    .highcontrast .e-savestate::before {
       content: '\e700';
    }
    .fabric .e-setstate::before {
       content: '\ebe4';
    }
    .fabric .e-reloadpage::before,
    .fabric-dark .e-reloadpage::before{
       content: '\e218';
    }
    .highcontrast .e-setstate::before,
    .fabric-dark .e-setstate::before {
       content: '\e603';
    }
    .highcontrast .e-reloadpage::before
    {
       content: '\e837';
    }
    .material .e-savestate::before,
    .material-dark .e-savestate::before {
       content: '\e735';
    }
    .material .e-setstate::before,
    .material-dark .e-setstate::before {
       content: '\ec0b';
    }
    .material .e-reloadpage::before,
    .material-dark .e-reloadpage::before {
       content: '\e99d';
    }
    .bootstrap5\.3 .e-resetstate::before,
    .bootstrap5\.3-dark .e-resetstate::before,
    .bootstrap5 .e-resetstate::before,
    .bootstrap5-dark .e-resetstate::before,
    .tailwind3-dark .e-resetstate::before,
    .tailwind3 .e-resetstate::before,
    .fluent .e-resetstate::before,
    .fluent-dark .e-resetstate::before,
    .material3 .e-resetstate::before,
    .material3-dark .e-resetstate::before,
    .fluent2 .e-resetstate::before,
    .fluent2-dark .e-resetstate::before,
    .fluent2-highcontrast .e-resetstate::before {
       content: '\e89b';
    }
    .material .e-resetstate::before,
    .material-dark .e-resetstate::before,
    .bootstrap .e-resetstate::before,
    .bootstrap-dark .e-resetstate::before,
    .bootstrap4 .e-resetstate::before {
       content: '\e953';
    }
    .fabric .e-resetstate::before,
    .fabric-dark .e-resetstate::before,
    .highcontrast .e-resetstate::before {
       content: '\e948';
    }
 </style>