@page "/gantt-chart/observable-collection"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using Syncfusion.Blazor.Grids

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
  <p>The following sample demonstrates the usage of Observable data binding in Gantt Chart component.</p>  
</SampleDescription>
<ActionDescription>
   <p>An Observable collection of objects can be added, removed or updated with automatic notification of actions. The UI is automatically updated when an object is added to or removed from an observable collection. To refresh the UI for a single property update, the setter of the corresponding property must be configured as shown in the sample.</p>
    <p>More information on the Observalble collection data binding can be found in this <a aria-label="Navigate to the documentation for ObservableCollection binding in gantt chart component" target="_blank" href="https://blazor.syncfusion.com/documentation/gantt-chart/data-binding#observable-collection">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div style="padding-bottom: 10px;">
                <SfButton ID="add" @onclick="AddRecord">Add Data</SfButton>
                <SfButton ID="del" @onclick="DeleteRecord">Delete Data</SfButton>
                <SfButton ID="update" @onclick="UpdateRecord">Update Data</SfButton>
            </div>
            <SfGantt DataSource="@ObservableData" Toolbar="@(new List<string>() { "Add", "Cancel", "Delete", "Edit","Update" })" Height="450px" Width="100%" ScrollToTaskbarOnClick="true">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
                 <GanttColumns>
                    <GanttColumn Field="TaskId" Width="100"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Task Name" Width="250" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress"></GanttColumn>
                </GanttColumns>
                <GanttEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" AllowTaskbarEditing="true"></GanttEditSettings>
                <GanttEvents TValue="TaskData" RowUpdated="RowUpdated"></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>
@code {
    public ObservableCollection<TaskData> ObservableData { get; set; }
    private int recordId = 0;
    private int taskId;

    protected override void OnInitialized()
    {
        
        ObservableData = ProjectNewData();
    }
    public async Task RowUpdated(RowUpdatedEventArgs<TaskData> args)
    {
        taskId = args.Data.TaskId;
        await Task.CompletedTask;
    }
    public void AddRecord()
    {
        if (ObservableData.Count() != 0)
        {
            recordId = ObservableData.Max(data => data.TaskId);
            recordId = Math.Max(recordId, taskId);
        }
        recordId++;
        ObservableData.Insert(0, new TaskData() { TaskId = recordId, TaskName = "New Task", StartDate = new DateTime(2021, 04, 04), Duration = "4" });
    }
    public void DeleteRecord()
    {
        if (ObservableData.Count() != 0)
        {
            int deleteRecordTaskId = ObservableData.First().TaskId;
            ObservableData.Remove(ObservableData.First());
            RemoveChild(deleteRecordTaskId);
        }
    }

    public void RemoveChild(int id)
    {
        ObservableCollection<TaskData> childRecords = new ObservableCollection<TaskData>();
        for (int j = 0; j < ObservableData.Count(); j++)
        {
            if (id == ObservableData[j].ParentId)
                childRecords.Add(ObservableData[j]);
        }

        for (int i = childRecords.Count() - 1; i >= 0; i--)
        {

            int deleteRcordid = childRecords[i].TaskId;
            RemoveChild(deleteRcordid);
            ObservableData.Remove(childRecords[i]);
        }
    }
    public void UpdateRecord()
    {
        if (ObservableData.Count() != 0)
        {
            var name = ObservableData.First();
            name.TaskName = "Record Updated";
        }
    }

    public static ObservableCollection<TaskData> ProjectNewData()
    {
        ObservableCollection<TaskData> Tasks = new ObservableCollection<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Product concept ",
            StartDate = new DateTime(2021, 04, 02),
            EndDate = new DateTime(2021, 04, 08),
            Duration = "5days"
        },
        new TaskData() {
            TaskId = 2,
            TaskName = "Define the product usage",
            StartDate = new DateTime(2021, 04, 02),
            EndDate = new DateTime(2021, 04, 08),
            Duration = "3",
            Progress = 30,
            ParentId = 1,
        },
        new TaskData() {
            TaskId = 3,
            TaskName = "Define the target audience",
            EndDate = new DateTime(2021, 04, 04),
            Progress = 40,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 4,
            TaskName = "Prepare product sketch and notes",
            StartDate = new DateTime(2021, 04, 05),
            Duration = "2",
            Progress = 30,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Concept approval",
            StartDate = new DateTime(2021, 04, 08),
            EndDate = new DateTime(2021, 04, 08),
            Duration="0",
            ParentId = 1
        },
        new TaskData() {
            TaskId = 6,
            TaskName = "Market research",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "4",
            Progress = 30
        },
        new TaskData() {
            TaskId = 7,
            TaskName = "Demand analysis",
            Duration = "4",
            Progress = 40,
            ParentId = 6
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Customer strength",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 12),
            Duration = "4",
            Progress = 30,
            ParentId = 7,
            
        },
        new TaskData() {
            TaskId = 9,
            TaskName = "Market opportunity analysis",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 012),
            Duration="4",
            ParentId= 7
        },
        new TaskData() {
            TaskId = 10,
            TaskName = "Competitor analysis",
            StartDate = new DateTime(2021, 04, 15),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "4",
            Progress = 30,
            ParentId= 6
        },
        new TaskData() {
            TaskId = 11,
            TaskName = "Product strength analysis",
            StartDate = new DateTime(2021, 04, 15),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "4",
            Progress = 40,
            ParentId = 6
        },
        new TaskData() {
            TaskId = 12,
            TaskName = "Research completed",
            StartDate = new DateTime(2021, 04, 18),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "0",
            Progress = 30,
            ParentId = 6
        },
         new TaskData() {
            TaskId = 13,
            TaskName = "Product design and development",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 05, 16),
            Duration="20"
        },
        new TaskData() {
            TaskId = 14,
            TaskName = "Functionality design",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 04, 23),
            Duration = "3",
            Progress = 30,
            ParentId = 13
        },
        new TaskData() {
            TaskId = 15,
            TaskName = "Quality design",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 04, 23),
            Duration = "3",
            Progress = 40,
            ParentId = 13
        },
        new TaskData() {
            TaskId = 16,
            TaskName = "Define reliability",
            StartDate = new DateTime(2021, 04, 24),
            EndDate = new DateTime(2021, 04, 25),
            Duration = "2",
            Progress = 30,
            ParentId = 13
        },
         new TaskData() {
            TaskId = 17,
            TaskName = "Identifying raw materials",
            StartDate = new DateTime(2021, 04, 24),
            EndDate = new DateTime(2021, 04, 25),
            Duration="2",
            ParentId=13,
        },
        new TaskData() {
            TaskId = 18,
            TaskName = "Define cost plan",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 30,
            ParentId=13
        },
        new TaskData() {
            TaskId = 19,
            TaskName = "Estimate manufacturing cost",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 40,
            ParentId = 18
        },
        new TaskData() {
            TaskId = 20,
            TaskName = "Estimate selling cost",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 30,
            ParentId = 18
        },
         new TaskData() {
            TaskId = 21,
            TaskName = "Development of final design",
            StartDate = new DateTime(2021, 04, 30),
            EndDate = new DateTime(2021, 05, 08),
            Duration="7",
            ParentId=13
        },
        new TaskData() {
            TaskId = 22,
            TaskName = "Develop dimensions and design",
            StartDate = new DateTime(2021, 04, 30),
            EndDate = new DateTime(2021, 05, 01),
            Duration = "2",
            Progress = 30,
            ParentId=21
        },
        new TaskData() {
            TaskId = 23,
            TaskName = "Develop designs to meet industry",
            StartDate = new DateTime(2021, 05, 02),
            EndDate = new DateTime(2021, 05, 03),
            Duration = "2",
            Progress = 40,
            ParentId = 21
        },
        new TaskData() {
            TaskId = 24,
            TaskName = "Include all the details",
            StartDate = new DateTime(2021, 05, 06),
            EndDate = new DateTime(2021, 05, 08),
            Duration = "3",
            Progress = 30,
            ParentId = 21
        },
         new TaskData() {
            TaskId = 25,
            TaskName = "CAD - Computer Aided Design",
            StartDate = new DateTime(2021, 05, 09),
            EndDate = new DateTime(2021, 05, 13),
            Duration="3"
        },
        new TaskData() {
            TaskId = 26,
            TaskName = "CAM - Computer Aided Manufacturing",
            StartDate = new DateTime(2021, 05, 14),
            EndDate = new DateTime(2021, 05, 16),
            Duration = "3",
            Progress = 30
        },
        new TaskData() {
            TaskId = 27,
            TaskName = "Finalize the design",
            StartDate = new DateTime(2021, 04, 16),
            EndDate = new DateTime(2021, 04, 16),
            Duration = "0",
            Progress = 40
        },
        new TaskData() {
            TaskId = 28,
            TaskName = "Prototype testing",
            StartDate = new DateTime(2021, 05, 17),
            EndDate = new DateTime(2021, 05, 22),
            Duration = "4",
            Progress = 30
        },
        new TaskData() {
            TaskId = 29,
            TaskName = "Include feedback",
            StartDate = new DateTime(2021, 05, 17),
            EndDate = new DateTime(2021, 05, 22),
            Duration="4"
        },
        new TaskData() {
            TaskId = 30,
            TaskName = "Manufacturing",
            StartDate = new DateTime(2021, 05, 23),
            EndDate = new DateTime(2021, 05, 29),
            Duration = "5",
            Progress = 30
        },
        new TaskData() {
            TaskId = 31,
            TaskName = "Assembling material into finished goods",
            StartDate = new DateTime(2021, 05, 30),
            EndDate = new DateTime(2021, 06, 05),
            Duration = "5",
            Progress = 40
        },
        new TaskData() {
            TaskId = 32,
            TaskName = "Final product development",
            StartDate = new DateTime(2021, 06, 06),
            EndDate = new DateTime(2021, 06, 13),
            Duration = "6",
            Progress = 30
        },
        new TaskData() {
            TaskId =33,
            TaskName = "Important improvement",
            StartDate = new DateTime(2021, 06, 06),
            EndDate = new DateTime(2021, 06, 10),
            Duration="3",
            ParentId=32
        },
        new TaskData() {
            TaskId = 34,
            TaskName = "Customer testing and feedback",
            StartDate = new DateTime(2021, 06, 11),
            EndDate = new DateTime(2021, 06, 13),
            Duration = "3",
            Progress = 30,
            ParentId=32
        },
        new TaskData() {
            TaskId = 35,
            TaskName = "Final product development",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 40
        },
        new TaskData() {
            TaskId = 36,
            TaskName = "Important improvement",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 30,
            ParentId = 35
        },
         new TaskData() {
            TaskId = 37,
            TaskName = "Address any unforeseen issues",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 30,
            ParentId=35
        },
        new TaskData() {
            TaskId = 38,
            TaskName = "Finalize the product ",
            StartDate = new DateTime(2021, 06, 20),
            EndDate = new DateTime(2021, 07, 01),
            Duration = "8",
            Progress = 40
        },
        new TaskData() {
            TaskId = 39,
            TaskName = "Branding the product",
            StartDate = new DateTime(2021, 06, 20),
            EndDate = new DateTime(2021, 06, 25),
            Duration = "4",
            Progress = 30,
            ParentId = 38
        },
        new TaskData()
        {
            TaskId=40,
            TaskName="Marketing and presales",
            StartDate=new DateTime(2021,06,26),
            EndDate=new DateTime(2021,07,01),
            ParentId=38,
            Duration="4"
        }
    };
        return Tasks;
    }

    public class TaskData : INotifyPropertyChanged
    {
        public int TaskId { get; set; }
        private string taskName { get; set; }
        public string TaskName
        {
            get { return taskName; }
            set
            {
                if (value != taskName)
                {
                    taskName = value;
                    NotifyPropertyChanged("TaskName");
                }
            }
        }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public event PropertyChangedEventHandler? PropertyChanged;
        private void NotifyPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
