@page "/gantt-chart/remote-data"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to bind data to the Gantt Chart using a remote service. The Gantt Chart's data source connects to remote data via the DataManager, showcasing various phases in the software design and development lifecycle.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The <a aria-label="Navigate to the documentation for getting started with data manager component" target="_blank" class="code" href="https://blazor.syncfusion.com/documentation/data/getting-started">SfDataManager</a> is used to bind data from a remote service with the Gantt Chart.
        The <code>SfDataManager</code> acts as an interface between the service endpoint and the Tree Grid, requiring the following minimal information to interact with the service endpoint properly.
    </p>
    <ul>
        <li><a aria-label="Navigate to the url property reference for data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Url">SfDataManager.Url</a> - Defines the service endpoint to fetch data.</li>
        <li><a aria-label="Navigate to the Adaptor property reference for data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Adaptor">SfDataManager.Adaptor</a> - Defines the adaptor option. By default, <a aria-label="Navigate to the class reference for Url Adaptor in data manager" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.ODataAdaptor.html">ODataAdaptor</a> is used for remote binding.</li>
    </ul>
    <p>
        The adaptor is responsible for processing the response and request to/from the service endpoint. The <a aria-label="Navigate to namespace reference for data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.html">Syncfusion.Blazor.Data</a> namespace provides predefined adaptors designed to interact with particular service endpoints. The predefined adaptors include:
    </p>
    <ul>
        <li><strong>UrlAdaptor</strong> - Use this to interact with any remote service. This is the base adaptor for all remote-based adaptors.</li>
        <li><strong>ODataAdaptor</strong> - Use this to interact with OData endpoints.</li>
        <li><strong>ODataV4Adaptor</strong> - Use this to interact with OData V4 endpoints.</li>
        <li><strong>WebApiAdaptor</strong> - Use this to interact with Web API created under OData standards.</li>
    </ul>
    <p>
        More information on remote data binding can be found in this <a aria-label="Navigate to the documentation for remote data in gantt chart component" target="_blank" href="https://blazor.syncfusion.com/documentation/gantt-chart/data-binding#remote-data">documentation section</a>.
    </p>
</ActionDescription>

<div class="control-section">
    <div class="row">
        <div class="col-md-12">
            <div style="padding-bottom: 10px;">
                <span class="e-dddata">
                    <SfDropDownList TItem="DropdownData" TValue="string" PopupHeight="230px" Width="240px" @bind-Index="@dropDownIndex" DataSource="@DLData" Placeholder="1000 Rows">
                        <DropDownListEvents TItem="DropdownData" TValue="string" ValueChange="OnDataChange" Closed="DropdownClose"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </span>
                <span style="padding-left: 20px; font-size: 15px">
                    <b>Data initial load time: </b> @(LoadTime.ToString() + " milliseconds")
                </span>
            </div>
            <SfGantt @ref="ganttInstance" TValue="TaskData" Height="700px" Width="100%" TreeColumnIndex="1" ProjectStartDate="new DateTime(2024, 12, 28)" ProjectEndDate="new DateTime(2025, 03, 19)" ScrollToTaskbarOnClick="true"
            EnablePredecessorValidation="false" AutoCalculateDateScheduling="false" EnableRowVirtualization="true" EnableTimelineVirtualization="true">
                <SfDataManager Url=@adapatorUrl Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                <GanttTaskFields Id="Id"
                Name="Name"
                StartDate="StartDate"
                EndDate="EndDate"
                Progress="CompletionPercent"
                ParentID="ParentTaskId"
                Duration="DurationInDays"
                Dependency="Dependency">
                </GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="Id" ></GanttColumn>
                    <GanttColumn Field="Name" HeaderText="Project Activity" Width="280"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Planned Start Date"></GanttColumn>
                    <GanttColumn Field="DurationInDays" HeaderText="Estimated Duration"></GanttColumn>
                    <GanttColumn Field="CompletionPercent" HeaderText="Completion (%)"></GanttColumn>
                </GanttColumns>
                <GanttTimelineSettings TimelineViewMode="TimelineViewMode.Week">
                    <GanttTopTierSettings Unit="TimelineViewMode.Week" Format="MMM, dd yyyy"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Day" Format="dd" ></GanttBottomTierSettings>
                </GanttTimelineSettings>
                <GanttLabelSettings TValue="TaskData" RightLabel="Name" TaskLabel="CompletionPercent"></GanttLabelSettings>
                <GanttEvents Created="OnGanttCreated" OnActionComplete="ActionCompleteHandler" TValue="TaskData"></GanttEvents>
                <GanttSplitterSettings ColumnIndex="2"></GanttSplitterSettings>
            </SfGantt>
        </div>
    </div>
</div>

@code{
    private SfGantt<TaskData> ganttInstance;
    private int? recordCount = 1000;
    // Initialize URL in the code block to ensure it's updated dynamically
    private string adapatorUrl => $"http://localhost:63028/api/GanttRemoteData?count={recordCount}";
    private int? dropDownIndex = 0;
    private int? previousDropDownIndex { get; set; } = 0;
    public DateTime? StartLoadTime { get; private set; }
    public DateTime? EndLoadTime { get; private set; }
    public string LoadTime = string.Empty;
    protected override void OnInitialized()
    {
        StartLoadTime = DateTime.Now;
    }
    private void OnGanttCreated(object sender)
    {
        EndLoadTime = DateTime.Now;
        TimeSpan ts = (TimeSpan)(EndLoadTime - StartLoadTime);
        LoadTime = ts.TotalMilliseconds.ToString("F3");
    }
    public void ActionCompleteHandler(GanttActionEventArgs<TaskData> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Refresh)
        {
            EndLoadTime = DateTime.Now;
            TimeSpan ts = (TimeSpan)(EndLoadTime - StartLoadTime);
            LoadTime = ts.TotalMilliseconds.ToString("F3");
        }
    }
    private void DropdownClose(@Syncfusion.Blazor.DropDowns.ClosedEventArgs args)
    {
        if (previousDropDownIndex != dropDownIndex)
        {
            StartLoadTime = DateTime.Now;
            previousDropDownIndex = dropDownIndex;
        }
    }
    public async Task OnDataChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropdownData> args)
    {
        recordCount = Int32.Parse(args.Value);
        await ganttInstance.RefreshAsync();
    }

    public class DropdownData
    {
        public string Text { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }

    public List<DropdownData> DLData = new List<DropdownData>() {
        new DropdownData(){ Text= "1,000 Rows", Value= "1000" },
        new DropdownData(){ Text= "2,500 Rows", Value= "2500" },
        new DropdownData(){ Text= "5,000 Rows", Value= "5000" },
    };

    public class TaskData
    {
        public int Id { get; set; }

        public string Name { get; set; } = string.Empty;

        public DateTime StartDate { get; set; }

        public DateTime EndDate { get; set; }

        public int DurationInDays { get; set; }

        public int CompletionPercent { get; set; }

        public int? ParentTaskId { get; set; }

        public string Dependency { get; set; } = string.Empty;
    }
}
