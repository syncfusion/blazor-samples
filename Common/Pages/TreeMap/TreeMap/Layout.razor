@page "/treemap/layout"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.TreeMap
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups;
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the GDP nominal of top 10 countries in the year 2015. The TreeMap's layout and rendering direction are also customizable.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can change the layout of the TreeMap, and desaturation color mapping has been used to denote the weightage of the items by varying the fill color. The label text has also been formatted and split into multiple lines. In this case, the tooltip is also enabled.</p>
    <p>More information about layout can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/treemap/layout" aria-label="Blazor TreeMap Layout documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    tr {
        height: 55px;
    }

    td {
        width: 50%
    }

    .name {
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
<div class="col-lg-9 control-section sb-property-border">
    <SfTreeMap WeightValuePath="GDP" DataSource="@Economics" RangeColorValuePath="GDP" TValue="LeafData" LayoutType="@LayoutModes" RenderDirection="@RenderMode" Theme="@Theme">
        <TreeMapTitleSettings Text="Top 10 Countries by GDP Nominal - 2015">
            <TreeMapTitleTextStyle Size="15px" FontFamily="Segoe UI" />
        </TreeMapTitleSettings>
        <TreeMapTooltipSettings Visible="true" Format="${State}<br>Rank : ${Rank}">
            <TreeMapTooltipTextStyle FontFamily="Segoe UI"></TreeMapTooltipTextStyle>
        </TreeMapTooltipSettings>
        <TreeMapLeafItemSettings LabelPath="State" LabelFormat="${State}<br>$${GDP} Trillion<br>(${Percentage} %)">
            <TreeMapLeafColorMappings>
                <TreeMapLeafColorMapping StartRange="1550" EndRange="17946" Color="@LeafColor" MinOpacity="0.7" MaxOpacity="1" />
            </TreeMapLeafColorMappings>
            <TreeMapLeafLabelStyle Color="#000000" FontFamily="Segoe UI" />
            <TreeMapLeafBorder Color="#000000" Width="0.5" />
        </TreeMapLeafItemSettings>
    </SfTreeMap>
    <div class="urllink">
        Source:
        <a href="https://www.reinisfischer.com/top-20-largest-economies-world-gdp-nominal" target="_blank">www.reinisfischer.com</a>
    </div>
</div>
<div class="col-lg-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width:100%" title="Properties">
                <tbody>
                    <tr>
                        <td>
                            Layout Type
                        </td>
                        <td style="padding:10px;">
                            <SfTooltip @ref="DropdownTooltip" ID="Tooltip" Target=".e-list-item .name[title]"></SfTooltip>
                            <SfDropDownList Placeholder="Select layout type" DataSource="@LayoutList" @bind-Value="@LayoutValue" Width="100%">
                                <DropDownListEvents TItem="DropdownList" TValue="string" ValueChange="LayoutTypechange" Opened="OnOpen" OnClose="OnClose" />
                                <DropDownListFieldSettings Text="Name" Value="Value" />
                                <DropDownListTemplates TItem="DropdownList">
                                    <ItemTemplate>
                                        <div class="name" title="@((context as DropdownList).Name)"> @((context as DropdownList).Name) </div>
                                    </ItemTemplate>
                                </DropDownListTemplates>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Render Direction
                        </td>
                        <td style="padding:10px;">
                            <SfDropDownList Placeholder="Select rendering direction" DataSource="@RenderingList" @bind-Value="@RenderValue" Width="100%">
                                <DropDownListEvents TItem="DropdownList" TValue="string" ValueChange="RenderDirectionchange" Opened="OnOpen" OnClose="OnClose" />
                                <DropDownListFieldSettings Text="Name" Value="Value" />
                                <DropDownListTemplates TItem="DropdownList">
                                    <ItemTemplate>
                                        <div class="name" title="@((context as DropdownList).Name)"> @((context as DropdownList).Name) </div>
                                    </ItemTemplate>
                                </DropDownListTemplates>
                            </SfDropDownList>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
@code {
    public SfTooltip? DropdownTooltip;
    public bool IsOpen { get; set; }
    public Theme Theme { get; set; }
    public LayoutMode LayoutModes = LayoutMode.Squarified;
    public string[] LeafColor = new string[] { "#9cbb59" };
    public RenderingMode RenderMode = RenderingMode.TopLeftBottomRight;
    public string LayoutValue = "Squarified";
    public string RenderValue = "TopLeftBottomRight";
    public class DropdownList
    {
        public string? Value { get; set; }
        public string? Name { get; set; }
    };

    public List<DropdownList> LayoutList = new List<DropdownList>
    {
        new DropdownList { Value = "Squarified", Name = "Squarified" },
        new DropdownList { Value = "SliceAndDiceHorizontal", Name = "Slice and dice horizontal" },
        new DropdownList { Value = "SliceAndDiceVertical", Name = "Slice and dice vertical" },
        new DropdownList { Value = "SliceAndDiceAuto", Name = "Slice and dice auto" }
    };

    public List<DropdownList> RenderingList = new List<DropdownList>
    {
        new DropdownList { Value = "TopLeftBottomRight", Name = "Top Left - Bottom Right" },
        new DropdownList { Value = "TopRightBottomLeft", Name = "Top Right - Bottom Left" },
        new DropdownList { Value = "BottomLeftTopRight", Name = "Bottom Left - Top Right" },
        new DropdownList { Value = "BottomRightTopLeft", Name = "Bottom Right - Top Left" }
    };
    protected override async Task OnInitializedAsync()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (IsOpen && DropdownTooltip != null)
        {
            await DropdownTooltip.RefreshAsync();
        }
    }
    private void LayoutTypechange(ChangeEventArgs<string, DropdownList> args)
    {
        LayoutValue = args.Value;
        if (args.Value == "Squarified")
        {
            LayoutModes = LayoutMode.Squarified;
        }
        else if (args.Value == "SliceAndDiceHorizontal")
        {
            LayoutModes = LayoutMode.SliceAndDiceHorizontal;
        }
        else if (args.Value == "SliceAndDiceVertical")
        {
            LayoutModes = LayoutMode.SliceAndDiceVertical;
        }
        else
        {
            LayoutModes = LayoutMode.SliceAndDiceAuto;
        }
    }
    private void RenderDirectionchange(ChangeEventArgs<string, DropdownList> args)
    {
        RenderValue = args.Value;
        if (args.Value == "TopLeftBottomRight")
        {
            RenderMode = RenderingMode.TopLeftBottomRight;
        }
        else if (args.Value == "BottomLeftTopRight")
        {
            RenderMode = RenderingMode.BottomLeftTopRight;
        }
        else if (args.Value == "BottomRightTopLeft")
        {
            RenderMode = RenderingMode.BottomRightTopLeft;
        }
        else
        {
            RenderMode = RenderingMode.TopRightBottomLeft;
        }
    }
    public void OnOpen(PopupEventArgs args)
    {
        IsOpen = true;
    }

    public void OnClose(PopupEventArgs args)
    {
        DropdownTooltip?.CloseAsync();
    }
    public class LeafData
    {
        public string? State { get; set; }
        public int GDP { get; set; }
        public double Percentage { get; set; }
        public int Rank { get; set; }
    };

    public List<LeafData> Economics = new List<LeafData>
    {
        new LeafData { State = "United States", GDP = 17946, Percentage = 11.08, Rank = 1 },
        new LeafData { State = "China", GDP = 10866, Percentage = 28.42, Rank = 2 },
        new LeafData { State = "Japan", GDP = 4123, Percentage = -30.78, Rank = 3 },
        new LeafData { State = "Germany", GDP = 3355, Percentage = -5.19, Rank = 4 },
        new LeafData { State = "United Kingdom", GDP = 2848, Percentage = 8.28, Rank = 5 },
        new LeafData { State = "France", GDP = 2421, Percentage = -9.69, Rank = 6 },
        new LeafData { State = "India", GDP = 2073, Percentage = 13.65, Rank = 7 },
        new LeafData { State = "Italy", GDP = 1814, Percentage = -12.45, Rank = 8 },
        new LeafData { State = "Brazil", GDP = 1774, Percentage = -27.88, Rank = 9 },
        new LeafData { State = "Canada", GDP = 1550, Percentage = -15.02, Rank = 10 }
    };
}
