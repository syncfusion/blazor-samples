@page "/datagrid/template-exporting"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations;
@using System.Drawing;
@using Syncfusion.PdfExport;
@using System.Diagnostics
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

@*Hidden:Lines*@
<style>
    .fluent2-highcontrast .e-templatecell a {
        color: #337ab7 !important;
    }
</style>
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows how the DataGrid supports exporting templates, enabling you to export the template column along with customized captions and footer aggregators in PDF and Excel file formats.</p>
</SampleDescription>
<ActionDescription>
    <p>Using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_Template' aria-label="Navigate to the Template property reference for Grid column">Template</a> property, the Blazor DataGrid allows you to use a custom layout to display custom element values or content for each column. To specify custom content, use the <a target='_blank' href='https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.GridColumn.html' aria-label="Navigate to the class reference for GridColumn">GridColumn</a> components of the <code>Template</code> component. You can access the data within the template by using the implicit named parameter <strong>Context</strong>.</p>
    <p>Aggregates are supported by the Blazor DataGrid and will be displayed in the footer, group footer, and group caption. The <a target="_blank" href="https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.GridAggregates.html" aria-label="Navigate to the class reference for GridAggregates">GridAggregates</a> component can be used to provide aggregate configurations.</p>
    <p>In this demo, we showcase the display of the <strong>Email</strong> column as a hyperlink, facilitating its export to Excel and PDF files through the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEvents-1.html#Syncfusion_Blazor_Grids_GridEvents_1_ExcelQueryCellInfoEvent' aria-label="Navigate to the ExcelQueryCellInfoEvent event reference for DataGrid Events">ExcelQueryCellInfoEvent</a> and <a target='_blank' href='Syncfusion_Blazor_Grids_GridEvents_1_PdfQueryCellInfoEvent' aria-label="Navigate to the PdfQueryCellInfoEvent event reference for Grid Events">PdfQueryCellInfoEvent</a>events.</p>
    <p>Additionally, we utilized the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridAggregateColumn.html#Syncfusion_Blazor_Grids_GridAggregateColumn_GroupCaptionTemplate' aria-label="Navigate to the GroupCaptionTemplate property reference for GridAggregateColumn">GroupCaptionTemplate</a> to showcase the group caption aggregation for the <strong>Freight</strong> column. To export the group caption template, use the  <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEvents-1.html#Syncfusion_Blazor_Grids_GridEvents_1_ExcelGroupCaptionTemplateInfo' aria-label="Navigate to the ExcelGroupCaptionTemplateInfo event reference for GridEvents">ExcelGroupCaptionTemplateInfo</a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEvents-1.html#Syncfusion_Blazor_Grids_GridEvents_1_PdfGroupCaptionTemplateInfo' aria-label="Navigate to the PdfGroupCaptionTemplateInfo event reference for GridEvents">PdfGroupCaptionTemplateInfo</a> events.</p>
    <p>Grouping has been disabled for the <strong>Email</strong> and <strong> Freight</strong> columns.</p>
    <p>For exporting custom group captions and footer templates, we utilize the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEvents-1.html#Syncfusion_Blazor_Grids_GridEvents_1_ExcelAggregateTemplateInfo' aria-label="Navigate to the ExcelAggregateTemplateInfo event reference for GridEvents">ExcelAggregateTemplateInfo</a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEvents-1.html#Syncfusion_Blazor_Grids_GridEvents_1_PdfAggregateTemplateInfo' aria-label="Navigate to the PdfAggregateTemplateInfo event reference for GridEvents">PdfAggregateTemplateInfo</a> events.</p>
    <p>More information about the Exporting feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/excel-exporting' aria-label="Navigate to the documentation for excel-exporting in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid ID="Grid" @ref="Grid" DataSource="@GridData" AllowGrouping="true" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })" AllowExcelExport="true" AllowPdfExport="true">
                <GridGroupSettings Columns=@GroupedColumn>
                    <CaptionTemplate>
                        @{
                            var order = (context as CaptionTemplateContext);
                            <div>@order?.Field - @order?.Key</div>
                        }
                    </CaptionTemplate>
                </GridGroupSettings>
                <GridEvents OnToolbarClick="ToolbarClickHandler" ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" PdfQueryCellInfoEvent="PdfQueryCellInfoHandler" ExcelAggregateTemplateInfo="ExcelAggregateTemplateInfoHandler" PdfAggregateTemplateInfo="PdfAggregateTemplateInfoHandler" ExcelGroupCaptionTemplateInfo="ExcelGroupCaptionInfoHandler" PdfGroupCaptionTemplateInfo="PdfGroupCaptionInfoHandler" TValue="OrdersDetails"></GridEvents>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field="@nameof(OrdersDetails.Freight)" Type="AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var SumValue = (context as AggregateTemplateContext);
                                        <div>
                                            Total: @SumValue?.Sum
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Field=@nameof(OrdersDetails.Freight) Type="AggregateType.Max" Format="C2">
                                <GroupCaptionTemplate>
                                    @{
                                        var Maxcount = (context as AggregateTemplateContext);
                                        <div>
                                            Maximum: @Maxcount?.Max
                                        </div>
                                    }
                                </GroupCaptionTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field="@nameof(OrdersDetails.OrderID)" HeaderText="Order ID" Width="130"></GridColumn>
                    <GridColumn Field="@nameof(OrdersDetails.CustomerID)" HeaderText="Name" Width="130"></GridColumn>
                    <GridColumn Field="@nameof(OrdersDetails.Email)" HeaderText="Email ID" AllowGrouping="false" Width="150">
                        <Template>
                            @{
                                var con = (context as OrdersDetails);
                            }
                            <div class="link">
                                <a href="mailto:@con!.Email">@con.Email</a>
                            </div>
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(OrdersDetails.Freight)" Format="C2" TextAlign="TextAlign.Right" AllowGrouping="false" Width="160"></GridColumn>
                    <GridColumn Field="@nameof(OrdersDetails.OrderDate)" HeaderText="Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field="@nameof(OrdersDetails.ShipCountry)" HeaderText="Ship Country" Width="140"> </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    public List<OrdersDetails>? GridData { get; set; }
    private string[] GroupedColumn = new string[] { "CustomerID" };
    public SfGrid<OrdersDetails>? Grid { get; set; }

    protected override void OnInitialized()
    {

        GridData = OrdersDetails.GetAllRecords().Take(12).ToList();
    }

    public async Task ToolbarClickHandler(ClickEventArgs args)
    {
        if (Grid != null)
        {
            if (args.Item.Id == "Grid_excelexport")
            {
                ExcelExportProperties ExportProperties = new ExcelExportProperties();
                ExportProperties.IncludeTemplateColumn = true;
                await Grid.ExportToExcelAsync(ExportProperties);
            }
            else if (args.Item.Id == "Grid_pdfexport")
            {
                PdfExportProperties ExportProperties = new PdfExportProperties();
                ExportProperties.IncludeTemplateColumn = true;
                await Grid.ExportToPdfAsync(ExportProperties);
            }
        }
    }

    public void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<OrdersDetails> args)
    {
        if (args.Column.Field == "Email")
        {
            args.Cell.Value = "<a href=" + "mailto" + args.Value.ToString() + ">" + args.Value.ToString() + " </a>";
        }
    }

    public void PdfQueryCellInfoHandler(PdfQueryCellInfoEventArgs<OrdersDetails> args)
    {
        if (args.Column.Field == "Email")
        {
            PdfUriAnnotation uriAnnotation = new PdfUriAnnotation(new RectangleF(0, 0, 100, 100), "mailto:" + args.Value.ToString());
            uriAnnotation.Text = args.Data.Email;
            args.Cell.Value = uriAnnotation;              //customize the grid cell value here
        }
    }

    public void ExcelAggregateTemplateInfoHandler(ExcelAggregateEventArgs args)
    {
        if (args.Column.Field == "Freight")
        {
            if (args.Column.FooterTemplate != null)
            {
                args.Cell.Value = "Total: " + args.Value;       //customize the aggregate cell value here
            }
            else if (args.Column.GroupCaptionTemplate != null)
            {
                args.Cell.Value = "Maximum: " + args.Value;
            }
        }
    }
    public void PdfAggregateTemplateInfoHandler(PdfAggregateEventArgs args)
    {
        if (args.Column.Field == "Freight")
        {
            if (args.Column.FooterTemplate != null)
            {
                args.Cell.Value = "Total: " + args.Value;       //customize the aggregate cell value here
            }
            else if (args.Column.GroupCaptionTemplate != null)
            {
                args.Cell.Value = "Maximum: " + args.Value;
            }
        }
    }

    public void ExcelGroupCaptionInfoHandler(ExcelCaptionTemplateArgs args)
    {
        args.Cell.Value = args.Field + "-" + args.Key;       //customize the caption cell value here
    }
    public void PdfGroupCaptionInfoHandler(PdfCaptionTemplateArgs args)
    {
        args.Cell.Value = args.Field + "-" + args.Key;       //customize the caption cell value here
    }
}
