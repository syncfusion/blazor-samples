@page "/datagrid/custom-binding"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using System.Collections
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_orderdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample shows how to use custom data binding in the DataGrid component.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid custom data binding can be performed by providing the custom adaptor class
        and overriding the DataAdaptor abstract class's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataAdaptor-1.html#Syncfusion_Blazor_DataAdaptor_1_Read_Syncfusion_Blazor_DataManagerRequest_System_String_' aria-label="Navigate to the Read property reference for Data Adaptor">Read</a> or <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataAdaptor-1.html#Syncfusion_Blazor_DataAdaptor_1_ReadAsync_Syncfusion_Blazor_DataManagerRequest_System_String_' aria-label="Navigate to the ReadAsync method reference for Data Adaptor">ReadAsync</a> method</p>
    <p>The custom adaptor class must be added as service using <strong>AddScoped/AddSingleton</strong> method in the <strong>Startup.cs</strong>. Using the <strong>Inject</strong> attribute on a specific property, you can inject your own services or DB context into a custom adaptor class.</p>
    <p>The CRUD operations for the custom data binding in the DataGrid component can be implemented by overriding the DataAdaptor abstract class's CRUD methods, which are listed below.<br> </p>
    <ul>
        <li><strong>Insert/InsertAsync</strong> - Performs Insert operation.</li>
        <li><strong>Remove/RemoveAsync</strong> - Performs Remove operation.</li>
        <li><strong>Update/UpdateAsync</strong> - Performs Update operation.</li>
        <li><strong>BatchUpdate/BatchUpdateAsync</strong> - Performs BatchUpdate operation.</li>
    </ul>
    <p>In this demo, CRUD operations for the custom data binding are performed using the DataAdaptor abstract class's methods.
        Similarly, you can use the <strong>BatchUpdate/BatchUpdateAsync</strong> methods to perform Batch Update operations.</p>
    <p>More information about the Custom data binding feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/custom-binding' aria-label="Navigate to the documentation for Custom Binding in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="OrderDetails" AllowPaging="true" AllowGrouping="true" Height="400" Toolbar="@(new string[] {"Add","Edit","Delete","Update","Cancel"})">
                <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field=@nameof(OrderDetails.Freight) Type="AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Sum: @aggregate?.Sum</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field=@nameof(OrderDetails.Freight) Type="AggregateType.Average" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Average: @aggregate?.Average</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field=@nameof(OrderDetails.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="@TextAlign.Right" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" HeaderTextAlign="@TextAlign.Right" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrderDetails.CustomerID) HeaderText="Customer ID" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrderDetails.Freight) EditType="EditType.NumericEdit" Format="C2" AllowGrouping=false ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{1, 1000}})" Width="140" TextAlign="@TextAlign.Right" HeaderTextAlign="@TextAlign.Right"></GridColumn>
                    <GridColumn Field=@nameof(OrderDetails.OrderDate) HeaderText="Order Date" EditType="EditType.DatePickerEdit" ValidationRules="@(new ValidationRules{ Required=true})" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="160"></GridColumn>
                    <GridColumn Field=@nameof(OrderDetails.ShipName) HeaderText="Ship Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrderDetails.ShipCountry) HeaderText="Ship Country" EditType="EditType.DropDownEdit" EditorSettings="@ShipCountryEditParams" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public IEditorSettings ShipCountryEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>()
        {
            DataSource = new List<OrderDetails>()
        {
            new OrderDetails() { ShipCountry = "Denmark" },
            new OrderDetails() { ShipCountry = "Brazil" },
            new OrderDetails() { ShipCountry = "Germany" },
            new OrderDetails() { ShipCountry = "Austria" },
            new OrderDetails() { ShipCountry = "Switzerland" }
        }
        }
    };

    //The custom adaptor class has to be added as service using AddScoped/AddSingleton method in the Startup.cs.
    //You can inject your own services or DB context into custom adaptor class using Inject attribute on the particular property.
    public class CustomAdaptor : DataAdaptor
    {

        public List<OrderDetails> Orders { get; set; } = OrderDetails.GetAllRecords();

        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string? key = null)
        {
            IEnumerable GridData = Orders;
            IEnumerable DataSource = Orders;
            await Task.Delay(100); //To mimic asynchronous operation, we delayed this operation using Task.Delay
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(DataSource, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<OrderDetails>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = Orders.Count(), Aggregates = aggregates} : (object)GridData;
        }

        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            await Task.Delay(100); //To mimic asynchronous operation, we delayed this operation using Task.Delay
            var order = value as OrderDetails;
            if (order != null)
            {
                Orders.Insert(0, order);
            }
            return value;
        }

        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            await Task.Delay(100); //To mimic asynchronous operation, we delayed this operation using Task.Delay
            int data = (int)value;
            var order = Orders.FirstOrDefault(Order => Order.OrderID == data);
            if (order != null)
            {
                Orders.Remove(order);
            }
            return value;
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            await Task.Delay(100); //To mimic asynchronous operation, we delayed this operation using Task.Delay
            var val = (value as OrderDetails);
            var data = Orders.Where((Order) => Order.OrderID == val?.OrderID).FirstOrDefault();
            if (data != null && val != null) {
                data.CustomerID = val.CustomerID;
                data.Freight = val.Freight;
                data.OrderDate = val.OrderDate;
                data.ShipCountry = val.ShipCountry;
                data.ShipName = val.ShipName;
            }
            return value;
        }
    }
}