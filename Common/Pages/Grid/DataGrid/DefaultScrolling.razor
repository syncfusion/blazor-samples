@page "/datagrid/default-scrolling"

@using Syncfusion.Blazor.Grids
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
 <p>This sample shows the DataGrid component with horizontal and vertical scrollbars to view the DataGrid content that has been exceeded.</p>
</SampleDescription>
<ActionDescription>
    <p>When the content exceeds the element width or height, the Blazor DataGrid will display a scrollbar. The vertical and horizontal scrollbars will be displayed based on the criteria listed below.</p>
    <ul>
       <li>When the total height of the rows in DataGrid exceeds the element height, the vertical scrollbar appears.</li>
       <li>When the total width of the columns in DataGrid exceeds the element width, the horizontal scrollbar appears.</li>
    </ul>
    <p>The <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Height' aria-label="Navigate to the Height property reference for DataGrid component">Height </a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Width' aria-label="Navigate to the Width property reference for DataGrid component">Width </a>properties are used to specify the height and width of the DataGrid, respectively. These properties values should be in numeric, pixel (px), or percentage (%) form.</p>
    <p>The DataGrid's <b>Height</b> and <b>Width</b> properties are set to <b>410</b> and <b>auto</b> respectively, in this demo.</p>
    <p>More information about the Scrolling feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/scrolling' aria-label="Navigate to the documentation for scrolling in DataGrid component">documentation</a>  section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid DataSource="@GridData" Height="410" Width="auto">
                    <GridColumns>
                        <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right"  Width="120"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText="Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right"  Width="130"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.Freight) Format="C2" TextAlign="TextAlign.Right"  Width="120"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShippedDate) HeaderText="Shipped Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right"  Width="140"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShipName) HeaderText="Ship Name" Width="170"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShipAddress) HeaderText="Ship Address" Width="320"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShipCity) HeaderText="Ship City" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" Width="150"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>

 @code{

    public List<OrdersDetails>? GridData { get; set; }


    protected override void OnInitialized()
    {

        GridData = OrdersDetails.GetAllRecords();
    }
}