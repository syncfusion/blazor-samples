@page "/datagrid/grid-dialog-template"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example shows how to edit dialog templates in DataGrid to perform CRUD operations.</p>
</SampleDescription>
<ActionDescription>
  <p>The Blazor DataGrid dialog template editing features allow you to edit the currently selected row data with a dialog that includes custom components. You can carry out the following CRUD operations:</p>
  <ul>
       <li><strong>Add</strong> -  To add new record, click Add toolbar button.</li>
       <li><strong>Edit</strong> - To edit record, double click a row or click toolbar Edit button after selecting a row.</li>
       <li><strong>Delete</strong> - To delete record, click toolbar Delete button after selecting a row.</li>
       <li><strong>Update</strong> - To save the edited changes, click toolbar Update button.</li> 
       <li><strong>Cancel</strong> - To discard the edited changes, click toolbar Cancel button.</li>
   </ul>
    <p>The CRUD operations in DataGrid can be configured using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEditSettings.html' aria-label="Navigate to the class reference for GridEditSettings">GridEditSettings</a>  component. It also has various modes for manipulating the datasource.</p>
   <p>The modes that are available are,</p>
   <ul>
       <li><strong>Inline</strong></li>
       <li><strong>Batch</strong></li>
   </ul>
    <p>In this demo, Dialog mode is enabled for editing by setting <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEditSettings.html#Syncfusion_Blazor_Grids_GridEditSettings_Mode' aria-label="Navigate to the Mode property reference for GridEditSettings">Mode</a> to Dialog in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEditSettings.html' aria-label="Navigate to the class reference for GridEditSettings">GridEditSettings</a> component. You can begin editing by double-clicking a row or clicking the Edit button on the toolbar. The currently selected row will be displayed on a dialog template, and you will be able to change the row values and save the edited data to the datasource. To render the custom dialog, use the <code>GridEditSettings</code> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridEditSettings.html#Syncfusion_Blazor_Grids_GridEditSettings_Template' aria-label="Navigate to the Template property reference for Grid edit settings">Template</a> component property.</p>
    <p>More information about the Dialog template editing feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/template-editing#dialog-template' aria-label="Navigate to the documentation for dialog template in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowPaging="true" Toolbar="@(new string[] {"Add", "Edit" ,"Delete","Update","Cancel" })">
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="OrdersDetails"></GridEvents>                
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                    <Template>
                        @{
                            var Order = (context as OrdersDetails);
                        }
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <SfNumericTextBox ID="OrderID" @bind-Value="@(Order!.OrderID)" Enabled="@Check" FloatLabelType="FloatLabelType.Always" Placeholder="Order ID"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <SfAutoComplete TItem="Customer" ID="CustomerID" @bind-Value="@(Order.CustomerID)" TValue="string" DataSource="@CustomerData" FloatLabelType="FloatLabelType.Always" Placeholder="Customer Name">
                                        <AutoCompleteFieldSettings Value="CustomerID"></AutoCompleteFieldSettings>
                                    </SfAutoComplete>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <SfNumericTextBox ID="Freight" @bind-Value="@(Order.Freight)" TValue="double?" FloatLabelType="FloatLabelType.Always" Placeholder="Freight"></SfNumericTextBox>
                                </div>
                                <div class="form-group col-md-6">
                                    <SfDatePicker ID="OrderDate" @bind-Value="@(Order.OrderDate)" FloatLabelType="FloatLabelType.Always" Placeholder="Order Date">
                                    </SfDatePicker>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <SfDropDownList ID="ShipCountry" TItem="Country" @bind-Value="@(Order.ShipCountry)" TValue="string" DataSource="@Name" FloatLabelType="FloatLabelType.Always" Placeholder="Ship Country">
                                        <DropDownListFieldSettings Value="ShipCountry" Text="ShipCountry"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group col-md-6">
                                    <SfDropDownList ID="ShipCity" TItem="Country" @bind-Value="@(Order.ShipCity)" TValue="string" DataSource="@Name" FloatLabelType="FloatLabelType.Always" Placeholder="Ship City">
                                        <DropDownListFieldSettings Value="ShipCity" Text="ShipCity"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <SfTextBox ID="ShipAddress" @bind-Value="@(Order.ShipAddress)" FloatLabelType="FloatLabelType.Always" Placeholder="Ship Address"></SfTextBox>
                                </div>
                            </div>
                        </div>
                    </Template>
                </GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="@TextAlign.Center" HeaderTextAlign="@TextAlign.Center" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.Freight)  Format="C2" Width="140" TextAlign="@TextAlign.Right" ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{1, 1000}})" HeaderTextAlign="@TextAlign.Right"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText="Order Date" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="160"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public List<OrdersDetails>? GridData { get; set; }

    private Boolean Check = false;

    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };
    

    protected override void OnInitialized()
    {
        
        GridData = OrdersDetails.GetAllRecords();
    }
    public void ActionBeginHandler(ActionEventArgs<OrdersDetails> args)
    {
        if (args.RequestType.ToString() == "Add")
        {
            Check = true;
        }
        else
        {
            Check = false;
        }
    }
    public class Country
    {
        public string? ShipCountry { get; set; }
        public string? ShipCity { get; set; }
    }
    List<Country> Name = new List<Country>
    {
        new Country() { ShipCountry= "Denmark", ShipCity= "Berlin" },
        new Country() { ShipCountry= "Brazil", ShipCity= "Madrid" },
        new Country() { ShipCountry= "Germany", ShipCity = "Cholchester" },
        new Country() { ShipCountry= "Austria", ShipCity = "Marseille" },
        new Country() { ShipCountry= "Switzerland", ShipCity = "Tsawassen" },
    };
    public class Customer
    {
        public string? CustomerID { get; set; }
    }
    List<Customer> CustomerData = new List<Customer>
    {
        new Customer() { CustomerID= "ALFKI" },
        new Customer() { CustomerID= "ANATR"},
        new Customer() { CustomerID= "ANTON"},
        new Customer() { CustomerID= "BLONP" },
        new Customer() { CustomerID= "BOLID"},
    };
}