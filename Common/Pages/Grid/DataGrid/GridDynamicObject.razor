@page "/datagrid/dynamicobject"

@using System.Dynamic
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample shows how to use DynamicObject data binding with CRUD operations, grouping, sorting, filtering, and aggregation in the DataGrid component.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid supports DynamicObject data binding. The <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_DataSource' aria-label="Navigate to the DataSource property reference for DataGrid component">DataSource</a> property can be assigned as list of DynamicObject.</p>
    <p>The <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_Type' aria-label="Navigate to the Type property reference for Grid column">Type</a> property of the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html' aria-label="Navigate to the class reference for GridColumn">GridColumn</a> allows you to set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.ColumnType.html' aria-label="Navigate to the class reference for ColumnType">ColumnType</a> based on its value type. In this demo, <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.ColumnType.html' aria-label="Navigate to the class reference for ColumnType">ColumnType</a> is set to <code>Integer</code> and <code>Decimal</code> for the <b>OrderID</b> and <b>Freight</b> columns.</p>
    <p>More information about the DynamicObject data binding feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-binding#dynamicobject-binding' aria-label="Navigate to the documentation for DynamicObject binding in DataGrid component">documentation</a> section.</p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" DataSource="@Orders" Height="400" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" AllowPaging="true" Toolbar="@ToolbarItems">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field="Freight" Type="AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Sum: @aggregate?.Sum</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Field="Verified" Type="AggregateType.TrueCount">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>True Count: @aggregate?.TrueCount</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field="Freight" Type="AggregateType.Average" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Average: @aggregate?.Average</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Field="Verified" Type="AggregateType.FalseCount">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>False Count: @aggregate?.FalseCount</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field="OrderID" HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" Type="ColumnType.Integer" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field="CustomerID" HeaderText="Customer ID" Width="120" ValidationRules="@(new ValidationRules { Required=true})"></GridColumn>
                    <GridColumn Field="Freight" Format="C2" TextAlign="TextAlign.Right" AllowGrouping=false ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{1, 1000}})" Type="ColumnType.Decimal" Width="120"></GridColumn>
                    <GridColumn Field="OrderDate" HeaderText=" Order Date" ValidationRules="@(new ValidationRules{ Required=true})" Format="d" TextAlign="TextAlign.Right" Width="130" Type="ColumnType.Date"></GridColumn>
                    <GridColumn Field="ShipCountry" HeaderText="Ship Country" EditorSettings="@ShipCountryEditParams" EditType="EditType.DropDownEdit" Width="150"></GridColumn>
                    <GridColumn Field="Verified" HeaderText="Active" TextAlign="TextAlign.Center" Width="150" Type="ColumnType.Boolean">
                        <FilterTemplate>
                            @{
                                var FilterContext = (context as PredicateModel);
                                bool? fValue = string.IsNullOrEmpty(FilterContext?.Value.ToString()) ? null : (bool?)FilterContext.Value;
                            }
                            <SfCheckBox Checked="@fValue"  EnableTriState="true" ValueChange="OnValueChange" TChecked="bool?"></SfCheckBox>
                        </FilterTemplate>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
@code {
    public SfGrid<DynamicDictionary>? Grid { get; set; }
    private List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" };
    public List<DynamicDictionary> Orders = new List<DynamicDictionary>() { };

    private List<string> DefaultShipCountrys = new List<string> { "USA", "UK" };
    private List<DynamicDictionary> DropdownDataSource = new List<DynamicDictionary>(); 

    private void InitializeDropdownDataSource()
    {
        DropdownDataSource = DefaultShipCountrys.Select(country =>
        {
            var d = new DynamicDictionary();
            d["ShipCountry"] = country;
            return d;
        }).ToList();
    }
    public IEditorSettings ShipCountryEditParams => new DropDownEditCellParams
        {
            Params = new DropDownListModel<object, object>
            {
                DataSource = DropdownDataSource,
                Text = "ShipCountry",
                Value = "ShipCountry",
                PopupWidth = "100%"
            }
        };
    protected override void OnInitialized()
    {

        Orders = Enumerable.Range(1, 75).Select((x) =>
        {
            dynamic d = new DynamicDictionary();
            d.OrderID = 1000 + x;
            d.CustomerID = x % 2 == 0 ? "ALFKI" : x % 5 == 0 ? "ANANTR" : x % 11 == 0 ? "ANTON" : "BOLID";
            d.Freight = Math.Round((2.3 * x), 2);
            d.OrderDate = x % 2 == 0 ? new DateTime(2010, 11, 5) : x % 5 == 0 ? new DateTime(2018, 10, 3) : x % 11 == 0 ? new DateTime(1995, 9, 9) : new DateTime(2012, 8, 2);
            d.ShipCountry = x % 3 == 0 ? "USA" : x % 2 == 0 ? "UK" : "USA";
            d.Verified = x % 3 == 0 ? true : false;
            return d;
        }).Cast<DynamicDictionary>().ToList<DynamicDictionary>();
        InitializeDropdownDataSource();

    }

    private async Task OnValueChange(ChangeEventArgs<bool?> args)
    {
        if (Grid != null)
        {
            if (args.Checked != null)
                await Grid.FilterByColumnAsync("Verified", "equal", args.Checked); //Perform filtering while check/uncheck the checkbox
            else
                await Grid.ClearFilteringAsync("Verified");
        }
    }

    public class DynamicDictionary : System.Dynamic.DynamicObject
    {
        Dictionary<string, object> dictionary = new Dictionary<string, object>();

        public override bool TryGetMember(GetMemberBinder binder, out object result)
        {
            string name = binder.Name;
            return dictionary.TryGetValue(name, out result!);
        }
        public override bool TrySetMember(SetMemberBinder binder, object? value)
        {
            dictionary[binder.Name] = value!;
            return true;
        }
        public object this[string key]
        {
            get => dictionary.ContainsKey(key) ? dictionary[key] : null!;
            set => dictionary[key] = value;
        }

        //The GetDynamicMemberNames method of DynamicObject class must be overridden and return the property names to perform data operation and editing while using DynamicObject.
        public override System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames()
        {
            return this.dictionary?.Keys!;
        }

    }
}