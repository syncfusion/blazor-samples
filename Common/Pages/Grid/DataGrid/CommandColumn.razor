@page "/datagrid/command-column"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example shows CRUD operations in DataGrid using the command column.</p>
</SampleDescription>
<ActionDescription>
    <p>The command column feature of the Blazor DataGrid allows you to render CRUD action buttons in a column. The <a target='_blank' href='https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.GridColumn.html' aria-label="Navigate to the class reference for GridColumn">GridColumn</a> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_Commands' aria-label="Navigate to the Commands property reference for Grid column">GridCommandColumns</a> accepts an array of <code>GridCommandColumn</code> components. The <a target='_blank' href='https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.CommandModel.html' aria-label="Navigate to the class reference for command model">GridCommandColumn</a> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.CommandModel.html#Syncfusion_Blazor_Grids_CommandModel_Type' aria-label="Navigate to the Type property reference for Grid CommandModel">Type</a> property can be used to define the predefined command button.</p>
    <p>The Blazor DataGrid provides an option to render CRUD action buttons in a column by using the command column feature. The  of the  component accepts array of  components. The predefined command button can be defined by using <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.CommandModel.html#Syncfusion_Blazor_Grids_CommandModel_Type' aria-label="Navigate to the Type property reference for Grid CommandModel">Type</a> property of the <code>GridCommandColumn</code> component.</p>
    <p>The built-in command buttons are,</p>
    <ul>
       <li><strong>Edit</strong> - To edit record, double click a row or click Edit button from command column after selecting a row </li>
       <li><strong>Delete</strong> - To delete record, click Delete button from command column after selecting a row </li>
       <li><strong>Update</strong> - To save the edited changes, click Update button from command column.</li>
       <li><strong>Cancel</strong> - To discard the edited changes, click Cancel button from command column.</li>
    </ul>
    <p>More information about the Command column editing can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/command-column-editing' aria-label="Navigate to the documentation for Command Column Editing in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowPaging="true">
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" ValidationRules="@(new ValidationRules{ Required=true})" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.Freight) ValidationRules="@(new ValidationRules{ Required=true, Range = new object[]{1, 1000}})" EditType="EditType.NumericEdit" Format="C2" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText="Order Date" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="160"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" EditType="EditType.DropDownEdit" EditorSettings="@ShipCountryEditParams"  Width="150"></GridColumn>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public List<OrdersDetails>? GridData { get; set; }
    public IEditorSettings ShipCountryEditParams = new DropDownEditCellParams
        {
            Params = new DropDownListModel<object, object>()
            {
                DataSource = new List<OrdersDetails>()
                {
                    new OrdersDetails() { ShipCountry = "Denmark" },
                    new OrdersDetails() { ShipCountry = "Brazil" },
                    new OrdersDetails() { ShipCountry = "Germany" },
                    new OrdersDetails() { ShipCountry = "Austria" },
                    new OrdersDetails() { ShipCountry = "Switzerland" }
                },
                PopupWidth = "100%"
            }
        };

    protected override void OnInitialized()
    {

        GridData = OrdersDetails.GetAllRecords();
    }
}