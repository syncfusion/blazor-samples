@page "/datagrid/infinite-scrolling"

@using Syncfusion.Blazor.Grids
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_griddata
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the DataGrid component’s infinite scrolling feature. You can use the scrollbar, navigation keys, or mouse wheel to perform the infinite scrolling action.</p>
</SampleDescription>
<ActionDescription>
    <p>The DataGrid's Infinite Scrolling feature allows users to load data using a load on demand concept, where buffered data is fetched only when the scrollbar reaches the end of the scroller. To enable Infinite Scrolling, set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_EnableInfiniteScrolling' aria-label="Navigate to the EnableInfiniteScrolling property reference for DataGrid component">EnableInfiniteScrolling</a> property to true.</p>
    <p>Note: When enabling <code>EnableInfiniteScrolling</code>, it's essential to define the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Height' aria-label="Navigate to the Height property reference for DataGrid component">Height</a> property as well. </p>
    <p>For further information about the infinite scrolling feature, please refer to the<a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/infinite-scrolling' aria-label="Navigate to the documentation for infinite scrolling in DataGrid component"> documentation</a> section. </p>
</ActionDescription>

<div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
            <SfGrid DataSource="@GridData" Height="410" Width="auto" EnableInfiniteScrolling="true">
                <GridPageSettings PageSize="50"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field="Field1" HeaderText="Player Name" Width="120"></GridColumn>
                    <GridColumn Field="Field2" HeaderText="Year" IsPrimaryKey=true TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="Field3" HeaderText="Stint" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="Field4" HeaderText="TMID" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="Field5" HeaderText="LGID" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="Field6" HeaderText="GP" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="Field7" HeaderText="GS" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>
        

@*Hidden:Lines*@
<style>
    .visible {
        display: inline-block;
        font-size: 18px;
        color: rgba(0,0,0,1);
    }

    .loading {
        position: absolute;
        height: 92%;
        width: 100%;
        background-color: rgba(1,1,1,0.2);
        z-index: 10000;
        display: flex;
        align-items: center;
        padding-left: 44%;
    }

    .topload {
        font-size: 15px;
    }

    .apply-padding {
        padding-bottom: 10px;
    }
</style>
@*End:Hidden*@

@code {

    public List<VirtualData> GridData { get; set; } = new List<VirtualData>();

    public Boolean Data = true;
    
    protected override void OnInitialized()
    {
        
        GridData = GetAllRecords();
    }

    public List<VirtualData> GetAllRecords()
    {
        List<VirtualData> data = new List<VirtualData>(10000);
        Random random = new Random();
        string[] name = new string[] {"Aaren", "hardire", "abramjo01", "aubucch01", "Hook", "Rumpelstiltskin", "Belle", "Emma", "Regina", "Aurora", "Elsa",
          "Anna", "Snow White", "Prince Charming", "Cora", "Zelena", "August", "Mulan", "Graham", "Discord", "Will", "Robin Hood",
          "Jiminy Cricket", "Henry", "Neal", "Red", "Aaran", "Aarez", "Aarman", "Aaron", "Aaron-James", "Aarron", "Aaryan", "Aaryn",
          "Aayan", "Aazaan", "Abaan", "Abbas", "Abdallah", "Abdalroof", "Abdihakim", "Abdirahman", "Abdisalam", "Abdul", "Abdul-Aziz",
          "Abdulbasir", "Abdulkadir", "Abdulkarem", "Abdulkhader", "Abdullah", "Abdul-Majeed", "Abdulmalik", "Abdul-Rehman", "Abdur",
          "Abdurraheem", "Abdur-Rahman", "Abdur-Rehmaan", "Abel", "Abhinav", "Abhisumant", "Abid", "Abir", "Abraham", "Abu", "Abubakar",
          "Ace", "Adain", "Adam", "Adam-James", "Addison", "Addisson", "Adegbola", "Adegbolahan", "Aden", "Adenn", "Adie", "Adil", "Aditya",
          "Adnan", "Adrian", "Adrien", "Aedan", "Aedin", "Aedyn", "Aeron", "Afonso", "Ahmad", "Ahmed", "Ahmed-Aziz", "Ahoua", "Ahtasham",
          "Aiadan", "Aidan", "Aiden", "Aiden-Jack", "Aiden-Vee" };
        int x = 0;
        for (int i = 0; i < 10000; i++)
        {
            x = x >= name.Length ? 0 : x;
            string Field1 = name[x];
            int Field2 = 1900 + i;
            int Field3 = (i + 1) * 200;
            int Field4 = (i + 1) * 100;
            int Field5 = (i + 1) * 2000;
            int Field6 = (i + 1) * 1000;
            int Field7 = (i + 1) * 150;
            int Field8 = (i + 1) * 10;
            int Field9 = (i + 1) * 15;
            int Field10 = (i + 1) * 180;
            int Field11 = (i + 1) * 190;
            int Field12 = (i + 1) * 3000;
            int Field13 = (i + 1) * 20;
            int Field14 = (i + 1) * 17;
            int Field15 = (i + 1) * 2500;
            int Field16 = (i + 1) * 500;
            int Field17 = (i + 1) * 300;
            int Field18 = (i + 1) * 400;
            int Field19 = (i + 1) * 500;
            int Field20 = (i + 1) * 700;
            data.Add(new VirtualData()
            {
                Field1 = Field1,
                Field2 = Field2,
                Field3 = Field3,
                Field4 = Field4,
                Field5 = Field5,
                Field6 = Field6,
                Field7 = Field7,
                Field8 = Field8,
                Field9 = Field9,
                Field10 = Field10,
                Field11 = Field11,
                Field12 = Field12,
                Field13 = Field13,
                Field14 = Field14,
                Field15 = Field15,
                Field16 = Field16,
                Field17 = Field17,
                Field18 = Field18,
                Field19 = Field19,
                Field20 = Field20
            });
            x++;
        }
        return data;
    }
}