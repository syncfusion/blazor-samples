@page "/datagrid/cell-formatting"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@*Hidden:Lines*@
@using blazor_celldata
@using BlazorDemos
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the DataGrid's conditional cell formatting functionality.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid allows you to change the cell's entire background. This is possible by using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.QueryCellInfoEventArgs-1.html' aria-label="Navigate to the class reference for QueryCellInfo event args">QueryCellInfo</a> event.</p>
    <p>In this demo sample, the Week High and Week Low column cells are decorated with background and text colours via the <code>QueryCellInfo</code> event to indicate that the current Symbol has reached its high and low values.</p>
    <p>More information about the Cell formatting feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/cell/#customize-cell-styles' aria-label="Navigate to the documentation for Customize cell styles in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" Height="610" EnableHover="false" AllowSelection="false">
                <GridEvents QueryCellInfo="CustomizeCell" TValue="CellData"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(CellData.Symbol)" Width="80"></GridColumn>
                    <GridColumn Field="@nameof(CellData.Open)" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="@nameof(CellData.High)" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="@nameof(CellData.Low)" TextAlign="TextAlign.Right" Width="100"></GridColumn>
                    <GridColumn Field="@nameof(CellData.Change)" TextAlign="TextAlign.Right" Width="100">
                        <Template>
                            @{ var changeData = (context as CellData); {
                            <span class="down"> @changeData?.Change</span>
                            } }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(CellData.WH)" HeaderText="52wh" Width="100" TextAlign="TextAlign.Center">
                        <Template>
                            @{ var changeData = (context as CellData); { @if (changeData?.WH > 500 && changeData.WH < 3000) {

                            <span class="title-txt">@changeData.WH</span>

                            } @if (changeData?.WH < 500 || changeData?.WH > 3000) {
                            <span>@changeData.WH</span>
                            } } }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(CellData.WL)" HeaderText="52wl" Width="100" TextAlign="TextAlign.Center">
                        <Template>
                            @{ var changeData = (context as CellData); { @if (changeData?.WL > 500 && changeData.WL < 3000) {

                            <span class="title-txt">@changeData.WL</span>

                            } @if (changeData?.WL < 500 || changeData?.WL > 3000) {
                            <span>@changeData.WL</span>
                            } } }
                        </Template>
                    </GridColumn>
                    <GridColumn Field="@nameof(CellData.YearDays)" HeaderText="365 Days %Chg" Width="100" TextAlign="TextAlign.Center">
                        <Template>
                            @{ var changeData = (context as CellData); if (changeData?.YearDays < 0) {
                            <span class="down"> @changeData.YearDays<img class="image" src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/down.png")" alt="@changeData.YearDays" /></span>
                            } else {
                            <span class="up"> @changeData?.YearDays<img class="image" src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/up.png")" alt="@changeData?.YearDays" /></span>
                            } }
                        </Template>
                    </GridColumn>

                    <GridColumn Field="@nameof(CellData.MonthDays)" HeaderText="365 Days %Chg" Width="100" TextAlign="TextAlign.Center">
                        <Template>
                            @{ var changeData = (context as CellData); if (changeData?.MonthDays < 0) {
                            <span class="down"> @changeData.MonthDays<img class="image" src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/down.png")" alt="@changeData.MonthDays" /></span>
                            } else {
                            <span class="up"> @changeData?.MonthDays<img class="image" src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/up.png")" alt="@changeData?.MonthDays" /></span>

                            } }
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{


    public List<CellData>? GridData { get; set; }

    protected override void OnInitialized()
    {

        GridData = CellData.GetAllCellData();
    }
    public void CustomizeCell(QueryCellInfoEventArgs<CellData> args)
    {
        if (args.Column.Field == "WH")
        {
            if (args.Data.WH > 500 && args.Data.WH < 1000)
            {
                args.Cell.AddClass(new string[] { "average1" });

            }
            else if (args.Data.WH > 1000 && args.Data.WH < 2000)
            {
                args.Cell.AddClass(new string[] { "high1" });
            }
            else if (args.Data.WH > 2000 && args.Data.WH < 3000)
            {
                args.Cell.AddClass(new string[] { "veryhigh1" });
            }

        }
        if (args.Column.Field == "WL")
        {
            if (args.Data.WL > 500 && args.Data.WL < 1000)
            {
                args.Cell.AddClass(new string[] { "average" });
            }
            else if (args.Data.WL > 1000 && args.Data.WL < 2000)
            {
                args.Cell.AddClass(new string[] { "high" });
            }

            else if (args.Data.WL > 2000 && args.Data.WL < 3000)
            {
                args.Cell.AddClass(new string[] { "veryhigh" });
            }
        }
    }

}
@*Hidden:Lines*@
<style type="text/css" class="cssStyles">
    .average1, .high1, .veryhigh1, .average, .high {
        width: 50px;
    }
     .average1 {
	     background-color: #336c12;
    }
     .high1 {
	     background-color: #7b2b1d;
    }
     .veryhigh1 {
	     background-color: #205239;
    }
     .title-txt {
	     color: white;
    }
     .average {
	     background-color: #745a17;
	     Font: white;
    }
     .high {
	     background-color: #09576b;
	     text-decoration-color: white;
    }
     .veryhigh {
	     background-color: #397218;
	     color: white;
    }
     .image {
	     width: 10px;
	     height: 20px;
	     border-radius: 1px;
	     float:right;
    }
     .up {
	     color: green;
    }
     .down {
        color: #d30004;
    }
</style>
@*End:Hidden*@

