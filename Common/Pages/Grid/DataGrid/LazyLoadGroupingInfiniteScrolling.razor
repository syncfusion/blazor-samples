@page "/datagrid/lazyload-infinitescrolling"

@using Syncfusion.Blazor.Grids
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@using Syncfusion.Blazor.Data
@*Hidden:Lines*@
@using BlazorDemos
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@


<SampleDescription>
   <p>This sample demonstrates lazy load grouping with infinite scrolling in DataGrid component. In this sample, the DataGrid data is grouped against <b>Product Name</b> column.</p>
</SampleDescription>

<ActionDescription>
    <p>The Blazor DataGrid is rendered by configuring the following properties:</p>
    <ul>
        <li>Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridGroupSettings.html#Syncfusion_Blazor_Grids_GridGroupSettings_EnableLazyLoading' aria-label="Navigate to the EnableLazyLoading property reference for GridGroupSettings">EnableLazyLoading</a> property to <b>true</b> in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridGroupSettings.html' aria-label="Navigate to the class reference for GridGroupSettings">GridGroupSettings</a>.</li>
        <li>Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_EnableInfiniteScrolling' aria-label="Navigate to the EnableInfiniteScrolling property reference for DataGrid component">EnableInfiniteScrolling</a> property to <b>true</b>.</li>
    </ul>
    <p>In this demo, the <b>Product Name</b> column is initially grouped, resulting in the grid rendering only the caption rows in a collapsed state. </p>
    <p>When you expand a caption row, the corresponding grouped data is loaded on-demand. This approach avoids buffering grouped data. Instead, it loads only the relevant data and appends it to the already generated data within the viewport. This feature allows users to load a significant amount of grouped data as the scrollbar reaches the end of the scroller, without any performance degradation. </p>
    <p>In this demo, the next set of data is loaded based on the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridPageSettings.html#Syncfusion_Blazor_Grids_GridPageSettings_PageSize' aria-label="Navigate to the PageSize property reference for GridPageSettings">PageSize</a> property within the <code>GridPageSettings</code>. </p>
    <p>It's important to note that the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Height' aria-label="Navigate to the Height property reference for DataGrid component">Height</a> property must be defined when enabling <code>EnableInfiniteScrolling</code>. </p>
    <p>For further information about the lazy load grouping with infinite scrolling feature, please refer to the <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/lazy-load-grouping#lazy-load-grouping-with-infinite-scrolling' aria-label="Navigate to the documentation for Lazy loading grouping with infinite scrolling in DataGrid component">documentation</a> section dedicated to this topic. </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="Customer" DataSource="customers" ID="Grid" RowHeight="36" AllowGrouping="true" EnableInfiniteScrolling=true Height="400">
                <GridGroupSettings ShowGroupedColumn=true EnableLazyLoading="true" Columns="@GroupedColumns">
				    <CaptionTemplate>
                        @{
                            var customer = (context as CaptionTemplateContext);
                            <div>@customer?.Field - @customer?.Key</div>
                        }
                    </CaptionTemplate>
				</GridGroupSettings>
                <GridPageSettings PageSize=20></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Customer.OrderID) HeaderText="Order ID" IsPrimaryKey=true AllowGrouping="false" TextAlign="@TextAlign.Center" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Customer.ProductID) HeaderText="ProductID" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Customer.ProductName) HeaderText="Product Name" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(Customer.CustomerID) HeaderText="Customer ID" Width="170"></GridColumn>
                    <GridColumn Field=@nameof(Customer.UnitsInStock) HeaderText="Units In Stock" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{
    public string[] GroupedColumns = new string[] {"ProductName"};

    public List<Customer> customers { get; set; } = new List<Customer>();

    

    protected override void OnInitialized()
    {
        
        customers = GetAllRecords();
    }


    public static List<Customer> GetAllRecords()
    {
        List<Customer> customers = new List<Customer>();
        string[] CustomerId ={"VINET", "TOMSP", "HANAR", "VICTE", "SUPRD", "HANAR", "CHOPS", "RICSU", "WELLI", "HILAA", "ERNSH", "CENTC",
            "OTTIK", "QUEDE", "RATTC", "ERNSH", "FOLKO", "BLONP", "WARTH", "FRANK", "GROSR", "WHITC", "WARTH", "SPLIR", "RATTC", "QUICK", "VINET",
            "MAGAA", "TORTU", "MORGK", "BERGS", "LEHMS", "BERGS", "ROMEY", "ROMEY", "LILAS", "LEHMS", "QUICK", "QUICK", "RICAR", "REGGC", "BSBEV",
            "COMMI", "QUEDE", "TRADH", "TORTU", "RATTC", "VINET", "LILAS", "BLONP", "HUNGO", "RICAR", "MAGAA", "WANDK", "SUPRD", "GODOS", "TORTU",
            "OLDWO", "ROMEY", "LONEP", "ANATR", "HUNGO", "THEBI", "DUMON", "WANDK", "QUICK", "RATTC", "ISLAT", "RATTC", "LONEP", "ISLAT", "TORTU",
            "WARTH", "ISLAT", "PERIC", "KOENE", "SAVEA", "KOENE", "BOLID", "FOLKO", "FURIB", "SPLIR", "LILAS", "BONAP", "MEREP", "WARTH", "VICTE",
            "HUNGO", "PRINI", "FRANK", "OLDWO", "MEREP", "BONAP", "SIMOB", "FRANK", "LEHMS", "WHITC", "QUICK", "RATTC", "FAMIA" };          
        string[] Product = { "Chai", "Chang", "Syrup", "Corn Snacks", "Gumbo Mix", "Seeds",
            "Dried Pears", "Sauce", "Mishi Kobe Niku", "Ikura", "Queso Cabrales", "Queso Manchego Pastora", "Konbu",
            "Tofu", "Genen Shouyu", "Pavlova", "Alice Mutton", "Biscuits", "Teatime Chocolate Biscuits", "Sir Rodney\"s Marmalade", "Sir Rodney\"s Scones",
            "Gustaf\"s Knäckebröd", "Tunnbröd", "Guaraná Fantástica", "Nougat-Creme", "Gumbär Gummibärchen", "Schoggi Schokolade", "Rössle Sauerkraut",
            "Thüringer Rostbratwurst", "Nord-Ost Matjeshering", "Gorgonzola Telino", "Mascarpone Fabioli", "Geitost", "Sasquatch Ale", "Steeleye Stout", "Inlagd Sill",
            "Gravad lax", "Nuts", "Chips", "Crab Meat", "Jack\"s Clam Chowder", "Singaporean Fried Mee", "Ipoh Coffee",
            "Gula Malacca", "Rogede sild", "Spegesild", "Zaanse koeken", "Chocolade", "Maxilaku", "Valkoinen suklaa", "Manjimup Dried Apples", "Filo Mix", "Perth Pasties",
            "Tourtičre", "Pâté chinois", "Ipoh Coffee", "Ravioli Angelo", "Escargots Bourgogne", "Raclette Courdavault", "Cake", "Sirop d\"érable",
            "Tarte au sucre", "Vegie-spread", "Lakkalikri", "Louisiana Pepper Sauce", "Louisiana Hot Spiced Okra", "Lumberjack Lager", "Scottish Longbreads",
            "Gudbrandsdalsost", "Outback Lager", "Flotemysost", "Mozzarella di Giovanni", "Röd Kaviar", "Longlife Tofu", "Rhönbräu Klosterbier", "Lakkalikööri", "Original Frankfurter" };
        int OrderID = 1001;
        int i = 0; int j = 0; int k = 0; int l = 0; int m = 0;
        for (int x = 0; x < 50000; x++)
        {
            i = i >= CustomerId.Length ? 0 : i; 
            l = l >= Product.Length ? 0 : l; 
            customers.Add(new Customer() 
            { 
                OrderID = OrderID + x, 
                ProductID = x % 1000,
                CustomerID = CustomerId[i],                  
                ProductName = Product[l],  
                UnitsInStock = 300 * 7  
            });
            i++; j++; k++; l++; m++;
        }
        return customers;
    }

    public class Customer
    {
        public int OrderID { get; set; }
        public string? CustomerID { get; set; }
        public string? CustomerName { get; set; }
        public string? CustomerAddress { get; set; }
        public string? ProductName { get; set; }
        public int ProductID { get; set; }
        public string? Quantity { get; set; }
        public int UnitsInStock { get; set; }
        
    }
}
