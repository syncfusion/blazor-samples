@page "/datagrid/datatable-binding"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using System.Data
@using System.Dynamic
@using System.Collections
@*Hidden:Lines*@
@using BlazorDemos
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample shows how to use DataTable data binding with CRUD operations, grouping, sorting, filtering, and aggregation in the DataGrid component.</p>
</SampleDescription>
<ActionDescription>
    <p>DataTable represents a table with data rows and columns. Data binding of the DataTable can be achieved in the DataGrid component by providing the <b>CustomAdaptor</b> class and overriding the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataAdaptor-1.html#Syncfusion_Blazor_DataAdaptor_1_Read_Syncfusion_Blazor_DataManagerRequest_System_String_' aria-label="Navigate to the Read property reference for Data Adaptor">Read</a> or <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataAdaptor-1.html#Syncfusion_Blazor_DataAdaptor_1_ReadAsync_Syncfusion_Blazor_DataManagerRequest_System_String_' aria-label="Navigate to the ReadAsync method reference for Data Adaptor">ReadAsync</a> method of the <b>DataAdaptor</b> abstract class.</p>
    <p>To bind DataTable to the datagrid, you can assign <b>TValue</b> to the <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-binding#expandoobject-binding' aria-label="Navigate to the documentation for ExpandoObject binding in DataGrid component">ExpandoObject</a>. You can perform DataTable data binding with CRUD operations, grouping, sorting, filtering, and aggregation in the DataGrid component.</p>
    <p>More information about the DataTable data binding feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-binding#datatable-binding' aria-label="Navigate to the documentation for DataTable binding in DataGrid component">documentation</a> section.</p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="ExpandoObject" ID="Grid" AllowSorting="true" AllowGrouping="true" AllowPaging="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel","Search" })">
                <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
                <GridEditSettings AllowEditing="true" AllowDeleting="true" AllowAdding="true" Mode="@EditMode.Normal"></GridEditSettings>
                <GridPageSettings PageSize="8"></GridPageSettings>
                <GridGroupSettings ShowGroupedColumn="true"></GridGroupSettings>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field=Freight Type="AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Sum: @aggregate?.Sum</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field=Freight Type="AggregateType.Average" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Average: @aggregate?.Average</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field="OrderID" HeaderText="Order ID" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="TextAlign.Right" Type="ColumnType.Integer" Width="120"></GridColumn>
                    <GridColumn Field="CustomerID" HeaderText="Customer Name" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
                    <GridColumn Field="OrderDate" HeaderText="Order Date" Format="d" ValidationRules="@(new ValidationRules{ Required=true})" AllowGrouping="false" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field="EmployeeID" HeaderText="Employee ID" TextAlign="TextAlign.Right" ValidationRules="@(new ValidationRules{ Range = new object[]{1, 1000}})" Width="120"></GridColumn>
                    <GridColumn Field="Freight" TextAlign="TextAlign.Right" Type="ColumnType.Double" AllowGrouping="false" Format="C2" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    public static DataTable? dataTable { get; set; }
    public static IQueryable? DataSource;

    protected override void OnInitialized()
    {
        dataTable = GetData();
        DataSource = ToQueryableCollection(dataTable);      // Convert DataTable to IQueryable ExpandoObject list
    }

    // Implementing custom adaptor by extending the DataAdaptor class
    public class CustomAdaptor : DataAdaptor
    {
        // Performs data Read operation
        public override object Read(DataManagerRequest dm, string? key = null)
        {
            // Performs Searching, Sorting, Filtering
            DataSource = PerformDataOperation(dataTable!, dm);

            int count = DataSource.Cast<ExpandoObject>().Count();
            if (dm.Skip != 0)
            {
                //Paging
                DataSource = QueryableOperation.PerformSkip<object>((IQueryable<object>)DataSource, dm.Skip);
            }
            if (dm.Take != 0)
            {
                DataSource = QueryableOperation.PerformTake<object>((IQueryable<object>)DataSource, dm.Take);
            }
            // Aggregation
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dm.Aggregates != null)
            {
                aggregates = DataUtil.PerformAggregation(DataSource, dm.Aggregates);

            }
            // Grouping
            DataResult DataObject = new DataResult();
            if (dm.Group != null)
            {
                IEnumerable result = (IEnumerable)DataSource;
                foreach (var group in dm.Group)
                {
                    result = DataUtil.Group<ExpandoObject>(result, group, dm.Aggregates, 0, dm.GroupByFormatter);

                }
                return dm.RequiresCounts ? new DataResult() { Result = result, Count = count, Aggregates = aggregates } : (object)DataSource;
            }
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count, Aggregates = aggregates } : (object)DataSource;
        }

        //Performs Insert operation
        public override object Insert(DataManager dm, object value, string key)
        {
            DataRow newRow = dataTable?.NewRow()!;
            var data = (ExpandoObject)value;
            foreach (var item in data)
            {
                newRow[item.Key] = item.Value ?? DBNull.Value;
            }
            dataTable?.Rows.InsertAt(newRow, 0);

            return value;
        }

        //Performs Remove operation
        public override object Remove(DataManager dm, object value, string keyField, string key)
        {
            DataRow? rowToRemove = null;

            foreach (DataRow row in dataTable?.Rows!)
            {
                if (row[keyField].Equals(value))
                {
                    rowToRemove = row;
                    break;
                }
            }

            if (rowToRemove != null)
            {
                dataTable.Rows.Remove(rowToRemove);
            }
            return value;
        }

        // Performs Update operation
        public override object Update(DataManager dm, object value, string keyField, string key)
        {
            var data = (IDictionary<string, object>)value;
            var rowToUpdate = dataTable?.Rows
                .Cast<DataRow>()
                .FirstOrDefault(row => row[keyField].Equals(data[keyField]));

            if (rowToUpdate != null)
            {
                foreach (DataColumn column in dataTable?.Columns!)
                {
                    var columnName = column.ColumnName;
                    var newValue = data[column.ColumnName] ?? column.DefaultValue;
                    rowToUpdate[columnName] = newValue;
                }
            }
            return value;
        }
    }

    public static IQueryable ToQueryableCollection(DataTable dt)
    {
        List<ExpandoObject> expandoList = new List<ExpandoObject>();
        foreach (DataRow row in dt.Rows)
        {
            var expandoDict = new ExpandoObject() as IDictionary<String, Object>;
            foreach (DataColumn col in dt.Columns)
            {
                var colValue = row[col.ColumnName];
                colValue = (colValue == DBNull.Value) ? null : colValue;
                expandoDict.Add(col.ToString(), colValue!);
            }
            expandoList.Add((ExpandoObject)expandoDict!);
        }
        return expandoList.AsQueryable();
    }

    public static IQueryable PerformDataOperation(DataTable dt, DataManagerRequest dm)
    {
        DataSource = ToQueryableCollection(dt);
        if (dm.Search != null && dm.Search.Count > 0)
        {
            // Searching
            DataSource = DynamicObjectOperation.PerformSearching(DataSource, dm.Search);
        }
        if (dm.Sorted != null && dm.Sorted.Count > 0)
        {
            // Sorting
            DataSource = DynamicObjectOperation.PerformSorting(DataSource, dm.Sorted);
        }
        if (dm.Where != null && dm.Where.Count > 0)
        {
            // Filtering
            DataSource = DynamicObjectOperation.PerformFiltering(DataSource, dm.Where, dm.Where[0].Operator);
        }

        return DataSource;
    }

    public DataTable GetData()
    {
        DataTable dt = new DataTable();
        dt.Columns.AddRange(new DataColumn[5] { new DataColumn("OrderID", typeof(long)),
                                                new DataColumn("CustomerID", typeof(string)),
                                                new DataColumn("EmployeeID", typeof(int)),
                                                new DataColumn("OrderDate", typeof(DateTime)),
                                                new DataColumn("Freight", typeof(double))
        });

        int code = 1000;
        int id = 0;
        for (int i = 1; i <= 15; i++)
        {
            dt.Rows.Add(code + 1, "ALFKI", id + 1, new DateTime(1991, 05, 15), 2.32 * i);
            dt.Rows.Add(code + 2, "ANATR", id + 2, new DateTime(1990, 04, 04), 1.28 * i);
            dt.Rows.Add(code + 3, "ANTON", id + 3, new DateTime(1957, 11, 30), 4.31 * i);
            dt.Rows.Add(code + 4, "BLONP", id + 4, new DateTime(1930, 10, 22), 2.56 * i);
            dt.Rows.Add(code + 5, "BOLID", id + 5, new DateTime(1953, 02, 18), 5.54 * i);
            code += 5;
            id += 5;
        }
        return dt;
    }
}
