@page "/datagrid/filtering"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_categorydata
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example shows how to use the DataGrid's default filtering feature. To filter a specific column in this example, type the value in the filter bar and press enter.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid filtering feature allows users to view fewer records based on the filter criteria. Filtering can be enabled by setting the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_AllowFiltering' aria-label="Navigate to the AllowFiltering property reference for DataGrid component">AllowFiltering</a> property to <b>true</b>.</p>
   <p>A filter bar row will be displayed next to the header, allowing users to filter data by entering text into its cells.</p>
   <p>The filter bar has two modes that specify how to begin filtering. They are,</p>
    <ul>
        <li><strong>OnEnter</strong> - When this option is enabled, the filter is activated when the Enter key is pressed.</li>
        <li><strong>Immediate </strong> - The filter will begin as soon as the user stops typing. This uses a 1500ms time delay to start the filter after the user has stopped typing. The <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridFilterSettings.html' aria-label="Navigate to the class reference for GridFilterSettings">GridFilterSettings</a> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridFilterSettings.html#Syncfusion_Blazor_Grids_GridFilterSettings_ImmediateModeDelay' aria-label="Navigate to the ImmediateModeDelay property reference for Grid filter settings">ImmediateModeDelay</a> property can be used to override it. </li>
    </ul>
    <p>In this demo, you can filter the DataGrid by typing text into the filter bar cells.</p>
    <p>More information about the Filtering feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/filtering' aria-label="Navigate to the documentation for filtering in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" DataSource="@GridData" AllowFiltering="true" AllowPaging="true">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Category.CategoryName) HeaderText="Category Name" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Category.ProductName) HeaderText="Product Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Category.QuantityPerUnit) HeaderText="Quantity per Unit" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Category.UnitsInStock) HeaderText="Units in Stock" Width="150" TextAlign="TextAlign.Right"></GridColumn>
                    <GridColumn Field=@nameof(Category.Discontinued) HeaderText="Discontinued" Width="150" TextAlign="TextAlign.Center" Type="ColumnType.Boolean">
                        <FilterTemplate>
                            @{
                                var FilterContext = (context as PredicateModel);
                                bool? fValue = string.IsNullOrEmpty(FilterContext?.Value.ToString()) ? null : (bool?)FilterContext.Value;
                            }
                            <SfCheckBox Checked="@fValue"  EnableTriState="true" ValueChange="OnValueChange" TChecked="bool?"></SfCheckBox>
                        </FilterTemplate>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public SfGrid<Category>? Grid { get; set; }
    public List<Category>? GridData { get; set; }
    
    protected override void OnInitialized()
    {
        
        GridData = Category.GetAllRecords();
    }

    private async Task OnValueChange(ChangeEventArgs<bool?> args)
    {
        if(Grid != null){
        if (args.Checked != null)
            await Grid.FilterByColumnAsync("Discontinued", "equal", args.Checked); //Perform filtering while check/uncheck the checkbox
        else
            await Grid.ClearFilteringAsync("Discontinued");
        }
    }
}