@page "/datagrid/lazyload-paging"

@using Syncfusion.Blazor.Grids
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@using Syncfusion.Blazor.Data
@*Hidden:Lines*@
@using BlazorDemos
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@


<SampleDescription>
    <p>This sample demonstrates lazy loading with grouping and paging in the DataGrid component. In this sample, the data is grouped by the <b>Product Name</b> column.</p>
</SampleDescription> 

<ActionDescription>
    <p>The Blazor DataGrid is configured for lazy loading by setting the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridGroupSettings.html#Syncfusion_Blazor_Grids_GridGroupSettings_EnableLazyLoading' aria-label="Navigate to the EnableLazyLoading property reference for GridGroupSettings">EnableLazyLoading</a> property to <b>true</b> in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridGroupSettings.html' aria-label="Navigate to the class reference for GridGroupSettings">GridGroupSettings</a> and enabling paging by setting the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_AllowPaging' aria-label="Navigate to the AllowPaging property reference for DataGrid component">AllowPaging</a> property to <b>true</b>. The number of records displayed per page can be controlled using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridPageSettings.html#Syncfusion_Blazor_Grids_GridPageSettings_PageSize' aria-label="Navigate to the PageSize property reference for GridPageSettings">PageSize</a> property from <code>GridPageSettings</code>.</p>
    <p>In this sample, the DataGrid is initially grouped by the <b>Product Name</b> column, displaying only the caption rows in a collapsed view. When a caption row is expanded, the corresponding grouped records are loaded dynamically based on the defined page size. This approach avoids rendering the entire grouped dataset at once, resulting in improved performance and efficient handling of large datasets.</p>
    <p>More information about the lazy loading grouping feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/lazy-load-grouping#lazy-load-grouping-with-virtual-scrolling' aria-label="Navigate to the documentation for Lazy load grouping with virtual scrolling in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="Customer" DataSource="customers" ID="Grid" RowHeight="36" AllowGrouping="true" AllowPaging="true" Height="400">
                <GridGroupSettings ShowGroupedColumn=true EnableLazyLoading="true" Columns="@GroupedColumns">
                    <CaptionTemplate>
                        @{
                            var customer = (context as CaptionTemplateContext);
                            <div>@customer?.Field - @customer?.Key</div>
                        }
                    </CaptionTemplate>
                </GridGroupSettings>
                <GridPageSettings PageSize=20></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Customer.OrderID) HeaderText="Order ID" IsPrimaryKey=true AllowGrouping="false" TextAlign="@TextAlign.Center" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Customer.ProductID) HeaderText="ProductID" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Customer.ProductName) HeaderText="Product Name" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(Customer.CustomerID) HeaderText="Customer ID" Width="170"></GridColumn>
                    <GridColumn Field=@nameof(Customer.UnitsInStock) HeaderText="Units In Stock" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    public string[] GroupedColumns = new string[] { "ProductName" };

    public List<Customer> customers { get; set; } = new List<Customer>();



    protected override void OnInitialized()
    {

        customers = GetAllRecords();
    }


    public static List<Customer> GetAllRecords()
    {
        List<Customer> customers = new List<Customer>();
        string[] CustomerId ={"VINET", "TOMSP", "HANAR", "VICTE", "SUPRD", "HANAR", "CHOPS", "RICSU", "WELLI", "HILAA", "ERNSH", "CENTC",
            "OTTIK", "QUEDE", "RATTC", "ERNSH", "FOLKO", "BLONP", "WARTH", "FRANK", "GROSR", "WHITC", "WARTH", "SPLIR", "RATTC", "QUICK", "VINET",
            "MAGAA", "TORTU", "MORGK", "BERGS", "LEHMS", "BERGS", "ROMEY", "ROMEY", "LILAS", "LEHMS", "QUICK", "QUICK", "RICAR", "REGGC", "BSBEV",
            "COMMI", "QUEDE", "TRADH", "TORTU", "RATTC", "VINET", "LILAS", "BLONP", "HUNGO", "RICAR", "MAGAA", "WANDK", "SUPRD", "GODOS", "TORTU",
            "OLDWO", "ROMEY", "LONEP", "ANATR", "HUNGO", "THEBI", "DUMON", "WANDK", "QUICK", "RATTC", "ISLAT", "RATTC", "LONEP", "ISLAT", "TORTU",
            "WARTH", "ISLAT", "PERIC", "KOENE", "SAVEA", "KOENE", "BOLID", "FOLKO", "FURIB", "SPLIR", "LILAS", "BONAP", "MEREP", "WARTH", "VICTE",
            "HUNGO", "PRINI", "FRANK", "OLDWO", "MEREP", "BONAP", "SIMOB", "FRANK", "LEHMS", "WHITC", "QUICK", "RATTC", "FAMIA" };
        string[] Product = { "Chai", "Chang", "Syrup", "Corn Snacks", "Gumbo Mix", "Seeds",
            "Dried Pears", "Sauce", "Mishi Kobe Niku", "Ikura", "Queso Cabrales", "Queso Manchego Pastora", "Konbu",
            "Tofu", "Genen Shouyu", "Pavlova", "Alice Mutton", "Biscuits", "Teatime Chocolate Biscuits", "Sir Rodney\"s Marmalade", "Sir Rodney\"s Scones",
            "Gustaf\"s Knäckebröd", "Tunnbröd", "Guaraná Fantástica", "Nougat-Creme", "Gumbär Gummibärchen", "Schoggi Schokolade", "Rössle Sauerkraut",
            "Thüringer Rostbratwurst", "Nord-Ost Matjeshering", "Gorgonzola Telino", "Mascarpone Fabioli", "Geitost", "Sasquatch Ale", "Steeleye Stout", "Inlagd Sill",
            "Gravad lax", "Nuts", "Chips", "Crab Meat", "Jack\"s Clam Chowder", "Singaporean Fried Mee", "Ipoh Coffee",
            "Gula Malacca", "Rogede sild", "Spegesild", "Zaanse koeken", "Chocolade", "Maxilaku", "Valkoinen suklaa", "Manjimup Dried Apples", "Filo Mix", "Perth Pasties",
            "Tourtičre", "Pâté chinois", "Ipoh Coffee", "Ravioli Angelo", "Escargots Bourgogne", "Raclette Courdavault", "Cake", "Sirop d\"érable",
            "Tarte au sucre", "Vegie-spread", "Lakkalikri", "Louisiana Pepper Sauce", "Louisiana Hot Spiced Okra", "Lumberjack Lager", "Scottish Longbreads",
            "Gudbrandsdalsost", "Outback Lager", "Flotemysost", "Mozzarella di Giovanni", "Röd Kaviar", "Longlife Tofu", "Rhönbräu Klosterbier", "Lakkalikööri", "Original Frankfurter" };
        int OrderID = 1001;
        int i = 0; int j = 0; int k = 0; int l = 0; int m = 0;
        for (int x = 0; x < 50000; x++)
        {
            i = i >= CustomerId.Length ? 0 : i;
            l = l >= Product.Length ? 0 : l;
            customers.Add(new Customer()
                {
                    OrderID = OrderID + x,
                    ProductID = x % 1000,
                    CustomerID = CustomerId[i],
                    ProductName = Product[l],
                    UnitsInStock = 300 * 7
                });
            i++; j++; k++; l++; m++;
        }
        return customers;
    }

    public class Customer
    {
        public int OrderID { get; set; }
        public string? CustomerID { get; set; }
        public string? CustomerName { get; set; }
        public string? CustomerAddress { get; set; }
        public string? ProductName { get; set; }
        public int ProductID { get; set; }
        public string? Quantity { get; set; }
        public int UnitsInStock { get; set; }

    }
}
