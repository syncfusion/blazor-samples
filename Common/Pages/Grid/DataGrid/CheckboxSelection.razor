@page "/datagrid/checkbox-selection"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Buttons 
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the DataGrid's checkbox selection functionality. Using the header checkbox, you can select or deselect all rows. Click the desired row checkbox to select or deselect it.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid supports multi-selection through the use of checkboxes in each row. To display a checkbox in each DataGrid row, set the column type to <strong>CheckBox</strong> in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_Type' aria-label="Navigate to the Type property reference for DataGrid column">Type</a> property of the <a target='_blank' href='https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.GridColumn.html ' aria-label="Navigate to the class reference for GridColumn">GridColumn</a> component.</p>
    <p>The <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridSelectionSettings.html#Syncfusion_Blazor_Grids_GridSelectionSettings_PersistSelection' aria-label="Navigate to the PersistSelection property reference for Grid selection settings">PersistSelection</a> property of the <a target='_blank' href='https://help.syncfusion.com/cr/aspnetcore-blazor/Syncfusion.Blazor.Grids.GridSelectionSettings.html' aria-label="Navigate to the class reference for GridSelectionSettings">GridSelectionSettings</a> component can be used to persist selection across all operations. Any one of the columns should be defined as a primary key using the  <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_IsPrimaryKey' aria-label="Navigate to the IsPrimaryKey property reference for Grid column">IsPrimaryKey</a> property of the <code>GridColumn</code> component for persisting selection on the DataGrid.</p>
    <p>In this demo, multi-selection is enabled along with selection persistence. Remote data support has been enhanced, allowing you to dynamically switch the DataGrid's data source between local and remote data seamlessly. You can shift from local data to remote data by checking the <code>Remote Data</code> check box provided in the sample.</p>
    <p>More information about the Checkbox selection feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/selection/#checkbox-selection' aria-label="Navigate to the documentation for Checkbox selection in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
             <div class="e-switch-control">
                <div>
                    <SfCheckBox @bind-Checked="@isChecked" LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.Before" Label="Remote Data"></SfCheckBox>
                </div>
            </div>
            @if (isChecked){
                <SfGrid AllowSelection="true" AllowPaging="true" TValue="OrdersDetails">
                    <SfDataManager Url="http://localhost:63028/api/Orders/" CrossDomain="true" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                    <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" IsPrimaryKey="true" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.Freight) Format="C2" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShippedDate) HeaderText="Shipped Date" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="150"></GridColumn>
                    </GridColumns>
                </SfGrid>
            }
            else{
                <SfGrid DataSource="@GridData" AllowSelection="true" AllowPaging="true">
                    <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                    <GridColumns>
                        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" IsPrimaryKey="true" Width="120"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.Freight) Format="C2" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                        <GridColumn Field=@nameof(OrdersDetails.ShippedDate) HeaderText="Shipped Date" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="150"></GridColumn>
                    </GridColumns>
                </SfGrid>
            }
            
        </div>
    </div>
</div>

@code{

    public List<OrdersDetails>? GridData { get; set; }

    public bool isChecked = false;
    protected override void OnInitialized()
    {

        GridData = OrdersDetails.GetAllRecords();
    }
}
@*Hidden:Lines*@
<style type="text/css" class="cssStyles">
    .e-checkbox-wrapper .e-checkbox + .e-label {
        font-weight: bold;
    }

    .fluent2-highcontrast .e-switch-control,
    .fluent2-dark .e-switch-control,
    .fluent2 .e-switch-control {
        padding-bottom: 20px;
        margin-left: -10px;
    }

    .highcontrast .e-switch-control,
    .fluent .e-switch-control,
    .fluent-dark .e-switch-control,
    .material3 .e-switch-control,
    .material3-dark .e-switch-control,
    .bootstrap5\.3 .e-switch-control,
    .bootstrap5\.3-dark .e-switch-control,
    .tailwind3 .e-switch-control,
    .tailwind3-dark .e-switch-control,
    .material .e-switch-control,
    .material-dark .e-switch-control,
    .bootstrap4 .e-switch-control,
    .bootstrap5 .e-switch-control,
    .bootstrap5-dark .e-switch-control,
    .tailwind .e-switch-control,
    .tailwind-dark .e-switch-control,
    .fabric .e-switch-control,
    .fabric-dark .e-switch-control {
        padding-bottom: 20px;
    }
</style>
@*End:Hidden*@