@page "/datagrid/column-chooser-template"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs;
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_ordersdetails
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>The DataGrid column chooser template feature is demonstrated in this sample.</p>
</SampleDescription>
<ActionDescription>
    <p>The column chooser feature allows the Blazor DataGrid columns to be shown/hidden dynamically. Set the  <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_ShowColumnChooser' aria-label="Navigate to the ShowColumnChooser property reference for DataGrid component">ShowColumnChooser</a> property as <b>true</b> to enable the column chooser.</p>
    <p>In this demo, the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumnChooserSettings.html' aria-label="Navigate to the class reference for GridColumnChooserSettings">GridColumnChooserSettings</a> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumnChooserSettings.html#Syncfusion_Blazor_Grids_GridColumnChooserSettings_Template' aria-label="Navigate to the Template property reference for Grid column chooser settings">Template</a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumnChooserSettings.html#Syncfusion_Blazor_Grids_GridColumnChooserSettings_FooterTemplate' aria-label="Navigate to the FooterTemplate property reference for GridColumnChooserSettings">FooterTemplate</a> are used to customize the content and footer of the column chooser dialog.</p>
    <p>More information about the Column chooser template feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/column-chooser#column-chooser-template' aria-label="Navigate to the documentation for Column Chooser in Blazor DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="grid" DataSource="@GridData" ShowColumnChooser="true" Toolbar="@( new List<string>() { "ColumnChooser"})" AllowPaging="true">
                <GridColumnChooserSettings>
                    <Template>
                        @{
                            if(initialGrid)
                            {
                                templateContext = context as ColumnChooserTemplateContext;
                            }
                        }
                        <div class="@className">
                            <SfTextBox @ref="@textBox" CssClass="e-cc-searchinput" Value="@searchText" Placeholder="Search" Input="@OnInput" OnFocus="Focus" OnBlur="Blur"></SfTextBox>
                            @if (@cancelIcon == "e-cc-cancel")
                            {
                                <span class="e-ccsearch-icon e-icons e-cc e-input-group-icon @cancelIcon" @onclick="@((e)=> CancelIconClick(e))" ></span>
                            }
                            else
                            {
                                <span class="e-ccsearch-icon e-icons e-cc e-input-group-icon"></span>
                            }
                        </div>
                        @if (templateContext?.Columns != null &&  ShouldRenderGroup("Order Details", templateContext.Columns))
                        {
                            <GridColumnChooserItemGroup Title="Order Details">
                                @foreach (var column in GetGroupColumns("Order Details", templateContext.Columns))
                                {
                                    <GridColumnChooserItem Column="column"></GridColumnChooserItem>
                                }
                            </GridColumnChooserItemGroup>
                        }
                        @if (templateContext?.Columns != null && ShouldRenderGroup("Ship Details", templateContext.Columns))
                        {
                            <GridColumnChooserItemGroup Title="Ship Details">
                                @foreach (var column in GetGroupColumns("Ship Details", templateContext.Columns))
                                {
                                    <GridColumnChooserItem Column="column"></GridColumnChooserItem>
                                }
                            </GridColumnChooserItemGroup>
                        }
                        @if(templateContext?.Columns == null)
                        {
                            <div class="e-innerdiv e-cc e-ccnmdiv">
                                <span class="e-cc e-nmatch">No Matches found</span>
                            </div>
                        }
                    </Template>
                    <FooterTemplate>
                        @{
                            var templateContext = context as ColumnChooserFooterTemplateContext;
                            var visibles = templateContext?.Columns.Where(x => x.Visible).Select(x => x.HeaderText).ToArray();
                            var hiddens = templateContext?.Columns.Where(x => !x.Visible).Select(x => x.HeaderText).ToArray();
                        }
                        <SfButton IsPrimary="true" OnClick="@(async () => {
                        await grid?.ShowColumnsAsync(visibles)!;
                        await grid?.HideColumnsAsync(hiddens)!; initialGrid = true; cancelIcon = ""; searchText="";})">OK</SfButton>
                        <SfButton @onclick="@(async () =>{ await templateContext?.CancelAsync()!;initialGrid = true; cancelIcon = ""; searchText="";})">Cancel</SfButton>
                    </FooterTemplate>
                </GridColumnChooserSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" IsPrimaryKey="true" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText="Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.Freight) Format="C2" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShippedDate) HeaderText="Shipped Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCountry) HeaderText="Ship Country" Visible="false" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(OrdersDetails.ShipCity) HeaderText="Ship City" Visible="false" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>

        </div>
    </div>
</div>

@code{

    public List<OrdersDetails>? GridData { get; set; }


    SfGrid<OrdersDetails>? grid { get; set; }
    SfTextBox? textBox { get; set; }
    private ColumnChooserTemplateContext? templateContext { get; set; }

    private List<GridColumn>? searchedColumns { get; set; }

    private string cancelIcon { get; set; } = "";

    private string inputFocus { get; set; } = "";

    private string? searchText { get; set; }

    private bool initialGrid = true;
    private string className = "setMargin e-cc-searchdiv e-input-group";

    IDictionary<string, string[]> groups = new Dictionary<string, string[]>()
    {
        { "Order Details", new string[] { "OrderID", "OrderDate" } }, { "Ship Details", new string[]{ "Freight", "ShipCountry", "ShippedDate", "ShipCity" } }
    };

    private GridColumn GetColumn(string field, List<GridColumn> columns)
    {
        GridColumn column = null!;

        if (columns.Any(x => { column = x; return x.Field == field; }))
        {
            return column;
        }

        return null!;
    }

    private bool ShouldRenderGroup(string title, List<GridColumn> columns)
    {
        return groups[title].Any(x => columns.Any(y => y.Field == x));
    }
    private List<GridColumn> GetGroupColumns(string title, List<GridColumn> columns)
    {
        return columns.Where(x => groups[title].Contains(x.Field)).ToList();
    }
    protected override void OnInitialized()
    {

        GridData = OrdersDetails.GetAllRecords();
    }

    private void OnInput(InputEventArgs eventArgs)
    {
        searchText = eventArgs.Value;
        if(eventArgs.Value.ToString() == "")
        {
            cancelIcon = "";
            initialGrid = true;
            return;
        }
        else
        {
            cancelIcon = "e-cc-cancel";
            searchedColumns = grid?.Columns.FindAll(e => e.HeaderText.ToLower().StartsWith(eventArgs.Value.ToString().ToLower()));
            if(this.templateContext != null)
            this.templateContext.Columns = (searchedColumns != null && searchedColumns.Count > 0) ? searchedColumns : null;
            initialGrid = false;
        }
    }
    private void Focus()
    {
        className = "setMargin e-cc-searchdiv e-input-group e-input-focus";
        if(textBox != null)
        textBox.UpdateParentClass("", "e-cc-searchinput e-input-group e-control-container e-control-wrapper");
    }
    private void Blur()
    {
        className = "setMargin e-cc-searchdiv e-input-group";
    }
    private void CancelIconClick(MouseEventArgs e)
    {
        cancelIcon = "";
        searchText = null!;
        initialGrid = true;
    }
}
 @*Hidden:Lines*@
 <style>
.material3.e-cc-searchinput
{
    padding-left : 8px !important;
    border-bottom-color: #ffffff !important;
}

.material3-dark .e-cc-searchinput
{
    padding-left : 8px !important;
    border-bottom-color: #000000 !important;
}

.fluent2 .e-input-group, .fluent2-dark .e-input-group, .fluent2-highcontrast .e-input-group {
    background: none !important; 
}

.e-control-wrapper.e-input-group{
    border-right: none !important;
    border-bottom: none !important;
    border-top: none !important;
}
 </style>
 @*End:Hidden*@