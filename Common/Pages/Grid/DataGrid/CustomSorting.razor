@page "/datagrid/customsorting"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_taskdetails
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This example shows how to use the DataGrid custom sorting feature. In this section, the <strong>SortComparer</strong> property of columns is defined in DataGrid to implement custom sorting logic for <strong>Priority</strong> and <strong>Status</strong> columns.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid Sorting feature allows to arrange the data in a specific order. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_AllowSorting' aria-label="Navigate to the AllowSorting property reference for DataGrid component">AllowSorting</a> property to <b>true</b> to enable it. Simply click the column header to sort a DataGrid column.</p>
    <p>Simply click the <strong> Priority</strong> or <strong> Status</strong> column in this demo, and the corresponding comparer function will be called; in the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_SortComparer' aria-label="Navigate to the SortComparer property reference for Grid column">SortComparer</a> function, we implement custom sorting logic.</p>
    <p>More information on the Custom sorting feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/sorting#custom-sorting' aria-label="Navigate to the documentation for custom sorting in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" AllowPaging="true" AllowTextWrap="true" AllowSorting="true">
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(TaskDetails.Name) HeaderText="Title" Width="180" MaxWidth="300"></GridColumn>
                    <GridColumn Field=@nameof(TaskDetails.Priority) SortComparer="new CustomPriorityComparer()" Width="150">
                        <Template>
                            @{
                                var catagory = (context as TaskDetails);
                                @if (catagory?.Priority == "Critical")
                                {
                                    <div class="title-temp1 critical">
                                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/critical.png")" class="priority" alt="Priority: critical" />
                                        <span class="font">@catagory.Priority</span>
                                    </div>
                                }
                                @if (catagory?.Priority == "High")
                                {
                                    <div class="title-temp1 high">
                                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/high.png")" class="priority" alt="Priority: High" />
                                        <span class="font">@catagory.Priority</span>
                                    </div>
                                }
                                @if (catagory?.Priority == "Normal")
                                {
                                    <div class="title-temp1 normal">
                                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/normal.png")" class="priority" alt="Priority: Normal" />
                                        <span class="font">@catagory.Priority</span>
                                    </div>
                                }
                                @if (catagory?.Priority == "Low")
                                {
                                    <div class="title-temp1 low">
                                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/low.png")" class="priority" alt="Priority: Low" />
                                        <span class="font">@catagory.Priority</span>
                                    </div>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(TaskDetails.Status) SortComparer="new CustomStatusComparer()" Width="150">
                        <Template>
                            @{
                                var catagory = (context as TaskDetails);
                                @if (catagory?.Status == "In Progress")
                                {
                                    <div class="title-temp2 inprogress">
                                        <span class="inprogress-font">@catagory.Status</span>
                                    </div>
                                }
                                @if (catagory?.Status == "Completed")
                                {
                                    <div class="title-temp2 completed">
                                        <span class="completed-font">@catagory.Status</span>
                                    </div>
                                }
                                @if (catagory?.Status == "Blocked")
                                {
                                    <div class="title-temp2 blocked">
                                        <span class="blocked-font">@catagory.Status</span>
                                    </div>
                                }
                                @if (catagory?.Status == "Won't Fix")
                                {
                                    <div class="title-temp2 wontfix ">
                                        <span class="wontfix-font">@catagory.Status</span>
                                    </div>
                                }
                                @if (catagory?.Status == "Cannot Reproduce")
                                {
                                    <div class="title-temp2 notreproduced">
                                        <span class="notreproduced-font">@catagory.Status</span>
                                    </div>
                                }
                                @if (catagory?.Status == "By Design")
                                {
                                    <div class="title-temp2 bydesign">
                                        <span class="bydesign-font">@catagory.Status</span>
                                    </div>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(TaskDetails.Description) Width="300"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public List<TaskDetails>? GridData { get; set; }


    protected override void OnInitialized()
    {

        GridData = TaskDetails.GetAllTaskDetails();
    }

    public class CustomPriorityComparer : IComparer<object>
    {
        public int Compare(object? X, object? Y)
        {
            TaskDetails? XData = X as TaskDetails;
            TaskDetails? YData = Y as TaskDetails;
            int XPriority = MapPriority(XData?.Priority!);
            int YPriority = MapPriority(YData?.Priority!);
            if (XPriority < YPriority)
            {
                return -1;
            }
            else if (XPriority > YPriority)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }

    private static int MapPriority(string priority)
    {
        switch (priority.ToUpperInvariant())
        {
            case "CRITICAL":
                return 1;
            case "HIGH":
                return 2;
            case "NORMAL":
                return 3;
            default:
                return 4;
        }
    }

    private static int MapStatus(string status)
    {
        switch (status)
        {
            case "Completed":
                return 1;
            case "In Progress":
                return 2;
            case "By Design":
                return 3;
            case "Blocked":
                return 4;
            case "Cannot Reproduce":
                return 5;
            default:
                return 6;
        }
    }

    public class CustomStatusComparer : IComparer<object>
    {
        public int Compare(object? X, object? Y)
        {
            TaskDetails? XData = X as TaskDetails;
            TaskDetails? YData = Y as TaskDetails;
            int XStatus = MapStatus(XData?.Status!);
            int YStatus = MapStatus(YData?.Status!);
            if (XStatus < YStatus)
            {
                return -1;
            }
            else if (XStatus > YStatus)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
}

@*Hidden:Lines*@
<style type="text/css" class="cssStyles">
    .title-temp1, .title-temp2 {
        border-radius: 2px;
        padding: 2px 0px 3px 0px;
        margin: 10px 0px;
    }

    .title-temp1 {
        width: 64px;
        text-align: left;
    }

    .title-temp2 {
        width: 95px;
        text-align: center;
    }

    .font {
        font-size: 11px;
        font-weight: 400;
        font-style: normal;
        height: 9px;
    }

    .priority {
        height: 16px;
        width: 16px;
    }

    .inprogress {
        background: #E3F5FF;
    }

    .inprogress-font {
        color: #03659C;
    }

    .completed {
        background: #E7FFF1;
    }

    .completed-font {
        color: #067939;
    }

    .blocked {
        background: #FFF1F1;
    }

    .blocked-font {
        color: #B40000;
    }

    .wontfix {
        background: #FFEFE9;
    }

    .wontfix-font {
        color: #993105;
    }

    .notreproduced {
        background: #FFF8E1;
    }

    .notreproduced-font {
        color: #926A04;
    }

    .bydesign {
        background: #ECFEFF;
    }

    .bydesign-font {
        color: #027C85;
    }
</style>
@*End:Hidden*@