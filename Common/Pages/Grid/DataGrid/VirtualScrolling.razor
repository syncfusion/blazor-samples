@page "/datagrid/virtual-scrolling"

@using Syncfusion.Blazor.Grids
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@*Hidden:Lines*@
@using BlazorDemos
@using blazor_griddata
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>The DataGrid component with row and column virtualization is demonstrated in this sample. The rows and columns are loaded on an as-needed basis as the scrollbar is scrolled vertically and horizontally.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor DataGrid UI virtualization allows you to render only the rows and columns that are visible in the view-port without buffering the entire datasource. Row and column virtualization are both supported by DataGrid. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_EnableVirtualization' aria-label="Navigate to the EnableVirtualization property reference for DataGrid component">EnableVirtualization</a> property to <b>true</b> to enable row virtualization. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_EnableColumnVirtualization' aria-label="Navigate to the EnableColumnVirtualization property reference for DataGrid component">EnableColumnVirtualization</a> property to <b>true</b> to enable column virtualization.</p>
    <p>When <code>EnableVirtualization</code> is enabled, the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Height' aria-label="Navigate to the Height property reference for DataGrid component">Height </a>property must be defined, and the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.SfGrid-1.html#Syncfusion_Blazor_Grids_SfGrid_1_Width' aria-label="Navigate to the Width property reference for DataGrid component">Width</a> property must be defined when <code>EnableColumnVirtualization</code> is enabled.</p>
    <p>DataGrid is rendered with 10000 rows and 20 columns in this demo. You can edit the data and also show or hide columns by clicking the column chooser icon in the toolbar.</p>
    <p>More information about the Virtual scrolling feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/virtualization' aria-label="Navigate to the documentation for virtualization in DataGrid component">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            @{
                if (Data)
                {
                    <div class="apply-padding"><span id="initialload" class="topload">Loading 10,000 Rows and 20 Columns</span></div>
                    <div class="loading">
                        <span id="spancontrol" class="visible">Generating Data </span>
                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService?.WebAssetsPath}images/data-grid/spinner.gif")" />
                    </div>
                } else {
                    <div class="apply-padding"><span id="afterload" class="topload">Loaded 10,000 Rows and 20 Columns</span> </div>
                }
             }
        <SfGrid DataSource="@GridData" Height="410" Width="auto" EnableHover="false" ShowColumnChooser="true" EnableVirtualization="true" EnableColumnVirtualization="true"
            Toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel", "ColumnChooser" })">
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
            <GridPageSettings PageSize="80"></GridPageSettings>
            <GridColumns>
                <GridColumn Field="Field1" HeaderText="Player Name" ShowInColumnChooser=false ValidationRules= "@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
                <GridColumn Field="Field2" HeaderText="Year" Visible=false IsPrimaryKey=true ValidationRules="@(new ValidationRules{ Required=true})" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field3" HeaderText="Stint" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field4" HeaderText="TMID" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field5" HeaderText="LGID" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field6" HeaderText="GP" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field7" HeaderText="GS" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field8" HeaderText="Minutes" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field9" HeaderText="Points" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field10" HeaderText="oRebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field11" HeaderText="dRebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field12" HeaderText="Rebounds" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field13" HeaderText="Assists" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field14" HeaderText="Steals" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field15" HeaderText="Blocks" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field16" HeaderText="TurnOvers" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field17" HeaderText="PF" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field18" HeaderText="fgAttempted" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field19" HeaderText="fgMade" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                <GridColumn Field="Field20" HeaderText="ftAttempted" TextAlign="TextAlign.Right" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
        </div>
    </div>
</div>

@*Hidden:Lines*@
<style>
    .visible {
        display: inline-block;
        font-size: 18px;
        color: rgba(0,0,0,1);
    }

    .loading {
        position: absolute;
        height: 92%;
        width: 100%;
        background-color: rgba(1,1,1,0.2);
        z-index: 10000;
        display: flex;
        align-items: center;
        padding-left: 44%;
    }

    .topload {
        font-size : 15px;

    }

    .apply-padding{
        padding-bottom : 10px;
    }
</style>
@*End:Hidden*@

@code{

    public List<VirtualData> GridData { get; set; } = new List<VirtualData>();

    public Boolean Data = true;
    

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        GridData = await GetAllRecords();
        Data = false;
    }

    public async Task<List<VirtualData>> GetAllRecords()
    {
        List<VirtualData> data = new List<VirtualData>(10000);
        Random random = new Random();
        await Task.Delay(10);
        string[] name = new string[] {"Aaren", "hardire", "abramjo01", "aubucch01", "Hook", "Rumpelstiltskin", "Belle", "Emma", "Regina", "Aurora", "Elsa",
          "Anna", "Snow White", "Prince Charming", "Cora", "Zelena", "August", "Mulan", "Graham", "Discord", "Will", "Robin Hood",
          "Jiminy Cricket", "Henry", "Neal", "Red", "Aaran", "Aarez", "Aarman", "Aaron", "Aaron-James", "Aarron", "Aaryan", "Aaryn",
          "Aayan", "Aazaan", "Abaan", "Abbas", "Abdallah", "Abdalroof", "Abdihakim", "Abdirahman", "Abdisalam", "Abdul", "Abdul-Aziz",
          "Abdulbasir", "Abdulkadir", "Abdulkarem", "Abdulkhader", "Abdullah", "Abdul-Majeed", "Abdulmalik", "Abdul-Rehman", "Abdur",
          "Abdurraheem", "Abdur-Rahman", "Abdur-Rehmaan", "Abel", "Abhinav", "Abhisumant", "Abid", "Abir", "Abraham", "Abu", "Abubakar",
          "Ace", "Adain", "Adam", "Adam-James", "Addison", "Addisson", "Adegbola", "Adegbolahan", "Aden", "Adenn", "Adie", "Adil", "Aditya",
          "Adnan", "Adrian", "Adrien", "Aedan", "Aedin", "Aedyn", "Aeron", "Afonso", "Ahmad", "Ahmed", "Ahmed-Aziz", "Ahoua", "Ahtasham",
          "Aiadan", "Aidan", "Aiden", "Aiden-Jack", "Aiden-Vee" };
        int x = 0;
        for (int i = 0; i < 10000; i++) {
            x = x >= name.Length ? 0 : x;
            string Field1 = name[x];
            int Field2 = 1900 + i;
            int Field3 = (i + 1) * 200;
            int Field4 = (i + 1) * 100;
            int Field5 = (i + 1) * 2000;
            int Field6 = (i + 1) * 1000;
            int Field7 = (i + 1) * 150;
            int Field8 = (i + 1) * 10;
            int Field9 = (i + 1) * 15;
            int Field10 = (i + 1) * 180;
            int Field11 = (i + 1) * 190;
            int Field12 = (i + 1) * 3000;
            int Field13 = (i + 1) * 20;
            int Field14 = (i + 1) * 17;
            int Field15 = (i + 1) * 2500;
            int Field16 = (i + 1) * 500;
            int Field17 = (i + 1) * 300;
            int Field18 = (i + 1) * 400;
            int Field19 = (i + 1) * 500;
            int Field20 = (i + 1) * 700;
            data.Add(new VirtualData() { Field1 = Field1, Field2 = Field2, Field3 = Field3 ,Field4 = Field4 ,Field5 = Field5, Field6 = Field6,Field7 = Field7,Field8 = Field8,
            Field9 = Field9,Field10 = Field10,Field11 = Field11,Field12 = Field12,Field13 = Field13,Field14 = Field14,Field15 = Field15,Field16 = Field16,Field17 = Field17,Field18 = Field18,Field19 = Field19,Field20 = Field20});
            x++;
        }
        return data;
    }
}
