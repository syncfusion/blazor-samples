@page "/MultiSelect-Dropdown/Virtualization"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the virtualization support of the MultiSelect. The component has 150 items bound to it, but only 5 items will load to the popup when you open the popup. Remaining set number of items will load on each scrolling action in the popup.</p>
</SampleDescription>
<ActionDescription>
   <p>The MultiSelect supports virtualization to improve the UI performance for a large amount of data when the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.SfMultiSelect-2.html#Syncfusion_Blazor_DropDowns_SfMultiSelect_2_EnableVirtualization" aria-label="Class reference of EnableVirtualization property in MultiSelect Dropdown">EnableVirtualization</a> property is set to <code>true</code>. This feature doesn't render out the entire data source on initial component rendering. It loads the N number of items in the popup on initial rendering and the remaining set number of items will load on each scrolling action in the popup. It can work with both local and remote data.</p>
   <p><b>See also</b></p>
    <ul>
       <li><a href="https://blazor.syncfusion.com/documentation/multiselect-dropdown/virtualization/" target="_blank" aria-label="Blazor MultiSelect DropDown Virtualization documentation">Blazor MultiSelect - Virtualization</a></li>
    </ul>
</ActionDescription>

<div class="control-section">
    <div class="control-wrapper">
        <div class="control-modes">
            <label class="example-label">Filtering</label>
            <SfMultiSelect TValue="string[]" TItem="Record" Placeholder="e.g. Item 1" DataSource="@Records" @bind-Value="@Value" Query="@LocalDataQuery" AllowFiltering="true" PopupHeight="160px" EnableVirtualization="true">
                <MultiSelectFieldSettings Text="Text" Value="Id"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
        <div class="control-modes">
            <label class="example-label">Remote Data</label>
            <SfMultiSelect TValue="string[]" TItem="EmployeeData" PopupHeight="130px" EnableVirtualization="true" AllowFiltering="true" Placeholder="Select a name" Query="@RemoteDataQuery">
                <SfDataManager Url="http://localhost:63028/api/Employees" Offline="true" CrossDomain="true" Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor"></SfDataManager>
                <MultiSelectFieldSettings Text="FirstName" Value="FirstName" />
            </SfMultiSelect>
        </div>
        <div class="control-modes">
            <label class="example-label">Grouping with CheckBox</label>
            <SfMultiSelect TValue="string[]" TItem="Record" Placeholder="e.g. Item 1" AllowFiltering="true" Mode="VisualMode.CheckBox" ShowSelectAll="true" DataSource="@Records" Query="@LocalDataQuery" PopupHeight="260px" EnableVirtualization="true">
                <MultiSelectFieldSettings GroupBy="Group" Text="Text" Value="Id"></MultiSelectFieldSettings>
            </SfMultiSelect>
        </div>
    </div>
</div>

@code{
    public Query LocalDataQuery = new Query().Take(6);
    public Query RemoteDataQuery = new Query().Take(6);
    public string[] Value { get; set; } = new string[] { "10", "50", "100" };

    public class Record 
    { 
        public string? Id { get; set; } 
        public string? Text { get; set; } 
        public string? Group { get; set; }
    } 

    public class EmployeeData
    {
        public int EmployeeID { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Country { get; set; }
    }

    public List<Record>? Records { get; set; }

    protected override void OnInitialized()
    {
        var random = new Random();
        this.Records = Enumerable.Range(1, 150).Select(i => new Record()
        {
            Id = i.ToString(),
            Text = "Item " + i,
            Group = GetRandomGroup(random)
        }).ToList();
    }

    private string GetRandomGroup(Random random)
    {
        switch (random.Next(1, 5))
        {
            case 1:
                return "Group A";
            case 2:
                return "Group B";
            case 3:
                return "Group C";
            case 4:
                return "Group D";
            default:
                return string.Empty;
        }
    }
}

<style>
    .control-wrapper {
        max-width: 300px;
        margin: 0 auto;
        padding: 25px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .control-modes {
        padding: 12px 0px;
    }
</style>