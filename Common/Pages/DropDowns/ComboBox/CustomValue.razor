@page "/ComboBox/Custom-Value"

@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Data;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the custom value functionality of the ComboBox. Type a character in the ComboBox component and select an item from the filtered list based on the typed charactersWhen the typed character(s) are not found in the list, a button appears in the popup list. By clicking this button, the custom value character is added as a new item to the existing list.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The ComboBox allows the user to type a custom value that is not included in the predefined set of values.
        By default, this support is enabled by <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.SfComboBox-2.html#Syncfusion_Blazor_DropDowns_SfComboBox_2_AllowCustom" target="_blank" aria-label="Class reference of AllowCustom property in ComboBox"> AllowCustom</a> property. In this case, the typed text considered both the text field and the value field.
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class='control-wrapper'>
        <div class="custom-value">
            <label class="example-label">Select a country</label>
            <SfComboBox @ref="@countryComboBox" TValue="string" Placeholder="e.g. Australia" TItem="TItem" DataSource="@DataSource" AllowCustom="true" AllowFiltering="true">
                <ComboBoxFieldSettings Text="Name" Value="Name"></ComboBoxFieldSettings>
                <ComboBoxEvents TValue="string" Filtering="@OnFiltering" TItem="TItem"/>
                <ComboBoxTemplates TItem="TItem">
                    <NoRecordsTemplate>
                        <div>
                            <div id="nodata">No matched item, would you like to add it to the list as a new item?</div>
                            <SfButton id="btn" class="e-control e-btn custom-button" @onclick="@AddItem">Add New Item</SfButton>
                        </div>
                    </NoRecordsTemplate>
                </ComboBoxTemplates>
            </SfComboBox>
        </div>
    </div>
</div>

<style>

    .control-wrapper {
    max-width: 250px;
    margin: 0 auto;
    padding: 50px 0px 0px;
    }

    .example-label {
    font-size: 14px;
    margin-bottom: 6px;
    }

    .e-btn.custom-button {
    margin-top: 10px;
    }

</style>

@code {
    private SfComboBox<string, TItem>? countryComboBox;
    private string? Custom { get; set; }
    private List<TItem> CustomDataItems { get; set; } = new List<TItem>();

    public class TItem
    {
        public string? Name { get; set; }
        public string? Code { get; set; }
    }

    private async Task OnFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        Custom = args.Text;
        args.PreventDefaultAction = true;
        var query = new Query().Where(new WhereFilter() { Field = "Name", Operator = "contains", value = args.Text, IgnoreCase = true });
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
        if (countryComboBox != null)
        {
            await countryComboBox.FilterAsync(CustomDataItems, query);        
        }
    }

    private List<TItem> DataSource = new List<TItem>
    {
        new TItem() { Name = "Australia", Code = "AU" },
        new TItem() { Name = "Bermuda", Code = "BM" },
        new TItem() { Name = "Canada", Code = "CA" },
        new TItem() { Name = "Cameroon", Code = "CM" },
        new TItem() { Name = "Denmark", Code = "DK" },
        new TItem() { Name = "France", Code = "FR" },
        new TItem() { Name = "Finland", Code = "FI" },
        new TItem() { Name = "Germany", Code = "DE" },
        new TItem() { Name = "Greenland", Code = "GL" },
        new TItem() { Name = "Hong Kong", Code = "HK" },
        new TItem() { Name = "India", Code = "IN" },
        new TItem() { Name = "Italy", Code = "IT" }
    };

    protected override void OnInitialized()
    {
        CustomDataItems = DataSource;
    }

    private async Task AddItem()
    {
        var customData = new TItem() { Name = Custom, Code = Custom };
        if (this.countryComboBox != null)
        {
            await this.countryComboBox.AddItemsAsync(new List<TItem> { customData });
        }
        CustomDataItems.Add(customData);
        if (this.countryComboBox != null)
        {
            await this.countryComboBox.HidePopupAsync();
        }
    }
}
