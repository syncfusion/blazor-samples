@page "/DropDown-List/Cascading"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the cascading functionalities of the DropDownList. Choose a country from the countries DropDownList, then respective states will be loaded in the second DropDownList.</p>
</SampleDescription>
<ActionDescription>
   <p>The Cascading DropDownList is the series of DropDownList, where the value of one DropDownList depends on another DropDownList value. 
      In the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.DropDownListEvents-1.html#Syncfusion_Blazor_DropDowns_DropDownListEvents_1_ValueChange" target="_blank" aria-label="Class reference of ValueChange event in DropDownList">ValueChange</a> event handler of 1st DropDownList, 
      you should load the data for the 2nd DropDownList based on the selected value of 1st DropDownList. The same has to be configured between 2nd and 3rd DropDownLists.</p>
   <p>In this sample, if a country is selected from countries DropDownList, the respective states are loaded in the second DropDownList and in the same way states and cities DropDownList works.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <div class="cascading">
            <label class="example-label">Country</label>
            <SfDropDownList TItem="Countries" TValue="string" Placeholder="Select a country" PopupHeight="auto" DataSource="@Country">
                <DropDownListEvents TItem="Countries" TValue="string" ValueChange="ChangeCountry"></DropDownListEvents>
                <DropDownListFieldSettings Text="CountryName" Value="CountryId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="cascading">
            <label class="example-label">State</label>
            <SfDropDownList Enabled="@EnableStateDropDown" TValue="string" TItem="State" @bind-Value="@StateValue" Placeholder="Select a state" Query="@StateQuery" PopupHeight="auto" DataSource="@States">
                <DropDownListEvents TItem="State" TValue="string" ValueChange="ChangeState"></DropDownListEvents>
                <DropDownListFieldSettings Text="StateName" Value="StateId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="cascading">
            <label class="example-label">City</label>
            <SfDropDownList Enabled="@EnableCityDropDown" TValue="string" TItem="City" @bind-Value="@CityValue" Placeholder="Select a city" Query="@CityQuery" PopupHeight="auto" DataSource="@Cites">
                <DropDownListFieldSettings Text="CityName" Value="CityId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
    </div>
</div>

<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 10px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .control-wrapper .cascading {
        padding: 30px 0px 0px;
    }
</style>

@code {

    public bool EnableStateDropDown = false;
    public bool EnableCityDropDown = false;
    public string? StateValue { get; set; } = null;
    public Query? StateQuery { get; set; } = null;
    public string? CityValue { get; set; } = null;
    public Query? CityQuery { get; set; } = null;
    
    public void ChangeCountry(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Countries> args)
    {
        this.EnableStateDropDown = !string.IsNullOrEmpty(args.Value);
        this.EnableCityDropDown = false;
        this.StateQuery = new Query().Where(new WhereFilter() { Field = "CountryId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        this.StateValue = null;
        this.CityValue = null;
    }
    public void ChangeState(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, State> args)
    {
        this.EnableCityDropDown = !string.IsNullOrEmpty(args.Value);
        this.CityQuery = new Query().Where(new WhereFilter() { Field = "StateId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        this.CityValue = null;
    }
    public class State
    {
        public string? StateName { get; set; }
        public string? CountryId { get; set; }
        public string? StateId { get; set; }
    }

    public class Countries
    {
        public string? CountryName { get; set; }
        public string? CountryId { get; set; }
    }
    public class City
    {
        public string? CityName { get; set; }
        public string? StateId { get; set; }
        public string? CityId { get; set; }
    }

    public List<Countries> Country = new List<Countries>()
    {
        new Countries() { CountryName = "Australia", CountryId = "2" },
        new Countries() { CountryName = "United States", CountryId = "1" }
    };

    public List<State> States = new List<State>()
    {
        new State() { StateName = "New York", CountryId = "1", StateId = "101" },
        new State() { StateName = "Queensland", CountryId = "2", StateId = "104" },
        new State() { StateName = "Tasmania ", CountryId = "2", StateId = "105" },
        new State() { StateName = "Victoria", CountryId = "2", StateId = "106" },
        new State() { StateName = "Virginia", CountryId = "1", StateId = "102" },
        new State() { StateName = "Washington", CountryId = "1", StateId = "103" }
    };
    public List<City> Cites = new List<City>()
    {
         new City() { CityName = "Aberdeen", StateId= "103", CityId= "207" },
         new City() { CityName = "Albany", StateId= "101", CityId= "201" },
         new City() { CityName = "Brisbane ", StateId="104", CityId= "211" },
         new City() { CityName = "Colville ", StateId= "103", CityId= "208" },
         new City() { CityName ="Emporia", StateId= "102", CityId= "206" },
         new City() { CityName = "Hampton ", StateId= "102", CityId= "205" },
         new City() { CityName ="Hobart", StateId= "105", CityId= "213" },
         new City() { CityName ="Lockport", StateId= "101", CityId= "203" },
         new City() { CityName =  "Pasco", StateId= "103", CityId= "209" },
         new City() { CityName= "Alexandria", StateId= "102", CityId= "204" },
         new City() { CityName= "Beacon ", StateId= "101", CityId= "202" },
         new City() { CityName= "Cairns", StateId= "104", CityId= "212" },
         new City() { CityName= "Devonport", StateId= "105", CityId= "215" },
         new City() { CityName= "Geelong", StateId= "106", CityId= "218" },
         new City() { CityName= "Healesville ", StateId="106", CityId= "217" },
         new City() { CityName= "Launceston ", StateId= "105", CityId= "214" },
         new City() { CityName= "Melbourne", StateId= "106", CityId="216" },
         new City() { CityName= "Townsville", StateId= "104", CityId= "210" }
    };
}