@page "/AutoComplete/DisabledItems"

@using Syncfusion.Blazor.DropDowns
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example showcases the disabled items of AutoComplete. When you type on the AutoComplete the popup will open, and you will notice that the disabled items are greyed out and cannot be selected.</p>
</SampleDescription>
<ActionDescription>
   <p>The AutoComplete provides options for individual items to be in either an enabled or disabled state for specific scenarios. Once an item is disabled, it cannot be selected as a value for the component. To configure the disabled item columns, use the <b>AutoCompleteFieldSettings.Disabled</b> property.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="row">
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label class="example-label">Status</label>
                <SfAutoComplete TItem="StatusData" TValue="string" Placeholder="Select Status" DataSource="@Data">
                    <AutoCompleteFieldSettings Value="Status" Disabled="State" />
                </SfAutoComplete>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="control-wrapper">
                <label class="example-label">Vegetable</label>
                <SfAutoComplete TValue="string" TItem="Vegetables" Placeholder="Select Vegetable" DataSource="@GroupData">
                    <AutoCompleteFieldSettings GroupBy="Category" Value="Vegetable" Disabled="State" />
                </SfAutoComplete>
            </div>
        </div>
    </div>
</div>


<style>
    .control-wrapper {
        max-width: 250px;
        padding: 30px 0px 0px;
        margin: 0 auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>

@code {

    public class StatusData
    {
        public string? Status { get; set; }
        public bool State { get; set; }
    }

    private List<StatusData> Data = new List<StatusData>()
    {
        new StatusData(){ Status = "Open", State = false },
        new StatusData(){ Status = "Waiting for Customer", State = false },
        new StatusData(){ Status = "On Hold", State = true },
        new StatusData(){ Status = "Follow-up", State = false },
        new StatusData(){ Status = "Closed", State = true },
        new StatusData(){ Status = "Solved", State = false },
        new StatusData(){ Status = "Feature Request", State = false },
    };

    public class Vegetables
    {
        public string? Vegetable { get; set; }
        public string? Category { get; set; }
        public bool State { get; set; }
    }

    private List<Vegetables> GroupData = new List<Vegetables>()
    {
        new Vegetables() { Vegetable = "Cabbage", Category = "Leafy and Salad", State = true },
        new Vegetables() { Vegetable = "Pumpkins", Category = "Leafy and Salad", State = false },
        new Vegetables() { Vegetable = "Chickpea", Category = "Beans", State = true },
        new Vegetables() { Vegetable = "Garlic", Category = "Bulb and Stem", State = false },
        new Vegetables() { Vegetable = "Green bean", Category = "Beans", State = false },
        new Vegetables() { Vegetable = "Horse gram", Category = "Beans", State = true },
        new Vegetables() { Vegetable = "Nopal", Category = "Bulb and Stem", State = true },
        new Vegetables() { Vegetable = "Onion", Category = "Bulb and Stem", State = false },     
        new Vegetables() { Vegetable = "Spinach", Category = "Leafy and Salad", State = true },
        new Vegetables() { Vegetable = "Wheat grass", Category = "Leafy and Salad", State = false },
        new Vegetables() { Vegetable = "Yarrow", Category = "Leafy and Salad", State = false }
    };
}
