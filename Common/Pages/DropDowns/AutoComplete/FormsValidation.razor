@page "/AutoComplete/Forms-Validation"

@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates how to use AutoComplete inside <code>EditForm</code> and validate using <code>Data Annotations</code>. Click <b>Submit</b> button to validate the Form.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this demo, <code>EditForm</code> validates all data annotation rules using <code>DataAnnotationsValidator</code>.
        Type or select the value from the suggestion list and if the value is valid, then the given input will be ready to submit.
        Otherwise, an error message will be shown until you select the valid value.
    </p>
    <p>
        In this demo, the field mapped to the AutoComplete Value is configured with the following rule.
    </p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td>Required</td>
            <td>The field must have a valid value.</td>
        </tr>
    </table>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        @if (string.IsNullOrEmpty(Message))
        {
            <EditForm Model="@_model" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator/>
                <div>
                    <label class="example-label">Select a game</label>
                    <SfAutoComplete Placeholder="e.g. Basketball" @bind-Value="@_model.Text" DataSource="@Games" AllowCustom="false">
                        <AutoCompleteFieldSettings Value="Text"/>
                    </SfAutoComplete>
                    <ValidationMessage For="() => _model.Text"/>
                </div>
                <div class="submit-btn">
                    <SfButton type="submit" IsPrimary="true">Submit</SfButton>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @Message
            </div>
        }
    </div>
</div>

<style>
    .control-wrapper {
        max-width: 260px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        padding: 20px 0px 0px;
    }

    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }
</style>

@code {
    private string Message = string.Empty;
    
    private async void OnValidSubmit()
    {
        Message = "Form Submitted Successfully!";
        await Task.Delay(2000);
        Message = string.Empty;
        _model.Text = null;
        StateHasChanged();
    }

    private void OnInvalidSubmit()
    {
        Message = string.Empty;
    }

    private GameFields _model = new GameFields();

    private List<GameFields> Games = new List<GameFields>()
    {
        new GameFields() { Id = "Game1", Text = "American Football" },
        new GameFields() { Id = "Game2", Text = "Badminton" },
        new GameFields() { Id = "Game3", Text = "Basketball" },
        new GameFields() { Id = "Game4", Text = "Cricket" },
        new GameFields() { Id = "Game5", Text = "Football" },
        new GameFields() { Id = "Game6", Text = "Golf" },
        new GameFields() { Id = "Game7", Text = "Hockey" },
        new GameFields() { Id = "Game8", Text = "Rugby" },
        new GameFields() { Id = "Game9", Text = "Snooker" },
        new GameFields() { Id = "Game10", Text = "Tennis" }
    };

    public class GameFields
    {
        public string? Id { get; set; }
        [Required(ErrorMessage = "The Game field is required.")]
        public string? Text { get; set; }
    }
}

