@page "/MultiColumn-ComboBox/Virtualization"

@using Syncfusion.Blazor.MultiColumnComboBox

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the virtualization feature of the <a href="https://www.syncfusion.com/blazor-components/blazor-multicolumn-combobox" aria-label="Feature Tour of Blazor MultiColumn ComboBox">Blazor MultiColumn ComboBox</a>. Virtualization optimizes the ComboBox by only rendering the items visible in the dropdown, allowing efficient handling of large datasets without performance issues.</p>
</SampleDescription>
<ActionDescription>
    <p>The MultiColumn ComboBox supports virtualization, which enhances performance by loading and displaying only the items currently in view. This feature is particularly useful when working with extensive data sets, ensuring smooth scrolling and quick interactions.</p>
    <p><b>See also</b></p>
    <ul>
        <li><a href="https://blazor.syncfusion.com/documentation/multicolumn-combobox/getting-started/" target="_blank" aria-label="Blazor MultiColumn ComboBox Getting Started documentation">Getting Started with Blazor MultiColumn ComboBox</a></li>
    </ul>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <label class="example-label">Select an employee</label>
        <SfMultiColumnComboBox TItem="Employee" TValue="string" PopupWidth="600px" EnableVirtualization="true" @bind-Value="@Value" DataSource="@Employees" TextField="Name" ValueField="Name" Placeholder="e.g. Alice Johnson">
        </SfMultiColumnComboBox>
    </div>
</div>

@code {
    public class Employee
    {
        public string? Name { get; set; }
        public string? Department { get; set; }
        public string? Role { get; set; }
        public string? Location { get; set; }
        public int Experience { get; set; }
    }

    private string Value { get; set; } = "Alice Johnson";

    private List<Employee> Employees = new List<Employee>();

    protected override Task OnInitializedAsync()
    {
        List<Employee> employees = new List<Employee>();
        string[] names = { "John Doe", "Jane Smith", "Alice Johnson", "Bob Brown", "Emily Davis" };
        string[] departments = { "HR", "IT", "Finance", "Marketing", "Sales" };
        string[] roles = { "Manager", "Developer", "Analyst", "Consultant", "Executive" };
        string[] locations = { "New York", "San Francisco", "London", "Berlin", "Tokyo" };

        Random rand = new Random();

        for (int i = 1; i <= 2000; i++)
        {
            employees.Add(new Employee
                {
                    Name = names[rand.Next(names.Length)],
                    Department = departments[rand.Next(departments.Length)],
                    Role = roles[rand.Next(roles.Length)],
                    Location = locations[rand.Next(locations.Length)],
                    Experience = rand.Next(1, 21) // Experience between 1 and 20 years
                });
        }

        Employees = employees;

        return base.OnInitializedAsync();
    }
}



<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>
