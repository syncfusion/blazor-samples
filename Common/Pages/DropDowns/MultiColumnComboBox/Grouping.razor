@page "/MultiColumn-ComboBox/Grouping-Sorting"

@using Syncfusion.Blazor.MultiColumnComboBox

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the grouping feature of the <a href="https://www.syncfusion.com/blazor-components/blazor-multicolumn-combobox" aria-label="Feature Tour of Blazor MultiColumn ComboBox">Blazor MultiColumn ComboBox</a>. Grouping allows you to categorize items within the ComboBox, making it easier to navigate and select related options.</p>
</SampleDescription>
<ActionDescription>
    <p>The MultiColumn ComboBox supports grouping, which organizes the list items into logical categories. This feature enhances user experience by structuring related items together, enabling quicker selection and better data organization.</p>
    <p><b>See also</b></p>
    <ul>
        <li><a href="https://blazor.syncfusion.com/documentation/multicolumn-combobox/getting-started/" target="_blank" aria-label="Blazor MultiColumn ComboBox Getting Started documentation">Getting Started with Blazor MultiColumn ComboBox</a></li>
    </ul>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="col-lg-6">
        <div class="control-wrapper">
            <label class="example-label">Grouping</label>
            <SfMultiColumnComboBox TValue="string" TItem="Product" DataSource="@Products" PopupWidth="600px" ValueField="Name" TextField="Name" Placeholder="e.g. Laptop" GroupByField="Category">
            </SfMultiColumnComboBox>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="control-wrapper">
            <label class="example-label">Sorting</label>
            <SfMultiColumnComboBox TValue="string" TItem="Product" DataSource="@Products" PopupWidth="600px" ValueField="Name" TextField="Name" AllowMultiSorting="true" Placeholder="e.g. Laptop">
            </SfMultiColumnComboBox>
        </div>
    </div>
</div>

@code {

    public class Product
    {
        public string? Name { get; set; }
        public decimal Price { get; set; }
        public string? Availability { get; set; }
        public string? Category { get; set; }
        public double Rating { get; set; }
    }
    
    private List<Product> Products = new List<Product>();

    protected override Task OnInitializedAsync()
    {
        Products = new List<Product>
        {
            new Product { Name = "Laptop", Price = 999.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.5 },
            new Product { Name = "Smartphone", Price = 599.99m, Availability = "Out of Stock", Category = "Electronics", Rating = 4.3 },
            new Product { Name = "Tablet", Price = 299.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.2 },
            new Product { Name = "Headphones", Price = 49.99m, Availability = "In Stock", Category = "Accessories", Rating = 4.0 },
            new Product { Name = "Smartwatch", Price = 199.99m, Availability = "Limited Stock", Category = "Wearables", Rating = 4.4 },
            new Product { Name = "Monitor", Price = 129.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.6 },
            new Product { Name = "Keyboard", Price = 39.99m, Availability = "In Stock", Category = "Accessories", Rating = 4.1 },
            new Product { Name = "Mouse", Price = 19.99m, Availability = "Out of Stock", Category = "Accessories", Rating = 4.3 },
            new Product { Name = "Printer", Price = 89.99m, Availability = "In Stock", Category = "Office Supplies", Rating = 4.2 },
            new Product { Name = "Camera", Price = 499.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.7 },
            new Product { Name = "Speakers", Price = 149.99m, Availability = "In Stock", Category = "Accessories", Rating = 4.5 },
            new Product { Name = "Router", Price = 79.99m, Availability = "Out of Stock", Category = "Electronics", Rating = 4.4 },
            new Product { Name = "External Hard Drive", Price = 59.99m, Availability = "In Stock", Category = "Storage", Rating = 4.6 },
            new Product { Name = "USB Flash Drive", Price = 9.99m, Availability = "In Stock", Category = "Storage", Rating = 4.2 },
            new Product { Name = "Webcam", Price = 29.99m, Availability = "Limited Stock", Category = "Accessories", Rating = 4.1 },
            new Product { Name = "Smart TV", Price = 799.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.8 },
            new Product { Name = "Projector", Price = 299.99m, Availability = "Out of Stock", Category = "Electronics", Rating = 4.5 },
            new Product { Name = "VR Headset", Price = 349.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.7 },
            new Product { Name = "Drone", Price = 599.99m, Availability = "In Stock", Category = "Electronics", Rating = 4.6 },
            new Product { Name = "Fitness Tracker", Price = 99.99m, Availability = "In Stock", Category = "Wearables", Rating = 4.3 }
        };
        return base.OnInitializedAsync();
    }
}

<style>
    .control-wrapper {
        max-width: 250px;
        padding: 30px 0px 0px;
        margin: 0 auto;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>
