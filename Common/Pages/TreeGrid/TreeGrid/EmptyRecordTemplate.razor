@page "/tree-grid/empty-record-template"

@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids

@*Hidden:Lines*@
@inject NavigationManager UriHelper
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the use  of the empty record template in the Tree Grid. The <code>EmptyRecordTemplate</code> element accepts either a string or an HTML element value, which will be used as the template when there is no data.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The Tree Grid provides a way to use custom content when it has no data to present. Custom content, such as images, text, or other components, can be used when the Tree Grid does not contain any records to display. This feature replaces the default message of "No records to display" typically shown in the Tree Grid.
    </p>
    <p>More information about empty record template can be found in this <a aria-label="Navigate to the documentation for searching in tree grid component" target="_blank" href="https://blazor.syncfusion.com/documentation/treegrid/">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">

            <SfTreeGrid @ref="TreeGrid"
            DataSource="TreeData"
            IdMapping="TaskID"
            ParentIdMapping="ParentID"
            TreeColumnIndex="1"
            Toolbar="@ToolbarItems"
            AllowFiltering="@HasData"
            AllowPaging="true">
                <TreeGridEditSettings AllowAdding="true"
                AllowEditing="true"
                AllowDeleting="true"></TreeGridEditSettings>
                <TreeGridEvents TValue="ProjectDetails"
                OnActionComplete="ActionCompleteHandler"></TreeGridEvents>

                <TreeGridTemplates>
                    <EmptyRecordTemplate>
                        <div class="empty-container">
                            <img src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/emptyrecordtemplate-light.svg")" alt="Clipboard Icon" class="clipboard-icon" />
                            <p class="empty-message">
                                <b>There is no data available to display at the moment.</b>
                            </p>
                        </div>
                    </EmptyRecordTemplate>
                </TreeGridTemplates>

                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID"
                    HeaderText="Task ID"
                    ValidationRules="@(new ValidationRules() { Required = true, Number = true })"
                    Width="100"
                    TextAlign="TextAlign.Right"
                    IsPrimaryKey="true">
                    </TreeGridColumn>
                    <TreeGridColumn Field="TaskName"
                    HeaderText="Task Name"
                    Width="230">
                    </TreeGridColumn>
                    <TreeGridColumn Field="Priority"
                    HeaderText="Priority"
                    Width="120">
                    </TreeGridColumn>
                    <TreeGridColumn Field="AssignedTo"
                    HeaderText="Assignee"
                    Width="150">
                    </TreeGridColumn>
                    <TreeGridColumn Field="Status"
                    HeaderText="Status"
                    Width="120">
                    </TreeGridColumn>
                    <TreeGridColumn Field="Duration"
                    HeaderText="Duration in Days" ClipMode="ClipMode.EllipsisWithTooltip"
                    Width="120"
                    TextAlign="TextAlign.Right">
                    </TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>
@*Hidden:Lines*@
<style>
    .empty-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    padding: 40px;
    background-color: inherit;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .clipboard-icon {
    width: 70px;
    height: 70px;
    margin-bottom: 20px;
    }

    .empty-title {
    margin-top: 15px;
    font-size: 22px;
    color: #333;
    }

    .empty-message {
    font-size: 16px;
    color: inherit;
    text-align: center;
    max-width: 400px;
    }

    .add-task-button {
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #0078d4;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    }

    .bootstrap5-dark img, .material-dark img, .fabric-dark img, .bootstrap-dark img,
    .bootstrap4-dark img, .tailwind-dark img, .tailwind3-dark img, .highcontrast img, .fluent-dark img, .material3-dark img, .fluent2-dark img, .fluent2-highcontrast img, .bootstrap5\.3-dark img {
    content: url( @UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/emptyrecordtemplate-dark.svg") );
    }
</style>
@*End:Hidden*@
@code {
    private SfTreeGrid<ProjectDetails> TreeGrid;
    private List<ProjectDetails> TreeData { get; set; } = new List<ProjectDetails>();
    private bool HasData { get; set; }

    private List<string> ToolbarItems => HasData
      ? new List<string> { "Add", "Delete", "Update", "Cancel", "Search" }
      : new List<string> { "Add", "Delete", "Update", "Cancel" };

    protected override void OnInitialized()
    {
        TreeData = new List<ProjectDetails>();
    }

    public void ActionCompleteHandler(ActionEventArgs<ProjectDetails> args)
    {
        HasData = TreeData.Any();
        if (args.RequestType != Syncfusion.Blazor.Grids.Action.Searching)
        {
            StateHasChanged();
        }
    }

    public class ProjectDetails
    {
        public static List<ProjectDetails> tree = new List<ProjectDetails>();
        public int? TaskID { get; set; }
        public string TaskName { get; set; }
        public string Status { get; set; }
        public string Priority { get; set; }
        public string AssignedTo { get; set; }
        public int Duration { get; set; }
        public int? ParentID { get; set; }
        public bool? IsParent { get; set; }
        public ProjectDetails() { }
    }
}

