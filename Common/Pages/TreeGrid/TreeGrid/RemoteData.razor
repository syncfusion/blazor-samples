@page "/tree-grid/remote-data"

@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the way of binding remote services to the Tree Grid component. Here, the <a aria-label="Navigate to the documentation for getting started with data manager component" target='_blank' class='code' href='https://blazor.syncfusion.com/documentation/data/getting-started'>SfDataManager</a> is used to bind the remote data with Tree Grid.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, parent rows are loaded in a collapsed state. You can load the child records along with the parent records while loading data on-demand by enabling the <a aria-label="Navigate to the LoadChildOnDemand property reference for the tree grid component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.TreeGrid.SfTreeGrid-1.html#Syncfusion_Blazor_TreeGrid_SfTreeGrid_1_LoadChildOnDemand">LoadChildOnDemand</a> property of the Tree Grid.</p>
    <p>The <code>SfDataManager</code>, which will act as an interface between the service endpoint and the Tree Grid, requires the following minimal information to interact with the service endpoint properly:</p>
    <ul>
        <li><a aria-label="Navigate to the url property reference for the data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Url">SfDataManager.Url</a> - Defines the service endpoint to fetch the data.</li>
        <li><a aria-label="Navigate to the Adaptor property reference for the data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DataManager.html#Syncfusion_Blazor_DataManager_Adaptor">SfDataManager.Adaptor</a> - Defines the adaptor option. By default, <a aria-label="Navigate to the class reference for Url Adaptor in the data manager" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.ODataAdaptor.html">ODataAdaptor</a> is used for remote binding.</li>
    </ul>
    <p>The adaptor is responsible for processing the response and request from/to the service endpoint. The <a aria-label="Navigate to namespace reference for the data manager component" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Data.html">Syncfusion.Blazor.Data</a> namespace provides some predefined adaptors designed to interact with particular service endpoints. The predefined adaptors are:</p>
    <ul>
        <li><strong>UrlAdaptor</strong> - Use this to interact with any remote service. This is the base adaptor for all remote-based adaptors.</li>
        <li><strong>ODataAdaptor</strong> - Use this to interact with OData endpoints.</li>
        <li><strong>ODataV4Adaptor</strong> - Use this to interact with OData V4 endpoints.</li>
        <li><strong>WebApiAdaptor</strong> - Use this to interact with Web API created under OData standards.</li>
    </ul>
    <p>More information on data binding can be found in this <a aria-label="Navigate to the documentation for data binding in the tree grid component" target="_blank" href="https://blazor.syncfusion.com/documentation/treegrid/data-binding/?no-cache=1">documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-9 control-section">
    <div class="content-wrapper">
        <div class="row">
              <SfTreeGrid TValue="SelfReferenceData" Query="@GridQuery" LoadChildOnDemand="@loadChildOnDemand" IdMapping="TaskID"  ParentIdMapping="ParentItem" Height="312" TreeColumnIndex="1" AllowPaging="true" HasChildMapping="isParent">
                <SfDataManager Url="http://localhost:63028/api/SelfReferenceData" Adaptor="Adaptors.WebApiAdaptor" CrossDomain="true"></SfDataManager>
                <TreeGridPageSettings PageSize="@GridPageSize"></TreeGridPageSettings>
                  <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="90" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="170"></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="120" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="110"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" Width="150"></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>

<div class="col-lg-3 property-section">
    <div class="property-panel-header">Properties</div>
    <table id="property" title="Properties" style="width: 100%;">
        <tr style="height: 50px">
            <td>
                <SfCheckBox @bind-Checked="@IsChecked" @onchange="OnCheckboxChange" Label="Load with Child"></SfCheckBox>
            </td>
        </tr>
    </table>
</div>

@code{
    public class SelfReferenceData
    {
        public int TaskID { get; set; }
        public string? TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public String? Progress { get; set; }
        public String? Priority { get; set; }
        public int Duration { get; set; }
        public int? ParentItem { get; set; }
        public bool? isParent { get; set; }
    }

    private bool loadChildOnDemand { get; set; } = true;
    private bool IsChecked { get; set; } = false;
    private Query GridQuery { get; set; } = new Query();
    private int GridPageSize {get; set;} = 12;


    public void OnCheckboxChange(ChangeEventArgs args)
    {
        if ((bool)(args.Value ?? false))
        {
            GridPageSize = 2;
            GridQuery = new Query().AddParams("loadchildondemand", true);
            loadChildOnDemand = false;
        }
        else
        {
            GridPageSize = 12;
            GridQuery = new Query().AddParams("loadchildondemand", false);
            loadChildOnDemand = true;
        }
    }
}