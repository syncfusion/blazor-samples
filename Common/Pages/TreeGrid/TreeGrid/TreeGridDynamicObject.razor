@page "/tree-grid/dynamic-object"

@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using System.Dynamic;
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
<SampleDescription>
    <p>This sample explains about the usage of DynamicObject data binding with CRUD operations, sorting, filtering, and aggregate functionalities in the Tree Grid component.</p>
</SampleDescription>
<ActionDescription>
    <p>DynamicObject can be bound to Tree Grid by assigning to the <a aria-label="Navigate to the data source property reference for tree grid rows" target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.TreeGrid.SfTreeGrid-1.html#Syncfusion_Blazor_TreeGrid_SfTreeGrid_1_DataSource">DataSource</a> property.</p>
    <p>The <a aria-label="Navigate to microsoft document for GetDynamicMemberNames method" target="_blank" href="https://learn.microsoft.com/en-us/dotnet/api/system.dynamic.dynamicobject.getdynamicmembernames?view=net-8.0">GetDynamicMemberNames</a> method of the DynamicObject class must be overridden and return the property names to render and perform data operations, editing, etc. while using DynamicObject.</p>
    <p>More information on the DynamicObject data binding can be found in this <a aria-label="Navigate to the documentation for DynamicObject binding in tree grid component" target="_blank" href="https://blazor.syncfusion.com/documentation/treegrid/data-binding/#dynamicobject-binding">documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid DataSource="@TreeData" AllowPaging="true" AllowFiltering="true" AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })" IdMapping="TaskID" ParentIdMapping="ParentID" TreeColumnIndex="1">
                <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" NewRowPosition="RowPosition.Below" />
                <TreeGridPageSettings PageSize="2" PageSizeMode="PageSizeMode.Root"></TreeGridPageSettings>
                <TreeGridAggregates>
                    <TreeGridAggregate>
                        <TreeGridAggregateColumns>
                            <TreeGridAggregateColumn Field="Duration" Type="Syncfusion.Blazor.Grids.AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var SumValue = (context as Syncfusion.Blazor.Grids.AggregateTemplateContext);
                                        <div>
                                            <p>Sum: @SumValue?.Sum</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </TreeGridAggregateColumn>
                        </TreeGridAggregateColumns>
                    </TreeGridAggregate>
                </TreeGridAggregates>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskID" HeaderText="Task ID" Width="100" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Required=true, Number=true})" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" Width="170" ValidationRules="@(new ValidationRules() { Required = true })"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText="Start Date" ValidationRules="@(new ValidationRules() {Required = true })" Format="d" Width="140" TextAlign="TextAlign.Right" ></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" ValidationRules="@(new ValidationRules() {Required = true, Number = true, Min = 0 })" Width="140" TextAlign="TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" ValidationRules="@(new ValidationRules() {Required = true })" Width="120"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" ValidationRules="@(new ValidationRules() {Required = true })" Width="100" ></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>
@code {
    private List<DynamicDictionary> TreeData { get; set; } = new List<DynamicDictionary>();
    private static List<DynamicDictionary> DataSource = new List<DynamicDictionary>();
    private static int ParentRecordID { get; set; }
    private static int ChildRecordID { get; set; }
    protected override void OnInitialized()
    {
        TreeData = GetData().ToList();
    }
    public static List<DynamicDictionary> GetData()
    {
        DataSource.Clear();
        ParentRecordID = 0;
        ChildRecordID = 0;
        for (var i = 1; i <= 60; i++)
        {
            DateTime start = new DateTime(2021, 06, 07);
            DateTime end = new DateTime(2027, 03, 23);
            DateTime startingDate = start.AddDays(i + 2);
            DateTime endingDate = end.AddDays(i + 20);

            dynamic ParentRecord = new DynamicDictionary();
            ParentRecord.TaskID = ++ParentRecordID;
            ParentRecord.TaskName = "Parent task " + i; ;
            ParentRecord.StartDate = startingDate;
            ParentRecord.Progress = ParentRecordID % 2 == 0 ? "In Progress" : "Open";
            ParentRecord.Priority = ParentRecordID % 2 == 0 ? "High" : "Low";
            ParentRecord.Duration = ParentRecordID % 2 == 0 ? 32 : 76;
            ParentRecord.ParentID = null;
            DataSource.Add(ParentRecord);
            AddChildRecords(ParentRecordID);
        }
        return DataSource;
    }
    public static void AddChildRecords(int parentId)
    {
        for (var i = 1; i < 4; i++)
        {
            DateTime start = new DateTime(2019, 12, 07);
            DateTime end = new DateTime(2024, 03, 23);
            DateTime startingDate = start.AddDays(i + 5);
            DateTime endingDate = end.AddDays(i + 13);

            dynamic ChildRecord = new DynamicDictionary();
            ChildRecord.TaskID = ++ParentRecordID;
            ChildRecord.TaskName = "Child task " + ++ChildRecordID;
            ChildRecord.StartDate = startingDate;
            ChildRecord.Progress = ParentRecordID % 3 == 0 ? "Validated" : "Closed";
            ChildRecord.Priority = ParentRecordID % 3 == 0 ? "Low" : "Critical";
            ChildRecord.Duration = ParentRecordID % 3 == 0 ? 64 : 98;
            ChildRecord.ParentID = parentId;
            DataSource.Add(ChildRecord);
        }
    }

    public class DynamicDictionary : DynamicObject
    {
        Dictionary<string, object> Dictionary = new Dictionary<string, object>();

        public override bool TryGetMember(GetMemberBinder binder, out object? result)
        {
            string name = binder.Name;
            return Dictionary.TryGetValue(name, out result!);
        }
        public override bool TrySetMember(SetMemberBinder binder, object? value)
        {
            Dictionary[binder.Name] = value!;
            return true;
        }

        public override System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames()
        {
            return Dictionary != null ? (IEnumerable<string>)Dictionary.Keys : Array.Empty<string>();
        }
    }
}
