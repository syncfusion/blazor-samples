@page "/tree-grid/persistence"

@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Navigations
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@using TreeWrapdata
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the Persist State in the Blazor Tree Grid Component. Explore <a aria-label="Navigate to explore the tree grid component" target="_blank" href="https://www.syncfusion.com/blazor-components/blazor-tree-grid">here</a> for more details.</p>
</SampleDescription>

<ActionDescription>
    <p>In this example, you can see how to save the Tree Grid state, reset the current state, refresh the Tree Grid with the original state, and load the Tree Grid with an already saved state. The following are the Tree Grid properties persisted in local storage:</p>
    <ul>
        <li>Sorting</li>
        <li>Filtering</li>
        <li>Column (resizing, reorder, show/hide columns)</li>
        <li>Searching</li>
        <li>TreeColumnIndex</li>
    </ul>
    <p>More information on state management can be found in this <a aria-label="Navigate to the documentation for state management in the tree grid component" target="_blank" href="https://blazor.syncfusion.com/documentation/treegrid/state-management/">documentation</a> section.</p>
</ActionDescription>

<style>
    .bootstrap4 .e-savestate::before {
       content: '\e74d';
    }
    .bootstrap4 .e-setstate::before {
       content: '\e75d';
    }
    .bootstrap4 .e-reloadpage::before {
       content: '\e716';
    }
    .bootstrap5 .e-savestate::before,
    .bootstrap5-dark .e-savestate::before,
    .bootstrap5\.3 .e-savestate::before,
    .bootstrap5\.3-dark .e-savestate::before,
    .tailwind .e-savestate::before,
    .tailwind-dark .e-savestate::before,
    .tailwind3 .e-savestate::before,
    .tailwind3-dark .e-savestate::before,
    .fluent .e-savestate::before,
    .fluent-dark .e-savestate::before,
    .fluent2 .e-savestate::before,
    .fluent2-highcontrast .e-savestate::before,
    .fluent2-dark .e-savestate::before,
    .material3 .e-savestate::before,
    .material3-dark .e-savestate::before {
       content: '\e7c8';
    }
    .bootstrap5 .e-setstate::before,
    .bootstrap5-dark .e-setstate::before,
    .bootstrap5\.3 .e-setstate::before,
    .bootstrap5\.3-dark .e-setstate::before,
    .tailwind-dark .e-setstate::before,
    .tailwind .e-setstate::before,
    .tailwind3-dark .e-setstate::before,
    .tailwind3 .e-setstate::before,
    .fluent .e-setstate::before,
    .fluent2 .e-setstate::before,
    .fluent2-highcontrast .e-setstate::before,
    .fluent2-dark .e-setstate::before,
    .fluent-dark .e-setstate::before,
    .material3 .e-setstate::before,
    .material3-dark .e-setstate::before {
       content: '\e7a1';
    }
    .bootstrap5 .e-reloadpage::before,
    .bootstrap5-dark .e-reloadpage::before,
    .bootstrap5\.3 .e-reloadpage::before,
    .bootstrap5\.3-dark .e-reloadpage::before,
    .tailwind-dark .e-reloadpage::before,
    .tailwind .e-reloadpage::before,
    .tailwind3-dark .e-reloadpage::before,
    .tailwind3 .e-reloadpage::before,
    .fluent .e-reloadpage::before,
    .fluent-dark .e-reloadpage::before,
    .fluent2 .e-reloadpage::before,
    .fluent2-highcontrast .e-reloadpage::before,
    .fluent2-dark .e-reloadpage::before,
    .material3 .e-reloadpage::before,
    .material3-dark .e-reloadpage::before {
       content: '\e706';
    }
    .bootstrap .e-savestate::before,
    .bootstrap-dark .e-savestate::before {
       content: '\e701';
    }
    .bootstrap .e-setstate::before,
    .bootstrap-dark .e-setstate::before{
       content: '\ec32';
    }
    .bootstrap .e-reloadpage::before,
    .bootstrap-dark .e-reloadpage::before{
       content: '\e975';
    }
    .fabric .e-savestate::before,
    .fabric-dark .e-savestate::before,
    .highcontrast .e-savestate::before {
       content: '\e700';
    }
    .fabric .e-setstate::before {
       content: '\ebe4';
    }
    .fabric .e-reloadpage::before,
    .fabric-dark .e-reloadpage::before{
       content: '\e218';
    }
    .highcontrast .e-setstate::before,
    .fabric-dark .e-setstate::before {
       content: '\e603';
    }
    .highcontrast .e-reloadpage::before
    {
       content: '\e837';
    }
    .material .e-savestate::before,
    .material-dark .e-savestate::before {
       content: '\e735';
    }
    .material .e-setstate::before,
    .material-dark .e-setstate::before {
       content: '\ec0b';
    }
    .material .e-reloadpage::before,
    .material-dark .e-reloadpage::before {
       content: '\e99d';
    }
    .bootstrap5 .e-resetstate::before,
    .bootstrap5-dark .e-resetstate::before,
    .bootstrap5\.3 .e-resetstate::before,
    .bootstrap5\.3-dark .e-resetstate::before,
    .tailwind-dark .e-resetstate::before,
    .tailwind .e-resetstate::before,
    .tailwind3-dark .e-resetstate::before,
    .tailwind3 .e-resetstate::before,
    .fluent .e-resetstate::before,
    .fluent-dark .e-resetstate::before,
    .fluent2 .e-resetstate::before,
    .fluent2-highcontrast .e-resetstate::before,
    .fluent2-dark .e-resetstate::before,
    .material3 .e-resetstate::before,
    .material3-dark .e-resetstate::before {
       content: '\e89b';
    }
    .material .e-resetstate::before,
    .material-dark .e-resetstate::before,
    .bootstrap .e-resetstate::before,
    .bootstrap-dark .e-resetstate::before,
    .bootstrap4 .e-resetstate::before {
       content: '\e953';
    }
    .fabric .e-resetstate::before,
    .fabric-dark .e-resetstate::before,
    .highcontrast .e-resetstate::before {
       content: '\e948';
    }
    #TreeGridOne .e-dialog.e-lib.e-ccdlg.e-popup.e-control.e-popup-open {
      left: 630px !important;
      top: 48px !important;
    }
 </style>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid ID="TreeGridOne" @ref="TreeGridInstance" DataSource="@TreeData" Height="312" IdMapping="TaskId" ParentIdMapping="ParentId" ShowColumnChooser="true" TreeColumnIndex="1" EnablePersistence="true" AllowPaging="true" AllowFiltering="true"
                AllowSorting="true" AllowReordering="true" AllowResizing="true" Toolbar="ToolbarItems">
                <TreeGridPageSettings PageSize="2"></TreeGridPageSettings>
                <TreeGridEvents TValue="WrapData" OnToolbarClick="ToolBarClick"></TreeGridEvents>
                 <TreeGridFilterSettings HierarchyMode="Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.Both" Type="Syncfusion.Blazor.TreeGrid.FilterType.Excel"></TreeGridFilterSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskId" HeaderText="Task ID" Width="150" IsPrimaryKey="true" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules() { Required=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules() { Required=true})" Width="190"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText="Start Date" Format="d" Type=Syncfusion.Blazor.Grids.ColumnType.Date Width="150" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditType=Syncfusion.Blazor.Grids.EditType.DatePickerEdit></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="140" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="140"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" Width="140" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>

@code {
    public SfTreeGrid<WrapData> TreeGridInstance { get; set; } = null!;
#pragma warning disable BL0005 // Component parameter should not be set outside of its component.
    private List<Object> ToolbarItems = new List<Object>
        {
            "ColumnChooser",
            new ToolbarItem() { Text = "Save state", TooltipText = "Save state", PrefixIcon= "e-savestate" },
            new ToolbarItem() { Text = "Load state", TooltipText = "Load state", PrefixIcon= "e-setstate" },
            new ToolbarItem() { Text = "Reset state", TooltipText = "Reset state", PrefixIcon= "e-resetstate" },
        };
#pragma warning restore BL0005 // Component parameter should not be set outside of its component.
    private List<WrapData> TreeData { get; set; } = new List<WrapData>();
    public string SavedPersistence { get; set; } = String.Empty;
    public async Task ToolBarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Save state")
        {
            SavedPersistence = await this.TreeGridInstance.GetPersistDataAsync();
        }
         if (args.Item.Text == "Reset state")
        {
            await TreeGridInstance.ResetPersistDataAsync();
        }
        if (args.Item.Text == "Load state")
        {
            await TreeGridInstance.SetPersistDataAsync(SavedPersistence);
        }
    }
    protected override void OnInitialized()
    {
        TreeData = WrapData.GetWrapData().ToList();
    }
}
