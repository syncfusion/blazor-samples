@page "/tree-grid/overview"
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@*Hidden:Lines*@
@using BlazorDemos.Pages.TreeGrid
@inherits SampleBaseComponent;
@inject NavigationManager UriHelper
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the Overview in Blazor Tree Grid Component. Explore <a aria-label="Navigate to explore the tree grid component" target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-tree-grid'>here </a>for more details.</p>
</SampleDescription>
<ActionDescription>
    <p>The Tree Grid is used to represent hierarchical data in a tabular format, combining the visual representation of Grid and TreeView controls. It represents the data from datasources such as IEnumerable, OData web services, or SfDataManager, and binds the data fields to columns.</p>
    <p>In this demo, Tree Grid features such as <code>sorting, filtering, conditional formatting, column template, and scrolling</code> are used.</p>
    <p>More information on Tree Grid instantiation can be found in this <a aria-label="Navigate to getting started documentation for the tree grid component" target="_blank" href="https://blazor.syncfusion.com/documentation/treegrid/getting-started">documentation section</a>.</p>
</ActionDescription>

@*Hidden:Lines*@
<style>
    .e-image {
        height: 11px;
        width: 14px;
        vertical-align: baseline;
    }

    .statustemp {
        text-align: center;
        width: fit-content;
        height: fit-content;
    }

    .statustxt {
        color: #00cc00;
        position: relative;
        background: #C3F1D0;
        border-radius: 18px;
        padding: 2px 5px 2px 7px;
    }

    .statustxt.lowgdp {
        color: #e60000;
        position: relative;
        background: #ffd7cc;
        border-radius: 18px;
        padding: 2px 5px 2px 7px;
     }

    .bootstrap5 span.statustxt {
        color: #00cc00;
        position: relative;
        background: #C3F1D0;
        border-radius: 18px;
        padding: 1px 7px 3px 7px;
    }

    .bootstrap5 span.statustxt.lowgdp {
        color: #e60000;
        position: relative;
        background: #ffd7cc;
        border-radius: 18px;
        padding: 1px 7px 3px 7px;
    }

     .bootstrap5-dark span.statustxt {
        color: #00cc00;
        position: relative;
        background: #C3F1D0;
        border-radius: 18px;
        padding: 1px 7px 3px 7px;
    }

    .bootstrap5-dark span.statustxt.lowgdp {
        color: #e60000;
        position: relative;
        background: #ffd7cc;
        border-radius: 18px;
        padding: 1px 7px 3px 7px;
    }

    .tailwind span.statustxt {
        color: #00cc00;
        position: relative;
        background: #C3F1D0;
        border-radius: 18px;
        padding: 3px 4px 3px 5px;
    }

    .tailwind span.statustxt.lowgdp {
        color: #e60000;
        position: relative;
        background: #ffd7cc;
        border-radius: 18px;
        padding: 3px 4px 3px 5px;
     }

     .tailwind-dark span.statustxt {
         color: #00cc00;
         position: relative;
         background: #C3F1D0;
         border-radius: 18px;
         padding: 3px 4px 3px 5px;
     }

     .tailwind-dark span.statustxt.lowgdp {
         color: #e60000;
         position: relative;
         background: #ffd7cc;
         border-radius: 18px;
         padding: 3px 4px 3px 5px;
     }

     .fluent span.statustxt {
         color: #007800;
         position: relative;
         background: #C3F1D0;
         border-radius: 18px;
         padding: 1.5px 5px 3px 5px;
     }

     .fluent span.statustxt.lowgdp {
         color: #c30000;
         position: relative;
         background: #ffd7cc;
         border-radius: 18px;
         padding: 1.5px 5px 3px 5px;
     }

     .fluent-dark span.statustxt {
         color: #00cc00;
         position: relative;
         background: #C3F1D0;
         border-radius: 18px;
         padding: 1.5px 5px 3px 5px;
     }

     .fluent-dark span.statustxt.lowgdp {
         color: #e60000;
         position: relative;
         background: #ffd7cc;
         border-radius: 18px;
         padding: 1.5px 5px 3px 5px;
     }

        .fabric span.statustxt {
            color: #00cc00;
            position: relative;
            background: #C3F1D0;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

        .fabric span.statustxt.lowgdp {
            color: #e60000;
            position: relative;
            background: #ffd7cc;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

        .fabric-dark span.statustxt {
            color: #00cc00;
            position: relative;
            background: #C3F1D0;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

        .fabric-dark span.statustxt.lowgdp {
            color: #e60000;
            position: relative;
            background: #ffd7cc;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

        .highcontrast span.statustxt {
            color: #00cc00;
            position: relative;
            background: #C3F1D0;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

        .highcontrast span.statustxt.lowgdp {
            color: #e60000;
            position: relative;
            background: #ffd7cc;
            border-radius: 18px;
            padding: 1px 5px 3px 7px;
        }

    .rating .star {
        font-size: 132%;
        color: lightgrey;
    }

        .rating .star.checked {
            color: #ffa600;
        }

        .rating .star:before {
            content: 'â˜…';
        }

    .highcontrast .e-grid #myProgress {
        background-color: black;
    }

    #myProgress {
        position: relative;
        height: 18px;
        width: 10em;
        text-align: left;
        background-color: whitesmoke;
    }

    #myBar {
        position: absolute;
        width: 10%;
        height: 100%;
        background-color: #008700;
    }

        #myBar.progressdisable {
            background-color: #df2222;
        }

    #label {
        position: relative;
        left: 10px;
        line-height: 18px;
        font-size: 10px;
        color: white;
    }
    a:focus, a:hover {
        text-decoration: underline;
    }
    a {
        color: #23527c;
        text-decoration: none;
    }
    a:active, a:hover {
        outline: 0;
    }

    .negativeTimeZone {
        transform: rotate(180deg);
    }

    img {
        vertical-align: middle;
        border: 0;
    }

    #tmzone {
        filter: brightness(150%);
    }

    .material3-dark .rating .star.checked, .material3 .rating .star.checked {
        color: #6750A4;
    }
    .material3-dark #myBar, .material3 #myBar {
        background-color: #53CA17;
    }
   .material3-dark #myBar.progressdisable, .material3 #myBar.progressdisable {
        background-color: rgba(242, 184, 181, 1);
    }

   .fluent2-highcontrast #locationtext {
       color: #337ab7 !important;
   }

    </style>
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid DataSource="@OverViewTreeData" IdMapping="CountryId" ParentIdMapping="ParentID" AllowFiltering="true" AllowSorting="true" AllowReordering="true" Height="400" TreeColumnIndex="0">
                <TreeGridFilterSettings HierarchyMode="FilterHierarchyMode.Parent" Type="Syncfusion.Blazor.TreeGrid.FilterType.Excel"></TreeGridFilterSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="name" HeaderText="Province" Width="210">
                        <Template>
                            @{
                                var Countries = (context as OverViewObject);
                                    <div class="image" style="display:inline-block">
                                        @if (Countries?.Parentname != null)
                                    {
                                            <img class="e-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/{Countries.Parentname}.png")" alt="@Countries.name" />

                                    }
                                    else
                                    {
                                            <img class="e-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/{Countries?.name}.png")" alt="@Countries?.name" />

                                    }
                                    </div>

                                if (Countries?.name == "usa")
                                {
                                        <div style="display:inline-block; padding-left:4px">@Countries.name.ToUpper()</div>
                                }
                                else if (Countries?.name == "canada" || Countries?.name == "egypt" || Countries?.name == "germany" || Countries?.name == "greece" || Countries?.name == "bangladesh")
                                {
                                    string Countriesnames = char.ToUpper(Countries.name[0]) + Countries.name.Substring(1);

                                        <div style="display:inline-block; padding-left:4px">@Countriesnames</div>
                                }

                                else
                                {
                                        <div style="display:inline-block; padding-left:4px">@Countries?.name</div>
                                }
                            }
                        </Template>

                        <FilterItemTemplate>
                            @{
                                var Countries = (context as FilterItemTemplateContext);
                                var CountriesRecords = Countries?.Record.GetType().GetProperty("DataItem")?.GetValue(Countries.Record) as OverViewObject;
                                <div class="image" style="display:inline-block">
                                    @if (CountriesRecords?.Parentname != null)
                                    {
                                        <img class="e-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/{CountriesRecords.Parentname}.png")" alt=""/>
                                    }
                                    else
                                    {
                                        <img class="e-image" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/{CountriesRecords?.name}.png")" alt=""/>
                                    }
                                </div>

                                if (CountriesRecords?.name?.ToString() == "usa")
                                {
                                    <div style="display:inline-block; padding-left:4px">@CountriesRecords.name.ToString().ToUpper()</div>
                                }

                                else if (CountriesRecords?.name?.ToString() == "canada" || CountriesRecords?.name?.ToString() == "egypt" ||
                                         CountriesRecords?.name?.ToString() == "germany" || CountriesRecords?.name?.ToString() == "greece" || CountriesRecords?.name?.ToString() == "bangladesh")
                                {

                                    string Countriesnames = char.ToUpper(CountriesRecords.name.ToString()[0]) + CountriesRecords.name.ToString().Substring(1);

                                    <div style="display:inline-block; padding-left:4px">@Countriesnames</div>
                                }
                                else
                                {
                                    <div style="display:inline-block; padding-left:4px">@CountriesRecords?.name</div>
                                }
                                
                            }
                        </FilterItemTemplate>
                    </TreeGridColumn>

                    <TreeGridColumn Field="population" HeaderText="Population (Million)" Width="220" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right">
                        <Template>
                            @{
                                var Population = (context as OverViewObject);
                                double populationinmillion = Population!=null ? (double)Population.population / 1000000 : default;
                                <span class="populationtxt">@populationinmillion</span>
                            }
                        </Template>
                    </TreeGridColumn>

                    <TreeGridColumn Field="gdp" HeaderText="GDP Rate %" Width="130" AllowFiltering="false">
                        <Template>
                            @{
                                var Countries = (context as OverViewObject);
                                if (Countries?.gdp < 2)
                                {
                                        <div class="statustemp">
                                            <span class="statustxt lowgdp">@Countries.gdp %</span>
                                        </div>
                                }
                                else
                                {
                                        <div class="statustemp">
                                            <span class="statustxt">@Countries?.gdp %</span>
                                        </div>
                                }

                            }
                        </Template>
                    </TreeGridColumn>

                    <TreeGridColumn Field="rating" HeaderText="Credit Rating" Width="190">
                        <Template>
                            @{
                                var Creditrating = (context as OverViewObject);
                                if (Creditrating?.rating > 0)
                                {

                                        <div class="rate">
                                            <div class="rating">
                                                @for (var i = 0; i < 5; i++)
                                            {
                                                if (i < Creditrating.rating)
                                                {
                                                        <span class="star checked"></span>
                                                }
                                                else
                                                {
                                                        <span class="star"></span>
                                                }
                                            }
                                            </div>
                                        </div>
                                }
                            }
                        </Template>
                        <FilterItemTemplate>
                            @{
                                var Credit = (context as FilterItemTemplateContext);
                                int rating = Convert.ToInt32(Credit?.Value);
                                    <div class="rate">
                                        <div class="rating">
                                            @for (var i = 0; i < 5; i++)
                                        {
                                            if (i < rating)
                                            {
                                                    <span class="star checked"></span>
                                            }
                                            else
                                            {
                                                    <span class="star"></span>
                                            }
                                        }
                                        </div>
                                    </div>
                            }
                        </FilterItemTemplate>
                    </TreeGridColumn>

                    <TreeGridColumn Field="unemployment" HeaderText="Unemployment Rate" Width="220" AllowFiltering="false">
                        <Template>
                            @{
                                var Unemployment = (context as OverViewObject);
                                double Unemploymentwidth =Unemployment!=null ? Unemployment.unemployment * 10 : default;
                                if (Unemployment?.unemployment < 4)
                                {
                                        <div id="myProgress" class="pbar">
                                            <div id="myBar" style="width:@Unemploymentwidth%" class="bar progressdisable">
                                                <div id="label" class="barlabel">@Unemployment.unemployment%</div>
                                            </div>
                                        </div>
                                }

                                else
                                {
                                        <div id="myProgress" class="pbar">
                                            <div id="myBar" style="width:@Unemploymentwidth%" class="bar">
                                                <div id="label" class="barlabel">@Unemployment?.unemployment%</div>
                                            </div>
                                        </div>
                                }

                            }
                        </Template>
                    </TreeGridColumn>

                    <TreeGridColumn Field="coordinates" HeaderText="Coordinates" Width="220" AllowSorting="false">
                        <Template>
                            @{
                                var Coordinates = (context as OverViewObject);
                                    <div class="image" id="coordinates">
                                        <img src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/map.png")" class="e-image" alt=@Coordinates?.coordinates /> &nbsp
                                        <a aria-label="Navigate to Google Maps to view the location specified by the coordinates" target="_blank" href="https://www.google.com/maps/place/@Coordinates?.coordinates" id="locationtext" >@Coordinates?.coordinates</a>

                                    </div>
                            }
                        </Template>
                    </TreeGridColumn>

                    <TreeGridColumn Field="area" HeaderText="Area" Width="140">
                        <Template>
                            @{
                                var Area = (context as OverViewObject);
                                    <span>@Area?.area km<sup>2</sup></span>
                            }
                        </Template>
                    </TreeGridColumn>

                    <TreeGridColumn Field="timezone" HeaderText="Time Zone" Width="150">
                        <Template>
                            @{
                                var timeZone = (context as OverViewObject);
                                if (timeZone?.timezone?.IndexOf("-") != -1)
                                {
                                        <div class="timeZones">
                                            <img id="tmzone" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/normal.png")" class="negativeTimeZone" alt="@timeZone?.timezone" /> &nbsp
                                            <span class="timezonetxt">@timeZone?.timezone</span>
                                        </div>
                                }
                                else
                                {
                                        <div class="timeZones">
                                            <img id="tmzone" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/tree-grid/normal.png")" alt="@timeZone.timezone" /> &nbsp
                                            <span class="timezonetxt">@timeZone.timezone</span>
                                        </div>
                                }
                            }
                        </Template>
                    </TreeGridColumn>

                </TreeGridColumns>
            </SfTreeGrid>

            @*Hidden:Lines*@
            <div style="padding-top: 20px; text-align: right">
                Reference links:
                <a aria-label="Explore country economy details at CountryEconomy.com" href=" https://countryeconomy.com/ratings" style="padding-right: 12px"> https://countryeconomy.com</a>
                <a aria-label="Navigate to the Wikipedia main page" href="https://en.wikipedia.org/wiki/" style="padding-right: 12px">https ://en.wikipedia.org/wiki/ </a>
                <a aria-label="Navigate to world population results in maps view" href="https://worldpopulationreview.com/">http ://worldpopulationreview.com</a>
            </div>
            @*End:Hidden*@
        </div>
    </div>
</div>

@code {
    public List<OverViewObject> OverViewTreeData { get; set; } = new List<OverViewObject>();

    protected override void OnInitialized()
    {
        OverViewTreeData = OverViewObject.GetDatas();
    }

}
