@page "/progress-bar/circular"
@using Syncfusion.Blazor.ProgressBar
@using Syncfusion.Blazor
@using ThemeHelper
@inject NavigationManager Navigation

@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@
<SampleDescription>
    <p>This sample illustrates a circular progress bar with different state, segments, and animation.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor ProgressBar indicates the progress of a task with customizable visuals. In this example, you can see how to render and configure the circular progress bar with multiple <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/customization#segments" aria-label="segments">segments</a> and different states like <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/states#determinate" aria-label="determinate">determinate</a>, <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/states#indeterminate" aria-label="indeterminate">indeterminate</a>, and <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/states#buffer" aria-label="buffer">buffer</a> state.</p>
    <p>More information about the circular progress bar can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/types#circular" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="row" style="margin-top: 4%;">
        @if (ProgressBars != null) 
        {
            foreach (var progressBar in ProgressBars)
            {
                <div class="col-lg-3 col-md-3 col-3" align="center">
                    <SfProgressBar @ref="progressBar.ProgressBarRef" Type="ProgressType.Circular"
                    Value="progressBar.Value" Width="160px" Height="160px"
                    Minimum="0" Maximum="100"
                    SecondaryProgress="progressBar.SecondaryProgress"
                    SegmentCount="progressBar.SegmentCount"
                    IsIndeterminate="progressBar.IsIndeterminate"
                    StartAngle="180" EndAngle="180"
                    CornerRadius="progressBar.CornerRadius"
                    Theme="@Theme">
                        <ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
                    </SfProgressBar>
                    <div class="@ProgressTextStyle" style="font-family: @FontFamily">@progressBar.Label</div>
                </div>
            }
        }
    </div>

    <div class="row" align="center" style="font-family: @FontFamily">
        <button id="RefreshButton" class="e-control e-btn e-lib e-outline e-primary" @onclick="RefreshProgressBars">Reload</button>
    </div>
</div>

@code {
    public string? FontFamily { get; set; }
    public string ProgressTextStyle { get; set; } = string.Empty;
    public Theme Theme { get; set; }

    private List<ProgressBarModel>? ProgressBars { get; set; }

    protected override void OnInitialized()
    {
        FontFamily = ThemeHelper.GetFontFamily(Navigation.Uri);
        InitializeProgressBars();
        SetThemeBasedOnUri();
    }

    private void InitializeProgressBars()
    {
        ProgressBars = new List<ProgressBarModel>
        {
            new ProgressBarModel { Value = 60, Label = "Determinate", ProgressBarRef = new SfProgressBar() },
            new ProgressBarModel { Value = 30, SecondaryProgress = 60, Label = "Buffer", ProgressBarRef = new SfProgressBar() },
            new ProgressBarModel { Value = 100, SegmentCount = 4, Label = "Segment", ProgressBarRef = new SfProgressBar() },
            new ProgressBarModel { Value = 20, IsIndeterminate = true, Label = "Indeterminate", ProgressBarRef = new SfProgressBar() }
        };
    }

    private void SetThemeBasedOnUri()
    {
        Theme = Navigation.Uri switch
        {
            var uri when uri.Contains("material3-dark") => Theme.Material3Dark,
            var uri when uri.Contains("material3") => Theme.Material3,
            var uri when uri.Contains("fabric-dark") => Theme.FabricDark,
            var uri when uri.Contains("fabric") => Theme.Fabric,
            var uri when uri.Contains("bootstrap5-dark") => SetProgressTextStyle(Theme.Bootstrap5Dark, "progress-text-align-dark"),
            var uri when uri.Contains("bootstrap5") => Theme.Bootstrap5,
            var uri when uri.Contains("bootstrap-dark") => Theme.BootstrapDark,
            var uri when uri.Contains("fluent2-highcontrast") => SetProgressTextStyle(Theme.Fluent2HighContrast, "progress-text-align-dark"),
            var uri when uri.Contains("fluent2-dark") => SetProgressTextStyle(Theme.Fluent2Dark, "progress-text-align-dark"),
            var uri when uri.Contains("fluent2") => Theme.Fluent2,
            var uri when uri.Contains("fluent-dark") => SetProgressTextStyle(Theme.FluentDark, "progress-text-align-dark"),
            var uri when uri.Contains("fluent") => Theme.Fluent,
            var uri when uri.Contains("bootstrap4") => Theme.Bootstrap4,
            var uri when uri.Contains("bootstrap") => Theme.Bootstrap,
            var uri when uri.Contains("highcontrast") => SetProgressTextStyle(Theme.HighContrast, "progress-text-align-dark"),
            var uri when uri.Contains("tailwind3-dark") => Theme.Tailwind3Dark,
            var uri when uri.Contains("tailwind3") => Theme.Tailwind3,
            var uri when uri.Contains("material-dark") => Theme.MaterialDark,
            var uri when uri.Contains("material") => Theme.Material,
            _ => Theme.Material
        };
    }

    private Theme SetProgressTextStyle(Theme theme, string textStyle)
    {
        ProgressTextStyle = textStyle;
        return theme;
    }

    private async Task RefreshProgressBars()
    {
        if (ProgressBars != null)
        {
            foreach (var progressBar in ProgressBars)
            {
                if (progressBar.ProgressBarRef != null)
                {
                    await progressBar.ProgressBarRef.RefreshAsync();
                }
            }
        }
    }

    private class ProgressBarModel
    {
        public SfProgressBar? ProgressBarRef { get; set; }
        public double Value { get; set; }
        public double SecondaryProgress { get; set; }
        public int SegmentCount { get; set; } = 1;
        public bool IsIndeterminate { get; set; } = false;
        public CornerType CornerRadius { get; set; } = CornerType.Square;
        public string? Label { get; set; }
    }

}


<style>
    #control-container {
        padding: 0px !important;
    }

    .progress-text-align {
        font-family: Roboto-Regular;
        font-size: 14px;
        color: #3D3E3C;
    }

    .progress-text-align-dark {
        font-family: Roboto-Regular;
        font-size: 14px;
        color: white;
    }

    #RefreshButton {
        border-radius: 4px;
        text-transform: capitalize;
        margin-top: 3%;
    }
</style>