@page "/progress-bar/progress-segment"
@using Syncfusion.Blazor.ProgressBar
@using ThemeHelper
@inject NavigationManager Navigation
@using Syncfusion.Blazor
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This example uses a linear and circular progress bar to show the segmented progress of a task.</p>
</SampleDescription>
<ActionDescription>
    <p>With the use of the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.ProgressBar.SfProgressBar.html#Syncfusion_Blazor_ProgressBar_SfProgressBar_SegmentCount" aria-label="SegmentCount">SegmentCount</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.ProgressBar.SfProgressBar.html#Syncfusion_Blazor_ProgressBar_SfProgressBar_GapWidth" aria-label="GapWidth">GapWidth</a> properties, this example for Blazor Progress Bar control shows the task's segmented progress.</p>
    <p>More information about the segments in progress bar can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/customization#segments" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="row linear-parent">
        <div>
            <div class="col-lg-12 col-sm-12 progressbar-mode"></div>
            <SfProgressBar @ref="LinearProgressBar" Type="ProgressType.Linear" ID="LinearSegment"
                           Height="30" Width="@ProgressBarWidth" SegmentCount="@SegmentCount" GapWidth="@GapWidth"
                           Value="@ProgressValue" Minimum="0" Maximum="100" CornerRadius="CornerType.Square"
                           Theme="@Theme"
                           TrackThickness="15"
                           ProgressThickness="15"
                           TrackColor="@TrackColor">
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
        <div>
            <div class="col-lg-12 col-sm-12 progressbar-mode"></div>
            <SfProgressBar @ref="CircularProgressBar" Type="ProgressType.Circular" ID="CircularSegment"
                           Height="200px" Width="200px" TrackThickness="15" ProgressThickness="15"
                           Value="@ProgressValue" Minimum="0" Maximum="100" StartAngle="220"
                           EndAngle="140" SegmentCount="50" GapWidth="5"
                           CornerRadius="CornerType.Square"
                           Theme="@Theme"
                           TrackColor="@TrackColor">
                <ProgressBarAnnotations>
                    <ProgressBarAnnotation>
                        <ContentTemplate>
                            @AnnotationContent
                        </ContentTemplate>
                    </ProgressBarAnnotation>
                </ProgressBarAnnotations>
                <ProgressBarAnimation Enable="true" Duration="2000" Delay="0" />
            </SfProgressBar>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public RenderFragment? AnnotationContent { get; set; }
    public string? TrackColor { get; set; }
    public SfProgressBar? LinearProgressBar, CircularProgressBar;
    public int ProgressValue { get; set; } = 100;
    public string? FontFamily { get; set; }
    public int SegmentCount { get; set; }
    public double GapWidth { get; set; }
    public string? ProgressBarWidth { get; set; }
    private string? currentUri;

    protected override void OnInitialized()
    {
        currentUri = Navigation.Uri;
        FontFamily = ThemeHelper.GetFontFamily(Navigation.Uri);
        SegmentCount = SampleService != null && SampleService.IsDevice ? 35 : 50;
        GapWidth = SampleService != null && SampleService.IsDevice ? 4 : 5;
        ProgressBarWidth = SampleService != null && SampleService.IsDevice ? "100%" : "70%";

        SetThemeAndContent();
    }

    private void SetThemeAndContent()
    {
        if (currentUri != null && currentUri.Contains("material3-dark"))
        {
            ApplyTheme(Theme.Material3Dark, "#D0BCFF");
        }
        else if (currentUri != null && currentUri.Contains("material3"))
        {
            ApplyTheme(Theme.Material3, "#6750A4");
        }
        else if (currentUri != null && currentUri.Contains("fabric-dark"))
        {
            ApplyTheme(Theme.FabricDark, "#9A9A9A");
        }
        else if (currentUri != null && currentUri.Contains("fabric"))
        {
            ApplyTheme(Theme.Fabric, "#0078D6");
        }
        else if (currentUri != null && currentUri.Contains("bootstrap5-dark"))
        {
            ApplyTheme(Theme.Bootstrap5Dark, "#0D6EFD");
        }
        else if (currentUri != null && currentUri.Contains("bootstrap5"))
        {
            ApplyTheme(Theme.Bootstrap5, "#0D6EFD");
        }
        else if (currentUri != null && currentUri.Contains("highcontrast"))
        {
            ApplyTheme(Theme.HighContrast, "#FFD939", "#969696");
        }
        else if (currentUri != null && currentUri.Contains("tailwind3-dark"))
        {
            ApplyTheme(Theme.Tailwind3Dark, "#6366F1");
        }
        else if (currentUri != null && currentUri.Contains("tailwind3"))
        {
            ApplyTheme(Theme.Tailwind3, "#4F46E5");
        }
        else if (currentUri != null && currentUri.Contains("material-dark"))
        {
            ApplyTheme(Theme.MaterialDark, "#9A9A9A");
        }
        else if (currentUri != null && currentUri.Contains("material"))
        {
            ApplyTheme(Theme.Material, "#e91e63");
        }
        else if (currentUri != null && currentUri.Contains("bootstrap-dark"))
        {
            ApplyTheme(Theme.BootstrapDark, "#9A9A9A");
        }
        else if (currentUri != null && currentUri.Contains("bootstrap"))
        {
            ApplyTheme(Theme.Bootstrap, "#317ab9");
        }
        else if (currentUri != null && currentUri.Contains("fluent2-highcontrast"))
        {
            ApplyTheme(Theme.Fluent2HighContrast, "#1AEBFF");
        }
        else if (currentUri != null && currentUri.Contains("fluent2-dark"))
        {
            ApplyTheme(Theme.Fluent2Dark, "#115EA3");
        }
        else if (currentUri != null && currentUri.Contains("fluent2"))
        {
            ApplyTheme(Theme.Fluent2, "#0F6CBD");
        }
        else if (currentUri != null && currentUri.Contains("fluent-dark"))
        {
            ApplyTheme(Theme.FluentDark, "#0D6EFD");
        }
        else if (currentUri != null && currentUri.Contains("fluent"))
        {
            ApplyTheme(Theme.Fluent, "#0D6EFD");
        }
        else if (currentUri != null && currentUri.Contains("bootstrap4"))
        {
            ApplyTheme(Theme.Bootstrap4, "#007bff");
        }
    }

    private void ApplyTheme(Theme theme, string annotationColor, string trackColor = null!)
    {
        Theme = theme;
        TrackColor = trackColor;
        AnnotationContent = @<div id='point1' style='font-size:24px;font-weight:bold;color:@annotationColor;font-family:@FontFamily'><span>100%</span></div>;
    }
}




<style>
    #control-container {
        padding: 0px !important;
    }

    .linear-parent {
        text-align: center;
        width: 75%;
        margin: auto;
    }

    .linear-button {
        text-align: center;
        padding: 2%;
    }

    .progressbar-mode {
        text-align: left;
        font-family: Roboto-Regular;
        font-size: 14px;
        color: #3D3E3C;
        margin-left: 10px;
        margin-top: 5%;
        padding: 0px;
        top: 20px;
    }

    #reLoad {
        border-radius: 4px;
        text-transform: capitalize;
    }
</style>