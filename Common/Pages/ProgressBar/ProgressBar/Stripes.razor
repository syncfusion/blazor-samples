@page "/progress-bar/stripes"
@using Syncfusion.Blazor.ProgressBar
@inject NavigationManager Navigation
@using Syncfusion.Blazor
@*Hidden:Lines*@
@inherits SampleBaseComponent


@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates a striped linear progress bar with animation.</p>
</SampleDescription>
<ActionDescription>
    <p>This demo for Blazor Progress Bar control shows the linear striped progress bar with help of <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.ProgressBar.SfProgressBar.html#Syncfusion_Blazor_ProgressBar_SfProgressBar_IsStriped" aria-label="IsStriped">IsStriped</a> property.</p>
    <p>More information about the customization in progress bar can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/progress-bar/customization" aria-label="documentation section">documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="row linear-parent">
        @if (ProgressBars != null)
        {
            foreach (var progressBar in ProgressBars)
            {
                <div class="linear-progress">
                    <SfProgressBar @ref="@progressBar.Reference" Type="ProgressType.Linear" ID="@progressBar.Id"
                    Height="30" Width="100%"
                    Value="@progressBar.Value" Minimum="0" Maximum="100"
                    IsStriped="true"
                    TrackThickness="20"
                    ProgressThickness="20"
                    Role="@progressBar.Role"
                    Theme="@SelectedTheme"
                    TrackColor="@TrackColor">
                        <ProgressBarAnimation Enable="@IsAnimationEnabled" Duration="2000" Delay="0" />
                    </SfProgressBar>
                </div>
            }

        }
    </div>
    <div class="row linear-button">
        <button id="animation" @onclick="ToggleAnimation" class="e-control e-btn e-lib e-outline e-primary">@AnimationButtonText</button>
    </div>
</div>

@code {

// Auto-properties for animation and theme settings
    public bool IsAnimationEnabled { get; set; } = true;
    public string? TrackColor { get; set; }
    public string AnimationButtonText { get; set; } = "Stop Animation";
    public Theme SelectedTheme { get; set; }

// Progress bar information model
    public class ProgressBarData
    {
        public string? Id { get; set; }
        public SfProgressBar? Reference { get; set; }
        public double Value { get; set; }
        public ModeType Role { get; set; }
    }

// List of progress bars to be displayed
    public List<ProgressBarData>? ProgressBars { get; set; }

    protected override void OnInitialized()
    {
        SetProgressBarData();
        SetThemeBasedOnUri(Navigation.Uri);
    }

// Toggles animation on or off
    public void ToggleAnimation()
    {
        IsAnimationEnabled = !IsAnimationEnabled;
        AnimationButtonText = IsAnimationEnabled ? "Stop Animation" : "Start Animation";
    }

// Initialize progress bar data
    private void SetProgressBarData()
    {
        ProgressBars = new List<ProgressBarData>
        {
            new ProgressBarData { Id = "Danger", Value = 20, Role = ModeType.Success },
            new ProgressBarData { Id = "Warning", Value = 40, Role = ModeType.Info },
            new ProgressBarData { Id = "Info", Value = 70, Role = ModeType.Warning },
            new ProgressBarData { Id = "Success", Value = 100, Role = ModeType.Danger }
        };
    }

// Set theme and track color based on URI
    private void SetThemeBasedOnUri(string uri)
    {
        var themeMapping = new Dictionary<string, (Theme theme, string trackColor)>
        {
            { "material3-dark", (Theme.Material3Dark, null!) },
            { "material3", (Theme.Material3, null!) },
            { "fabric-dark", (Theme.FabricDark, null!) },
            { "fabric", (Theme.Fabric, null!) },
            { "bootstrap-dark", (Theme.BootstrapDark, null!) },
            { "bootstrap5-dark", (Theme.Bootstrap5Dark, null!) },
            { "bootstrap5", (Theme.Bootstrap5, null!) },
            { "fluent2-highcontrast", (Theme.Fluent2HighContrast, null!) },
            { "fluent2-dark", (Theme.Fluent2Dark, null!) },
            { "fluent2", (Theme.Fluent2, null!) },
            { "fluent-dark", (Theme.FluentDark, null!) },
            { "fluent", (Theme.Fluent, null!) },
            { "bootstrap4", (Theme.Bootstrap4, null!) },
            { "bootstrap", (Theme.Bootstrap, null!) },
            { "highcontrast", (Theme.HighContrast, "#969696") },
            { "tailwind3-dark", (Theme.Tailwind3Dark, null!) },
            { "tailwind3", (Theme.Tailwind3, "#E5E7EB") },
            { "material-dark", (Theme.MaterialDark, null!) },
            { "material", (Theme.Material, "#eee") }
        };

        foreach (var theme in themeMapping)
        {
            if (uri.Contains(theme.Key))
            {
                (SelectedTheme, TrackColor) = theme.Value;
                break;
            }
        }
    }

}


<style>
    #control-container {
        padding: 0px !important;
    }

    .linear-parent {
        text-align: center;
        margin-top: 2%;
    }

    .linear-button {
        text-align: center;
    }

    .linear-progress {
        width: 80%;
        margin: auto;
        margin-bottom: 3%;
    }

    #animation {
        border-radius: 4px;
        text-transform: capitalize;
    }

    [id$="Lineartrack"] {
        opacity: 1 !important;
    }
</style>