@page "/pivot-table/sparkline-chart"
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Sparkline


@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@


<SampleDescription>
    <p>
        This sample shows how to embed sparkline charts in Pivot Table cells to visually highlight trends and comparisons in 
        sales data. You can choose different sparkline types Line, Column, Area, or WinLoss directly from the grand total 
        header cell to analyze performance metrics at a glance.
    </p>
</SampleDescription>
<ActionDescription>
    <p>This sample demonstrates how to embed Sparkline charts within the Pivot Table's grand total cells to visually summarize yearly sales performance across different regions.</p>

    <p>
        The charts are rendered by capturing relevant cell values during the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotViewTemplates.html#Syncfusion_Blazor_PivotView_PivotViewTemplates_CellTemplate" aria-label="Class reference of CellTemplate property in PivotViewTemplates">CellTemplate</a> event and
        inserting the sparklines after the Pivot Table is fully rendered via the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotViewEvents-1.html#Syncfusion_Blazor_PivotView_PivotViewEvents_1_EnginePopulated" aria-label="Class reference of EnginePopulated event in PivotView">EnginePopulated</a> event.
    </p>

    <p>
        A built-in dropdown in the grand total column header allows dynamic switching between Sparkline types at runtime:
        <ul>
            <li><code>Line</code> - Displays trends with a continuous line.</li>
            <li><code>Column</code> - Shows values as vertical bars for easy comparison.</li>
            <li><code>Area</code> - Highlights magnitude with a filled line chart.</li>
            <li><code>WinLoss</code> - Visualizes binary outcomes without exposing exact values.</li>
        </ul>
    </p>
    <p>Embedding the chart-type selector within the header keeps the interface compact and intuitive, enabling seamless visual analysis with minimal performance overhead.</P>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <SfPivotView TValue="SalesData" ShowTooltip="false" Width="100%" Height="450px">
            <PivotViewTemplates>
                <CellTemplate>
                    @{
                        var data = (context as AxisSet);
                        if (data != null)
                        {
                            if (data.Axis == "column" && data.Type == "grand sum")
                            {
                                <div style="display: flex; justify-content: space-between; align-items: center; height: 55px; max-width: 700px; margin: 0 auto;">
                                    <div class="e-headertext e-cellvalue" style="align-self: unset;">
                                        Total Sales Comparsion
                                    </div>
                                    <div style="width: 150px; height: 25px;">
                                        <SfDropDownButton Content="@TypeSelected" style="width: 140px; margin: 0px 15px 0px 0px;" PopupWidth="140px">
                                            <DropDownButtonEvents ItemSelected="OnItemSelected" />
                                            <DropDownMenuItems>
                                                <DropDownMenuItem Text="Column"></DropDownMenuItem>
                                                <DropDownMenuItem Text="Line"></DropDownMenuItem>
                                                <DropDownMenuItem Text="Area"></DropDownMenuItem>
                                                <DropDownMenuItem Text="WinLoss"></DropDownMenuItem>
                                            </DropDownMenuItems>
                                        </SfDropDownButton>
                                    </div>
                                </div>
                            }
                            else if (data.Axis == "value")
                            {
                                bool isGrandTotalColumn = data.ColumnHeaders is string colHeader && colHeader.Contains("Grand Total");
                                if (isGrandTotalColumn)
                                {
                                    var rowIndex = data.RowIndex;
                                    var chartInfo = datasource.ContainsKey(rowIndex) ? datasource[rowIndex] : new List<ChartPoint>();
                                    <SfSparkline TValue="ChartPoint" Height="30px" LineWidth=1 DataSource="@chartInfo" Type="@ChartType" XName="XVal" YName="YVal" ValueType="SparklineValueType.Category" HighPointColor="blue" LowPointColor="red" TiePointColor="pink">
                                        <SparklineMarkerSettings Visible="new List<VisibleType> { VisibleType.High, VisibleType.Low }" Size="3"></SparklineMarkerSettings>
                                        <SparklineTooltipSettings TValue="ChartPoint" Visible="true" Format="${XVal}:${YVal}">
                                            <SparklineTrackLineSettings Visible="true" Color="#033e96" Width="1"></SparklineTrackLineSettings>
                                        </SparklineTooltipSettings>
                                    </SfSparkline>
                                }
                                else
                                {
                                    @data.FormattedText
                                }
                            }
                            else
                            {
                                @data.FormattedText
                            }
                        }
                    }       
                </CellTemplate>
            </PivotViewTemplates>
            <PivotViewDataSourceSettings DataSource="@data" ExpandAll="false">
                <PivotViewColumns>
                    <PivotViewColumn Name="Year"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Region"></PivotViewRow>
                    <PivotViewRow Name="Product"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0"></PivotViewFormatSetting>
                </PivotViewFormatSettings>
                <PivotViewDrilledMembers>
                    <PivotViewDrilledMember Name="Region" Items="@(new string[] { "Asia"})"></PivotViewDrilledMember>
                </PivotViewDrilledMembers>
            </PivotViewDataSourceSettings>
            <PivotViewGridSettings ColumnWidth="110" RowHeight="70"></PivotViewGridSettings>
            <PivotViewEvents TValue="SalesData" EnginePopulated="EnginePopulatedHandler" BeforeColumnsRender="ColumnRender"></PivotViewEvents>
        </SfPivotView>
    </div>
</div>

@code {
    private List<SalesData>? data { get; set; }
    private bool ispop = false;
    private Dictionary<int, List<ChartPoint>> datasource = new Dictionary<int, List<ChartPoint>>();

    protected override void OnInitialized()
    {
        this.data = SalesDataStore.Records.ToList();
    }

    private Syncfusion.Blazor.Charts.SparklineType ChartType = Syncfusion.Blazor.Charts.SparklineType.Column;

    private List<DropDownData> ChartTypes = new List<DropDownData>()
    {
        new DropDownData { Name = "Column", Value = Syncfusion.Blazor.Charts.SparklineType.Column },
        new DropDownData { Name = "Line", Value = Syncfusion.Blazor.Charts.SparklineType.Line },
        new DropDownData { Name = "Area", Value = Syncfusion.Blazor.Charts.SparklineType.Area },
        new DropDownData { Name = "WinLoss", Value = Syncfusion.Blazor.Charts.SparklineType.WinLoss }
    };

    private string TypeSelected = "Column";

    private class DropDownData
    {
        public string Name { get; set; } = string.Empty;
        public Syncfusion.Blazor.Charts.SparklineType Value { get; set; }
    }

    private void EnginePopulatedHandler(EnginePopulatedEventArgs args)
    {
        for (int i = 0, j = args.PivotValues.Count(); i < j; i++)
        {
            var rowData = args.PivotValues[i];
            var chartData = new List<ChartPoint>();
            for (var k = 1; (rowData != null && k < rowData.Count() - 1); k++)
            {
                var cellData = args.PivotValues[i][k];
                if (cellData != null && cellData?.ActualValue != null)
                {
                    int xValue = Convert.ToInt32(cellData.ColumnHeaders);
                    int yValue = Convert.ToInt32(cellData.Value);
                    chartData.Add(new ChartPoint
                    {
                        XVal = xValue,
                        YVal = yValue
                    });
                }
            }
            datasource[i] = chartData;
        }
        ispop = true;
    }

    private class ChartPoint
    {
        public int XVal { get; set; }
        public int YVal { get; set; }
    }

    private void OnItemSelected(MenuEventArgs args)
    {
        var selectedChart = args.Item.Text;
        var chartTypeData = ChartTypes.FirstOrDefault(c => c.Name == selectedChart);
        if (chartTypeData != null)
        {
            TypeSelected = chartTypeData.Name;
            ChartType = chartTypeData.Value;
            StateHasChanged();
        }
    }
    private void ColumnRender(ColumnRenderEventArgs args)
    {
        args.Columns[0].Width = "175";
        for (int i = 1; i < args.Columns.Count - 1; i++) {
            args.Columns[i].Width = "140";
        }
        args.Columns[args.Columns.Count-1].Width = "500";
    }
}