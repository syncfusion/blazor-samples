@page "/pivot-table/virtual-scrolling"

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Buttons
@using System.Diagnostics

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the virtual scrolling option available for vertically and horizontally loading records and showing a large number of records with ease.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The pivot table provides an optimized way to render rows and columns inside the view-port alone without
        calculating the value of the entire pivot. To enable virtual scrolling, set the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.SfPivotView-1.html#Syncfusion_Blazor_PivotView_SfPivotView_1_EnableVirtualization" aria-label="Class reference of EnableVirtualization property in PivotView">EnableVirtualization</a> property in <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.SfPivotView-1.html" aria-label="Class reference of PivotView">SfPivotView</a> to <b>true</b>.
    </p>
    <p>More information on the virtual scrolling feature can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/pivot-table/virtual-scrolling" aria-label="Blazor PivotTable Virtualization documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <SfButton id="load" IsPrimary="true" Disabled="@_disableButton" OnClick="@OnApply"> Load 100K Rows </SfButton>
        <div id="performanceTime" style="float:right">
            Time taken = @timeElapsed
        </div>
        <div id="Pivot" style="margin-top:10px">
            <SfPivotView TValue="PivotVirtualData" Width="100%" Height="500" EnableVirtualization="true" EnableValueSorting=true ShowTooltip=false>
                <PivotViewDataSourceSettings DataSource="@PivotViewDataSource" EnableSorting="false" AlwaysShowValueHeader="true">
                    <PivotViewColumns>
                        <PivotViewColumn Name="Year"></PivotViewColumn>
                    </PivotViewColumns>
                    <PivotViewRows>
                        <PivotViewRow Name="ProductID"></PivotViewRow>
                    </PivotViewRows>
                    <PivotViewValues>
                        <PivotViewValue Name="Price" Caption="Unit Price"></PivotViewValue>
                        <PivotViewValue Name="Sold" Caption="Unit Sold"></PivotViewValue>
                    </PivotViewValues>
                    <PivotViewFormatSettings>
                        <PivotViewFormatSetting Name="Price" Format="C0"></PivotViewFormatSetting>
                    </PivotViewFormatSettings>
                </PivotViewDataSourceSettings>
                <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
                <PivotViewEvents TValue="PivotVirtualData" DataBound="@DataBound"></PivotViewEvents>
            </SfPivotView>
        </div>
    </div>
</div>


<style>
    .e-pivotview {
        min-height: 200px;
    }
</style>

@code {
    private List<PivotVirtualData>? PivotViewDataSource { get; set; }
    private bool _disableButton = false;
    private Stopwatch _stopWatch = new Stopwatch();
    private string timeElapsed = "0 sec";
    protected override void OnInitialized()
    {
        PivotViewDataSource = new List<PivotVirtualData>();
    }
    private void OnApply(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        PivotViewDataSource = PivotVirtualData.GetVirtualData();
        _stopWatch.Start();
        _disableButton = true;
    }
    private void DataBound()
    {
        if (_disableButton)
        {
            _stopWatch.Stop();
            TimeSpan TimeTaken = _stopWatch.Elapsed;
            timeElapsed = String.Format("{0:00}:{1:00} seconds", TimeTaken.Seconds, TimeTaken.Milliseconds / 100);
        }
    }
}