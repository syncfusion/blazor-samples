@page "/pivot-table/field-list"

@using Syncfusion.Blazor.PivotView

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the Excel-like field list feature of the pivot table. The pivot fields are automatically populated from the bound data source, and they can be dragged and dropped to create and alter the report at runtime.</p>
</SampleDescription>
<ActionDescription>
    <p>
        The pivot table provides a built-in field list very similar to Microsoft Excel. The top section of the
        field list allows the user to add and remove fields. The bottom section of the field list allows the user to rearrange the
        fields between different axes, including column, row, value, and filter along with filter and sort options.
        <br><br> To show the field list independently, create as separate component namely
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.SfPivotFieldList-1.html" aria-label="Class reference of PivotFieldList">SfPivotFieldList</a> and assign JSON data source to its
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFieldListDataSourceSettings-1.html#Syncfusion_Blazor_PivotView_PivotFieldListDataSourceSettings_1_DataSource" aria-label="Class reference of PivotFieldListDataSourceSettings">PivotFieldListDataSourceSettings->DataSource</a> property. Simultaneously, pivot table will be populated by passing its instance in
        the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.SfPivotFieldList-1.html#Syncfusion_Blazor_PivotView_SfPivotFieldList_1_UpdateViewAsync_Syncfusion_Blazor_PivotView_SfPivotView__0__" aria-label="Class reference of UpdateViewAsync method in PivotView">UpdateViewAsync</a> method, inside the
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFieldListEvents-1.html#Syncfusion_Blazor_PivotView_PivotFieldListEvents_1_EnginePopulated" aria-label="Class reference of EnginePopulated event in PivotView">EnginePopulated</a> event of field list.
        <br /><br />
        Additionally, user interface for calculated field, label filter, and value filter features have been enabled in this demo by setting the properties
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.SfPivotFieldList-1.html#Syncfusion_Blazor_PivotView_SfPivotFieldList_1_AllowCalculatedField" aria-label="Class reference of AllowCalculatedField property in PivotView">PivotFieldList->AllowCalculatedField</a>,
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFieldListDataSourceSettings-1.html#Syncfusion_Blazor_PivotView_PivotFieldListDataSourceSettings_1_AllowLabelFilter" aria-label="Class reference of AllowLabelFilter property in PivotView">PivotFieldListDataSourceSettings->AllowLabelFilter</a> and <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFieldListDataSourceSettings-1.html#Syncfusion_Blazor_PivotView_PivotFieldListDataSourceSettings_1_AllowValueFilter" aria-label="Class reference of AllowValueFilter property in PivotView">PivotFieldListDataSourceSettings->AllowValueFilter</a> to <b>true</b>.
    </p>
    <p>More information on the field list can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/pivot-table/field-list/" aria-label="Blazor PivotTable FieldList documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <SfPivotView TValue="PivotProductDetails" @ref="@PivotView" Height="530" ShowFieldList="@_mobileFieldList" AllowCalculatedField=true ShowTooltip=false ShowFieldSearch="true">
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
            @if (@_mobileFieldList)
            {
                <PivotViewDataSourceSettings DataSource="@Data" ExpandAll=false EnableSorting=true>
                    <PivotViewColumns>
                        <PivotViewColumn Name="Year"></PivotViewColumn>
                        <PivotViewColumn Name="Order_Source" Caption="Order Source"></PivotViewColumn>
                    </PivotViewColumns>
                    <PivotViewRows>
                        <PivotViewRow Name="Country"></PivotViewRow>
                        <PivotViewRow Name="Products"></PivotViewRow>
                    </PivotViewRows>
                    <PivotViewValues>
                        <PivotViewValue Name="In_Stock" Caption="In Stock"></PivotViewValue>
                        <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                        <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                    </PivotViewValues>
                    <PivotViewFormatSettings>
                        <PivotViewFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotViewFormatSetting>
                    </PivotViewFormatSettings>
                </PivotViewDataSourceSettings>
            }
            else
            {
                <PivotViewEvents TValue="PivotProductDetails" EnginePopulated="@PivotEnginePopulated" Drill="@UpdateDrillInfo"></PivotViewEvents>
            }
        </SfPivotView>
        @if (!_mobileFieldList)
        {
            <SfPivotFieldList TValue="PivotProductDetails" @ref="@PivotFieldList" AllowCalculatedField="true" RenderMode="Mode.Fixed" ShowFieldSearch="true">
                <PivotFieldListDataSourceSettings DataSource="@Data" EnableSorting=true AllowLabelFilter="true" AllowValueFilter="true">
                    <PivotFieldListColumns>
                        <PivotFieldListColumn Name="Year"></PivotFieldListColumn>
                        <PivotFieldListColumn Name="Order_Source" Caption="Order Source"></PivotFieldListColumn>
                    </PivotFieldListColumns>
                    <PivotFieldListRows>
                        <PivotFieldListRow Name="Country"></PivotFieldListRow>
                        <PivotFieldListRow Name="Products"></PivotFieldListRow>
                    </PivotFieldListRows>
                    <PivotFieldListValues>
                        <PivotFieldListValue Name="In_Stock" Caption="In Stock"></PivotFieldListValue>
                        <PivotFieldListValue Name="Sold" Caption="Unit Sold"></PivotFieldListValue>
                        <PivotFieldListValue Name="Amount" Caption="Sold Amount"></PivotFieldListValue>
                    </PivotFieldListValues>
                    <PivotFieldListFilters>
                        <PivotFieldListFilter Name="Product_Categories" Caption="Product Categories"></PivotFieldListFilter>
                    </PivotFieldListFilters>
                    <PivotFieldListFormatSettings>
                        <PivotFieldListFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotFieldListFormatSetting>
                    </PivotFieldListFormatSettings>
                </PivotFieldListDataSourceSettings>
                <PivotFieldListEvents TValue="PivotProductDetails" EnginePopulated="@EnginePopulated"></PivotFieldListEvents>
            </SfPivotFieldList>
        }
    </div>
</div>

<style>

    .e-pivotview {
        float: left;
        min-height: 200px;
        width: 62% !important;
    }

    .e-pivotview.e-device {
        width: 100% !important;
     }

    .e-pivotfieldlist.e-device {
        width: 100% !important;
    }

    .e-pivotfieldlist {
        float: right;
        width: 37% !important;
    }

    .e-pivotfieldlist .e-static {
         width: 100% !important;
    }

    html, body {
        height: 100%;
    }
</style>

@code {
    public SfPivotFieldList<PivotProductDetails>? PivotFieldList;
    public SfPivotView<PivotProductDetails>? PivotView;
    private bool _mobileFieldList = false;
    public List<PivotProductDetails>? Data { get; set; }
    
    protected override void OnInitialized()
    {
        Data = PivotProductDetails.GetProductData();
        if (SampleService.IsDevice)
        {
            _mobileFieldList = true;
        }
    }
    private async Task PivotEnginePopulated(EnginePopulatedEventArgs args)
    {
        if(PivotFieldList != null && PivotView != null)
        {
            await PivotFieldList.UpdateAsync(PivotView);        
        }
    }
    private async Task UpdateDrillInfo(DrillArgs<PivotProductDetails> args)
    {
        if(PivotFieldList != null && PivotView != null)
        {
            await PivotFieldList.UpdateAsync(PivotView);
        }
    }
    private async Task EnginePopulated(EnginePopulatedEventArgs args)
    {
        if(PivotFieldList != null && PivotView != null)
        {
            await PivotFieldList.UpdateViewAsync(PivotView);
        }
    }
}