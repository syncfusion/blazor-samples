@page "/pivot-table/external-date-filtering"
@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons

@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates how to apply an external date range filter to the Pivot Table data source, enhancing
        performance and responsiveness when working with large datasets.
    </p>
</SampleDescription>
<ActionDescription>
    <p>In this sample, date filtering is performed externally by updating the Pivot Table's data source based on a selected date range. Users can choose a <b>Start Date</b> and <b>End Date</b> using date pickers, and the table updates to show only the records that fall within that range.</p>
    <p>This external filtering method improves performance by avoiding in-component filtering. Instead, the data is pre-filtered at runtime using a custom <code>ApplyDateFilter</code> function, which compares the selected date range with each record's date in the original dataset. This reduces the processing load on the Pivot Table and results in a more responsive user experience</p>
    <p><b>Note:</b> Aggregation in the Pivot Table is performed only on the filtered data. Any records outside the selected date range are excluded from the summary calculations.</p>
</ActionDescription>

<div class="control-section">
    <div class="content-wrapper">
        <div class="filter-controls">
            <div class="filter-item">
                <label for="start-datepicker"><strong>Start Date: </strong></label>
                <SfDatePicker id="start-datepicker" TValue="DateTime?" @bind-Value="StartDate"
                              Placeholder="Choose a start date"
                              Min="new DateTime(2019, 1, 1)" Max="new DateTime(2024, 12, 31)"
                              Format="MMM yyyy" Start="CalendarView.Year" Depth="CalendarView.Year"
                              Width="200px" ShowClearButton="true" />
            </div>
            <div class="filter-item">
                <label for="end-datepicker"><strong>End Date: </strong></label>
                <SfDatePicker id="end-datepicker" TValue="DateTime?" @bind-Value="EndDate"
                              Placeholder="Choose an end date"
                              Min="new DateTime(2019, 1, 1)" Max="new DateTime(2024, 12, 31)"
                              Format="MMM yyyy" Start="CalendarView.Year" Depth="CalendarView.Year"
                              Width="200px" ShowClearButton="true" />
            </div>
            <div class="filter-item">
                <SfButton IsPrimary="true" OnClick="ApplyDateFilter" CssClass="e-primary">Apply</SfButton>
            </div>
        </div>
        <SfPivotView TValue="RecordEntry" @ref="PivotObj" ID="PivotView" Height="500" Width="100%">
            <PivotViewDataSourceSettings DataSource="@FilteredData" EnableSorting="true" ExpandAll="true">
                <PivotViewColumns>
                    <PivotViewColumn Name="Country"></PivotViewColumn>
                    <PivotViewColumn Name="Product"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="OrderDate"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="Amount" Caption="Total Sales"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0"></PivotViewFormatSetting>
                    <PivotViewFormatSetting Name="OrderDate" Format="dd/MM/yyyy" Type=FormatType.DateTime></PivotViewFormatSetting>
                </PivotViewFormatSettings>
                <PivotViewGroupSettings>
                    <PivotViewGroupSetting Name="OrderDate" GroupInterval="new List<DateGroup> { DateGroup.Years, DateGroup.Months }"></PivotViewGroupSetting>
                </PivotViewGroupSettings>
                <PivotViewDrilledMembers>
                    <PivotViewDrilledMember Name="Country" Items=@Countries></PivotViewDrilledMember>
                </PivotViewDrilledMembers>
            </PivotViewDataSourceSettings>
            <PivotViewGridSettings ColumnWidth="140"></PivotViewGridSettings>
        </SfPivotView>
    </div>
</div>

<style>
    .filter-controls {
        display: flex;
        flex-wrap: wrap; 
        align-items: center;
        gap: 20px;
        margin-bottom: 10px;
        margin-top: 10px;
    }
    .filter-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .filter-item label {
        white-space: nowrap;
        font-size: 14px;
    }
    @@media (max-width: 450px) {
        .filter-controls {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
    }

    .tailwind3 .e-calendar .e-btn.e-today.e-flat.e-primary.e-disabled, .tailwind3-dark .e-calendar .e-btn.e-today.e-flat.e-primary.e-disabled {
        background: #a5b4fc !important;
        border-color: #a5b4fc !important;
    }
</style>

@code {
    private SfPivotView<RecordEntry>? PivotObj;

    private List<RecordEntry> FullData = new List<RecordEntry>();
    private List<RecordEntry> FilteredData = new List<RecordEntry>();
    private DateTime? StartDate = new DateTime(2024, 1, 1);
    private DateTime? EndDate = new DateTime(2024, 12, 1);
    public string[] Countries = new string[] { "Canada" };

    protected override void OnInitialized()
    {
        FullData = RecordEntry.GenerateFullData();
        FilteredData = FullData.Where(d => d.OrderDate >= StartDate && d.OrderDate <= EndDate).ToList();
    }

    private void ApplyDateFilter()
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            var start = StartDate.Value.Date;
            var end = EndDate.Value.Date.AddDays(1).AddTicks(-1);
            FilteredData = FullData.Where(d => d.OrderDate >= start && d.OrderDate <= end).ToList();
            StateHasChanged();
        }
    }
}