@page "/range-slider/formatting"

@using Syncfusion.Blazor.Inputs;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the formatting of <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Ticks" aria-label="Class reference of Ticks property in Range Slider">Ticks</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Tooltip" aria-label="Clsas reference of Tooltip property in Range Slider">Tooltip</a> in the <a href="https://www.syncfusion.com/blazor-components/blazor-range-slider" target="_blank" aria-label="Feature Tour of Blazor Range Slider">Blazor Range Slider</a> component. Drag the thumb over the bar to select the formatted values between <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Min" aria-label="Class reference of Min property in Range Slider">Min</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Max" aria-label="Class reference of Max property in Range Slider">Max</a>.</p>
</SampleDescription>
<ActionDescription>
    <p>The format feature customizes the units of <code>Range Slider</code> values to the desired format. The formatted values will also be applied to the ARIA attributes of the <code>Range Slider</code> component.</p>
    <p>In this demo, the <code>Range Slider</code> with currency and kilometer formatting is demonstrated.</p>
    <ul>
        <li>
            Currency Slider – In this example, the ticks and tooltip are formatted into currency using the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderTooltip.html#Syncfusion_Blazor_Inputs_SliderTooltip_Format" aria-label="Class reference of Format property in Range Slider">Format</a> property.
        </li>
        <li>
            Kilometer Slider – In this example, the ticks and tooltip are formatted into kilometers using the <code>Format</code> property.
        </li>
        <li>
            Time Slider – In this example, the ticks and tooltip are formatted into time using the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderEvents-1.html#Syncfusion_Blazor_Inputs_SliderEvents_1_OnTooltipChange" aria-label="Class reference of OnTooltipChange event in Range Slider">OnTooltipChange</a> event in the tooltip and the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderEvents-1.html#Syncfusion_Blazor_Inputs_SliderEvents_1_TicksRendering" aria-label="Class reference of TicksRendering event in Range Slider">TicksRendering</a> event in ticks.
        </li>
    </ul>
    <p>For more information, refer to the <a target="_blank" href="https://blazor.syncfusion.com/documentation/range-slider/format" aria-label="Blazor RangeSlider Format documentation">format</a> section of the documentation.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class='slider-wrap'>
            <label>Currency Slider</label>
            @*Initialize the Currency Slider component*@
            <SfSlider id='currency' TValue="int[]" Min="0" Max="100" Type="SliderType.Range" @bind-Value="@CurrencyValues">
                <SliderTicks Placement="Placement.After" LargeStep="25" SmallStep="5" Format="$0" ShowSmallTicks="true"></SliderTicks>
                <SliderTooltip Placement="TooltipPlacement.Before" IsVisible="true" Format="$0" ShowOn="TooltipShowOn.Focus"></SliderTooltip>
            </SfSlider>
        </div>
        <div class='slider-wrap'>
            <label>Kilometer Slider</label>
            @*Initialize the Kilometer Slider component*@
            <SfSlider id='kilometer' TValue="int[]" Min="900" Max="2100" Type="SliderType.Range" @bind-Value="@KilometerValues">
                <SliderTicks Placement="Placement.After" LargeStep="400" SmallStep="100" ShowSmallTicks="true" Format="0##.## km"></SliderTicks>
                <SliderTooltip Placement="TooltipPlacement.Before" IsVisible="true" Format="0##.## km" ShowOn="TooltipShowOn.Focus"></SliderTooltip>
            </SfSlider>
        </div>
        <div class='slider-wrap'>
            <label>Time Slider</label>
            @*Initialize the Time Slider component*@
            <SfSlider id='time' TValue="int[]" Min="MinValue()" Max="@MaxValue()" Type="SliderType.Range" @bind-Value="TimeSliderValues">
                <SliderEvents TValue="int[]" OnTooltipChange="@TooltipChange" TicksRendering="@TicksRendering"></SliderEvents>
                <SliderTicks Placement="Placement.After" LargeStep="LargeStep" ShowSmallTicks="true" SmallStep="3600000"></SliderTicks>
                <SliderTooltip Placement="TooltipPlacement.Before" IsVisible="true" ShowOn="TooltipShowOn.Focus"></SliderTooltip>
            </SfSlider>
        </div>
    </div>
</div>

@code{
    // Specify the value for Currency Slider component.
    private int[] CurrencyValues = new int[] { 20, 80 };
    // Specify the value for Kilometer Slider component.
    private int[] KilometerValues = new int[] { 1100, 1850 };
    // Specify the value for Time Slider component.
    private int[] TimeSliderValues = new int[] { 43200000, 64800000 };
    private double LargeStep =  7200000;
    
    // Specifies the event handler for the TicksRendering event in Time Slider component. It's used to convert the slider values into time format.
    public void TicksRendering(SliderTickEventArgs Args)
    {
        double Time = Args.Value / 3600000;
        if (Time > 11)
        {
            Args.Text = Time + ".00 PM";
        }
        else
        {
            Args.Text = Time + ".00 AM";
        }
    }
    // Specify the method to return the minimum value of Time Slider component.
    public double MinValue()
    {
        DateTime MinDateTime = new DateTime(2013, 6, 13, 11, 0, 0);
        return MinDateTime.TimeOfDay.TotalMilliseconds;
    }
    // Specify the method to return the maximum value of Time Slider component.
    public double MaxValue()
    {
        LargeStep = SampleService.IsDevice ? 10800000 : 7200000;
        DateTime MaxDateTime = SampleService.IsDevice ? new DateTime(2013, 6, 13, 20, 0, 0) : new DateTime(2013, 6, 13, 19, 0, 0);
        return MaxDateTime.TimeOfDay.TotalMilliseconds;
    }
    // Specifies the event handler for the TooltipChange event in Time Slider component. It's used to convert the tooltip values into time Format.
    public void TooltipChange(SliderTooltipEventArgs<int[]> Args)
    {
        if (Args.Value != null)
        {
            double FirstHandleValue = Args.Value[0] / 3600000;
            double SecondHandleValue = Args.Value[1] / 3600000;
            if (FirstHandleValue <= 11 && SecondHandleValue < 11)
            {
                Args.Text = FirstHandleValue + ".00 AM - " + SecondHandleValue + ".00 AM";
            }
            else if (FirstHandleValue <= 11 && SecondHandleValue > 11)
            {
                Args.Text = FirstHandleValue + ".00 AM - " + SecondHandleValue + ".00 PM";
            }
            else if (FirstHandleValue > 11 && SecondHandleValue > 11)
            {
                Args.Text = FirstHandleValue + ".00 PM - " + SecondHandleValue + ".00 PM";
            }
        }
    }
}

<style>
    /* Sampel specific styles */
    .content-wrapper {
        width: 50%;
        margin: 0 auto;
        min-width: 185px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .slider-wrap {
        margin: 40px 0;
    }

    .slider-wrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
        text-align: center;
        width: 100%;
    }
</style>