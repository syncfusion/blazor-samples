@page "/range-slider/limits"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the rendering of the <a href="https://www.syncfusion.com/blazor-components/blazor-range-slider" target="_blank" aria-label="Feature Tour of Blazor Range Slider">Blazor Range Slider</a> component with <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Limits" aria-label="Class reference of Limits property in Range Slider">Limits</a>. Drag the thumb over the bar to select the values between the assigned limit values.</p>
</SampleDescription>
<ActionDescription>
    <p>The limits are used to limit the selection between certain range. When the limits are assigned, the draggable limited area will be in the dark shadow color of the current theme. The limits of APIs are explained below.</p>
    <ul>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_MinStart" aria-label="Class reference of MinStart property in Range Slider">MinStart</a> - Used to set the minimum limit value for the first handle.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_MinEnd" aria-label="Class reference of MinEnd property in Range Slider">MinEnd</a> - Used to set the maximum limit value for the first handle.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_MaxStart" aria-label="Class reference of MaxStart property in Range Slider">MaxStart</a> - Used to set the minimum limit value for the second handle.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_MaxEnd" aria-label="Class reference of MaxEnd property in Range Slider">MaxEnd</a> - Used to set the maximum limit value for the second handle.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_StartHandleFixed" aria-label="Class reference of StartHandleFixed property in Range Slider">StartHandleFixed</a> - Used to lock the first handle in the current position.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderLimits.html#Syncfusion_Blazor_Inputs_SliderLimits_EndHandleFixed" aria-label="Class reference of EndHandleFixed property in Range Slider">EndHandleFixed</a> - Used to lock the second handle in the current position.</li>
    </ul>
    <p>In this demo, limits with MinRange and Range Slider are demonstrated.</p>
    <ul>
        <li>MinRange Slider – In this sample, the minimum and maximum limits of the slider are set to 10 and 40, respectively.</li>
        <li>Range Slider – In this sample, the minimum and maximum limits of the first handle are set to 10 and 40, respectively, and the minimum and maximum limits of the second handle are set to 60 and 90, respectively.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="content-wrapper">
        <div class='slider-wrap'>
            <label>MinRange Slider</label>
            @*Initialize the Default Slider component with Limits*@
            <SfSlider @bind-Value="@Default" Min="0" Max="100" Type=SliderType.MinRange>
                <SliderTicks Placement="@Placement.Before" LargeStep="20" SmallStep="5" ShowSmallTicks="true"></SliderTicks>
                <SliderTooltip IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="@TooltipShowOn.Focus"></SliderTooltip>
                <SliderLimits Enabled="true" MinStart="@CurrentMinStart" MinEnd="@CurrentMinEnd" StartHandleFixed="@LockFirstHandle"></SliderLimits>
            </SfSlider>
        </div>
        <div class='slider-wrap'>
            <label>Range Slider</label>
            @*Initialize the Range Slider component with Limits*@
            <SfSlider @bind-Value="@Range" Min="0" Max="100" Type=SliderType.Range>
                <SliderTicks Placement="@Placement.Before" LargeStep="20" SmallStep="5" ShowSmallTicks="true"></SliderTicks>
                <SliderTooltip IsVisible="true" Placement="TooltipPlacement.Before" ShowOn="@TooltipShowOn.Focus"></SliderTooltip>
                <SliderLimits Enabled="true" MinStart="@CurrentMinStart" MinEnd="@CurrentMinEnd" MaxStart="@CurrentMaxStart"
                              MaxEnd="@CurrentMaxEnd" StartHandleFixed="@LockFirstHandle" EndHandleFixed="@LockSecondHandle"></SliderLimits>
            </SfSlider>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div><div class="property-panel-content">
            <table id="property" title="Properties" class="property-panel-table">
                <tbody>
                    <tr>
                        <td style="width: 50%">
                            <div>MinStart</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the MinStart Numeric Textbox component*@
                                <SfNumericTextBox TValue="int?" Value="@CurrentMinStart" Min="0" Max="100">
                                    <NumericTextBoxEvents TValue="int?"  ValueChange="(e => { 
                                        if (e.Value < CurrentMinEnd) CurrentMinStart = (int)e.Value;
                                    })"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div>MinEnd</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the MinEnd Numeric Textbox component*@
                                <SfNumericTextBox TValue="int" Value="@CurrentMinEnd" Min="0" Max="100">
                                    <NumericTextBoxEvents TValue="int" ValueChange="(e => { CurrentMinEnd = (int)e.Value; })"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div>MaxStart</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the MaxStart Numeric Textbox component*@
                                <SfNumericTextBox TValue="int?" Value="@CurrentMaxStart" Min="0" Max="100">
                                    <NumericTextBoxEvents TValue="int?" ValueChange="(e => {
                                        if (e.Value > CurrentMinEnd && e.Value < CurrentMaxEnd) CurrentMaxStart = (int)e.Value;
                                    })"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div>MaxEnd</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the MaxEnd Numeric Textbox component*@
                                <SfNumericTextBox TValue="int" Value="@CurrentMaxEnd" Min="0" Max="100">
                                    <NumericTextBoxEvents TValue="int" ValueChange="(e => { CurrentMaxEnd = (int)e.Value; })"></NumericTextBoxEvents>
                                </SfNumericTextBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div>Lock First Handle</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the first handle Checkbox component*@
                                <SfCheckBox @bind-Checked="@LockFirstHandle"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 50%">
                            <div>Lock Second Handle</div>
                        </td>
                        <td style="width: 50%">
                            <div>
                                @*Initialize the second handle Checkbox component*@
                                <SfCheckBox @bind-Checked="@LockSecondHandle"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    // Specifies the value for MinRange Slider component.
    private int Default = 25;
    // Specifies the value for Range Slider component.
    private int[] Range = { 25, 75 };
    // Specifies the minimum start value of both MinRange and Range Slider component.
    private int CurrentMinStart = 10;
    // Specifies the minimum end value of both MinRange and Range Slider component.
    private int CurrentMinEnd = 40;
    // Specifies the maximum start value of Range Slider component.
    private int CurrentMaxStart = 60;
    // Specifies the maximum end value of Range Slider component.
    private int CurrentMaxEnd = 90;
    // Specifies the first handle lock value of the MinRange and Range Slider component.
    private bool LockFirstHandle = false;
    // Specifies the second handle lock value of the Range Slider component.
    private bool LockSecondHandle = false;
}

<style>
    /* Sample specific styles */
    .content-wrapper {
        width: 50%;
        margin: 0 auto;
        min-width: 185px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .slider-wrap {
        margin: 40px 0;
    }

    .slider-wrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
        text-align: center;
        width: 100%;
    }

    .property-panel-table div {
        padding-left: 0;
        padding-right: 5px;
    }
</style>
