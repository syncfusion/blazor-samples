@page "/range-slider/events"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the events that have been triggered on each action of the <a href="https://www.syncfusion.com/blazor-components/blazor-range-slider" target="_blank" aria-label="Feature Tour of Blazor Range Slider">Blazor Range Slider</a> component with the help of the event
        trace panel. Drag the thumb over the bar between <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Min" aria-label="Class reference of Min property in Range Slider">Min</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Max" aria-label="Class reference of Max property in Range Slider">Max</a> to know the event details.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The <code>Range Slider</code> component triggers the event based on its actions. The events can be used as an extension point to perform custom operations.
    </p>
    <p>In this demo, <code>Range Slider</code> performs the following actions which can be traced by the event trace panel: </p>
    <ul>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderEvents-1.html#Syncfusion_Blazor_Inputs_SliderEvents_1_Created" aria-label="Class reference of Created event in Range Slider">Created</a> - Triggers when the Range Slider is created.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderEvents-1.html#Syncfusion_Blazor_Inputs_SliderEvents_1_ValueChange" aria-label="Class reference of ValueChange event in Range Slider">ValueChange</a> - Triggers when the Range Slider value changes.</li>
        <li><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SliderEvents-1.html#Syncfusion_Blazor_Inputs_SliderEvents_1_OnChange" aria-label="Class reference of OnChange event in Range Slider">OnChange</a> - Triggers when the Range Slider action is completed with a change in Range Slider value.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="content-wrapper">
        <div class="slider-wrap">
            <label>MinRange Slider</label>
            @*Initialize the MinRange Slider component with events*@
            <SfSlider @bind-Value="@Value" Type="@SliderType.MinRange">
                <SliderTicks Placement="@Placement.After" SmallStep="5" LargeStep="20" ShowSmallTicks="true"></SliderTicks>
                <SliderTooltip IsVisible="true" Placement="TooltipPlacement.Before"></SliderTooltip>
                <SliderEvents TValue="int"
                              ValueChange="@(e => { EventsList.Add(new EventModel { Name = "ValueChange", CurrentValue = e.Value, PrevValue = e.PreviousValue }); })"
                              OnChange="@(e => { EventsList.Add(new EventModel { Name = "OnChange", CurrentValue = e.Value, PrevValue = e.PreviousValue }); })"
                              Created="@(e => { EventsList.Add(new EventModel { Name = "Created" }); })"
                              TicksRendered="@(e => { EventsList.Add(new EventModel { Name = "TicksRendered" }); })">
                </SliderEvents>
            </SfSlider>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Event Trace</div>
        <div class="property-panel-content">
            <table id="property" title="Event Trace" class="property-panel-table">
                <tbody>
                    <tr>
                        <td>
                            <div style="height: 228px; overflow: auto;">
                                @for (int i = EventsList.Count - 1; i >= 0; i--)
                                {
                                    <span>
                                        The <b>@EventsList[i].Name</b> event is triggered.
                                        @if (EventsList[i].CurrentValue != null)
                                        {
                                            <span> The current and the previous values are @EventsList[i].CurrentValue and
                                                @EventsList[i].PrevValue.</span>
                                        }
                                    </span>
                                    <hr>
                                }
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div style="padding: 10px 0;">
                                @*Initialize the Button component*@
                                <SfButton Content="Clear" @onclick="@(e => { EventsList.RemoveAll((s) => true); })"></SfButton>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    // Specifies the value of Range Slider component.
    private int Value = 25;
    // Specifies the event list for collections for Range Slider component.
    private List<EventModel> EventsList = new List<EventModel>();
    
    public class EventModel
    {
        public string? Name { get; set; }
        public int? CurrentValue { get; set; }
        public int? PrevValue { get; set; }
    }
}

<style>
    /* Sample specific styles */
    .content-wrapper {
        width: 50%;
        margin: 0 auto;
        min-width: 185px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .slider-wrap {
        margin: 40px 0;
    }

    .slider-wrap label {
        padding-bottom: 26px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
        text-align: center;
        width: 100%;
    }

    .property-panel-content b {
        color: #388e3c;
    }

    .property-panel-content hr {
        margin-top: 6px;
        margin-bottom: 6px;
    }

    .property-panel-table div {
        padding: 0px;
    }
</style>
