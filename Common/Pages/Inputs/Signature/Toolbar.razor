@page "/signature/toolbar"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the <b>Signature</b> component with Toolbar. The Toolbar items exposes the commands for the functionalities of the <b>Signature</b> component like undo, redo, save with background, background color, stroke color, clear and disable.</p>
</SampleDescription>
<ActionDescription>
    <p>In this sample, each Toolbar item allows to perform the below defined functionalities of Signature component.</p>
    <ul>
        <li><p>Use <b>Undo</b> button or use <span class="key-class"><kbd>Ctrl + Z</kbd></span> to undo your actions.</p></li>
        <li><p>Use the <b>Redo</b> button or use <span class="key-class"><kbd>Ctrl + Y</kbd></span> to redo the reverted actions.</p></li>
        <li><p>Use the <b>Save</b> button or use <span class="key-class"><kbd>Ctrl + S</kbd></span> to store your signature as an image file.</p></li>
        <li><p>Use <b>Stroke color</b> ColorPicker to change the stroke color of the Signature component.</p></li>
        <li><p>Use <b>Background color</b> ColorPicker to change the background color of the Signature component.</p></li>
        <li><p>Use <b>Stroke Width</b> DropDownList values to change the signature stroke width.</p></li>
        <li><p>Use the <b>Clear</b> button to erase the signature.</p></li>
        <li><p>Check the <b>Disabled</b> Checkbox to disable the Signature component.</p></li>
    </ul>
    <p> More information about Blazor Signature component can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/signature/getting-started/" aria-label="documentation section">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <div id="signature-toolbar-container">
        <SfToolbar ID="toolbar">
            <ToolbarItems>
                <!-- Undo Button -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Undo (Ctrl + Z)">
                    <Template>
                        <SfButton Disabled="@IsUndoDisabled" @ref="UndoButtonRef" IconCss="e-icons e-undo" @onclick="UndoSignature" Content="Undo" aria-label="Undo Signature" />
                    </Template>
                </ToolbarItem>

                <!-- Redo Button -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Redo (Ctrl + Y)">
                    <Template>
                        <SfButton Disabled="@IsRedoDisabled" @ref="RedoButtonRef" IconCss="e-icons e-redo" @onclick="RedoSignature" Content="Redo" aria-label="Redo Signature" />
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Separator"/>

                <!-- Save Button -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Save">
                    <Template>
                        <SfSplitButton Content="Save" IconCss="e-sign-icons e-save" Disabled="@IsSaveDisabled">
                            <SplitButtonEvents Clicked="OnSaveClicked" ItemSelected="OnSaveFormatSelected"/>
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="PNG"/>
                                <DropDownMenuItem Text="JPEG"/>
                                <DropDownMenuItem Text="SVG"/>
                            </DropDownMenuItems>
                        </SfSplitButton>
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Separator"/>

                <!-- Stroke Color Picker -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Stroke Color">
                    <Template>
                        <SfColorPicker Mode="ColorPickerMode.Palette" CssClass="circle-palette" Value="@StrokeColor" ShowButtons="false" ModeSwitcher="false" Columns="4" PresetColors="@StrokePaletteColors" ValueChange="OnStrokeColorChanged"/>
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Separator"/>

                <!-- Background Color Picker -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Background Color">
                    <Template>
                        <SfColorPicker CssClass="circle-palette e-bg-color" NoColor="true" Mode="ColorPickerMode.Palette" Value="@BackgroundColor" ShowButtons="false" ModeSwitcher="false" Columns="4" PresetColors="@BackgroundPaletteColors" ValueChange="OnBackgroundColorChanged"/>
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Separator"/>

                <!-- Stroke Width -->
                <ToolbarItem Type="@ItemType.Input" TooltipText="Stroke Width">
                    <Template>
                        <SfDropDownList TItem="double" TValue="double" Width="60px" Value="@StrokeWidth" DataSource="@StrokeWidthOptions">
                            <DropDownListEvents TItem="double" TValue="double" ValueChange="OnStrokeWidthChanged"/>
                        </SfDropDownList>
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Separator"/>

                <!-- Clear Button -->
                <ToolbarItem Type="@ItemType.Button" TooltipText="Clear">
                    <Template>
                        <SfButton Disabled="@IsClearDisabled" @ref="ClearButtonRef" IconCss="e-sign-icons e-clear" @onclick="ClearSignature" Content="Clear"/>
                    </Template>
                </ToolbarItem>

                <ToolbarItem Type="@ItemType.Input" Align="ItemAlign.Right" TooltipText="Disabled">
                    <Template>
                        <SfCheckBox Label="Disabled" ValueChange="OnDisabledChange" TChecked="bool"/>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>

        <!-- Signature Canvas -->
        <div id="signature-container">
            <SfSignature id="signature" @ref="SignatureRef" style="width: 100%; height: 100%;" BackgroundColor="@BackgroundColor" StrokeColor="@StrokeColor"
            Disabled="@IsSignatureDisabled" MaxStrokeWidth="@StrokeWidth" Changed="OnSignatureChanged"/>
        </div>
    </div>
</div>

@code{
    private SfSignature? SignatureRef { get; set; }
    private SfButton? UndoButtonRef { get; set; }
    private SfButton? RedoButtonRef { get; set; }
    private SfButton? ClearButtonRef { get; set; }
    private bool IsUndoDisabled { get; set; } = true;
    private bool IsRedoDisabled { get; set; } = true;
    private bool IsSaveDisabled { get; set; } = true;
    private bool IsClearDisabled { get; set; } = true;
    private bool IsSignatureDisabled { get; set; } = false;
    private SignatureFileType SaveFileType { get; set; } = SignatureFileType.Png;
    private string? BackgroundColor { get; set; } = "#ffffff";
    private string? StrokeColor { get; set; } = "#000000";
    private double StrokeWidth { get; set; } = 2;

    // Palette color options for stroke and background
    private Dictionary<string, string[]> StrokePaletteColors { get; set; } = new Dictionary<string, string[]>()
    {
        { "Custom", new[] { "#000000", "#e91e63", "#9c27b0", "#673ab7", "#2196f3", "#03a9f4", "#00bcd4", "#009688", "#8bc34a", "#cddc39", "#ffeb3b", "#ffc107" } }
    };

    private Dictionary<string, string[]> BackgroundPaletteColors { get; set; } = new Dictionary<string, string[]>()
    {
        { "Custom", new[] { "#ffffff", "#f44336", "#e91e63", "#9c27b0", "#673ab7", "#2196f3", "#03a9f4", "#00bcd4", "#009688", "#8bc34a", "#cddc39", "#ffeb3b" } }
    };

    // Stroke width options
    private double[] StrokeWidthOptions { get; set; } = { 1, 2, 3, 4, 5 };

    // Event Handlers

    private async Task OnSignatureChanged()
    {
        await UpdateUndoRedoState();
        await UpdateSaveClearState();
    }

    private void OnStrokeWidthChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<double, double> args)
    {
        StrokeWidth = args.Value;
    }

    private async Task UndoSignature()
    {
        if (SignatureRef != null && await SignatureRef.CanUndoAsync())
        {
            await SignatureRef.UndoAsync();
            await UpdateUndoRedoState();
            await UpdateSaveClearState();
        }
    }

    private async Task RedoSignature()
    {
        if (SignatureRef != null && await SignatureRef.CanRedoAsync())
        {
            await SignatureRef.RedoAsync();
            await UpdateUndoRedoState();
            await UpdateSaveClearState();
        }
    }

    private async Task UpdateUndoRedoState()
    {
        if (SignatureRef != null)
        {
            IsUndoDisabled = !await SignatureRef.CanUndoAsync();
            IsRedoDisabled = !await SignatureRef.CanRedoAsync();           
        }
    }

    private async Task UpdateSaveClearState()
    {
        if (SignatureRef != null)
        {
            bool isSignatureEmpty = await SignatureRef.IsEmptyAsync();
            IsSaveDisabled = isSignatureEmpty;
            IsClearDisabled = isSignatureEmpty;          
        }
    }

    private async Task ClearSignature()
    {
        if (SignatureRef != null)
        {
            await SignatureRef.ClearAsync();
        }
        await UpdateSaveClearState();
    }

    private void OnBackgroundColorChanged(ColorPickerEventArgs args)
    {
        BackgroundColor = args.CurrentValue?.Hex;
    }

    private void OnStrokeColorChanged(ColorPickerEventArgs args)
    {
        StrokeColor = args.CurrentValue?.Hex;
    }

    private void OnDisabledChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        IsSignatureDisabled = args.Checked;
    }

    private void OnSaveClicked(Syncfusion.Blazor.SplitButtons.ClickEventArgs args)
    {
        if (SignatureRef != null)
        {
            SignatureRef.SaveAsync();           
        }
    }

    private void OnSaveFormatSelected(MenuEventArgs args)
    {
        SaveFileType = args.Item.Text switch
        {
            "PNG" => SignatureFileType.Png,
            "JPEG" => SignatureFileType.Jpeg,
            "SVG" => SignatureFileType.Svg,
            _ => SaveFileType
        };
        if (SignatureRef != null)
        {
            SignatureRef.SaveAsync(SaveFileType, "Signature");           
        }
    }

}

<style>

    @@font-face {
        font-family: 'font-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-sign-icons {
        font-family: 'font-icons' !important;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #signature-toolbar-container .e-clear::before {
        content: '\e706';
    }

    #signature-toolbar-container .e-save::before {
        content: '\e701';
    }

    #signature-toolbar-container {
        border: 1px solid lightgray;
    }

    .highcontrast #signature-toolbar-container {
        border: 1px solid white;
    }

    #signature-toolbar-container #toolbar {
        border: none;
        border-bottom: 1px solid lightgray;
        box-sizing: border-box;
    }

    #signature-toolbar-container #toolbar {
        height: 44px !important;
    }

    .e-bigger #signature-toolbar-container #toolbar {
        height: 54px !important;
    }

    .e-bigger .material #signature-toolbar-container div#toolbar,
    .e-bigger .material-dark #signature-toolbar-container div#toolbar {
        height: 57px !important;
    }

    .e-bigger .bootstrap4 #signature-toolbar-container div#toolbar,
    .e-bigger .bootstrap4-dark #signature-toolbar-container div#toolbar {
        height: 65px !important;
    }

    .bootstrap4 #signature-toolbar-container div#toolbar,
    .bootstrap4-dark #signature-toolbar-container div#toolbar,
    .bootstrap-dark #signature-toolbar-container div#toolbar,
    .bootstrap #signature-toolbar-container div#toolba {
        height: 49px !important;
    }

    .bootstrap5 #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap5 #signature-toolbar-container #toolbar .e-dropdown-btn {
        color: #6c757d
    }

    .bootstrap4 #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap4 #signature-toolbar-container #toolbar .e-dropdown-btn {
        color: #495057;
    }

    .highcontrast #signature-toolbar-container #toolbar .e-split-btn,
    .highcontrast #signature-toolbar-container #toolbar .e-dropdown-btn {
        color: #fff;
    }

    .fabric #signature-toolbar-container #toolbar .e-split-btn,
    .fabric #signature-toolbar-container #toolbar .e-dropdown-btn,
    .bootstrap5 #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap5 #signature-toolbar-container #toolbar .e-dropdown-btn,
    .bootstrap4 #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap4 #signature-toolbar-container #toolbar .e-dropdown-btn {
        background-color: transparent !important;
        border-color: lightgray;
    }

    .fabric-dark #signature-toolbar-container #toolbar .e-dropdown-btn,
    .fabric-dark #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap5-dark #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap5-dark #signature-toolbar-container #toolbar .e-dropdown-btn,
    .bootstrap4-dark #signature-toolbar-container #toolbar .e-split-btn,
    .bootstrap4-dark #signature-toolbar-container #toolbar .e-dropdown-btn {
        background-color: transparent !important;
        border-color: gray;
    }

    #signature-toolbar-container .e-btn:disabled {
        opacity: 0.5 !important;
        pointer-events: none;
    }

    #signature-toolbar-container #signature-container {
        height: 300px;
        width: 100%;
        margin: 0;
    }

    #signature-toolbar-container #signature {
        border: none !important;
    }

    .circle-palette .e-container {
        background-color: transparent;
        border-color: transparent;
        width: 160px;
    }

    .circle-palette .e-container .e-custom-palette.e-palette-group {
        height: 182px;
    }

    .circle-palette .e-container .e-palette .e-tile {
        border: 0;
        color: #fff;
        height: 32px;
        font-size: 18px;
        width: 32px;
        line-height: 36px;
        border-radius: 50%;
        margin: 4px;
        font-family: "e-icons";
        font-style: normal;
        font-variant: normal;
        font-weight: normal;
        text-transform: none;
    }

    .circle-palette .e-container .e-palette .e-tile.e-selected::before {
        content: '\e933';
    }

    .circle-palette .e-container .e-palette .e-tile.e-selected {
        outline: none;
    }

    .circle-palette .e-split-colorpicker .e-selected-color .e-split-preview {
        border: 1px solid lightgray;
    }

    .e-container .e-custom-palette .e-palette {
        padding: 0px;
    }

    .e-bg-color .e-circle-palette.e-nocolor-item.e-selected .e-circle-selection {
        background: transparent;
    }

    .e-bg-color .e-circle-palette.e-nocolor-item.e-selected {
        border: 3px solid lightgray;
    }
</style>
