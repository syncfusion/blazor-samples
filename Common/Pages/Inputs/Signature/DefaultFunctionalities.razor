@page "/signature/default-functionalities"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the basic rendering of the <b>Blazor Signature</b> component with the save and clear option.</p>
</SampleDescription>
<ActionDescription>
    <p>The Blazor Signature component used to capture smooth and realistic signatures by allowing users to draw signatures.
        In this sample, you can draw the signature. Use the <b>Save</b> button to store the signature as an image file, and the <b>Clear</b> button to erase the signature.</p>
    <p> More information about Blazor Signature component can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/signature/getting-started/" aria-label="documentation section">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <div id="signature-control">
        <div class='e-sign-heading'>
            <span id="signdescription">Sign below</span>
            <span class="e-btn-options">
                <SfButton @ref="SaveButtonRef" Disabled="IsSaveDisabled" IsPrimary="true" class="e-sign-save" @onclick="SaveSignature" aria-label="Save Signature">Save</SfButton>
                <SfButton @ref="ClearButtonRef" Disabled="IsClearDisabled" IsPrimary="true" class="e-sign-clear" @onclick="ClearSignature" aria-label="Clear Signature">Clear</SfButton>
            </span>
        </div>
        <SfSignature @ref="SignatureComponent" Changed="OnSignatureChanged" style="height:100%; width: 100%;"></SfSignature>
    </div>
</div>

@code{

    private SfSignature? SignatureComponent { get; set; }
    private SfButton? SaveButtonRef { get; set; }
    private SfButton? ClearButtonRef { get; set; }
    private bool IsSaveDisabled { get; set; } = true;
    private bool IsClearDisabled { get; set; } = true;

    private void OnSignatureChanged()
    {
        IsClearDisabled = false;
        IsSaveDisabled = false;
    }

    private async Task SaveSignature()
    {
        if (SignatureComponent != null)
        {
            await SignatureComponent.SaveAsync();          
        }
        IsClearDisabled = true;
    }

    private async Task ClearSignature()
    {
        if (SignatureComponent != null)
        {
            await SignatureComponent.ClearAsync();         
        }
        IsSaveDisabled = true;
    }

}


<style>
    #signature-control h4 {
        margin-bottom: 20px;
        text-align: center;
    }

    #signdescription {
        font-size: 14px;
        padding-bottom: 10px;
    }

    .e-sign-clear {
        margin-left: 5px;
    }

    .e-btn-options {
        float: right;
        margin-bottom: 10px;
    }

    #signature-control {
        width: 100%;
        margin: 0;
        height: 270px;
    }

    .e-bigger #signature-control h4 {
        font-size: 20px;
    }
</style>