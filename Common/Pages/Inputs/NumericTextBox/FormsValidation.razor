@page "/Numeric-TextBox/Forms-Validation"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example is used to validate form using the Data Annotation. Type the number in the input element. If the input value is a valid number, then the given input will be ready to submit. Otherwise, an error message will be shown until you enter the valid number.</p>
</SampleDescription>
<ActionDescription>
    <p>The form enables the validation with data annotation attributes by clicking on the submit externally. All rules are validated by the DataAnnotationsValidator.</p>
    <p>The above age field is configured with the following rules.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td>Required</td>
            <td>The field must have a valid number.</td>
        </tr>
        <tr>
            <td>Range</td>
            <td>The field must have a number value between 1 and 80.</td>
        </tr>
    </table>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        @if (string.IsNullOrEmpty(Message))
        {
            <EditForm Model="@_annotation" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <div>
                    <label class="example-label">Age</label>
                    <SfNumericTextBox TValue="int?" Placeholder="Enter an age between 1 to 80" Min="@SetMin" @bind-Value="@_annotation.Age"></SfNumericTextBox>
                    <ValidationMessage For="@(() => _annotation.Age)" />
                </div>
                <div class="submit-btn">
                    <SfButton type="submit" IsPrimary="true">Submit</SfButton>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @Message
            </div>
        }
    </div>
</div>

<style>
    .control-wrapper {
        max-width: 270px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        padding: 15px 0px 0px;
    }

    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }
</style>
@code {
    private int? SetMin { get; set; } = 0;
    private string Message = string.Empty;
    private Annotation _annotation = new Annotation();
    
    private async void OnValidSubmit()
    {
        Message = "The form was submitted successfully!";
        await Task.Delay(2000);
        Message = string.Empty;
        _annotation.Age = null;
        StateHasChanged();
    }
    private void OnInvalidSubmit()
    {
        Message = string.Empty;
    }
    public class Annotation
    {
        [Required(ErrorMessage = "The age field is required.")]
        [Range(1, 80, ErrorMessage = "The age should be between 1 and 80.")]
        public int? Age { get; set; }
    }
}
