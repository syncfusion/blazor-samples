@page "/Input-Mask/Literals-And-Prompt"


@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This example is used to obtain the component value with mask literals. Type the Alphanumeric characters in the "Product Key" input element.Typed Product Key will be displayed in the label element with mask literals. Choose the corresponding option from the property panel to update the Value and prompt options.</p>
</SampleDescription>
<ActionDescription>
    <p>The Masked Textbox has EnableLiterals property that provides option to obtain the component value with mask literals.</p>
    <p>Provided list of options in the property panel for the following cases:</p>
    <ul>
        <li>PromptPlaceholder - If the user is not filled all the blank spaces in the mask then it will replace them in the Value property. It will work when you are enabled the EnableLiterals option. By default, its value is empty string.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfMaskedTextBox.html#Syncfusion_Blazor_Inputs_SfMaskedTextBox_PromptChar" aria-label="Class reference of PromptCharacter property in MaskedTextBox">PromptCharacter</a> - It's a prompting symbol in the MaskedTextBox for the mask elements. By default, its value is underscore.</li>
    </ul>   
</ActionDescription>

<div class="col-lg-12">
    <div class="col-lg-8 control-section sb-property-border">
        <div class="control-wrapper">
            <div class="example-content">
                <label class="example-label">Product Key</label>
                <SfMaskedTextBox Mask=">AAAAA-AAAAA-AAAAA-AAAAA" aria-label="Enter product key in the format AAAAA-AAAAA-AAAAA-AAAAA" @bind-Value="@Value" PromptChar="@PromptCharacter" PromptPlaceholder="@PromptPlaceHolder" EnableLiterals="@IncludeLiterals"></SfMaskedTextBox>
            </div>
            <div class="example-content">
                <label class="example-label">Value : "@Value"</label>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class='property-panel-section'>
            <div class="property-panel-header">Properties</div><br />
            <div class="property-panel-content">
                <SfCheckBox id="maskedtextbox-include-literals-checkbox" Label="Included Literals" @bind-Checked="@IncludeLiterals"></SfCheckBox>
            </div><br />
            <div class="property-panel-content">
                <label class="example-label">Prompt Character</label>
                <SfDropDownList TValue="string" TItem="PromptCharTypes" DataSource="@Data" @bind-Index="@Index">
                    <DropDownListEvents TItem="PromptCharTypes" TValue="string" ValueChange="@OnPromptCharChange"></DropDownListEvents>
                    <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="property-panel-content">
                <label class="example-label">Prompt Placeholder Character</label>
                <SfDropDownList TValue="string" TItem="PromptPlaceHolders" DataSource="@Datas" Enabled="@IncludeLiterals" @bind-Index="@Char">
                    <DropDownListEvents TItem="PromptPlaceHolders" TValue="string" ValueChange="@OnPromptPlaceChange"></DropDownListEvents>
                    <DropDownListFieldSettings Text="PromptText" Value="PromptId"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>
    </div>
</div>

@code {
    public char PromptCharacter { get; set; } = '_';
    public bool IncludeLiterals { get; set; } = true;
    public string? Value { get; set; }

    public class PromptCharTypes
    {
        public string? Id { get; set; }
        public char Text { get; set; }
    }
    private int? Index { get; set; } = 0;

    private List<PromptCharTypes> Data = new List<PromptCharTypes>()
    {
        new PromptCharTypes() { Id = "1", Text = '_' },
        new PromptCharTypes() { Id = "2", Text = '#' },
        new PromptCharTypes() { Id = "3", Text = '*' }
    };
    private void OnPromptCharChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, PromptCharTypes> args)
    {
        if (args.ItemData != null)
        {
            this.PromptCharacter = args.ItemData.Text;          
        }
    }

    public char PromptPlaceHolder { get; set; } = '_';
    public class PromptPlaceHolders
    {
        public string? PromptId { get; set; }
        public char PromptText { get; set; }
    }
    private int? Char { get; set; } = 0;

    private List<PromptPlaceHolders> Datas = new List<PromptPlaceHolders>()
    {
        new PromptPlaceHolders() { PromptId = "1", PromptText = '_' },
        new PromptPlaceHolders() { PromptId = "2", PromptText = '#' },
        new PromptPlaceHolders() { PromptId = "3", PromptText = '*' }
    };

    private void OnPromptPlaceChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, PromptPlaceHolders> args)
    {
        if (args.ItemData != null)
        {
            this.PromptPlaceHolder = args.ItemData.PromptText;          
        }
    }
}

<style>
    .control-section {
        min-height: 370px;
    }

    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .property-panel-content,
    .example-content {
        padding: 0px 0px 20px 0px;
    }

    .property-panel-content:last-child,
    .example-content:last-child {
        padding: 0px 0px 40px 0px;
    }
</style>