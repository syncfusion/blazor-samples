@page "/speech-to-text/default-functionalities"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@inject IJSRuntime JSRuntime

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager

@*End:Hidden*@

<SampleDescription>
    <p>
        This sample showcases the functionality of the SpeechToText component, which converts spoken words into text using your device’s microphone. It utilizes the built-in JavaScript SpeechRecognition API for speech processing. Speak into the microphone to see the transcribed text appear in the text area.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The SpeechToText component enables real-time speech-to-text conversion using the JavaScript <code>SpeechRecognition</code> API. This demo explores its key features and customization options:
    </p>
    <ul>
        <li><code>CssClass</code>: Modify the microphone button’s appearance with predefined styles such as Success, Warning, or Danger.</li>
        <li><code>Language</code>: Select a preferred language for speech recognition.</li>
        <li><code>AllowInterimResults</code>: Choose whether to display words as you speak or only after completing a phrase.</li>
        <li><code>ShowTooltip</code>: Enable or disable tooltips for additional guidance.</li>
        <li><code>ButtonSettings</code>: Configure the button to display text alongside the microphone icon.</li>
    </ul>
    <p>
        These options allow you to configure the SpeechToText component to suit your needs. Try different settings in the property panel to see how they affect the component’s appearance and functionality.
    </p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="default-speechToText-section">
        <div class="speechToText-container">
            <SfSpeechToText @bind-Transcript="@Transcript" ButtonSettings="@ButtonSettings" CssClass="@CssClass" Language="@Language" ShowTooltip="@ShowTooltip"
            AllowInterimResults="@AllowInterimResults" SpeechRecognitionStarted="@onListeningStart" SpeechRecognitionStopped="@onListeningStop" SpeechRecognitionError="@OnError" TranscriptChanging="@(args => OnInput(args.Transcript))"></SfSpeechToText>
            <mark class="speech-recognition-status">@ListeningStatus</mark>
        </div>
        <div class="output-container">
            <h4>Live Speech Transcription</h4>
            <SfTextArea @bind-Value="@Transcript" RowCount="10" Placeholder="Transcribed text will appear here..." CssClass="e-outline" ResizeMode="Resize.None" Input="@(args => OnInput(args.Value ?? ""))"></SfTextArea>
            <div class="output-options">
                <SfButton id="transcript-copy-button" Content="@CopyButtonText" CssClass="e-btn" @onclick="CopyTextAsync" Disabled="@Disabled"></SfButton>
                <SfButton CssClass="e-btn" @onclick="ClearText">Clear</SfButton>
            </div>
        </div>
    </div>
</div>

<div class="col-lg-4 default-speechToText property-section">
    <div class="property-panel-header"> Properties </div>
    <div class="property-panel-content">
        <table>
            <tbody>
                <tr>
                    <td> Styling </td>
                    <td>
                        <SfDropDownList Placeholder="select a Mic color" TValue="string" TItem="SpeechToTextSampleValues" DataSource="@MicColorValuesList" @bind-Value="@CssClass">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </td>
                </tr>
                <tr>
                    <td> Language </td>
                    <td>
                        <SfDropDownList Placeholder="select a Language type" TValue="string" TItem="SpeechToTextSampleValues" DataSource="@LanguageValuesList" @bind-Value="@Language" Enabled="@LanguageDropDownEnable">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </td>
                </tr>
                <tr>
                    <td>Interim results</td>
                    <td>
                        <SfSwitch Checked="@AllowInterimResults" TChecked="bool?" ValueChange="@(args => AllowInterimResults = args.Checked ?? false)" Disabled="@InterimSwitchDisable"/>
                    </td>
                </tr>
                <tr>
                    <td>Show tooltip</td>
                    <td>
                        <SfSwitch Checked="@ShowTooltip" TChecked="bool?" ValueChange="@(args => ShowTooltip = args.Checked ?? false)" />
                    </td>
                </tr>
                <tr>
                    <td>Show icon with text</td>
                    <td>
                        <SfSwitch Checked="@ShowIconWithText" TChecked="bool?" ValueChange="@(args => ValueChanged(args))" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@code {
    private string Transcript = String.Empty;
    private bool AllowInterimResults = true;
    private bool ShowTooltip = true;
    private bool ShowIconWithText = false;
    private bool IsSupportedBrowser = true;
    private string CssClass = "";
    private string Language = "en-US";
    private string ListeningStatus = "Click the mic button to start speaking...";
    private string CopyButtonText = "Copy";
    private bool LanguageDropDownEnable = true;
    private bool InterimSwitchDisable = false;
    private bool Disabled = true;
    private SpeechToTextButtonSettings ButtonSettings = new SpeechToTextButtonSettings { };

    private List<SpeechToTextSampleValues> MicColorValuesList = new List<SpeechToTextSampleValues>()
    {
       new SpeechToTextSampleValues() { Value = "", Text = "Normal" },
       new SpeechToTextSampleValues() { Value = "e-primary", Text = "Primary" },
       new SpeechToTextSampleValues() { Value = "e-success", Text = "Success" },
       new SpeechToTextSampleValues() { Value = "e-warning", Text = "Warning" },
       new SpeechToTextSampleValues() { Value = "e-danger", Text = "Danger" },
       new SpeechToTextSampleValues() { Value = "e-flat", Text = "Flat" },
       new SpeechToTextSampleValues() { Value = "e-info", Text = "Info" }
    };

    private List<SpeechToTextSampleValues> LanguageValuesList = new List<SpeechToTextSampleValues>()
    {
       new SpeechToTextSampleValues() { Value = "en-US", Text = "English, US" },
       new SpeechToTextSampleValues() { Value = "de-DE", Text = "German, DE" },
       new SpeechToTextSampleValues() { Value = "zh-CN", Text = "Chinese, CN" },
       new SpeechToTextSampleValues() { Value = "fr-FR", Text = "French, FR" },
       new SpeechToTextSampleValues() { Value = "ar-SA", Text = "Arabic, SA" }
    };

    public class SpeechToTextSampleValues
    {
        public string Value { get; set; } = String.Empty;
        public string Text { get; set; } = String.Empty;
    }
    private void OnInput(string textValue)
    {
        Disabled = !string.IsNullOrEmpty(textValue) ? false : true;
    }
    private void updateStatus(string status)
    {
        ListeningStatus = status;
    }
    private void OnError(SpeechRecognitionErrorEventArgs args)
    {
        updateStatus(args.ErrorMessage);
        if (args.Error == "unsupported-browser")
            IsSupportedBrowser = false;
    }
    private void ValueChanged(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        ShowIconWithText = args.Checked ?? false;
        ButtonSettings = new SpeechToTextButtonSettings
        {
            Text = ShowIconWithText ? "Start Listening" : "",
            StopStateText = ShowIconWithText ? "Stop Listening" : ""
        };
    }
    private void onListeningStart()
    {
        if (IsSupportedBrowser)
        {
            if (!string.IsNullOrEmpty(Transcript))
            {
                Transcript += '\n';
            }
        }
        updateStatus(IsSupportedBrowser ? "Listening... Speak now..." : "For unsupported browsers, use event callbacks to handle Speech-to-Text actions.");
        LanguageDropDownEnable = false;
        InterimSwitchDisable = true;
    }
    private void onListeningStop()
    {
        updateStatus(IsSupportedBrowser ? "Click the mic button to start speaking..." : "For unsupported browsers, use event callbacks to handle Speech-to-Text actions.");
        LanguageDropDownEnable = true;
        InterimSwitchDisable = false;
    }
    private async Task CopyTextAsync()
    {
        if (!string.IsNullOrWhiteSpace(Transcript))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Transcript);

            CopyButtonText = "Copied!";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1000);
            CopyButtonText = "Copy";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ClearText()
    {
        Transcript = String.Empty;
        Disabled = true;
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .default-speechToText-section,
    .default-speechToText-section .output-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .default-speechToText-section {
        gap: 50px;
        margin: 50px auto;
    }

    .default-speechToText-section .output-container {
        width: 75%;
        gap: 10px;
    }

    #transcript-copy-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .default-speechToText-section .output-container h4 {
        margin: 0;
        align-self: baseline;
    }

    .default-speechToText-section .speech-recognition-status {
        font-size: 12px;
    }

    .default-speechToText .property-panel-content td {
        padding: 10px 0px;
        width: 50%;
    }

    .output-container .e-input-group.e-multi-line-input.e-auto-width {
        width: 100%;
    }

    .default-speechToText-section .speechToText-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
    }

    @@media only screen and (max-width: 750px) {
        .default-speechToText-section .output-container {
            width: 100%;
        }

        .default-speechToText-section .output-options {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
    }

</style>