@page "/TextArea/FormsValidation"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This example is used to validate form using the Data Annotation. Type the value in the textarea. If the input value is valid, then the given input will be ready to submit. Otherwise, an error message will be shown until you enter the valid value.
    </p>
</SampleDescription>
<ActionDescription>
    <p>The form enables the validation with data annotation attributes by clicking on the submit externally. All rules are validated by the DataAnnotationsValidator.</p>
    <p>The above name and comments fields are configured with the following rules.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td style="width:195px">Required</td>
            <td>The field must have a valid value.</td>
        </tr>
        <tr>
            <td>MinLength</td>
            <td>The name field must have more than 3 characters, and the comments field must have more than 10 characters in length.</td>
        </tr>
        <tr>
            <td>MaxLength</td>
            <td>The name field should not have more than 10 characters, and the comments field must should not have more than 20 characters in length.</td>
        </tr>
    </table>
    <p style="margin-top:10px">The above address fields are configured with the following rule.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td style="width:195px">Required</td>
            <td>The fields must have a valid value.</td>
        </tr>
    </table>
</ActionDescription>

<div id="validation" class="control-section col-lg-12">
    <div class="control-wrapper">
        @if (string.IsNullOrEmpty(_message))
        {
            <EditForm Model="@_annotation" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">                
                <DataAnnotationsValidator />
                <div class="form-group">
                    <SfTextBox @bind-Value="@_annotation.Name" FloatLabelType="FloatLabelType.Auto" Placeholder="Enter a Name"></SfTextBox>
                    <ValidationMessage For="@(() => _annotation.Name)" />
                    <div class="example-content">
                        <SfTextArea @bind-Value="@_annotation.Comments" RowCount="5" FloatLabelType="FloatLabelType.Auto" Placeholder="Enter your Comments"
                                    ColumnCount="250"></SfTextArea>
                        <ValidationMessage For="@(() => _annotation.Comments)" />
                    </div>                    
                </div>
                <div class="submit-btn">
                    <SfButton type="submit" IsPrimary="true">Submit</SfButton>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @_message
            </div>
        }
    </div>
</div>

@code {
    private string _message = string.Empty;
    private Annotation _annotation = new Annotation();
    async void OnValidSubmit()
    {
        _message = "Form Submitted Successfully!";
        await Task.Delay(2000);
        _message = string.Empty;
        _annotation.Name = null;
        StateHasChanged();
    }
    private void OnInvalidSubmit()
    {
        _message = string.Empty;
    }
    public class Annotation
    {
        [Required(ErrorMessage = "The address field is required.")]
        public string? Address { get; set; }
        [Required(ErrorMessage = "The name field is required.")]
        [MaxLength(10, ErrorMessage = "The name field should not contain more than 10 characters.")]
        [MinLength(3, ErrorMessage = "The name field must contain at least 3 characters.")]
        public string? Name { get; set; }
        
        [Required(ErrorMessage = "The name field is required.")]
        [MaxLength(20, ErrorMessage = "The comments field should not contain more than 20 characters.")]
        [MinLength(10, ErrorMessage = "The comments field must contain at least 10 characters.")]
        public string? Comments { get; set; }
    }
}

<style>
    .control-wrapper {
        width: 70%;
        margin: 0 auto;
        min-width: 85px;
    }
    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .example-content {
        padding: 15px 0px;
    }

        .example-content:last-child {
            padding: 15px 0px;
        }
    .submit-btn {
        display: flex;
        justify-content: center;
    }
    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }

    #validation .e-multi-line-input {
        max-width: 100%;
    }
</style>