@page "/otp-input/api"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications

@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the properties available in the OTP Input component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        This sample can be customized further with the combination of OTP Input properties from the property pane. For example,
    </p>
    <ul>
        <li>The input style can be changed by selecting the Styling Mode dropdownlist from the property pane.</li>
        <li>The validation state can be changed by selecting the Validation Status dropdownlist from the property pane.</li>
        <li>The hint placeholder character can be updated by using the Placeholder textbox from the property pane.</li>
        <li>The separator character (-) can be updated by using the Separator textbox from the property pane.</li>
        <li>The input field length can be changed by using the Length numerictextbox from the property pane.</li>
        <li>Enable or Disable the OTP Input by toggling the Disabled switcher button.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="api-otp-wrapper">
        <SfToast ID="ToastComponent" @ref="ToastComponentRef" Title="Entered OTP value" Content="@OtpToastContent" Timeout="3000">
            <ToastPosition X="Right"></ToastPosition>
        </SfToast>
        <div id="otp-container">
            <div class="form-container">
                <span class="otp-header"> Enter verification code </span>
                <SfOtpInput StylingMode="@OtpStylingMode" Disabled="@IsOtpDisabled" @bind-Value="@OtpValue" OnInput="@OnOtpInputChange" Length="@OtpLength" Separator="@OtpSeparator" Placeholder="@OtpPlaceholder" CssClass="@OtpCssClass" HtmlAttributes="@(new Dictionary<string, object> { { "aria-label", "Enter OTP" } })" ></SfOtpInput>
                <div class="otp-actions">
                    <button class="e-btn" type="button" disabled="@IsResetButtonDisabled" @onclick="ClearOtp"> Clear </button>
                    <button class="e-btn e-primary" type="button" disabled="@IsVerifyButtonDisabled" @onclick="VerifyOtp"> Verify </button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" title="Properties">
                <tbody>
                    <tr>
                        <td class="property-styles">Styling Mode</td>
                        <td>
                            <SfDropDownList TValue="string" TItem="DropDownOptionModel" DataSource="@StylingModeOptions" @bind-Value="@SelectedStylingMode" PopupHeight="200px">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DropDownOptionModel" ValueChange="@OnStylingModeChange" />
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td class="property-styles">Validation Status</td>
                        <td>
                            <SfDropDownList TValue="string" TItem="DropDownOptionModel" DataSource="@ValidationOptions" @bind-Value="@SelectedValidationStatus" PopupHeight="200px">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="DropDownOptionModel" ValueChange="@OnValidationStatusChange" />
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="plcaeholder" class="property-styles"> Placeholder </label></td>
                        <td>
                            <SfTextBox CssClass="e-underline" @bind-Value="@OtpPlaceholder" maxlength="@MaxTextBoxLength" Type=InputType.Text Input="@OnPlaceholderInput"></SfTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="separator" class="property-styles"> Separator </label></td>
                        <td><SfTextBox CssClass="e-underline" @bind-Value="@OtpSeparator" maxlength="1" Type=InputType.Text Input="@OnSeparatorInput"></SfTextBox></td>
                    </tr>
                    <tr>
                        <td><label for="length" class="property-styles"> Length </label></td>
                        <td>
                            <SfNumericTextBox TValue="int" Min=1 Max=6 Format="0" @bind-Value=@OtpLength>
                                <NumericTextBoxEvents TValue="int" ValueChange="OnOtpLengthChange"></NumericTextBoxEvents>
                            </SfNumericTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td><label for="disabled" class="property-styles"> Disabled </label></td>
                        <td> <SfSwitch ValueChange="@OnDisabledToggle" TChecked="bool?"></SfSwitch> </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private SfToast? ToastComponentRef;
    public string OtpValue { get; set; } = "";
    public string OtpToastContent { get; set; } = "";
    public string? OtpCssClass { get; set; }
    public string SelectedStylingMode { get; set; } = "Outlined";
    public string SelectedValidationStatus { get; set; } = "None";
    public bool IsOtpDisabled { get; set; } = false;
    public string? OtpPlaceholder { get; set; } = "x";
    public string? OtpSeparator { get; set; } = "-";
    public int OtpLength { get; set; } = 4;
    public int MaxTextBoxLength { get; set; } = 4;
    public OtpInputStyle OtpStylingMode { get; set; } = OtpInputStyle.Outlined;
    public bool IsResetButtonDisabled { get; set; } = true;
    public bool IsVerifyButtonDisabled { get; set; } = true;

    public class DropDownOptionModel
    {
        public string? Text { get; set; }
        public string? Value { get; set; }
    }

    private List<DropDownOptionModel> StylingModeOptions = new List<DropDownOptionModel>()
    {
        new DropDownOptionModel { Text = "Outlined", Value = "Outlined" },
        new DropDownOptionModel { Text = "Underlined", Value = "Underlined" },
        new DropDownOptionModel { Text = "Filled", Value = "Filled" }
    };

    private List<DropDownOptionModel> ValidationOptions = new List<DropDownOptionModel>()
    {
        new DropDownOptionModel { Text = "None", Value = "None" },
        new DropDownOptionModel { Text = "Success", Value = "success" },
        new DropDownOptionModel { Text = "Warning", Value = "warning" },
        new DropDownOptionModel { Text = "Error", Value = "error" }
    };

    private void OnStylingModeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownOptionModel> args)
    {
        if (args.Value != null)
        {
            OtpStylingMode = (OtpInputStyle)Enum.Parse(typeof(OtpInputStyle), args.Value.ToString());         
        }
    }

    private void OnValidationStatusChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DropDownOptionModel> args)
    {
        OtpCssClass = args.Value == "None" ? "" : "e-" + args.Value?.ToString();
    }

    private void OnDisabledToggle(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool?> args)
    {
        IsOtpDisabled = args.Checked ?? false;
    }

    private void OnPlaceholderInput(InputEventArgs args)
    {
        OtpPlaceholder = args.Value?.ToString();
    }

    private void OnSeparatorInput(InputEventArgs args)
    {
        OtpSeparator = args.Value?.ToString();
    }

    private void OnOtpLengthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        MaxTextBoxLength = OtpLength = args.Value;
    }

    private void OnOtpInputChange(OtpInputEventArgs args)
    {
        OtpToastContent = OtpValue;
        var otpLength = args.Value?.Length;
        IsVerifyButtonDisabled = OtpLength != otpLength;
        IsResetButtonDisabled = otpLength == 0;
    }

    private void ClearOtp()
    {
        OtpValue = "";
        IsResetButtonDisabled = IsVerifyButtonDisabled = true;
    }

    private async Task VerifyOtp()
    {
        if (ToastComponentRef != null)
        {
            await ToastComponentRef.ShowAsync();          
        }
    }

}
<style>
    .api-otp-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        padding-top: 20px;
        padding-bottom: 20px;
        min-height: 400px;
    }

    #otp-container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50%;
    }

    .form-container {
        height: 220px;
        padding: 1rem 3rem;
        box-shadow: 0 1px 3px #d4d4d5, 0 0 0 1px #d4d4d5;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .form-container > div {
        margin: 17px 0px;
    }

    .form-container .otp-header {
        display: inline-block;
        font-size: 1.4em;
        font-weight: 500;
        margin: 10px 0px;
    }

    .form-container .otp-actions {
        display: flex;
        gap: 20px;
    }

    .otp-actions button {
        width: 80px;
    }

    .property-panel-content td {
        padding: 10px 0px;
        width: 35%;
    }

    .property-styles {
        font-weight: 400;
    }

</style>
