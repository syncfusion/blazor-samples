@page "/circular-gauge/range-customization"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to highlight a region in an axis using ranges in the circular gauge. The width, corner radius, and start and end range of a range can all be customized.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure the ranges in the circular gauge. Ranges are used to group the axis values, and you can use <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_Start" aria-label="Class reference of Start property in Circular Gauge">Start</a>, <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_End" aria-label="Class reference of End property in Circular Gauge">End</a>, <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_Color" aria-label="Class reference of Color property in Circular Gauge">Color</a>, <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_StartWidth" aria-label="Class reference of StartWidth property in Circular Gauge">StartWidth</a>, <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_EndWidth" aria-label="Class reference of EndWidth property in Circular Gauge">EndWidth</a>, <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_Radius" aria-label="Class reference of Radius property in Circular Gauge">Radius</a> and <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRange.html#Syncfusion_Blazor_CircularGauge_CircularGaugeRange_RoundedCornerRadius" aria-label="Class reference of RoundedCornerRadius property in Circular Gauge">RoundedCornerRadius</a> properties to customize them.
        In addition, an axis with multiple ranges is shown in the circular gauge component, as well as options to customize the range properties via the property panel.
    </p>
    <p>More information on the ranges can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/ranges" aria-label="Blazor Circular Gauge Range documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    tr {
        height: 40px;
    }

    td {
        width: 40%;
    }

    .value {
        margin-left: 10px;
    }

    .templateText {
        margin-left: -33px
    }

    .e-slider {
        height: 40px !important;
    }
</style>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge Theme="@Theme" Background="transparent">
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="120" Radius="80%">
                <CircularGaugeAxisLineStyle Width="10" Color="transparent" />
                <CircularGaugeAxisLabelStyle>
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Height="10" Offset="5" />
                <CircularGaugeAxisMinorTicks Height="0" Width="0" />
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Radius="25%" Angle="30" ZIndex="1">
                        <ContentTemplate>
                            <div><span class="templateText" style="font-size:14px;">Speedometer</span></div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                    <CircularGaugeAnnotation Radius="50%" Angle="165" ZIndex="1">
                        <ContentTemplate>
                            <div><span class="templateText" style="font-size:20px;">65 MPH</span></div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="@LowRangeStart" End="@LowRangeEnd" Color="#30B32D" StartWidth="@LowRangeStartWidth" EndWidth="@LowRangeEndWidth" RoundedCornerRadius="@LowRangeCornerRadius" />
                    <CircularGaugeRange Start="@MediumRangeStart" End="@MediumRangeEnd" Color="#FFDD00" StartWidth="@MediumRangeStartWidth" EndWidth="@MediumRangeEndWidth" RoundedCornerRadius="@MediumRangeCornerRadius" />
                    <CircularGaugeRange Start="@HighRangeStart" End="@HighRangeEnd" Color="#F03E3E" StartWidth="@HighRangeStartWidth" EndWidth="@HighRangeEndWidth" RoundedCornerRadius="@HighRangeCornerRadius" />
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="65" Radius="60%" PointerWidth="8">
                        <CircularGaugePointerAnimation Enable="@GaugeAnimation" />
                        <CircularGaugeCap Radius="7" />
                        <CircularGaugeNeedleTail Length="18%" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table title="Properties" style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 50%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 10%;">
                </colgroup>
                <tr>
                    <td>
                        <div> Select Range </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@RangeData" @bind-Value="@RangeValue" Width="120%">
                                <DropDownListEvents TItem="Ranges" ValueChange="RangeChange" TValue="string" />
                                <DropDownListFieldSettings Text="Name" Value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top: 2px;">Range Start</div>
                    </td>
                    <td>
                        <div style="width: 95%;">
                            <input type="range" aria-label="Range Start Value" @bind-value="@RangeStartValue" min="@MinValue" max="@MaxValue" @oninput="RangeStartChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <div>
                            <span>@RangeStartText</span>
                        </div>
                    </td>
                </tr>

                <tr>
                    <td>
                        <div style="padding-top: 3px;">Range End</div>
                    </td>
                    <td>
                        <div style="width: 95%;">
                            <input type="range" aria-label="Range end Value" @bind-value="@RangeEndValue" min="@MinValue" max="@MaxValue" @oninput="RangeEndChange" />
                        </div>
                    </td>
                    <td>
                        <div style="text-align:center">
                            <span>@RangeEndText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top: 3px;">Start Width</div>
                    </td>
                    <td>
                        <div style="width: 95%;">
                            <input type="range" aria-label="Range start width Value" value="@RangeStartWidthValue" min="0" max="30" @oninput="StartWidthChange" />
                        </div>
                    </td>
                    <td>
                        <div style="text-align:center">
                            <span>@StartWidthText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top: 2px;">End Width</div>
                    </td>
                    <td>
                        <div style="width: 95%;">
                            <input type="range" aria-label="Range end width Value" value="@RangeEndWidthValue" min="0" max="30" @oninput="EndWidthChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <div>
                            <span>@EndWidthText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top: 2px;">Corner Radius</div>
                    </td>
                    <td>
                        <div style="width: 95%;">
                            <input type="range" aria-label="Range corner radius Value" value="@RangeCornerRadiusValue" min="0" max="12" @oninput="CornerRadiusChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <div>
                            <span>@CornerRadiusText</span>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public double MinValue = 0;
    public double MaxValue = 40;
    public double LowRangeStart = 0;
    public double LowRangeEnd = 40;
    public string LowRangeStartWidth = "10";
    public string LowRangeEndWidth = "10";
    public double LowRangeCornerRadius = 0;
    public double MediumRangeStart = 40;
    public double MediumRangeEnd = 80;
    public string MediumRangeStartWidth = "10";
    public string MediumRangeEndWidth = "10";
    public double MediumRangeCornerRadius = 0;
    public double HighRangeStart = 80;
    public double HighRangeEnd = 120;
    public string HighRangeStartWidth = "10";
    public string HighRangeEndWidth = "10";
    public double HighRangeCornerRadius = 0;
    public string RangeValue = "Low";
    public double RangeStartValue = 0;
    public double RangeEndValue = 40;
    public string RangeStartWidthValue = "10";
    public string RangeEndWidthValue = "10";
    public double SliderRangeStartWidthValue = 10;
    public double SliderRangeEndWidthValue = 10;
    public double RangeCornerRadiusValue = 0;
    public double RangeStartText = 0;
    public double RangeEndText = 40;
    public string StartWidthText = "10";
    public string EndWidthText = "10";
    public double CornerRadiusText = 0;
    public bool GaugeAnimation = true;


    public List<Ranges> RangeData = new List<Ranges>
    {
        new Ranges { Name = "Low" },
        new Ranges { Name = "Medium" },
        new Ranges { Name = "High" },
    };

    private void RangeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Ranges> args)
    {
        RangeValue = (args.Value).ToString();
        if (RangeValue == "Low")
        {
            MinValue = 0;
            MaxValue = 40;
            RangeStartValue = RangeStartText = LowRangeStart;
            RangeEndValue = RangeEndText = LowRangeEnd;
            SliderRangeStartWidthValue = Convert.ToDouble(LowRangeStartWidth);
            RangeStartWidthValue = StartWidthText = LowRangeStartWidth;
            SliderRangeEndWidthValue = Convert.ToDouble(LowRangeEndWidth);
            RangeEndWidthValue = EndWidthText = LowRangeEndWidth;
            RangeCornerRadiusValue = CornerRadiusText = LowRangeCornerRadius;
        }
        else if (RangeValue == "Medium")
        {
            MinValue = 40;
            MaxValue = 80;
            RangeStartValue = RangeStartText = MediumRangeStart;
            RangeEndValue = RangeEndText = MediumRangeEnd;
            SliderRangeStartWidthValue = Convert.ToDouble(MediumRangeStartWidth);
            RangeStartWidthValue = StartWidthText = MediumRangeStartWidth;
            SliderRangeEndWidthValue = Convert.ToDouble(MediumRangeEndWidth);
            RangeEndWidthValue = EndWidthText = MediumRangeEndWidth;
            RangeCornerRadiusValue = CornerRadiusText = MediumRangeCornerRadius;
        }
        else
        {
            MinValue = 80;
            MaxValue = 120;
            RangeStartValue = RangeStartText = HighRangeStart;
            RangeEndValue = RangeEndText = HighRangeEnd;
            SliderRangeStartWidthValue = Convert.ToDouble(HighRangeStartWidth);
            RangeStartWidthValue = StartWidthText = HighRangeStartWidth;
            SliderRangeEndWidthValue = Convert.ToDouble(HighRangeEndWidth);
            RangeEndWidthValue = EndWidthText = HighRangeEndWidth;
            RangeCornerRadiusValue = CornerRadiusText = HighRangeCornerRadius;
        }
        GaugeAnimation = false;
    }

    private void RangeStartChange(ChangeEventArgs args)
    {
        RangeStartValue = Convert.ToDouble(args.Value);
        if (RangeValue == "Low")
        {
            LowRangeStart = RangeStartValue;
        }
        else if (RangeValue == "Medium")
        {
            MediumRangeStart = RangeStartValue;
        }
        else
        {
            HighRangeStart = RangeStartValue;
        }
        RangeStartText = RangeStartValue;
    }

    private void RangeEndChange(ChangeEventArgs args)
    {
        RangeEndValue = Convert.ToDouble(args.Value);
        if (RangeValue == "Low")
        {
            LowRangeEnd = RangeEndValue;
        }
        else if (RangeValue == "Medium")
        {
            MediumRangeEnd = RangeEndValue;
        }
        else
        {
            HighRangeEnd = RangeEndValue;
        }
        RangeEndText = RangeEndValue;
    }

    private void StartWidthChange(ChangeEventArgs args)
    {
        SliderRangeStartWidthValue = Convert.ToDouble(args.Value);
        RangeStartWidthValue = (Convert.ToDouble(args.Value)).ToString();
        if (RangeValue == "Low")
        {
            LowRangeStartWidth = RangeStartWidthValue;
        }
        else if (RangeValue == "Medium")
        {
            MediumRangeStartWidth = RangeStartWidthValue;
        }
        else
        {
            HighRangeStartWidth = RangeStartWidthValue;
        }
        StartWidthText = RangeStartWidthValue;
    }

    private void EndWidthChange(ChangeEventArgs args)
    {
        SliderRangeEndWidthValue = Convert.ToDouble(args.Value);
        RangeEndWidthValue = (Convert.ToDouble(args.Value)).ToString();
        if (RangeValue == "Low")
        {
            LowRangeEndWidth = RangeEndWidthValue;
        }
        else if (RangeValue == "Medium")
        {
            MediumRangeEndWidth = RangeEndWidthValue;
        }
        else
        {
            HighRangeEndWidth = RangeEndWidthValue;
        }
        EndWidthText = RangeEndWidthValue;
    }

    private void CornerRadiusChange(ChangeEventArgs args)
    {
        RangeCornerRadiusValue = Convert.ToDouble(args.Value);
        if (RangeValue == "Low")
        {
            LowRangeCornerRadius = RangeCornerRadiusValue;
        }
        else if (RangeValue == "Medium")
        {
            MediumRangeCornerRadius = RangeCornerRadiusValue;
        }
        else
        {
            HighRangeCornerRadius = RangeCornerRadiusValue;
        }
        CornerRadiusText = RangeCornerRadiusValue;
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class Ranges
    {
        public string? Name { get; set; }
    }
}