@page "/circular-gauge/multiple-ranges"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows temperature variations in a circular gauge using multiple ranges. In addition, the needle pointer and annotation help in displaying the temperature that has been measured.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure multiple ranges in the circular gauge. The <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeRanges.html" aria-label="Class reference of CircularGaugeRanges">CircularGaugeRanges</a> collection can be used to define multiple ranges, each of which points to a different start and end value.</p>
    <p>More information on the ranges can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/ranges" aria-label="Blazor Circular Gauge Multiple Ranges documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfCircularGauge Theme="@Theme" AnimationDuration="2000" Background="transparent">
        <CircularGaugeTitleStyle Size="18px" FontFamily="inherit" />
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="230" EndAngle="130" Radius="90%" Minimum="-30" Maximum="120" HideIntersectingLabel="true">
                <CircularGaugeAxisLineStyle Width="0" />
                <CircularGaugeAxisMajorTicks Width="0" Interval="10" />
                <CircularGaugeAxisMinorTicks Width="0" />
                <CircularGaugeAxisLabelStyle Position="Position.Inside" AutoAngle="true" Offset="50">
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeRanges>
                    @foreach (GaugeRange range in GaugeRanges)
                    {
                        <CircularGaugeRange Start="@range.Start" End="@range.End" StartWidth="35" EndWidth="35" Radius="90%" Color="@range.Color"/>
                    }
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="22.5" Radius="45%" PointerWidth="7" Color="#F7B194">
                        <CircularGaugePointerAnimation Enable="false" />
                        <CircularGaugeCap Radius="10" Color="white">
                            <CircularGaugeCapBorder Width="4" Color="#F7B194" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="25%" Color="#F7B194" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="165" Radius="35%" ZIndex="1">
                        <ContentTemplate>
                            <div style="font-size:18px;margin-left: -20px;margin-top: -12px; color:#9DD55A">@Temperature</div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>

@code {
    public Theme Theme { get; set; }
    public string Temperature = string.Format("{0}\u00B0C", "22.5");
    public List<GaugeRange> GaugeRanges { get; set; } = new List<GaugeRange>
    {
        new GaugeRange { Start = -30, End = -20, Color = "#58ABD5" },
        new GaugeRange { Start = -20, End = -10, Color = "#58ABD5" },
        new GaugeRange { Start = -10, End = 0, Color = "#58ABD5" },
        new GaugeRange { Start = 0, End = 10, Color = "#58D2D5" },
        new GaugeRange { Start = 10, End = 20, Color = "#9DD55A" },
        new GaugeRange { Start = 20, End = 30, Color = "#9DD55A" },
        new GaugeRange { Start = 30, End = 40, Color = "#F1D158" },
        new GaugeRange { Start = 40, End = 50, Color = "#F48C6F" },
        new GaugeRange { Start = 50, End = 60, Color = "#F48C6F" },
        new GaugeRange { Start = 60, End = 70, Color = "#F48C6F" },
        new GaugeRange { Start = 70, End = 80, Color = "#F48C6F" },
        new GaugeRange { Start = 80, End = 90, Color = "#F48C6F" },
        new GaugeRange { Start = 90, End = 100, Color = "#F48C6F" },
        new GaugeRange { Start = 100, End = 110, Color = "#F48C6F" },
        new GaugeRange { Start = 110, End = 120, Color = "#F48C6F" }
    };
    
    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    public class GaugeRange
    {
        public double Start { get; set; }
        public double End { get; set; }
        public string? Color { get; set; }
    }
}