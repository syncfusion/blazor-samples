@page "/circular-gauge/pointer-ranges-drag"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<style>
    .templateAlign{
        font-weight: lighter;
        font-style: oblique;
        margin-left:-20px;
        font-size: 14px;
        color:@TemplateColor;
    }
    tr {
        height: 50px;
    }
    td{
        width:50%;
    }

    .fluent2 #pointer-range .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-dark #pointer-range .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-highcontrast #pointer-range .property-panel-content .e-checkbox-wrapper .e-icons {
        margin-left: 0px
    }
</style>

<SampleDescription>
    <p>This sample illustrates dragging a pointer and a range in a circular gauge. End-user can drag the pointer and the range by enabling the pointer drag and range drag options.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to move the pointer and range in the circular gauge via drag action. The <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_EnablePointerDrag" aria-label="Class reference of EnablePointerDrag property in Circular Gauge">EnablePointerDrag</a> property can be used to enable or disable the pointer drag functionality. Similarly, the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_EnableRangeDrag" aria-label="Class reference of EnableRangeDrag property in Circular Gauge">EnableRangeDrag</a> property can be used to enable or disable the range drag functionality.</p>
    <p>More information on the pointer drag can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/pointers#dragging-pointer" aria-label="Blazor Circular Gauge Pointer Drag documentation" >documentation section</a>. Likewise, the range drag information can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/ranges#dragging-ranges" aria-label="Blazor Circular Gauge Range Drag documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge EnablePointerDrag="@PointerDrags" EnableRangeDrag="@RangeDrag" Theme="@Theme" Background="transparent">
        <CircularGaugeEvents OnDragEnd="OnDragEnd" />
        <CircularGaugeAxes>
            <CircularGaugeAxis EndAngle="140" StartAngle="220" Radius="80%" Minimum="0" Maximum="120">
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="170" ZIndex="1" Radius="52%">
                        <ContentTemplate>
                            <div class="templateAlign"><span>@TemplateValue MPH</span></div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
                <CircularGaugeAxisLineStyle Width="0" />
                <CircularGaugeAxisMajorTicks UseRangeColor="true" Offset="@Offset" />
                <CircularGaugeAxisMinorTicks UseRangeColor="true" Offset="@Offset" />
                <CircularGaugeAxisLabelStyle UseRangeColor="true">
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="@FirstRangeStart" End="@FirstRangeEnd" StartWidth="@StartWidth" EndWidth="@EndWidth" Radius="108%" Color="@FirstRangeColor" />
                    <CircularGaugeRange Start="@SecondRangeStart" End="@SecondRangeEnd" StartWidth="@StartWidth" EndWidth="@EndWidth" Radius="108%" Color="@SecondRangeColor" />
                    <CircularGaugeRange Start="@ThirdRangeStart" End="@ThirdRangeEnd" StartWidth="@StartWidth" EndWidth="@EndWidth" Radius="108%" Color="@ThirdRangeColor" />
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="@PointerValue" Radius="60%" Color="@PointerColor" MarkerWidth="5">
                        <CircularGaugeCap Radius="10">
                            <CircularGaugeCapBorder Width="5" Color="@PointerColor" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="0%" Color="@PointerColor" />
                    </CircularGaugePointer>
                    <CircularGaugePointer Value="@PointerValue" Radius="110%" Color="@PointerColor" MarkerWidth="20" MarkerHeight="20" Type="PointerType.Marker" MarkerShape="GaugeShape.InvertedTriangle" />
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>

<div id="pointer-range" class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 50%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 10%;">
                </colgroup>
                <tr>
                    <td>
                        <div style="width:90%">Pointer Value</div>
                    </td>
                    <td>
                        <div style="margin-left: 10px;">
                            <input type="range" aria-label="Pointer value" value="@PointerValue" min="0" max="120" @oninput="PointerDragChange" style="width:90%" />
                        </div>
                    </td>
                    <td>
                        <div style="text-align:center">
                            <span>@SliderValueText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="width:90%">Allow Pointer Drag </div>
                    </td>
                    <td>
                        <div style="margin-left: 10px;">
                            <SfCheckBox ValueChange="EnableDragCheckbox" Checked="@EnableDragChange" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="width:90%">Allow Ranges Drag </div>
                    </td>
                    <td>
                        <div style="margin-left: 10px;">
                            <SfCheckBox ValueChange="EnableRangeChange" Checked="@EnableRangeChanges" TChecked="bool" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@code{
    public double Offset = 0;
    public string StartWidth = "8";
    public string EndWidth = "8";
    public Theme Theme { get; set; }
    public bool PointerDrags = true;
    public bool RangeDrag = false;
    public string FirstRangeColor = "#30B32D";
    public string SecondRangeColor = "#E5C31C";
    public string ThirdRangeColor = "#F03E3E";
    public string PointerColor = "#E5C31C";
    public string TemplateValue = "70";
    public string TemplateColor = "#E5C31C";
    public bool EnableDragChange = true;
    public bool EnableRangeChanges = false;
    public double PointerValue = 70;
    public double SliderValueText = 70;
    public double FirstRangeStart = 0;
    public double FirstRangeEnd = 40;
    public double SecondRangeStart = 40;
    public double SecondRangeEnd = 100;
    public double ThirdRangeStart = 100;
    public double ThirdRangeEnd = 120;

    public void OnDragEnd(PointerDragEventArgs args)
    {
        if (args.Type == "pointerEnd")
            SetPointer(args.CurrentValue);
    }

    private void EnableDragCheckbox(ChangeEventArgs<bool> args)
    {
        EnableDragChange = args.Checked;
        PointerDrags = args.Checked;
    }

    private void EnableRangeChange(ChangeEventArgs<bool> args)
    {
        EnableRangeChanges = args.Checked;
        RangeDrag = args.Checked;
    }

    private void PointerDragChange(ChangeEventArgs args)
    {
        SetPointer(Convert.ToDouble(args.Value));
    }

    private void SetPointer(double currentPointerValue)
    {
        PointerColor = TemplateColor = ((currentPointerValue <= FirstRangeEnd && currentPointerValue >= FirstRangeStart) ? FirstRangeColor :
            ((currentPointerValue > SecondRangeStart && currentPointerValue <= SecondRangeEnd) ? SecondRangeColor :
            ((currentPointerValue > ThirdRangeStart && currentPointerValue <= ThirdRangeEnd) ? ThirdRangeColor : null!)));
        PointerValue = currentPointerValue;
        TemplateValue = (Math.Ceiling(currentPointerValue)).ToString();
        SliderValueText = Math.Ceiling(currentPointerValue);
    }

    protected override void OnInitialized()
    {
        if(SampleService != null && SampleService.IsDevice)
        {
            StartWidth = "15";
            EndWidth = "15";
            Offset = 11;
        }
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}