@page "/circular-gauge/ticks-and-labels"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to customize the ticks and labels on an axis. The position, offset, and height of the ticks and labels can be changed.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render and configure the ticks and labels of an axis in the circular gauge. Labels are units that are used to display the values on the axis.
        Labels can be customized using <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeAxisLabelStyle.html" aria-label="Class reference of CircularGaugeAxisLabelStyle">CircularGaugeAxisLabelStyle</a>. Ticks are used to represent values on the axis. Ticks can be customized using <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeAxisMajorTicks.html" aria-label="Class reference of CircularGaugeMajorTicks">CircularGaugeMajorTicks</a> and
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.CircularGaugeAxisMinorTicks.html" aria-label="Class reference of CircularGaugeMinorTicks">CircularGaugeMinorTicks</a>.
    </p>
    <p>More information on the ticks and labels can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/axes" aria-label="Blazor Circular Gauge Axes documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    td {
        width: 40%;
    }

    tr {
        height: 48px;
    }

    .annotationText {
        color: #518C03;
        font-size: 20px;
        font-family: inherit;
        font-weight: semibold;
        margin-left: -20px;
        margin-top: -20px
    }

    .fluent2 #ticks-labels .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-dark #ticks-labels .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-highcontrast #ticks-labels .property-panel-content .e-checkbox-wrapper .e-icons {
        margin-left: 0px
    }
</style>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge Theme="@Theme" Background="transparent">
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="170" Radius="80%" ShowLastLabel="@ShowLastLabel">
                <CircularGaugeAxisLabelStyle Position="@GaugeLabelPosition" AutoAngle="true" Offset="@GaugeLabelOffset">
                    <CircularGaugeAxisLabelFont Size="10px" FontFamily="inherit" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisLineStyle Width="2" Color="#9E9E9E" />
                <CircularGaugeAxisMajorTicks Position="@GaugeMajorPosition" Color="#757575" Width="2" Offset="@GaugeMajorOffset" Height="@GaugeMajorHeight" Interval="20" />
                <CircularGaugeAxisMinorTicks Position="@GaugeMinorPosition" Color="#757575" Width="2" Offset="@GaugeMinorOffset" Height="@GaugeMinorHeight" Interval="10" />
                <CircularGaugePointers>
                    <CircularGaugePointer Type="PointerType.RangeBar" Value=145 Radius="60%" Color="#8BC34A" PointerWidth="7" RoundedCornerRadius="10">
                        <CircularGaugePointerAnimation Enable="false" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="135" Radius="8%" ZIndex="1">
                        <ContentTemplate>
                            <div class="annotationText">145</div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div id="ticks-labels" class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 50%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 10%;">
                </colgroup>
                <tr>
                    <td>
                        <div> Ticks </div>
                    </td>
                    <td>
                        <div style="padding-top:5px;padding-bottom:5px">
                            <SfDropDownList DataSource="@TickData" @bind-Value="@TickValue" Width="120%">
                                <DropDownListEvents TItem="LabelList" ValueChange="TickChange" TValue="string" />
                                <DropDownListFieldSettings Text="Name" Value="TickValues" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div> Tick Position </div>
                    </td>
                    <td>
                        <div style="padding-top:5px;padding-bottom:5px">
                            <SfDropDownList DataSource="@TickPositionData" @bind-Value="@TickPositionValue" Width="120%">
                                <DropDownListEvents TItem="TickPositionList" ValueChange="TickPositionChange" TValue="string" />
                                <DropDownListFieldSettings Text="Name" Value="TickPositionValues" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div> Label Position </div>
                    </td>
                    <td>
                        <div style="padding-top:5px;padding-bottom:5px">
                            <SfDropDownList DataSource="@LabelPositionData" @bind-Value="@LabelPositionValue" Width="120%">
                                <DropDownListEvents TItem="LabelPositionList" ValueChange="LabelPositionChange" TValue="string" />
                                <DropDownListFieldSettings Text="Name" Value="LabelPositionValues" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Tick Offset</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Tick offset Value" value="@TickOffsetValue" min="0" max="50" @oninput="TickOffsetChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <div>
                            <span>@TickOffsetText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="width:96%">Tick Height</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Tick height Value" value="@TickHeightValue" min="1" max="50" @oninput="TickHeightChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <div>
                            <span>@TickHeightText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="width:93%">Label Offset</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Label offset Value" value="@LabelOffsetValue" min="0" max="50" @oninput="LabelOffsetChange" />
                        </div>
                    </td>
                    <td>
                        <div style="text-align:center">
                            <span>@LabelOffsetText</span>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="width:96%">Show Last Label </div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="LastLabelChange" Checked="@LastLabelChecked" TChecked="bool" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public bool ShowLastLabel;
    public Position GaugeLabelPosition = Position.Outside;
    public double GaugeLabelOffset;
    public Position GaugeMajorPosition = Position.Inside;
    public double GaugeMajorOffset;
    public double GaugeMajorHeight = 10;
    public Position GaugeMinorPosition = Position.Inside;
    public double GaugeMinorOffset;
    public double GaugeMinorHeight = 5;
    public string TickValue = "major";
    public string LabelPositionValue = "Outside";
    public string TickPositionValue = "Inside";
    public double TickOffsetValue = 0;
    public double TickHeightValue = 10;
    public double LabelOffsetValue = 0;
    public bool LastLabelChecked;
    public double TickOffsetText = 0;
    public double TickHeightText = 10;
    public double LabelOffsetText = 0;
    private bool isMajorTick = true;
    private Position ticksMajorPosition = Position.Inside;
    private Position ticksMinorPosition = Position.Inside;
    private string gaugeMajorTickPositionValue = "Inside";
    private string gaugeMinorTickPositionValue = "Inside";

    public List<LabelList> TickData = new List<LabelList>
    {
        new LabelList { TickValues = "major", Name = "Major Ticks" },
        new LabelList { TickValues = "minor", Name = "Minor Ticks" },
    };

    public List<TickPositionList> TickPositionData = new List<TickPositionList>
    {
        new TickPositionList { TickPositionValues = "Inside", Name = "Inside" },
        new TickPositionList { TickPositionValues = "Outside", Name = "Outside" },
        new TickPositionList { TickPositionValues = "Cross", Name = "Cross" }
    };

    public List<LabelPositionList> LabelPositionData = new List<LabelPositionList>
    {
        new LabelPositionList { LabelPositionValues = "Inside", Name = "Inside" },
        new LabelPositionList { LabelPositionValues = "Outside", Name = "Outside" },
        new LabelPositionList { LabelPositionValues = "Cross", Name = "Cross" }
    };

    private void TickChange(ChangeEventArgs<string, LabelList> args)
    {
        TickValue = args.Value.ToString();
        if (TickValue == "major")
        {
            isMajorTick = true;
            TickOffsetValue = GaugeMajorOffset;
            TickHeightValue = GaugeMajorHeight;
            TickOffsetText = GaugeMajorOffset;
            TickHeightText = GaugeMajorHeight;
            TickPositionValue = gaugeMajorTickPositionValue;
            ticksMajorPosition = GaugeMajorPosition;
        }
        else
        {
            isMajorTick = false;
            TickOffsetValue = GaugeMinorOffset;
            TickHeightValue = GaugeMinorHeight;
            TickOffsetText = GaugeMinorOffset;
            TickHeightText = GaugeMinorHeight;
            TickPositionValue = gaugeMinorTickPositionValue;
            ticksMinorPosition = GaugeMinorPosition;
        }
    }

    private void TickPositionChange(ChangeEventArgs<string, TickPositionList> args)
    {
        TickPositionValue = args.Value.ToString();
        if (isMajorTick)
        {
            if (TickPositionValue == "Inside")
                GaugeMajorPosition = Position.Inside;
            else if (TickPositionValue == "Outside")
                GaugeMajorPosition = Position.Outside;
            else
                GaugeMajorPosition = Position.Cross;
            ticksMajorPosition = GaugeMajorPosition;
            gaugeMajorTickPositionValue = TickPositionValue;
        }
        else
        {
            if (TickPositionValue == "Inside")
                GaugeMinorPosition = Position.Inside;
            else if (TickPositionValue == "Outside")
                GaugeMinorPosition = Position.Outside;
            else
                GaugeMinorPosition = Position.Cross;
            ticksMinorPosition = GaugeMinorPosition;
            gaugeMinorTickPositionValue = TickPositionValue;
        }
    }

    private void LabelPositionChange(ChangeEventArgs<string, LabelPositionList> args)
    {
        LabelPositionValue = args.Value.ToString();
        if (isMajorTick)
        {
            if (LabelPositionValue == "Inside")
                GaugeLabelPosition = Position.Inside;
            else if (LabelPositionValue == "Outside")
                GaugeLabelPosition = Position.Outside;
            else
                GaugeLabelPosition = Position.Cross;
        }
        else
        {
            if (LabelPositionValue == "Inside")
                GaugeLabelPosition = Position.Inside;
            else if (LabelPositionValue == "Outside")
                GaugeLabelPosition = Position.Outside;
            else
                GaugeLabelPosition = Position.Cross;
        }
    }

    private void TickOffsetChange(ChangeEventArgs args)
    {
        TickOffsetValue = Convert.ToDouble(args.Value);
        if (isMajorTick)
            GaugeMajorOffset = TickOffsetValue;
        else
            GaugeMinorOffset = TickOffsetValue;
        TickOffsetText = TickOffsetValue;
    }

    private void TickHeightChange(ChangeEventArgs args)
    {
        TickHeightValue = Convert.ToDouble(args.Value);
        if (isMajorTick)
            GaugeMajorHeight = TickHeightValue;
        else
            GaugeMinorHeight = TickHeightValue;
        TickHeightText = TickHeightValue;
    }

    private void LabelOffsetChange(ChangeEventArgs args)
    {
        LabelOffsetValue = Convert.ToDouble(args.Value);
        GaugeLabelOffset = LabelOffsetValue;
        LabelOffsetText = LabelOffsetValue;
    }

    private void LastLabelChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        LastLabelChecked = args.Checked;
        ShowLastLabel = args.Checked;
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class LabelList
    {
        public string? TickValues { get; set; }
        public string? Name { get; set; }
    }
    public class TickPositionList
    {
        public string? TickPositionValues { get; set; }
        public string? Name { get; set; }
    }
    public class LabelPositionList
    {
        public string? LabelPositionValues { get; set; }
        public string? Name { get; set; }
    }
}