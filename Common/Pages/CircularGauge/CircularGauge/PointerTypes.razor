@page "/circular-gauge/pointer-types"

@using System.Timers
@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the various pointer types available in the circular gauge.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to customize the pointer for an axis in the circular gauge. The circular gauge supports a variety of pointers, including marker, needle, and range bar. Additionally, the pointer can be customized, and multiple pointers can also be enabled.</p>
    <p>More information on the pointers can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/pointers" aria-label="Blazor Circular Gauge Pointers documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    .annotationText {
        font-size: 14px;
    }
</style>

<div class="control-section">
    <div class="row">
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="3" Color="#01aebe" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Radius="100%" Value="80" Type="PointerType.Marker" MarkerShape="GaugeShape.InvertedTriangle" MarkerWidth="15" MarkerHeight="15" Color="rgb(0,171,169)" />
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="48%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-54px">Marker pointer</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="3" Color="#ff5985" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" Width="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="66" Radius="90%" Type="PointerType.RangeBar" PointerWidth="10" Color="#ff5985">
                                        <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="47%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-46px">Range bar pointer</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" @ref="NeedleRef" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="3" Color="#9250e6" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@NeedlePointer" Radius="100%" Color="#923C99" PointerWidth="6">
                                        <CircularGaugeCap Radius="0" />
                                        <CircularGaugeNeedleTail Length="4%" Color="#923C99" />
                                        <CircularGaugePointerAnimation Enable="false" Duration="900" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="48%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-44px">Needle pointer</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="3" Color="#1E7145" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="#1E7145" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="80" Radius="80%" Color="green" PointerWidth="2" NeedleStartWidth="4" NeedleEndWidth="4">
                                        <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                                        <CircularGaugeCap Radius="8" Color="green" />
                                        <CircularGaugeNeedleTail Length="0%" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="48%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-50px">Customized pointer</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="3" Color="#e3a21a" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="80" Radius="80%" MarkerWidth="5" MarkerHeight="5" Color="#e3a21a" PointerWidth="10">
                                        <CircularGaugeCap Radius="8" Color="White">
                                            <CircularGaugeCapBorder Color="#e3a21a" Width="1" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="20%" Color="#e3a21a" />
                                        <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                                    </CircularGaugePointer>
                                    <CircularGaugePointer Value="40" Radius="60%" MarkerWidth="5" MarkerHeight="5" Color="#ffb133" PointerWidth="10">
                                        <CircularGaugeCap Radius="8" Color="White">
                                            <CircularGaugeCapBorder Color="#ffb133" Width="1" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="20%" Color="#e3a21a" />
                                        <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="48%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-46px">Multiple pointers</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" CenterY="40%" @ref="LiveUpdateRef" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="270" EndAngle="90" Radius="90%" Minimum="0" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="0" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Height="0" Interval="100" />
                                <CircularGaugeAxisMinorTicks Height="0" />
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@LiveUpdatePointer" Radius="100%" Color="#067bc2" PointerWidth="6">
                                        <CircularGaugeCap Radius="0" />
                                        <CircularGaugeNeedleTail Length="4%" Color="#067bc2" />
                                        <CircularGaugePointerAnimation Enable="false" Duration="100" />
                                    </CircularGaugePointer>
                                    <CircularGaugePointer Value="@LiveUpdatePointer" Radius="100%" Type="PointerType.RangeBar" Color="#067bc2" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="100" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="146" ZIndex="1" Radius="48%">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-40%">Live update</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public SfCircularGauge? NeedleRef;
    public SfCircularGauge? LiveUpdateRef;
    public double LiveUpdatePointer = 40;
    public double NeedlePointer = 80;
    private Timer _syncTimer = null!;
    private Timer _syncTimer1 = null!;
    private Random _random = new Random();
    
    private void NeedlePointerUpdate(Object source, ElapsedEventArgs e)
    {
        NeedleRef?.SetPointerValueAsync(0, 0, (_random.NextDouble() * 70) + 20);
    }

    private void LiveUpdate(Object source, ElapsedEventArgs e)
    {
        LiveUpdatePointer = (_random.NextDouble() * 50) + 30;
        LiveUpdateRef?.SetPointerValueAsync(0, 0, LiveUpdatePointer);
        LiveUpdateRef?.SetPointerValueAsync(0, 1, LiveUpdatePointer);
    }

    protected override void OnInitialized()
    {
        _syncTimer1 = new Timer(1000);
        @*Hidden:Lines*@
        #pragma warning disable CS8622
        @*End:Hidden*@
        _syncTimer1.Elapsed += this.NeedlePointerUpdate;
        @*Hidden:Lines*@
        #pragma warning restore CS8622
        @*End:Hidden*@
        _syncTimer1.AutoReset = true;
        _syncTimer1.Enabled = true;
        _syncTimer = new Timer(1000);
        @*Hidden:Lines*@
        #pragma warning disable CS8622
        @*End:Hidden*@
        _syncTimer.Elapsed += this.LiveUpdate;
        @*Hidden:Lines*@
        #pragma warning restore CS8622
        @*End:Hidden*@
        _syncTimer.AutoReset = true;
        _syncTimer.Enabled = true;
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
    public void Dispose()
    {
        if(_syncTimer != null)
        {
            @*Hidden:Lines*@
            #pragma warning disable CS8622
            @*End:Hidden*@
            _syncTimer.Elapsed -= this.LiveUpdate;
            @*Hidden:Lines*@
            #pragma warning restore CS8622
            @*End:Hidden*@
            _syncTimer.Stop();
            _syncTimer.Dispose();
            _syncTimer = null!;
        }
        if (_syncTimer1 != null)
        {
            @*Hidden:Lines*@
            #pragma warning disable CS8622
            @*End:Hidden*@
            _syncTimer1.Elapsed -= this.NeedlePointerUpdate;
            @*Hidden:Lines*@
            #pragma warning disable CS8622
            @*End:Hidden*@
            _syncTimer1.Stop();
            _syncTimer1.Dispose();
            _syncTimer1 = null!;
        }
    }
}