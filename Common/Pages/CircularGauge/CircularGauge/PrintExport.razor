@page "/circular-gauge/print-export"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the print and export functionalities of the circular gauge.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to print and export the rendered circular gauge. You can add print functionality by using the
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#methods" aria-label="Class reference of PrintAsync method in Circular Gauge">PrintAsync</a>
        method when <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_AllowPrint" aria-label="Class reference of AllowPrint property in Circular Gauge">AllowPrint</a> is set as <b>true</b>. Also, you can add export functionality by using the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#methods">ExportAsync</a> method when <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_AllowImageExport">AllowImageExport</a> and
        <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_AllowPdfExport" aria-label="Class reference of AllowPdfExport property in Circular Gauge">AllowPdfExport</a> are set as <b>true</b>. The circular gauge can be exported to JPEG, PNG, SVG, and PDF formats.
    </p>
    <p>More information about print and export can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/print" aria-label="Blazor Circular Gauge Print documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    .transform-btn {
        margin-top: 1px;
    }

    tr {
        height: 50px;
    }

    td {
        width: 50%;
    }
</style>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge @ref="@Gauge" AllowPdfExport="true" AllowPrint="true" AllowImageExport="true" Theme="@Theme">
        <CircularGaugeAxes>
            <CircularGaugeAxis Radius="80%" StartAngle="0" EndAngle="0" Direction="GaugeDirection.AntiClockWise">
                <CircularGaugeAxisLineStyle Width="0" />
                <CircularGaugeAxisMajorTicks Position="Position.Outside" Width="1" Height="25" Interval="10" UseRangeColor="true" />
                <CircularGaugeAxisMinorTicks Position="Position.Outside" Width="1" Height="8" Interval="2" UseRangeColor="true" />
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="0" End="32" Radius="90%" StartWidth="10" EndWidth="35" Color="#F8A197" />
                    <CircularGaugeRange Start="32" End="70" Radius="90%" StartWidth="10" EndWidth="35" Color="#C45072" />
                    <CircularGaugeRange Start="70" End="100" Radius="90%" StartWidth="10" EndWidth="35" Color="#1B679F" />
                </CircularGaugeRanges>
                <CircularGaugeAxisLabelStyle Offset="2" Position="Position.Outside" UseRangeColor="true" HiddenLabel="HiddenLabel.Last">
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugePointers>
                    <CircularGaugePointer Radius="0%">
                        <CircularGaugeCap Radius="0" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" title="Properties" style="width: 100%">
                <tbody>
                    <tr>
                        <td>
                            <div>Export Type</div>
                        </td>
                        <td>
                            <div>
                                <SfDropDownList TValue="string" TItem="FileTypeList" DataSource="@FileTypes" @bind-Value="@FileType">
                                    <DropDownListEvents TValue="string" TItem="FileTypeList" ValueChange="GaugeValueChange" />
                                    <DropDownListFieldSettings Text="Name" Value="Name" />
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>File Name</div>
                        </td>
                        <td>
                            <div>
                                <SfTextBox Value="@FileName" ValueChange="@NameChange" Placeholder="Circular Gauge" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="right" style="padding-right:5%">
                            <SfButton OnClick="ExportClick" IsPrimary="true" IsToggle="true" CssClass="transform-btn">Export</SfButton>
                        </td>
                        <td align="left" style="padding-left:5%">
                            <SfButton OnClick="PrintClick" IsToggle="true" IsPrimary="true" CssClass="transform-btn">Print</SfButton>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public SfCircularGauge? Gauge;
    private string FileType { get; set; } = "JPEG";
    private string FileName { get; set; } = "Circular Gauge";

    public List<FileTypeList> FileTypes = new List<FileTypeList>
    {
        new FileTypeList { Name = "JPEG" },
        new FileTypeList { Name = "PNG" },
        new FileTypeList { Name = "SVG" },
        new FileTypeList { Name = "PDF" }
    };

    private void GaugeValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, FileTypeList> args)
    {
        FileType = args.Value;
    }

    private void NameChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        FileName = args.Value;
    }

    private async Task ExportClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        ExportType exportFileType = ExportType.JPEG;
        switch (FileType)
        {
            case "JPEG":
                exportFileType = ExportType.JPEG;
                break;
            case "PNG":
                exportFileType = ExportType.PNG;
                break;
            case "SVG":
                exportFileType = ExportType.SVG;
                break;
            case "PDF":
                exportFileType = ExportType.PDF;
                break;
        }
        if (this.Gauge != null)
        await this.Gauge.ExportAsync(exportFileType, FileName);
    }

    private async Task PrintClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        if (this.Gauge != null)
        await this.Gauge.PrintAsync();
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class FileTypeList
    {
        public string? Name { get; set; }
    }
}