@page "/circular-gauge/data-sample"

@using System.Timers
@using System.Collections.ObjectModel;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Grids
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows live stock price data displayed in multiple circular gauges.</p>
</SampleDescription>
<ActionDescription>
    <p>The pointer value in the circular gauge can be dynamically updated using the <a target="_blank" class="code" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.CircularGauge.SfCircularGauge.html#Syncfusion_Blazor_CircularGauge_SfCircularGauge_SetPointerValueAsync_System_Int32_System_Int32_System_Double_" aria-label="Class reference of SetPointerValueAsync method in Circular Gauge">SetPointerValueAsync</a> method. In this example, the stock price changes across countries are displayed in multiple circular gauges.</p>
    <p>More information on the method for setting pointer value can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/methods#setpointervalueasync" aria-label="Blazor Circular Gauge Methods documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    .e-spinner-inner {
        display: none !important;
    }
    #templateWrap img {
        width: 16px;
        height: 16px;
        margin-top: 6px;
        margin-left: -25px
    }

    #templateWrap .des {
        float: right;
    }

    .annotationText {
        color: @TextColor;
        font-size: 16px;
        font-style: normal;
    }

    .annotationTextValue {
        color: @TextColor;
        font-size: 20px;
        font-family: inherit;
    }
</style>

<div class="control-section">
    <div class="row">
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@GermanRef" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130" Minimum="-100" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent" />
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01" />
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01" />
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="-100" End="0" StartWidth="15" EndWidth="15" Color="#EC121C" />
                                    <CircularGaugeRange Start="0" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C" />
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@GermanPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900" />
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="160" ZIndex="1" Radius="45%">
                                        <ContentTemplate>
                                            <div id="templateWrap">
                                                <img src="@(SampleService?.WebAssetsPath + "images/circular-gauge/positive.png")" alt="Positive"/>
                                                <div class='des'>
                                                    <div class="annotationTextValue">@GermanAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="170" ZIndex="1" Radius="74%" Content="Germany">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-30px;">Germany</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@USARef" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130" Minimum="-100" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMajorTicks>
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMinorTicks>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="-100" End="0" StartWidth="15" EndWidth="15" Color="#EC121C" />
                                    <CircularGaugeRange Start="0" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C" />
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@UsaPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900" />
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="160" ZIndex="1" Radius="45%">
                                        <ContentTemplate>
                                            <div id="templateWrap">
                                                <img src="@(SampleService?.WebAssetsPath + "images/circular-gauge/positive.png")" alt="Positive" />
                                                <div class='des'>
                                                    <div class="annotationTextValue">@USAAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="175" ZIndex="1" Radius="74%" Content="USA">
                                        <ContentTemplate>
                                            <div class="annotationText" style="margin-left:-10px;">USA</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@UKRef" Theme="@Theme" Background="transparent">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130" Minimum="-100" Maximum="100">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent" />
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01" />
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01" />
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="-100" End="0" StartWidth="15" EndWidth="15" Color="#EC121C" />
                                    <CircularGaugeRange Start="0" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C" />
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@UkPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900" />
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0" />
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777" />
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="160" ZIndex="1" Radius="45%">
                                        <ContentTemplate>
                                            <div id="templateWrap">
                                                <img src="@(SampleService?.WebAssetsPath + "images/circular-gauge/negative.png")" alt="Negative" />
                                                <div class='des'>
                                                    <div class="annotationTextValue">@UKAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="178" ZIndex="1" Radius="74%" Content="UK">
                                        <ContentTemplate>
                                            <div class="annotationText">UK</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="row">
                    <div class="col-sm-12">
                        <SfGrid DataSource="@GridData" AllowSelection="false"
                                EnableHover="true">
                            <GridColumns>
                                <GridColumn Field="Country" HeaderText="Country" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="Sales" HeaderText="Sales $" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="Target" HeaderText="Target $" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="VsTarget" HeaderText="Vs Target" TextAlign="TextAlign.Left"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    public Theme Theme { get; set; }
    public SfCircularGauge? GermanRef;
    public SfCircularGauge? USARef;
    public SfCircularGauge? UKRef;
    public string TextColor = "#000000";
    public double GermanPointerValue = 75;
    public double UsaPointerValue = 60;
    public double UkPointerValue = 25;
    public string GermanAnnotationText = "75%";
    public string USAAnnotationText = "60%";
    public string UKAnnotationText = "-25%";
    public ObservableCollection<GaugeGridData> GridData { get; set; } = new ObservableCollection<GaugeGridData>();
    private Random _random = new Random();
    private string? _grid1;
    private string? _grid2;
    private string? _grid3;
    private Timer _syncTimer = null!;

    private void PointerValueUpdate(Object source, System.Timers.ElapsedEventArgs e)
    {
        _syncTimer.Enabled = false;
        _syncTimer.Stop();
        _syncTimer.Dispose();
        UpdateGrid().GetAwaiter();
    }

    public async Task UpdateGrid()
    {
        await InvokeAsync(() =>
        {
            double randomValue = _random.NextDouble();
            GermanPointerValue = (randomValue * 35) + 55;
            UsaPointerValue = (randomValue * 15) + 60;
            UkPointerValue = -(randomValue * 30) + 10;
            _grid1 = (4 * Math.Round((randomValue * 35) + 55)).ToString();
            _grid2 = (6 * Math.Round((randomValue * 15) + 60)).ToString();
            _grid3 = (-(7 * Math.Round((randomValue * 30) + 10))).ToString();
            GermanAnnotationText = GermanPointerValue.ToString("N0") + "%";
            USAAnnotationText = UsaPointerValue.ToString("N0") + "%";
            UKAnnotationText = UkPointerValue.ToString("N0") + "%";

            this.GridData.Clear();

            List<GaugeGridData> ListData = new List<GaugeGridData>
            {
                new GaugeGridData() { Country = "Germany", Sales = 500, Target = 400, VsTarget = _grid1 },
                new GaugeGridData() { Country = "USA", Sales = 1000, Target = 600, VsTarget = _grid2 },
                new GaugeGridData() { Country = "UK", Sales = 600, Target = 700, VsTarget = _grid3 },
            };

            if (!this.GridData.Any())
            {
                foreach (var data in ListData)
                {
                    this.GridData.Add(data);
                }

            }
            @*Hidden:Lines*@
            #pragma warning restore BL0005
            @*End:Hidden*@
            GermanRef?.SetPointerValueAsync(0, 0, GermanPointerValue);
            USARef?.SetPointerValueAsync(0, 0, UsaPointerValue);
            UKRef?.SetPointerValueAsync(0, 0, UkPointerValue);
            StartTimer();
        });
    }

    private void StartTimer()
    {
        _syncTimer = new System.Timers.Timer();
        @*Hidden:Lines*@
        #pragma warning disable CS8622
        @*End:Hidden*@
        _syncTimer.Elapsed += new System.Timers.ElapsedEventHandler(PointerValueUpdate);
        @*Hidden:Lines*@
        #pragma warning restore CS8622
        @*End:Hidden*@
        _syncTimer.Interval = 2000;
        _syncTimer.Enabled = true;
        _syncTimer.Start();
    }
    protected override void OnInitialized()
    {
        _syncTimer = new Timer(2000);
        @*Hidden:Lines*@
        #pragma warning disable CS8622
        @*End:Hidden*@
        _syncTimer.Elapsed += this.PointerValueUpdate;
        @*Hidden:Lines*@
        #pragma warning restore CS8622
        @*End:Hidden*@
        _syncTimer.AutoReset = true;
        _syncTimer.Enabled = true;
        List<GaugeGridData> GaugeData = new List<GaugeGridData>
        {
            new GaugeGridData { Country = "Germany", Sales = 500, Target = 400, VsTarget = "300" },
            new GaugeGridData { Country = "USA", Sales = 1000, Target = 600, VsTarget = "360" },
            new GaugeGridData { Country = "UK", Sales = 600, Target = 700, VsTarget = "-100" },
        };
        this.GridData = new ObservableCollection<GaugeGridData>(GaugeData);
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        TextColor = (Theme.ToString().IndexOf("Dark") > -1 || Theme.ToString().IndexOf("HighContrast") > -1) ? "#FFFFFF" : "#000000";        
    }

    public class GaugeGridData
    {
        public string? Country { get; set; }
        public double Sales { get; set; }
        public double Target { get; set; }
        public string? VsTarget { get; set; }
    }
}