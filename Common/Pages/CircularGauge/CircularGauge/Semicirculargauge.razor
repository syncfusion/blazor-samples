@page "/circular-gauge/semi-circular-gauge"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows how to create semi-circular or quarter-circular gauges by modifying a circular gauge with different start and end angles.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, a circular gauge is rendered with different start and end angles to create semi-circular or quarter-circular gauges. The radius, start angle, end angle, and center position of the circular gauge can all be customized using the options in the properties panel.</p>
    <p>More information on the semi-circular or quarter-circular gauges can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/appearance#radius-calculation-based-on-angles" aria-label="Blazor Semi Circular Gauge documentation" >documentation section</a>.</p>
</ActionDescription>

<style>
    tr {
        height: 50px;
    }

    .fluent2 #semi-circular-gauge .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-dark #semi-circular-gauge .property-panel-content .e-checkbox-wrapper .e-icons, .fluent2-highcontrast #semi-circular-gauge .property-panel-content .e-checkbox-wrapper .e-icons {
        margin-left: 0px
    }
</style>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge CenterX="@GaugeCenterX" CenterY="@GaugeCenterY" MoveToCenter="@GaugeMoveToCenter" Theme="@Theme" Background="transparent">
        <CircularGaugeAxes>
            <CircularGaugeAxis HideIntersectingLabel="@HideLabelCheck" StartAngle="@GaugeStartAngle" EndAngle="@GaugeEndAngle" Minimum="0" Maximum="100" Radius="@GaugeRadius">
                <CircularGaugeAxisLineStyle Width="3" />
                <CircularGaugeAxisLabelStyle Position="Syncfusion.Blazor.CircularGauge.Position.Outside" AutoAngle=true Format="{value}%">
                    <CircularGaugeAxisLabelFont FontWeight="Normal" FontFamily="inherit" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Position="Syncfusion.Blazor.CircularGauge.Position.Inside" Width="2" Height="15" Interval="10" />
                <CircularGaugeAxisMinorTicks Position="Syncfusion.Blazor.CircularGauge.Position.Inside" Height="8" Width="1" Interval="2" />
                <CircularGaugePointers>
                    <CircularGaugePointer Value="30" Radius="75%" PointerWidth="7">
                        <CircularGaugePointerAnimation Enable=false />
                        <CircularGaugeCap Radius="8">
                            <CircularGaugeCapBorder Width="0" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="13%" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div id="semi-circular-gauge" class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table title="Properties" style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 15%;">
                </colgroup>
                <tr>
                    <td>
                        <div>Start Angle</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Gauge start Angle" value="@GaugeStartAngle" min="0" max="360" @oninput="StartSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@GaugeStartAngle°</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>End Angle</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Gauge end Angle" value="@GaugeEndAngle" min="0" max="360" @oninput="EndSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@GaugeEndAngle°</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Radius</div>
                    </td>
                    <td>
                        <div>
                            <input type="range" aria-label="Slider radius" value="@SliderRadius" min="30" max="100" @oninput="RadiusSlider" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@SliderRadius%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="property-text" style="width:95%">Radius based on angle</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="@RadiusAngleCheckbox" Checked="@GaugeMoveToCenter" TChecked="bool" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Center X</div>
                    </td>
                    <td>
                        <div>
                            <input disabled="@CenterSliderEnable" aria-label="Center X Slider" type="range" value="@CenterxSlider" min="0" max="100" @oninput="CenterxSliderChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@CenterxSlider%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div>Center Y</div>
                    </td>
                    <td>
                        <div>
                            <input disabled="@CenterSliderEnable" aria-label="Center Y Slider" type="range" value="@CenterySlider" min="0" max="100" @oninput="CenterySliderChange" />
                        </div>
                    </td>
                    <td style="text-align:center">
                        <span>@CenterySlider%</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="property-text" style="width:98%">Hide Intersecting Labels</div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="@LabelCheck" Checked="@IntersectLabelChecked" TChecked="bool" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@code{
    public Theme Theme { get; set; }
    public double GaugeStartAngle = 270;
    public double GaugeEndAngle = 90;
    public string GaugeRadius = "100%";
    public double SliderRadius = 100;
    public string GaugeCenterX = "50%";
    public string GaugeCenterY = "50%";
    public double CenterxSlider = 50;
    public double CenterySlider = 50;
    public bool GaugeMoveToCenter = false;
    public bool IntersectLabelChecked = true;
    public bool HideLabelCheck = true;
    public bool CenterSliderEnable = false;

    private void RadiusAngleCheckbox(ChangeEventArgs<bool> args)
    {
        GaugeMoveToCenter = args.Checked;
        if (GaugeMoveToCenter)
        {
            GaugeCenterX = GaugeCenterY = null!;
        }
        else
        {
            GaugeCenterX = CenterxSlider.ToString() + "%";
            GaugeCenterY = CenterySlider.ToString() + "%";
        }
        CenterSliderEnable = GaugeMoveToCenter;
    }

    private void LabelCheck(ChangeEventArgs<bool> args)
    {
        IntersectLabelChecked = args.Checked;
        HideLabelCheck = IntersectLabelChecked;
    }

    private void StartSlider(ChangeEventArgs args)
    {
        GaugeStartAngle = Convert.ToDouble(args.Value);
    }

    private void EndSlider(ChangeEventArgs args)
    {
        GaugeEndAngle = Convert.ToDouble(args.Value);
    }

    private void RadiusSlider(ChangeEventArgs args)
    {
        GaugeRadius = (args.Value?.ToString() + "%");
        SliderRadius = Convert.ToDouble(args.Value);
    }

    private void CenterxSliderChange(ChangeEventArgs args)
    {
        GaugeCenterX = (args.Value?.ToString() + "%");
        CenterxSlider = Convert.ToDouble(args.Value);
    }

    private void CenterySliderChange(ChangeEventArgs args)
    {
        GaugeCenterY = (args.Value?.ToString() + "%");
        CenterySlider = Convert.ToDouble(args.Value);
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}