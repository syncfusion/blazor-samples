@page "/circular-gauge/multiple-axes"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns
@using ThemeHelper
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the multiple axes in the circular gauge as well as the options for changing the direction, start, and end angle of an axis.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure multiple axes in the circular gauge. To render multiple axes in the circular gauge, use the axes collection, and each axis can be customized with pointers and ticks.</p>
    <p>More information on the multiple axes can be found in this <a target="_blank" href="https://blazor.syncfusion.com/documentation/circular-gauge/axes#multiple-axes" aria-label="Blazor Circular Gauge Multiple Axes documentation" >documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <SfCircularGauge Theme="@Theme" Background="transparent">
        <CircularGaugeAxes>
            <CircularGaugeAxis Radius="95%" Minimum="0" Maximum="160" HideIntersectingLabel="true" StartAngle="@FirstAxisStartAngle" EndAngle="@FirstAxisEndAngle" Direction="@FirstaAxisDirection">
                <CircularGaugeAxisLineStyle Width="1.5" />
                <CircularGaugeAxisLabelStyle Position="Position.Inside" AutoAngle="true">
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Position="Position.Inside" Width="2" Height="10" />
                <CircularGaugeAxisMinorTicks Position="Position.Inside" Width="2" Height="5" />
                <CircularGaugePointers>
                    <CircularGaugePointer Value="80" Radius="100%" MarkerHeight="15" MarkerWidth="15" Type="PointerType.Marker" MarkerShape="GaugeShape.Triangle">
                          <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
            <CircularGaugeAxis Radius="95%" Minimum="0" Maximum="240" HideIntersectingLabel="true" StartAngle="@SecondAxisStartangle" EndAngle="@SecondAxisEndangle" Direction="@SecondAxisDirection">
                <CircularGaugeAxisLineStyle Width="1.5" Color="#E84011" />
                <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true" Offset="5">
                    <CircularGaugeAxisLabelFont FontFamily="inherit"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisMajorTicks Position="Position.Outside" Width="2" Height="10" Color="#E84011" />
                <CircularGaugeAxisMinorTicks Position="Position.Outside" Width="2" Height="5" Color="#E84011" />
                <CircularGaugePointers>
                    <CircularGaugePointer Value="120" Radius="100%" MarkerHeight="15" MarkerWidth="15" Type="PointerType.Marker" MarkerShape="GaugeShape.InvertedTriangle" Color="#E84011">
                          <CircularGaugePointerAnimation Enable="true" Duration="1000" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <colgroup>
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 10%;">
                </colgroup>
                <tr>
                    <td>
                        <div> Axis </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@AxisData" @bind-Value="@AxisValue" Width="120%">
                                <DropDownListEvents TItem="AxisType" TValue="string" ValueChange="@AxisChange" />
                                <DropDownListFieldSettings Text="Name" Value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top:6px"> Direction </div>
                    </td>
                    <td>
                        <div style="padding-top:6px">
                            <SfDropDownList DataSource="@AxisDirectionData" @bind-Value="@AxisDirectionValue" Width="120%">
                                <DropDownListEvents TItem="AxisType" TValue="string" ValueChange="@AxisDirectionChange" />
                                <DropDownListFieldSettings Text="Name" Value="Name" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top:8px">Start Angle</div>
                    </td>
                    <td>
                        <div style="padding-top:8px">
                            <input aria-label="Start angle value" type="range" min="0" max="360" value="@StartAngleValue" @oninput="StartAngleChange" />
                        </div>
                    </td>
                    <td style="text-align:center;padding-top:8px">
                        <span>@StartAngleValue</span>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div style="padding-top:18px">End Angle</div>
                    </td>
                    <td>
                        <div style="padding-top:18px">
                            <input aria-label="End angle value" type="range" min="0" max="360" value="@EndAngleValue" @oninput="EndAngleChange" />
                        </div>
                    </td>
                    <td style="text-align:center;padding-top:18px">
                        <span>@EndAngleValue</span>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<style>
    td {
        width: 40%;
    }

    tr {
        height: 40px;
    }
</style>

@code{
    public Theme Theme { get; set; }
    public double FirstAxisStartAngle = 220;
    public double SecondAxisStartangle = 220;
    public double FirstAxisEndAngle = 140;
    public double SecondAxisEndangle = 140;
    public GaugeDirection FirstaAxisDirection = GaugeDirection.ClockWise;
    public GaugeDirection SecondAxisDirection = GaugeDirection.ClockWise;
    public string AxisValue = "Axis 1";
    public string AxisDirectionValue = "Clockwise";
    public double StartAngleValue = 220;
    public double EndAngleValue = 140;


    public List<AxisType> AxisData = new List<AxisType>
    {
        new AxisType { Name = "Axis 1" },
        new AxisType { Name = "Axis 2" },
    };

    public List<AxisType> AxisDirectionData = new List<AxisType>
    {
        new AxisType { Name = "Clockwise" },
        new AxisType { Name = "Anti-clockwise" },
    };

    private void AxisChange(ChangeEventArgs<string, AxisType> args)
    {
        AxisValue = (args.Value).ToString();
        if (AxisValue == "Axis 1")
        {
            AxisDirectionValue = FirstaAxisDirection == GaugeDirection.ClockWise ? "Clockwise" : "Anti-clockwise";
            StartAngleValue = FirstAxisStartAngle;
            EndAngleValue = FirstAxisEndAngle;
        }
        else
        {
            AxisDirectionValue = SecondAxisDirection == GaugeDirection.ClockWise ? "Clockwise" : "Anti-clockwise";
            StartAngleValue = SecondAxisStartangle;
            EndAngleValue = SecondAxisEndangle;
        }
    }

    private void AxisDirectionChange(ChangeEventArgs<string, AxisType> args)
    {
        AxisDirectionValue = (args.Value).ToString();
        if (AxisDirectionValue == "Clockwise")
        {
            if (AxisValue == "Axis 1") { FirstaAxisDirection = GaugeDirection.ClockWise; }
            else { SecondAxisDirection = GaugeDirection.ClockWise; }
        }
        else
        {
            if (AxisValue == "Axis 1") { FirstaAxisDirection = GaugeDirection.AntiClockWise; }
            else { SecondAxisDirection = GaugeDirection.AntiClockWise; }
        }
    }

    private void StartAngleChange(ChangeEventArgs args)
    {
        StartAngleValue = Convert.ToDouble(args.Value);
        if (AxisValue == "Axis 1") { FirstAxisStartAngle = StartAngleValue; }
        else { SecondAxisStartangle = StartAngleValue; }
    }

    private void EndAngleChange(ChangeEventArgs args)
    {
        EndAngleValue = Convert.ToDouble(args.Value);
        if (AxisValue == "Axis 1") { FirstAxisEndAngle = EndAngleValue; }
        else { SecondAxisEndangle = EndAngleValue; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    public class AxisType
    {
        public string? Name { get; set; }
    }
}