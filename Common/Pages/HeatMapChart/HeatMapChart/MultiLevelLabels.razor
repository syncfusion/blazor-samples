@page "/heatmap-chart/multi-level-labels"
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor
@using Syncfusion.Blazor.HeatMap
@using sf_blazor_heatmapdata
@*Hidden:Lines*@
@inherits SampleBaseComponent
@*End:Hidden*@

<SampleDescription>
    <p> This sample illustrates the product-by-product monthly sales revenue of items sold by an online retailer over the course of a year. The products are organized by purchase domains, and revenue is displayed as cell data.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to group axis labels. You can customize text in each level by using <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapMultiLevelLabel.html" aria-label="Class reference of HeatMapMultiLevelLabel">HeatMapMultiLevelLabel</a>,  <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapAxisMultiLevelCategories.html" aria-label="Class reference of HeatMapAxisMultiLevelCategories">HeatMapAxisMultiLevelCategories</a>, <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapAxisMultiLevelLabelsTextStyle.html" aria-label="Class reference of HeatMapAxisMultiLevelLabelsTextStyle">HeatMapAxisMultiLevelLabelsTextStyle</a>, <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapXAxisMultiLevelLabelBorder.html" aria-label="Class reference of HeatMapXAxisMultiLevelLabelBorder">HeatMapXAxisMultiLevelLabelBorder</a> and <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapYAxisMultiLevelLabelBorder.html" aria-label="Class reference of HeatMapYAxisMultiLevelLabelBorder">HeatMapYAxisMultiLevelLabelBorder</a> classes.</p>
    <p>The border of the axis labels can be customized by using <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.HeatMapXAxisMultiLevelLabelBorder.html#Syncfusion_Blazor_HeatMap_HeatMapXAxisMultiLevelLabelBorder_Type" aria-label="Class reference of Type property in HeatMap Chart">Type</a> property.</p>
    <ul>
        <li><code>Rectangle</code></li>
        <li><code>Brace</code></li>
        <li><code>WithoutTopBorder</code></li>
        <li><code>WithoutBottomBorder</code></li>
        <li><code>WithoutTopandBottomBorder</code></li>
        <li><code>WithoutBorder</code></li>
    </ul>
    <p>The tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item on touch-enabled devices.</p>
</ActionDescription>

<div class="control-section">
    <div class="row">
        <div class="col-md-12">
            <SfHeatMap DataSource="@DataSource" Theme="@Theme">
                <HeatMapEvents TooltipRendering="@TooltipRendering" CellRendering="@CellRender"></HeatMapEvents>
                <HeatMapTitleSettings Text="Product wise monthly sales revenue for a e-commerce website">
                    <HeatMapTitleTextStyle Size="15px" FontWeight="500" FontStyle="Normal" FontFamily="inherit" TextOverflow="TextOverflow.Trim"></HeatMapTitleTextStyle>
                </HeatMapTitleSettings>
                <HeatMapXAxis Labels="@XLabels">
                    <HeatMapXAxisTextStyle Color="@AxisLabelColor" FontFamily="inherit"></HeatMapXAxisTextStyle>
                    <HeatMapAxisLabelBorder Width="1" Type="BorderType.Rectangle" Color="#a19d9d"></HeatMapAxisLabelBorder>
                    <HeatMapMultiLevelLabels>
                        <HeatMapMultiLevelLabel>
                            <HeatMapXAxisMultiLevelLabelBorder Width="1" Type="BorderType.Rectangle" Color="#a19d9d"></HeatMapXAxisMultiLevelLabelBorder>
                            <HeatMapAxisMultiLevelLabelsTextStyle  FontFamily="inherit"Color="@AxisLabelColor" FontWeight="Bold"></HeatMapAxisMultiLevelLabelsTextStyle>
                            <HeatMapAxisMultiLevelCategories Start="0" End="2" Text="Electronics">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="3" End="4" Text="Beauty and personal care">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="5" End="7" Text="Fashion">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="8" End="10" Text="Household">
                            </HeatMapAxisMultiLevelCategories>
                        </HeatMapMultiLevelLabel>
                    </HeatMapMultiLevelLabels>
                </HeatMapXAxis>
                <HeatMapYAxis Labels="@YLabels" IsInversed=true>
                    <HeatMapAxisLabelBorder Width="0"></HeatMapAxisLabelBorder>
                    <HeatMapYAxisTextStyle FontFamily="inherit" Color="@AxisLabelColor"></HeatMapYAxisTextStyle>
                    <HeatMapMultiLevelLabels>
                        <HeatMapMultiLevelLabel>
                            <HeatMapYAxisMultiLevelLabelBorder Width="1" Type="BorderType.Brace" Color="#a19d9d"></HeatMapYAxisMultiLevelLabelBorder>
                            <HeatMapAxisMultiLevelLabelsTextStyle FontFamily="inherit" Color="@AxisLabelColor" FontWeight="Bold"></HeatMapAxisMultiLevelLabelsTextStyle>
                            <HeatMapAxisMultiLevelCategories Start="0" End="2" Text="Q1">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="3" End="5" Text="Q2">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="6" End="8" Text="Q3">
                            </HeatMapAxisMultiLevelCategories>
                            <HeatMapAxisMultiLevelCategories Start="9" End="11" Text="Q4">
                            </HeatMapAxisMultiLevelCategories>
                        </HeatMapMultiLevelLabel>
                    </HeatMapMultiLevelLabels>
                </HeatMapYAxis>
                <HeatMapCellSettings ShowLabel="@IsShowLabel" Format="$ {value}K">
                    <HeatMapCellBorder Width="0"></HeatMapCellBorder>
                    <HeatMapCellTextStyle FontFamily="inherit"></HeatMapCellTextStyle>
                </HeatMapCellSettings>
                <HeatMapPaletteSettings>
                    <HeatMapPalettes>
                        <HeatMapPalette Color="#F0ADCE"></HeatMapPalette>
                        <HeatMapPalette Color="#19307B"></HeatMapPalette>
                    </HeatMapPalettes>
                </HeatMapPaletteSettings>
                <HeatMapLegendSettings Visible="false">
                </HeatMapLegendSettings>
                <HeatMapTooltipSettings Enable="true">
                    <HeatMapFont Size="12px" FontFamily="inherit" FontWeight="500"></HeatMapFont>
                </HeatMapTooltipSettings>
            </SfHeatMap>
        </div>
    </div>
</div>

@code {
    public Theme Theme { get; set; }
    public string AxisLabelColor = "Black";
    public string[] XLabels = new string[] { "Laptop", "Mobile", "Gaming", "Cosmetics", "Fragrance", "Watches", "Handbags", "Apparel", "Kitchenware", "Furniture", "Home Decor" };
    public string[] YLabels = new string[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    public bool IsShowLabel = true;
    public int[,] DataSource = HeatMapData.GetMultiLevelData();

    public void TooltipRendering(TooltipEventArgs args)
    {
        args.Content = new string[] { args.XLabel + " | " + args.YLabel + " : $ " + args.Value + "K" };
    }

    public void CellRender(HeatMapCellRenderEventArgs args)
    {
        string CellValue = (double.Parse(args.CellValue) / 10).ToString();
        args.CellValue = CellValue;
    }
    
    protected override void OnInitialized()
    {
        Theme = HeatmapThemeHelper.GetCurrentHeatmapTheme(NavigationManager.Uri);
        AxisLabelColor = (Theme.ToString().IndexOf("Dark") > -1 || Theme.ToString().IndexOf("HighContrast") > -1) ? "#FFFFFF" : "#000000";
        if (SampleService != null && SampleService.IsDevice)
        {
            IsShowLabel = false;
        }
        else
        {
            IsShowLabel = true;
        }
    }
}
