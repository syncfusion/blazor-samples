@namespace BlazorDemos.Shared

@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@if (IsMobile)
{
 <div @onclick="OnDevicePreferenceClick" style="height:100%">
    <div class="sb-left-pane-header">
        <div class="sf-preferences-header">Preferences</div>
    </div>
    <div class='sf-preferences-item sf-preference-mode'>
                <div class='sf-preference-label'>
                    <div class='sb-icons sf-preference-icons'></div>
                    <div class='sf-preference-text'>Mode Selection</div>
                </div>
                <div class='sf-preference-btn-group'>
                    <div role="button" tabindex="0" class="@touchClass" @onclick="@OnTouchClick" title="Increased padding for actionable items to accommodate user touches">Touch</div>
                    <div role="button" tabindex="0" class="@mouseClass" @onclick="@OnMouseClick" title="Default control sizes, optimized for use with mouse">Mouse</div>
                </div>
    </div>
    <div class="sf-preferences-item sf-preference-theme-section">
        <div class='sf-preference-label'>
            <div class="sb-icons sf-preference-icons"></div>
            <div class="sf-preference-text">Theme Selection</div>
        </div>
            @{
                var themeName = SampleUtils.GetThemeName(UriHelper.Uri);
                if (themeName != "fluent2-highcontrast")
                {
                    var themeParts = themeName.Split("-");
                    themeName = themeParts[0];
                }
            var selectedTheme = SampleUtils.ThemeData.Where(item => item.ID == themeName).ToList();
            var currentTheme = SampleUtils.ThemeData.First().Text;
            if (selectedTheme.Any())
            {
                currentTheme = selectedTheme.First().Text;
            }
        }
    <div class="sf-theme-dropdown">
        <DropDownComponent @ref="ThemeDropDownRefForMobile" DataSource="@SampleUtils.ThemeData" Value="@currentTheme" OnSelect="OnThemeChange"></DropDownComponent>
    </div>
    </div>

    @{
     if (!UriHelper.Uri.Contains("highcontrast") && !UriHelper.Uri.Contains("bootstrap4"))
       { 
         <div class="sf-preferences-item sf-preference-theme-section">
           
             <div class='sf-preference-label'>

                <div style="padding-right: 14px;font-size: 18px !important;">
                    <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                         <path d="M7 8.90909C7.5303 8.90909 7.98106 8.72348 8.35227 8.35227C8.72348 7.98106 8.90909 7.5303 8.90909 7C8.90909 6.4697 8.72348 6.01894 8.35227 5.64773C7.98106 5.27652 7.5303 5.09091 7 5.09091C6.4697 5.09091 6.01894 5.27652 5.64773 5.64773C5.27652 6.01894 5.09091 6.4697 5.09091 7C5.09091 7.5303 5.27652 7.98106 5.64773 8.35227C6.01894 8.72348 6.4697 8.90909 7 8.90909ZM7 10.1818C6.1197 10.1818 5.36932 9.87159 4.74886 9.25114C4.12841 8.63068 3.81818 7.8803 3.81818 7C3.81818 6.1197 4.12841 5.36932 4.74886 4.74886C5.36932 4.12841 6.1197 3.81818 7 3.81818C7.8803 3.81818 8.63068 4.12841 9.25114 4.74886C9.87159 5.36932 10.1818 6.1197 10.1818 7C10.1818 7.8803 9.87159 8.63068 9.25114 9.25114C8.63068 9.87159 7.8803 10.1818 7 10.1818ZM2.54545 7.63636H0V6.36364H2.54545V7.63636ZM14 7.63636H11.4545V6.36364H14V7.63636ZM6.36364 2.54545V0H7.63636V2.54545H6.36364ZM6.36364 14V11.4545H7.63636V14H6.36364ZM3.43636 4.29545L1.82955 2.75227L2.73636 1.81364L4.26364 3.40455L3.43636 4.29545ZM11.2636 12.1864L9.72045 10.5795L10.5636 9.70455L12.1705 11.2477L11.2636 12.1864ZM9.70455 3.43636L11.2477 1.82955L12.1864 2.73636L10.5955 4.26364L9.70455 3.43636ZM1.81364 11.2636L3.42045 9.72045L4.29545 10.5636L2.75227 12.1705L1.81364 11.2636Z" fill="#9e9e9e" fill-opacity="1" />
                    </svg>

                </div>

                <div class="sf-preference-text">Theme Modes</div>
                 
             </div>
            
            @{
                var themeMode = SampleUtils.GetThemeMode(UriHelper.Uri);
                var selectedMode = SampleUtils.ThemeMode.Where(item => item.Text == themeMode).ToList();
                var currentMode = SampleUtils.ThemeMode.First().Text;
                if (selectedMode.Any())
                {
                    currentMode = selectedMode.First().Text;
                }
             }
             <div class="sf-theme-mode-dropdown">
                 <DropDownComponent @ref="ThemeModeRefForMobile" DataSource="@SampleUtils.ThemeMode" Value="@currentMode" OnSelect="OnModeChange"></DropDownComponent>
             </div>
                
         </div>
         }
    }  
    <div class='sf-preferences-item sf-preference-culture'>
        <div class='sf-preference-label'>
            <div class='sb-icons sf-preference-icons'></div>
            <div class='sf-preference-text'>Localization</div>
        </div>
            <div class="sf-culture-dropdown">
            <CultureSwitcher @ref="cultureRef" />
        </div>
    </div>
</div>
}
else
{
    <div class='@popupClass' @onclick="@OnPreferenceClick" @onfocusout="@ClosePopup" tabindex="0">
        <div class='sf-preferences-header'>
            <span>Preferences</span>
        </div>
        <div class='sf-preferences-content'>
            <div class='sf-preferences-item sf-preference-responsive'>
                <div class='sf-preference-label'>
                    <div class='sb-icons sf-preference-icons'></div>
                    <div class='sf-preference-text'>Mode Selection</div>
                </div>
                <div class='sf-preference-btn-group'>
                    <div role="button" tabindex="0" class="@touchClass" @onclick="@OnTouchClick" title="Increased padding for actionable items to accommodate user touches">Touch</div>
                    <div role="button" tabindex="0" class="@mouseClass" @onclick="@OnMouseClick" title="Default control sizes, optimized for use with mouse">Mouse</div>
                </div>
            </div>
             <div class='sf-preferences-item sf-preference-culture'>
                <div class='sf-preference-label'>
                    <div class='sb-icons sf-preference-icons'></div>
                    <div class='sf-preference-text'>Localization</div>
                </div>
                <div>
                    <CultureSwitcher @ref="cultureRef" />
                </div>
            </div>
            <div class="sf-preference-translate">
                <span>*Translated by Google Translator.</span>
            </div>
        </div>
    </div>
}


@code {
    private string? touchClass { get; set; }
    private string? mouseClass { get; set; }
    private string? popupClass { get; set; }
    private bool isPopupClicked { get; set; }
    private CultureSwitcher? cultureRef { get; set; }
    private DropDownComponent? ThemeDropDownRefForMobile { get; set; }
    private DropDownComponent? ThemeModeRefForMobile { get; set; }

    /// <summary>
    /// Specifies the rendering mode of preferences.
    /// </summary>
    [Parameter]
    public bool IsMobile { get; set; }

    // Preference popup click handler for mobile.
    public void OnDevicePreferenceClick()
    {
        HideDevicePopup();
    }

    // Touch mode click handler.
    private async Task OnTouchClick()
    {
        touchClass = SampleUtils.AddClass(touchClass ?? "", SampleUtils.ACTIVE_CLASS);
        mouseClass = SampleUtils.RemoveClass(mouseClass ?? "", SampleUtils.ACTIVE_CLASS);
        await SetBiggerSizeAsync(true, true);
    }

    // Mouse mode click handler.
    private async Task OnMouseClick()
    {
        mouseClass = SampleUtils.AddClass(mouseClass ?? "", SampleUtils.ACTIVE_CLASS);
        touchClass = SampleUtils.RemoveClass(touchClass ?? "", SampleUtils.ACTIVE_CLASS);
        await SetBiggerSizeAsync(false);
    }

    // set e-bigger class to the body based on mouse/touch selection
    public async Task SetBiggerSizeAsync(bool isTouch, bool isTouchReload = false)
    {
        var isMouseMode = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.containsTouchModeClass");
        if (isTouch)
        {
            if (!isMouseMode)
            {
                await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.addTouchModeClass");
                await this.JsRuntime.InvokeVoidAsync("localStorage.setItem", "sfPreferenceMode", "touch");
                if (isTouchReload)
                {
                    UriHelper.Refresh(true);
                }
            }
        }
        else
        {
            if (isMouseMode)
            {
                await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.removeTouchModeClass");
                await this.JsRuntime.InvokeVoidAsync("localStorage.setItem", "sfPreferenceMode", "mouse");
                UriHelper.Refresh(true);
            }
        }
    }

    // returns the preferences mode.
    public async Task<string> GetPreferenceModeAsync()
    {
        var mode = await this.JsRuntime.InvokeAsync<string>("localStorage.getItem", "sfPreferenceMode");
        bool screenAvailWidth = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isScreenWide");
        var isTouchMode = String.IsNullOrEmpty(mode) && screenAvailWidth;
        var isDeviceMode = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isDeviceMode");
        if (isTouchMode || isDeviceMode || (!String.IsNullOrEmpty(mode) && mode != "mouse"))
        {
            mode = "touch";
            await SetBiggerSizeAsync(true, false);
        }
        mode = String.IsNullOrEmpty(mode) ? "mouse" : mode;
        return mode;
    }

    // Preference popup click handler.
    private void OnPreferenceClick()
    {
        isPopupClicked = true;
    }

    // Onfocusout event handler.
    private void ClosePopup()
    {
        isPopupClicked = false;
    }

    // Theme switcher handler for devices
    private void OnThemeChange(DropDownData args)
    {
        var currentTheme = SampleUtils.GetThemeName(UriHelper.Uri);
        var themeModeCheck = currentTheme;
        if (currentTheme.Contains("-dark"))
        {
            currentTheme = currentTheme.Replace("-dark", "");
        }
        if (currentTheme != args.ID)
        {
            var url = SampleUtils.GetThemeUrl(UriHelper, args?.ID ?? "");
            // Check if the current theme contains "dark"
            if (themeModeCheck.Contains("dark") && args?.ID != "highcontrast" && args?.ID != "fluent2-highcontrast" && args?.ID != "bootstrap4")
            {
                // Append "-dark" to the URL
                url += "-dark";
            }
            UriHelper.NavigateTo(url, true);
        }
    }
    // Mode switcher handler for devices
    private void OnModeChange(DropDownData args)
    {
        var currentURL = UriHelper.Uri;
        var themeName = SampleUtils.GetThemeName(UriHelper.Uri);
        string themeParameter = "fluent2";
        // Check if the URL already contains a query string
        if (!currentURL.Contains("?"))
        {
            // URL does not contain a query string
            // Add the theme parameter with "?" prefix
            currentURL += $"?theme={themeParameter}";
        }
        string updatedURL = ""; 
            if (!currentURL.Contains("-dark"))
            {
                // Append "-dark" to the current URL
                updatedURL = currentURL;
            }
            else if (currentURL.Contains("-dark"))
            {
                // Remove "-dark" from the current URL
                updatedURL = currentURL.Replace("-dark", "");
            }
            if (args.ID == "dark")
            {
                updatedURL += "-dark";
            }
            UriHelper.NavigateTo(updatedURL, true);    
    }
    
    /// <summary>
    /// Show or hide the preferences popup element.
    /// </summary>
    /// <param name="isOpen">Specifies the bool value to show or hide popup element.</param>
    public void ShowPopup(bool isOpen = true)
    {
        if (isOpen)
        {
            popupClass = SampleUtils.RemoveClass(popupClass ?? "", SampleUtils.DISPLAY_NONE);
        }
        else
        {
            popupClass = SampleUtils.AddClass(popupClass ?? "", SampleUtils.DISPLAY_NONE);
            if (cultureRef?.DropDownRef != null && cultureRef.DropDownRef.isthemepopupopen)
            {
                cultureRef.DropDownRef.popupClass = SampleUtils.AddClass(cultureRef.DropDownRef.popupClass ?? "", SampleUtils.DISPLAY_NONE);
                cultureRef.DropDownRef.Refresh();
                cultureRef.DropDownRef.isthemepopupopen = false;
            }
        }
        StateHasChanged();
    }

    public void HideDevicePopup()
    {
        if ( cultureRef?.DropDownRef != null && !cultureRef.DropDownRef.isthemepopupopen)
        {
            cultureRef.DropDownRef.popupClass = SampleUtils.AddClass(cultureRef.DropDownRef.popupClass ?? "", SampleUtils.DISPLAY_NONE);
            cultureRef.DropDownRef.Refresh();
        }
        if (ThemeDropDownRefForMobile!= null && !ThemeDropDownRefForMobile.isthemepopupopen)
        {
            ThemeDropDownRefForMobile.popupClass = SampleUtils.AddClass(ThemeDropDownRefForMobile.popupClass ?? "", SampleUtils.DISPLAY_NONE);
            ThemeDropDownRefForMobile.Refresh();
        }
        if (ThemeModeRefForMobile != null && !ThemeModeRefForMobile.isthemepopupopen)
        {
            ThemeModeRefForMobile.popupClass = SampleUtils.AddClass(ThemeModeRefForMobile.popupClass ?? "", SampleUtils.DISPLAY_NONE);
            ThemeModeRefForMobile.Refresh();
        }
    }

    /// <summary>
    /// Returns bool value for the popup click action.
    /// </summary>
    public bool IsPopupClicked()
    {
        return isPopupClicked;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        touchClass = SampleUtils.PREFERENCES_TOUCH;
        mouseClass = SampleUtils.PREFERENCES_MOUSE + SampleUtils.SPACE + SampleUtils.ACTIVE_CLASS;
        popupClass = SampleUtils.PREFERENCES_POPUP_CLASS + SampleUtils.SPACE + SampleUtils.DISPLAY_NONE;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
#if !(WASM)
        // In WASM SB, this property always getting false due to async operation.
        isPopupClicked = false;
#endif
        if (firstRender)
        {
            var preferenceMode = await GetPreferenceModeAsync();
            // Set touch button as default for higher resolution displays.
            if (preferenceMode != SampleUtils.DEFAULT_MODE)
            {
                touchClass = SampleUtils.AddClass(touchClass ?? "", SampleUtils.ACTIVE_CLASS);
                mouseClass = SampleUtils.RemoveClass(mouseClass ?? "", SampleUtils.ACTIVE_CLASS);
                StateHasChanged();
            }
        }
        if (this.IsMobile)
        {
            if (cultureRef?.DropDownRef != null && cultureRef.DropDownRef.isthemepopupopen)
            {
                cultureRef.DropDownRef.isthemepopupopen = false;
            }
            if (ThemeDropDownRefForMobile != null && ThemeDropDownRefForMobile.isthemepopupopen)
            {
                ThemeDropDownRefForMobile.isthemepopupopen = false;
            }
            if (ThemeModeRefForMobile != null && ThemeModeRefForMobile.isthemepopupopen)
            {
                ThemeModeRefForMobile.isthemepopupopen = false;
            }
        }
    }
}
