@namespace BlazorDemos.Shared

@inject IJSRuntime JsRuntime;

<div class="sf-dropdown-container">
    <div class="sf-dropdown-input-container" tabindex="0" @onclick="@OnInputClick">
        <input @ref="inputElement" @bind="Value" class="sf-dropdown-input" aria-label="Culture Switcher" readonly="readonly" tabindex="0"/>
        <span class="sb-icons sf-dropdown-icon" role="presentation"></span>
    </div>
    <div class="@popupClass">
        <ul class="@SampleUtils.LIST_UL_CLASS">
            @foreach (var item in DataSource ?? new List<DropDownData>())
            {
                var liClass = SampleUtils.LIST_LI_CLASS;
                if (item.Text == Value)
                {
                    liClass = SampleUtils.AddClass(liClass, SampleUtils.ACTIVE_CLASS);
                }
                <li class="@liClass" @onclick="@(async () => { await OnItemSelect(item); })">
                    @if (ItemTemplate != null)
                    {
                        @ItemTemplate(item);
                    }
                    else
                    {
                        <span>@item.Text</span>
                    }
                </li>
            }
        </ul>
        <div class="sb-theme-studio">
            <a target='_blank' href="https://blazor.syncfusion.com/themestudio/?theme=material" aria-label="Go to Theme Studio">Go to Theme Studio</a>
        </div>
    </div>
</div>

@code {
    public string? popupClass { get; set; }
    private ElementReference inputElement { get; set; }
    public bool isthemepopupopen { get; set; }
    public bool isdemopopupopen { get; set; }
    public bool issampledemopopup { get; set; }

    /// <summary>
    /// ChildContent of DropDownComponent.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Specifies the DataSource of DropDown component.
    /// </summary>
    [Parameter]
    public List<DropDownData>? DataSource { get; set; }

    /// <summary>
    /// Specifies the value to be set in the input element.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    /// <summary>
    /// Specifies the static default value to the input element.
    /// </summary>
    [Parameter]
    public string? DefaultValue { get; set; }

    /// <summary>
    /// Specifies the custom item template to be render in the list element.
    /// </summary>
    [Parameter]
    public RenderFragment<DropDownData>? ItemTemplate { get; set; }

    /// <summary>
    /// Triggers the event on item selection.
    /// </summary>
    [Parameter]
    public EventCallback<DropDownData> OnSelect { get; set; }

    // Input container click event handler.
    private void OnInputClick()
    {
        if (popupClass != null && popupClass.Contains(BlazorDemos.Shared.SampleUtils.DISPLAY_NONE))
        {
            popupClass = SampleUtils.RemoveClass(popupClass, SampleUtils.DISPLAY_NONE);
            isthemepopupopen = true;
            isdemopopupopen = true;
            issampledemopopup = true;
        }
        else
        {
            popupClass = SampleUtils.AddClass(popupClass ?? "", SampleUtils.DISPLAY_NONE);
        }

    }

    // Icon click event handler.
    private async Task OnIconClick()
    {
        await JsRuntime.InvokeVoidAsync("sfBlazorSB.inputFocus", inputElement);
    }

    // Input blur event handler.
    private async Task OnInputBlur()
    {
        // Await the popup hide process for dropdown selection.
        await Task.Delay(200);
        popupClass = SampleUtils.AddClass(popupClass ?? "", SampleUtils.DISPLAY_NONE);
    }

    // Item selection event handler.
    private async Task OnItemSelect(DropDownData args)
    {
        if (OnSelect.HasDelegate)
        {
            await OnSelect.InvokeAsync(args);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Value == null && DataSource != null && DataSource.Any())
        {
            Value = DataSource.First().Text;
        }
        popupClass = SampleUtils.DROPDOWN_POPUP + SampleUtils.SPACE + SampleUtils.DISPLAY_NONE;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (DefaultValue != null)
        {
            Value = DefaultValue;
        }
    }

    /// <summary>
    /// Re-rendering the component to notify it's state has been changed.
    /// </summary>
    internal void Refresh()
    {
        StateHasChanged();
    }
}
