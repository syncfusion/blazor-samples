@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Buttons;

@namespace BlazorDemos.Shared

@inject SampleService SampleService;
@inject NavigationManager UriHelper;
@inject IJSRuntime JsRuntime;

@if (SampleService.IsDevice && DeviceMode)
{
    <div class='sb-mobile-footer e-view sample-navigation' id='mobile-footer'>
        <SfButton ID="mobile-prev-sample" Disabled="@isFirstSample" IsPrimary="true" Class="@PREV_CLASS" OnClick="OnPrevClick">PREVIOUS</SfButton>
        <SfButton ID="mobile-next-sample" Disabled="@isLastSample" IsPrimary="true" Class="@NEXT_CLASS" OnClick="OnNextClick">NEXT</SfButton>
    </div>
}
else if (isDesktop)
{
<div id="navigation-btn">
    <SfTooltip OpensOn="Hover" ID="next-tooltip" Content="Next Sample" @ref="NextTooltipRef" Target=".sb-icon-next" Position="Position.BottomCenter">
        <SfButton ID="next-sample" Disabled="@isLastSample" IsPrimary="true" IconCss="@NEXT_ICON" role="button" aria-label="Next Sample" OnClick="OnNextClick"></SfButton>
    </SfTooltip>
    <SfTooltip OpensOn="Hover" ID="prev-tooltip" Content="Previous Sample" @ref="PrevTooltipRef" Target=".sb-icon-previous" Position="Position.BottomCenter">
        <SfButton ID="prev-sample" Disabled="@isFirstSample" IsPrimary="true" IconCss="@PREV_ICON" role="button" aria-label="Previous Sample" OnClick="OnPrevClick"></SfButton>
    </SfTooltip>
</div>
}


@code {
    const string NEXT_ICON = "sb-icons sb-icon-next";
    const string PREV_ICON = "sb-icons sb-icon-previous";

    private string PREV_CLASS = "e-flat sb-navigation-prev sb-left";
    private string NEXT_CLASS = "e-flat sb-navigation-next sb-right";
    private bool isDesktop { get; set; }
    private bool isFirstSample { get; set; }
    private bool isLastSample { get; set; }
    public bool isNavigated { get; set; }

    protected SfTooltip? NextTooltipRef { get; set; }
    protected SfTooltip? PrevTooltipRef { get; set; }

    /// <summary>
    /// Specifies the device mode for rendering logic.
    /// </summary>
    [Parameter]
    public bool DeviceMode { get; set; } = true;

    [CascadingParameter]
    protected MainLayout? Layout { get; set; }

    private int GetSampleIndex()
    {
        return SampleBrowser.SampleUrls.IndexOf(SampleService?.SampleInfo?.Url?.ToLower() ?? "");
    }

    /// <summary>
    /// Refresh the first and last button state based on the input.
    /// </summary>
    /// <param name="url">Current url need to be check whether it is first or last sample.</param>
    /// <param name="isStateChanged">Force re-render a component for disable the sample navigator.</param>
    public void RefreshState(string url, bool isStateChanged = false)
    {
        isFirstSample = SampleService.FirstSampleUrl == url;
        isLastSample = SampleService.LastSampleUrl == url;
        if (isFirstSample)
        {
            NEXT_CLASS = SampleUtils.AddClass(NEXT_CLASS, SampleUtils.ACTIVE_CLASS);
            PREV_CLASS = SampleUtils.RemoveClass(PREV_CLASS, SampleUtils.ACTIVE_CLASS);
        }
        if (isLastSample) {
            PREV_CLASS = SampleUtils.AddClass(PREV_CLASS, SampleUtils.ACTIVE_CLASS);
            NEXT_CLASS = SampleUtils.RemoveClass(NEXT_CLASS, SampleUtils.ACTIVE_CLASS);
        }
        if (isStateChanged && (isFirstSample || isLastSample))
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// Re-render the sample navigator for desktop mode.
    /// </summary>
    /// <param name="isDevice">A bool value to validate whether it is device or desktop.</param>
    public void Rerender(bool isDevice, bool isTablet)
    {
        this.isDesktop = isTablet ? isTablet : !isDevice;
        JsRuntime.InvokeVoidAsync("ScrollToSelected");
        StateHasChanged();
    }

    // Previous sample navigator click handler.
    private void OnPrevClick()
    {
        isNavigated = true;
        PrevTooltipRef?.CloseAsync();
        var sampleIndex = GetSampleIndex();
        PREV_CLASS = SampleUtils.AddClass(PREV_CLASS, SampleUtils.ACTIVE_CLASS);
        NEXT_CLASS = SampleUtils.RemoveClass(NEXT_CLASS, SampleUtils.ACTIVE_CLASS);
        if (sampleIndex > 0)
        {
            var themeName = SampleUtils.GetThemeName(UriHelper.Uri);
            var prevSample = SampleBrowser.SampleUrls[sampleIndex - 1];
            //Load dynamic script for Pdfviewer,Diagram and Document editor component
            LoadResources(prevSample);
        }
    }

    // Next sample navigator click handler.
    private void OnNextClick()
    {
        isNavigated = true;
        NextTooltipRef?.CloseAsync();
        var sampleIndex = GetSampleIndex();
        NEXT_CLASS = SampleUtils.AddClass(NEXT_CLASS, SampleUtils.ACTIVE_CLASS);
        PREV_CLASS = SampleUtils.RemoveClass(PREV_CLASS, SampleUtils.ACTIVE_CLASS);
        var themeName = SampleUtils.GetThemeName(UriHelper.Uri);
        var nextSample = SampleBrowser.SampleUrls[sampleIndex + 1];
        //Load dynamic script for Pdfviewer,Diagram and Document editor component
        LoadResources(nextSample);
    }

    //Load dynamic styles and script for components
    private void LoadResources(string currentUrl)
    {
        var themeName = SampleUtils.GetThemeName(UriHelper.Uri);
#if WASM
        var splittedUrl = currentUrl.Split("/");
        var ComponentName = splittedUrl[splittedUrl.Length - 2];
        var controlIfo = SampleBrowser.SampleList.First<SampleList>(control => control.ControllerName.ToLower().Equals(ComponentName.Replace("-", string.Empty)));
        if (controlIfo.Name.Equals("Word Processor") || controlIfo.Name.Equals("PDF Viewer") || controlIfo.Name.Equals("Diagram") || controlIfo.Name.Equals("Spreadsheet"))
        {
            Layout.LeftPaneRef.NavMenuRef.LoadScripts(controlIfo.Name);
        }
#endif
        this.RefreshState(currentUrl);
        if (themeName != null)
        {
            currentUrl = UriHelper.GetUriWithQueryParameters(currentUrl, new Dictionary<string, object?>
            {
                    ["theme"] = themeName
            });
        }
#if WASM
        UriHelper.NavigateTo(currentUrl);
#else
        UriHelper.NavigateTo(currentUrl, true);
#endif
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SampleService.FirstSampleUrl = SampleBrowser.SampleList.First().Samples.First().Url;
        SampleService.LastSampleUrl = SampleBrowser.SampleList.Last().Samples.Last().Url;
        isFirstSample = SampleService.FirstSampleUrl == SampleService.SampleInfo?.Url;
        isLastSample = SampleService.LastSampleUrl == SampleService.SampleInfo?.Url;
        NEXT_CLASS = SampleUtils.AddClass(NEXT_CLASS,SampleUtils.ACTIVE_CLASS);
    }

}
