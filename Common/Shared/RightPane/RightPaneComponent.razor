@using Syncfusion.Blazor.Navigations;

@namespace BlazorDemos.Shared

@inject NavigationManager UriHelper;
@inject SampleService SampleService;

<div class="@rootClass" id='right-pane' role="main">
    <div class='sb-desktop-wrapper'>
        <BreadCrumbComponent @ref="BreadCrumbRef"></BreadCrumbComponent>
        <SampleDescription @ref="SampleDescriptionRef" Visible="true">
            @sampleDescription
        </SampleDescription>
        <div id="sb-content" class='sb-content-section'>
            <SampleNavigator @ref="SampleNavigatorRef" DeviceMode="false"></SampleNavigator>
            <div class='sb-toolbar-splitter sb-custom-item'></div>
@{#if SERVER}
            @if (EnableLazyLoad)
            {
            <!-- LoadOn Value Changed due to Source Tab header text value not updated properly issue -->
            <SfTab CssClass='sb-content-tab' id='content-tab' LoadOn="ContentLoad.Dynamic" @bind-SelectedItem="tabSelectedItem" ShouldReinitialize="true">
                <TabEvents Selecting="OnSourceTabSelecting" Selected="OnSourceTabSelected"></TabEvents>
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="DEMO" IconCss="sb-icons sb-icon-demo"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div>
                                <div class='sb-demo-section'>
                                    <div class="control-fluid">
                                        <div class="container-fluid">
                                            <div id="control-content">
                                                @ChildContent
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="SOURCE" IconCss="sb-icons sb-icon-code"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div>
                                <SourceCodeComponent @ref="SourceCodeRef"></SourceCodeComponent>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
			}
            else
            {
                <div style="position: relative; height: 560px; width: 104%;">
                    <SpinnerComponent CssClass="lazy-loading-placeholder"></SpinnerComponent>
                </div>
                <style>
                    @@media (max-width: 767px) {
                        .lazy-loading-placeholder {
                            display: block;
                        }

                        .sb-right-pane {
                            height: 100%;
                        }
                    }

                    @@media (min-width: 768px) {
                        .lazy-loading-placeholder {
                            display: none;
                        }
                    }
                </style>
            }
@{#else}
        <!-- LoadOn Value Changed due to Source Tab header text value not updated properly issue -->
        <SfTab CssClass='sb-content-tab' id='content-tab' LoadOn="ContentLoad.Dynamic" @bind-SelectedItem="tabSelectedItem" ShouldReinitialize="true">
            <TabEvents Selecting="OnSourceTabSelecting" Selected="OnSourceTabSelected"></TabEvents>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="DEMO" IconCss="sb-icons sb-icon-demo"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <div class='sb-demo-section'>
                                <div class="control-fluid">
                                    <div class="container-fluid">
                                        <div id="control-content">
                                            @ChildContent
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="SOURCE" IconCss="sb-icons sb-icon-code"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <SourceCodeComponent @ref="SourceCodeRef"></SourceCodeComponent>
                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
@{#endif}
        </div>
        <ActionDescription @ref="ActionDescriptionRef" Visible="true">
            @actionDescription
        </ActionDescription>
        <AdStripComponent />
        <FooterComponent @ref="FooterRef" />
    </div>
</div>
@code {
    private int tabSelectedItem { get; set; }
    private RenderFragment? actionDescription { get; set; }
    private RenderFragment? sampleDescription { get; set; }
    private string rootClass = "sb-right-pane e-view " + SampleUtils.RIGHT_PANE;

    protected SourceCodeComponent? SourceCodeRef { get; set; }
    protected ActionDescription? ActionDescriptionRef { get; set; }
    protected SampleDescription? SampleDescriptionRef { get; set; }

    [CascadingParameter]
    protected MainLayout? Layout { get; set; }

#if SERVER
    [CascadingParameter(Name = "EnableLazyLoad")]
    private bool EnableLazyLoad { get; set; }
#endif

    /// <summary>
    /// Footer reference for outside usage.
    /// </summary>
    public FooterComponent? FooterRef { get; set; }

    /// <summary>
    /// BreadCrumb reference for outside usage.
    /// </summary>
    public BreadCrumbComponent? BreadCrumbRef { get; set; }

    /// <summary>
    /// SampleNavigator reference for outside usage.
    /// </summary>
    public SampleNavigator? SampleNavigatorRef { get; set; }

    /// <summary>
    /// Child content of RightPane component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Refresh action description for current sample.
    /// </summary>
    public void RefreshActionDescription(RenderFragment description)
    {
        actionDescription = description;
        ActionDescriptionRef?.Refresh();
    }

    /// <summary>
    /// Refresh sample description for current sample.
    /// </summary>
    public void RefreshSampleDescription(RenderFragment description)
    {
        SampleService.Update(UriHelper);
        var componentName = SampleService?.SampleInfo?.Directory == "Buttons/Button" ? "Button" : SampleService?.ComponentName;
        if(componentName != null) BreadCrumbRef?.Refresh(componentName, SampleService?.SampleInfo?.Category ?? "", SampleService?.SampleInfo?.Name ?? "");
        sampleDescription = description;
        SampleDescriptionRef?.Refresh();
    }

    /// <summary>
    /// Re-render the source code tab with first indexed tab item.
    /// </summary>
    public void TabSelectedItemChange()
    {
        this.tabSelectedItem = 0;
        StateHasChanged();
    }

    // Source tab selecting handler.
    private void OnSourceTabSelecting(Syncfusion.Blazor.Navigations.SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }

    // Source tab selected handler.
    private async Task OnSourceTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        if (this.SourceCodeRef != null)
        {
            await this.SourceCodeRef.OnSourceTabSelected(args);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SampleNavigatorRef?.RefreshState(SampleService?.SampleInfo?.Url ?? "",true);
        }
        if (SampleNavigatorRef != null && SampleNavigatorRef.isNavigated)
        {
            TabSelectedItemChange();
            SampleNavigatorRef.isNavigated = false;
            Layout?.LeftPaneRef?.NavMenuRef?.SelectItem(SampleService?.SampleInfo ?? new Sample());
        }
        FooterRef?.Refresh();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Expand or collapse right pane based on the condition.
        RightPaneExpandCollapse();
    }

    public void RightPaneExpandCollapse()
    {
        if (this.Layout?.LeftPaneRef == null || this.Layout.LeftPaneRef.IsExpanded())
        {
            this.rootClass = SampleUtils.RemoveClass(rootClass, SampleUtils.RIGHT_PANE_EXPAND);
            this.rootClass = SampleUtils.AddClass(rootClass, SampleUtils.RIGHT_PANE_COLLAPSE);
        }
        else
        {
            this.rootClass = SampleUtils.RemoveClass(rootClass, SampleUtils.RIGHT_PANE_COLLAPSE);
            this.rootClass = SampleUtils.AddClass(rootClass, SampleUtils.RIGHT_PANE_EXPAND);
        }
    }
}
