@namespace BlazorDemos.Shared
@implements IDisposable;
@using Syncfusion.Blazor.Popups

@inject NavigationManager UriHelper;
@inject SampleService SampleService;
@inject DeviceMode DeviceMode;
@inject IJSRuntime JsRuntime;

<TreeComponent @ref="TreeRef" DataSource="@TreeDataSource" OnNodeSelect="@OnComponentSelection">
    <TreeTemplate>
        <div>
            <span class="tree-text">@context.Name</span>
            @if (context.Type != SampleType.None)
            {
                <span class="e-badge sb-badge e-sample-status @(context.Type.ToString().ToLower()) tree tree-badge"></span>
            }
        </div>
    </TreeTemplate>
</TreeComponent>
<div class="@samplesClass">
    <div id="sb-left-all-components" class="back" role="button" tabindex="0" @onclick="@OnTreeNavigation">
        <div class="sb-icons sb-back-icon"></div>
        <div class='all-components'>All Components</div>
    </div>
    <ListComponent @ref="ListRef" DataSource="@ListDataSource" OnSelectList="OnSampleSelection">
        <Template>
            @{
                <div class="sf-text-content">
                    <span class="sf-list-text" role="button">@context.Name</span>
                    @if (@context.Type != SampleType.None)
                    {
                        <span class="e-badge sb-badge e-sample-status @(context.Type.ToString().ToLower())"></span>
                    }
                </div>
            }
        </Template>
        <GroupTemplate>
            @{
                <div class="sf-text-content" role="presentation">
                    <span class="sf-list-text" role="button">@context.Category</span>
                </div>
            }
        </GroupTemplate>
    </ListComponent>
</div>
@code {
    private bool isCurrentComponent { get; set; }
    private string samplesClass = "sb-component-samples";
    protected TreeComponent? TreeRef { get; set; }
    protected ListComponent? ListRef { get; set; }
    public bool isNavigate { get; set; }
    protected List<Sample>? ListDataSource { get; set; } = new List<Sample>();
    protected List<SampleListType>? TreeDataSource { get; set; } = new List<SampleListType>();

    [CascadingParameter]
    protected MainLayout? Layout { get; set; }

    // List to tree navigation handler.
    private void OnTreeNavigation()
    {   
        Layout?.CloseThemePrefPopups();
        // Hides list component and show tree component.
        samplesClass = SampleUtils.AddClass(samplesClass, SampleUtils.COMPONENTS_HIDE);
        JsRuntime.InvokeVoidAsync("ScrollToSelected");
        TreeRef?.ShowTree();
    }

    // List sample selection handler.
    private void OnSampleSelection(Sample item)
    {
        this.isCurrentComponent = true;
        // SampleService.Spinner.ShowModalSpinner();
        Layout?.RightPaneRef?.TabSelectedItemChange();
        Layout?.CollapseSideBar();
        var currentUrl = item?.Url?.ToLower();
        if (item?.Name != null)
        {
            if (item != null && item.Directory != null && item.Directory.StartsWith("Buttons"))
            {
                this.SelectTreeNode(item.Name); // No need for ?. since item is guaranteed non-null
            }
            if (item != null && item.Category != null && item.Directory != null && item.Directory.Contains("ColorPicker"))
            {
                if (item.Name.Equals("Inline Mode"))
                {
                    var controlIfo = SampleBrowser.SampleList.FirstOrDefault<SampleList>(control => control.DemoPath != null && control.DemoPath.ToLower().Equals(currentUrl));
                    if (controlIfo != null)
                    {
                        this.SelectTreeNode(controlIfo.Name ?? string.Empty);
                    }
                }
                else
                {
                    this.SelectTreeNode(item.Category);
                }
            }
        }
        if (currentUrl == null)
        {
            return;
        }
        RefreshSampleNavigator(currentUrl);

#if SERVER
#if DEBUG || STAGING
        this.NavigatePage(currentUrl);
#else
        var specialcaseSamples = new List<string>
        {
            "buttons/checkbox",
            "buttons/radio-button",
            "buttons/dropdown-menu",
            "buttons/split-button",
            "buttons/toggle-switch-button",
            "buttons/progress-button",
            "buttons/button-group",
            "buttons/keyboard-navigation"
        };

        bool isSpecialCase = specialcaseSamples.Any(sample => currentUrl.Contains(sample));

        if (isSpecialCase)
        {
            this.NavigatePage(currentUrl, true);
        }
        else
        {
            this.NavigatePage(currentUrl);
        }
#endif
#else
        this.NavigatePage(currentUrl);
#endif
    }

// Tree component selection handler.
#if WASM
    private async void OnComponentSelection(SampleListType nodeItem)
#else
    private void OnComponentSelection(SampleListType nodeItem)
#endif
    {
        this.isCurrentComponent = false;
        this.ListDataSource = nodeItem.Samples;

        //Load dynamic script for Pdfviewer,Diagram and Document editor component
#if WASM
    	await LoadScripts(nodeItem.Name);
#else
        // LoadDynamicResources(nodeItem.Name);
#endif

        // Hides tree component and show list component.
        TreeRef?.ShowTree(false);
        samplesClass = SampleUtils.RemoveClass(samplesClass, SampleUtils.COMPONENTS_HIDE);

        Sample? sampleItem;
        if (nodeItem.Category == "Buttons" || nodeItem.Category == "Inputs")
        {
            // Select specific button and color Palette sample.
            sampleItem = this.ListDataSource?.Where(sample => sample.Name == nodeItem.Name).FirstOrDefault();
        }
        else
        {
            // Select first item in list component.
            sampleItem = this.ListDataSource?.FirstOrDefault();
        }
        if (sampleItem != null) ListRef?.SelectItem(sampleItem);

        Layout?.RightPaneRef?.TabSelectedItemChange();
        Layout?.CollapseSideBar();
        if (nodeItem.Samples != null && nodeItem.DemoPath != null && nodeItem.Samples[0].IsHideInMobile && nodeItem.DemoPath.Equals(nodeItem.Samples[0].Url) && DeviceMode.Isdevice)
        {
            nodeItem.DemoPath = nodeItem.Samples[1].Url;
        }
        RefreshSampleNavigator(nodeItem.DemoPath ?? "");
#if SERVER
		this.NavigatePage(nodeItem.DemoPath ?? "", true);
#else
        this.NavigatePage(nodeItem.DemoPath);
#endif
    }

    //Load dynamic script for Pdfviewer and Document editor component
    // public void LoadDynamicResources(string componentName)
    // {
    //     if ((componentName.Equals("PDF Viewer") || componentName.Equals("PowerPoint (Presentation)")) && !SampleService.IsPdfScript2Loaded)
    //     {
    //         SampleService.IsPdfScript2Loaded = true;
    //         var resources = new List<string> { SampleService.PdfScriptPath2 + "/syncfusion-blazor-sfpdfviewer.min.js" };
    //         this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", resources);
    //     }
    //     if (componentName.Equals("Word Processor") && !SampleService.IsDocScriptLoaded)
    //     {
    //         SampleService.IsDocScriptLoaded = true;
    //         var resources = new List<string> { SampleService.DocScriptPath + "/syncfusion-blazor-documenteditor.min.js" };
    //         this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", resources);
    //     }
    //     if (componentName.Equals("Spreadsheet") && !SampleService.IsSpreadsheetScriptLoaded)
    //     {
    //         SampleService.IsSpreadsheetScriptLoaded = true;
    //         var resources = new List<string> { SampleService.SpreadsheetScriptPath + "/syncfusion-blazor-spreadsheet.min.js" };
    //         this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", resources);
    //     }
    // }

    // Handles query param and navigate to the Url.
    private void NavigatePage(string url, bool forceReload = false)
    {
        if (UriHelper.Uri.IndexOf("?") >= 0 && url.IndexOf("?") < 0)
        {
            string[] themeurl = UriHelper.Uri.Split("?");
            url += themeurl.Length > 0 ? "?" + themeurl[themeurl.Length - 1] : string.Empty;
        }
        else if (url.IndexOf("?") < 0)
        {
            url += "?theme=fluent2";
        }
        UriHelper.NavigateTo(url, forceReload);
        isNavigate = true;
    }

    // Refresh sample navigator button states for device and desktop.
    private void RefreshSampleNavigator(string url)
    {
        this.Layout?.SampleNavigatorRef?.RefreshState(url, true);
        this.Layout?.RightPaneRef?.SampleNavigatorRef?.RefreshState(url, true);
    }

    // Select tree node for the current sample.
    private void SelectTreeNode(string componentName, string demoPath = "")
    {
        if (TreeRef == null || TreeDataSource == null) { return; }
        foreach (var parentData in TreeDataSource)
        {
            var treeSelectedNode = parentData?.SourceData?.Where(data => data.Name == componentName && data.DemoPath == demoPath).ToList();
            if (treeSelectedNode?.Count > 0)
            {
                if (treeSelectedNode.Count > 1 && !string.IsNullOrEmpty(demoPath))
                {
                    this.TreeRef.SelectNode(treeSelectedNode.Where(data => data.DemoPath == demoPath).First());
                }
                else
                {
                    this.TreeRef.SelectNode(treeSelectedNode.First());
                }
                break;
            }
        }
    }

    // Returns samples list of the current component.
    private List<Sample> GetSampleDataSource()
    {
        var sampleData = this.ListDataSource;
        // Validate the selected sample is in the current list.
        if (!this.isCurrentComponent)
        {
            // Get the current uri to get the sample list.
            var currentUri = UriHelper.Uri.Replace(UriHelper.BaseUri, string.Empty);
            if (currentUri.Contains("?"))
            {
                currentUri = currentUri.Split("?")[0];
            }
            // Iterate and get the sample list from overall collections.
            foreach (var samplesInfo in SampleBrowser.SampleList)
            {
                var currentSample = samplesInfo.Samples.Where<Sample>(sample => sample?.Url?.ToLower() == currentUri.Trim('/')).ToList();
                if (currentSample.Count > 0)
                {
                    sampleData = samplesInfo.Samples;
                    // Select tree node for sample navigator.
                    if (TreeRef != null)
                    {
                        if (samplesInfo.Directory == "Buttons" || samplesInfo.Directory == "Inputs/ColorPicker")
                        {
                            this.SelectTreeNode(currentSample?.FirstOrDefault()?.Name ?? "");
                        }
                        else
                        {
                            this.SelectTreeNode(samplesInfo?.Name ?? "", samplesInfo?.DemoPath ?? "");
                        }
                    }
                    break;
                }
            }
        }
        return sampleData ?? new List<Sample>();
    }

    /// <summary>
    /// Set selection to the list component based on given item.
    /// </summary>
    /// <param name="item">Item that need to be selected.</param>
    public void SelectItem(Sample item)
    {
        var currentSample = this.ListDataSource?.Where(sample => sample.Url == item.Url).ToList();
        // Update list datasource when the current selected sample is not in the component source data.
        if (currentSample?.Count == 0)
        {
            this.isCurrentComponent = false;
            this.ListDataSource = GetSampleDataSource();
            StateHasChanged();
        }
        this.ListRef?.SelectItem(item);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Set the list datasource.
        this.ListDataSource = GetSampleDataSource();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            this.SelectTreeNode(SampleService.ComponentName ?? "", SampleService.CurrentSampleUrl ?? "");
        }
        else
        {
            this.isCurrentComponent = false;
        }
        SampleService.MetaData?.Refresh();
    }

        protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Call the JavaScript function to get the user agent
            string userAgent = await JsRuntime.InvokeAsync<string>("getUserAgent");
            SampleBrowser.SampleUrls.Clear();
#if SERVER
    await Task.Run(() =>
    {
#endif

            // Gets the tree datasource.
            this.TreeDataSource = SampleBrowser.SampleList.GroupBy(groupBy => groupBy.Category).Select(samples =>
            {
                List<SampleList> sampleItems = samples.ToList();
                List<SampleListType> childItems = new List<SampleListType>();
                List<List<Sample>> listData = new List<List<Sample>>();

                sampleItems.ForEach(item =>
            {
                if (GetDeviceMode(userAgent) == "Mobile" || GetDeviceMode(userAgent) == "Tablet")
                {
                    listData = item.Samples.Where(sample => !sample.IsHideInMobile).GroupBy(groupBy => groupBy.Category).Select(items => items.ToList()).ToList();
                }
                else
                {
                    listData = item.Samples.GroupBy(groupBy => groupBy.Category).Select(items => items.ToList()).ToList();
                }
                for (var i = 0; i < listData.Count; i++)
                {
                    for (var j = 0; j < listData[i].Count; j++)
                    {
                        if (!SampleBrowser.SampleUrls.Contains(listData[i][j]?.Url?.ToLower() ?? ""))
                        {
                            SampleBrowser.SampleUrls.Add(listData[i][j]?.Url?.ToLower() ?? "");
                        }
                    }
                }
                childItems.Add(new SampleListType() { Name = item.Name, Type = item.Type, Samples = item.Samples, Category = item.Category, DemoPath = item.DemoPath, InfoTooltip = item.InfoTooltip, IsHide = item.IsHide });
                // Update first sample information in the sample service.
                if (SampleService.SampleInfo == null)
                {
                    SampleService.Update(UriHelper);
                }
            });
                return new SampleListType() { SourceData = childItems, Name = sampleItems[0].Category };
            }).ToList<SampleListType>();
#if SERVER
    });
#endif
        }
    }

    public void Dispose()
    {
        ListDataSource = null;
        TreeDataSource = null;
    }

#if WASM
    //Load dynamic script for Standalone WASM Pdfviewer and Document editor Samples
    public async Task LoadScripts(string componentName)
    {

        // Load scripts based on the URL
        if (componentName.Equals("PDF Viewer") && !SampleService.IsPdfScript2Loaded)
        {
            // Load script for 'pdfviewer'
            SampleService.IsPdfScript2Loaded = true;
            await this.JsRuntime.InvokeVoidAsync("loadPdf2Script");
        }
        else if (componentName.Equals("Word Processor") && !SampleService.IsDocScriptLoaded)
        {
            // Load script for 'Word processor'
            SampleService.IsDocScriptLoaded = true;
            await this.JsRuntime.InvokeVoidAsync("loadWordScript");
        }
        else if (componentName.Equals("Spreadsheet") && !SampleService.IsSpreadsheetScriptLoaded)
        {
            // Load script for 'Spreadsheet'
            SampleService.IsSpreadsheetScriptLoaded = true;
            await this.JsRuntime.InvokeVoidAsync("loadSpreadsheetScript");
        }
    }
#endif

    public string GetDeviceMode(string userAgent)
    {
        if (SampleService.IsDevice && userAgent.Contains("Mobile") && !userAgent.Contains("iPad"))
        {
            return "Mobile";
        }
        else if ((SampleService.IsDevice && !userAgent.Contains("Mobile")) || userAgent.Contains("Tablet") || userAgent.Contains("iPad") || userAgent.Contains("Macintosh"))
        {
            return "Tablet";
        }
        else
        {
            return "Desktop";
        }
    }
}
