@using Syncfusion.Blazor;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing;
@using Syncfusion.Blazor.Buttons;

@using BlazorDemos.Shared;
@using System.Globalization;
@using System.Text.RegularExpressions;

@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject SampleService SampleService;
@inject DeviceMode DeviceMode;

@inherits LayoutComponentBase;
@implements IDisposable;
@{#if SERVER}
@attribute [StreamRendering]
@{#endif}

@{#if SERVER}
<CascadingValue Value="@this">
    <CascadingValue Value="enableLazyLoad" Name="EnableLazyLoad">
    <SpinnerComponent @ref="spinnerRef"></SpinnerComponent>
    @if (SampleUtils.IsHomePage(UriHelper))
    {
        foreach (var fileName in SampleBrowser.PreLoadFiles)
        {
            <link rel="preload" href="@fileName" as="font" type="font/woff2" crossorigin />
        }
    }

    @*Set empty layout to home page and components which have open in new window functionality.*@
    @{
        var isEmptyLayout = SampleService.SampleInfo != null && !UriHelper.Uri.Contains(SampleService.SampleInfo.Url) && SampleService.SampleInfo.MappingSampleName != null;
    }
    @if (SampleUtils.IsHomePage(UriHelper) || isEmptyLayout)
    {
        <CascadingValue Value="isDeviceMode" Name="IsDevice">
            <div>
                @Body
            </div>
        </CascadingValue>
    }
    else
    {
	    <div class="sample-browser e-view sf-new" @onclick="OnAppClick">
            <div class="sb-mobile-overlay sb-hide"></div>
            <HeaderComponent @ref="headerRef" OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick" HomeIconClick="@HomeIconClick" OnSearchRender="@OnSearchRender"></HeaderComponent>
            <div class="sb-content e-view">
                @if (enableLazyLoad)
                {
                <div class="@searchContainer">
                    <div class="index-search-container">
                        <SearchComponent @ref="@searchRef"></SearchComponent>
                    </div>
                </div>
                <LeftPaneComponent @ref="LeftPaneRef"></LeftPaneComponent>
                }
                <RightPaneComponent @ref="RightPaneRef">
                    @if (enableLazyLoad)
                    {
                        <ErrorBoundary @ref="errorBoundaryRef" Context="Exception">
                            <ChildContent>            
                                    @Body
                            </ChildContent>
                            <ErrorContent>
                                <div class="e-error-ui">
                                    <div class="e-error-content">
                                        <div class="e-error-ui-text">Try that again</div>
                                        <div class="e-error-text-ui">Page could not be loaded. Please try again later.</div>
                                        <div class="border p-4 text-danger">
                                            Error Type : @Exception.GetType() <br><br>
                                            Error Message : @Exception.Message <br><br>
                                            Error Stack Trace : @Exception.StackTrace <br><br>
                                            Error Base Exception : @Exception.GetBaseException() <br><br>
                                        </div>
                                        <div class="e-page-refresh">
                                            <SfButton CssClass="e-primary" OnClick="OnRefresh">Refresh the page</SfButton>
                                        </div>
                                    </div>
                                </div>
                            </ErrorContent>
                        </ErrorBoundary>
                    }
                </RightPaneComponent>
                @if (SampleService.IsDevice && enableLazyLoad)
                {
                    <SideBarComponent IsExpanded="@rightSidebarExpanded" Position="SidebarPlacement.Right">
                        <Preferences IsMobile="true"></Preferences>
                    </SideBarComponent>
                    <SampleNavigator @ref="SampleNavigatorRef"></SampleNavigator>
                }
            </div>
        </div>
    }
    </CascadingValue>
</CascadingValue>
@{#else}
<CascadingValue Value="@this">
    <SpinnerComponent @ref="spinnerRef"></SpinnerComponent>
    @if (SampleUtils.IsHomePage(UriHelper))
    {
        foreach (var fileName in SampleBrowser.PreLoadFiles)
        {
            <link rel="preload" href="@fileName" as="font" type="font/woff2" crossorigin />
        }
    }

    @*Set empty layout to home page and components which have open in new window functionality.*@
    @{
        var isEmptyLayout = SampleService.SampleInfo != null && !UriHelper.Uri.Contains(SampleService.SampleInfo.Url) && SampleService.SampleInfo.MappingSampleName != null;
    }
    @if (SampleUtils.IsHomePage(UriHelper) || isEmptyLayout)
    {
        <CascadingValue Value="isDeviceMode" Name="IsDevice">
            <div>
                @Body
            </div>
        </CascadingValue>
    }
    else
    {
        <div class="sample-browser e-view sf-new" @onclick="OnAppClick">
            <div class="sb-mobile-overlay sb-hide"></div>
            <HeaderComponent @ref="headerRef" OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick" HomeIconClick="@HomeIconClick" OnSearchRender="@OnSearchRender"></HeaderComponent>
            <div class="sb-content e-view">
                <div class="@searchContainer">
                    <div class="index-search-container">
                        <SearchComponent @ref="@searchRef"></SearchComponent>
                    </div>
                </div>
                <LeftPaneComponent @ref="LeftPaneRef"></LeftPaneComponent>
                <RightPaneComponent @ref="RightPaneRef">
                    <ErrorBoundary @ref="errorBoundaryRef" Context="Exception">
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent>
                            <div class="e-error-ui">
                                <div class="e-error-content">
                                    <div class="e-error-ui-text">Try that again</div>
                                    <div class="e-error-text-ui">Page could not be loaded. Please try again later.</div>
                                    <div class="border p-4 text-danger">
                                        Error Type : @Exception.GetType() <br><br>
                                        Error Message : @Exception.Message <br><br>
                                        Error Stack Trace : @Exception.StackTrace <br><br>
                                        Error Base Exception : @Exception.GetBaseException() <br><br>
                                    </div>
                                    <div class="e-page-refresh">
                                        <SfButton CssClass="e-primary" OnClick="OnRefresh">Refresh the page</SfButton>
                                    </div>
                                </div>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>
                </RightPaneComponent>
                @if (SampleService.IsDevice)
                {
                    <SideBarComponent IsExpanded="@rightSidebarExpanded" Position="SidebarPlacement.Right">
                        <Preferences IsMobile="true"></Preferences>
                    </SideBarComponent>
                    <SampleNavigator @ref="SampleNavigatorRef"></SampleNavigator>
                }
            </div>
        </div>
    }
</CascadingValue>
@{#endif}
<Syncfusion.Blazor.Popups.SfDialogProvider/>

@code {
    [Inject]
    protected SyncfusionBlazorService? SyncfusionService { get; set; }

    [Inject]
    private NavigationManager? navigationManager { get; set; }

    internal bool isDeviceMode { get; set; }
    private bool isSearchIconClick { get; set; }
    private string? searchContainer { get; set; }
    private bool rightSidebarExpanded { get; set; }
    public SpinnerComponent? spinnerRef { get; set; }
    private DotNetObjectReference<object>? dotnetObjectRef { get; set; }
    private SearchComponent? searchRef { get; set; }
    public HeaderComponent? headerRef { get; set; }
    private ErrorBoundary? errorBoundaryRef { get; set; }
#if SERVER
    private bool enableLazyLoad { get; set; }
#endif

    /// <summary>
    /// Specifies the app is rendering in tablet or not.
    /// </summary> 
    public bool isTablet { get; set; }

    /// <summary>
    /// LeftPane reference for outside usage.
    /// </summary>
    public LeftPaneComponent? LeftPaneRef { get; set; }
    /// <summary>
    /// RightPane reference for outside usage.
    /// </summary>
    public RightPaneComponent? RightPaneRef { get; set; }

    /// <summary>
    /// SampleNavigator reference for outside usage.
    /// </summary>
    public SampleNavigator? SampleNavigatorRef { get; set; }

    // Recover from the error state and handle the exception.
    protected override void OnParametersSet()
    {
        errorBoundaryRef?.Recover();
    }

    // Refresh the current page.
    private void OnRefresh()
    {
        UriHelper.NavigateTo(UriHelper.Uri, true);
    }

    // Left sidebar click handler
    private async Task OnToggleClick()
    {
        if(headerRef != null && headerRef.isNotifyClicked)
        {
            headerRef.NotifyClicked();
        }
        // Update left sidebar expand and collapse status
        this.LeftPaneRef?.UpdateExpandedState();
        // Collapse right sidebar if it is expanded
        if (SampleService.IsDevice && rightSidebarExpanded)
        {
            rightSidebarExpanded = !rightSidebarExpanded;
        }
        await JsRuntime.InvokeAsync<string>("callResizeEvent");
        await ShowSearchLayout();
        await HideToast();
    }

    // Right sidebar click handler
    private async Task OnRightToggleClick()
    {
        // Update right sidebar expand and collapse status
        rightSidebarExpanded = !rightSidebarExpanded;
        // Collapse left sidebar if it is expanded
        if (LeftPaneRef != null && LeftPaneRef.IsExpanded())
        {
            LeftPaneRef.UpdateExpandedState();
        }
        await ShowSearchLayout();
        if(headerRef != null && headerRef.isNotifyClicked)
        {
            headerRef.NotifyClicked();
        }
        await HideToast();
    }

    // Home icon click handler.
    private async Task HomeIconClick(){
        if (LeftPaneRef != null) await LeftPaneRef.HomeButtonClick();
        await HideToast();
    }

    // Search icon click handler.
    private async Task OnSearchRender()
    {
        await ShowSearchLayout(true);
        await HideToast();
    }

    // App click handler for collapse the sidebar components in device rendering.
    private async Task OnAppClick()
    {
        this.CollapseSideBar();
        if(headerRef == null) return;
        if (headerRef.dropdownRef != null && !headerRef.dropdownRef.isthemepopupopen)
        {
            headerRef.dropdownRef.popupClass = SampleUtils.AddClass(headerRef.dropdownRef.popupClass ?? "", SampleUtils.DISPLAY_NONE);
        }
        if (headerRef.dropdowndemoRef != null && !headerRef.dropdowndemoRef.issampledemopopup)
        {
            headerRef.dropdowndemoRef.popupClass = SampleUtils.AddClass(headerRef.dropdowndemoRef.popupClass ?? "", SampleUtils.DISPLAY_NONE);
        }
        if (headerRef.dropdownRef != null) { 
            headerRef.dropdownRef.isthemepopupopen = false;
        }
        if(headerRef.dropdowndemoRef != null) {
            headerRef.dropdowndemoRef.issampledemopopup = false;
        }
        headerRef.HidePreferences();
        if (searchRef != null && searchRef.IsFocusOut() && !isSearchIconClick)
        {
            // Await the search layout hide process for the search list selection.
            await Task.Delay(200);
            await ShowSearchLayout();
        }
        else
        {
            isSearchIconClick = false;
        }
        await HideToast();
    }

    // Location change event handler
    // private async void LocationChanged(object sender, LocationChangedEventArgs e)
    // {
    //     // Get dynamic resource list.
    //     var resources = SampleUtils.GetDynamicResources(UriHelper, SampleService);
    //     var jsResources = SampleUtils.GetDynamicJSResources(UriHelper, SampleService);

    //     if (resources.Count > 0)
    //     {
    //         await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", resources);
    //     }
    //     if (jsResources.Count > 0)
    //     {
    //         await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", jsResources);
    //     }
    // }

    /// <summary>
    /// Show search layout in the demos page.
    /// </summary>
    public async Task ShowSearchLayout(bool isIconClick = false, bool isEscPressed = false)
    {
        if (searchContainer != null)
        {
            if (isIconClick && searchContainer.Contains(SampleUtils.DISPLAY_NONE))
            {
                if (headerRef != null && headerRef.isNotifyClicked)
                {
                    headerRef.NotifyClicked();
                }
                isSearchIconClick = isIconClick;
                searchContainer = SampleUtils.RemoveClass(searchContainer, SampleUtils.DISPLAY_NONE);
                if (searchRef != null) await searchRef.InputFocus();
            }
            else
            {
                searchContainer = SampleUtils.AddClass(searchContainer, SampleUtils.DISPLAY_NONE);
            }
        }
        if (isEscPressed)
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// Collapse both right and left sidebar component.
    /// </summary>
    public void CollapseSideBar()
    {
        if (SampleService.IsDevice)
        {
            // Collapse left sidebar if it is expanded on document click
            if (LeftPaneRef != null && LeftPaneRef.IsExpanded())
            {
                LeftPaneRef.UpdateExpandedState();
            }
            // Collapse right sidebar if it is expanded on document click
            if (rightSidebarExpanded)
            {
                rightSidebarExpanded = !rightSidebarExpanded;
            }
        }
    }

    /// <summary>
    /// Collapse left sidebar component.
    /// </summary>
    public void Collapse()
    {
        if (LeftPaneRef != null)
        {
            if (LeftPaneRef.IsExpanded())
            {
                LeftPaneRef.UpdateExpandedState();
            }
            if (RightPaneRef != null && !LeftPaneRef.IsExpanded())
            {
                RightPaneRef.RightPaneExpandCollapse();
            }
            StateHasChanged();
        }
    }

    /// <summary>
    /// Update device mode while resizing window through UI.
    /// </summary>
    /// <param name="isDevice">Specifies the current resolution is device mode or not.</param>
    [JSInvokable]
    public void UpdateDeviceMode(bool isDevice, bool isTablet)
    {
        isDeviceMode = isDevice;
        SampleService.IsDevice = isDevice;
        if(isTablet){
            RightPaneRef?.SampleNavigatorRef?.Rerender(SampleService.IsDevice,isTablet);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Close both theme and preference popups
    /// </summary>
    public void CloseThemePrefPopups()
    {
        if (headerRef != null && headerRef?.dropdownRef != null)
        {
            headerRef.HidePreferences();
            headerRef.dropdownRef.popupClass = SampleUtils.AddClass(headerRef.dropdownRef.popupClass ?? "", SampleUtils.DISPLAY_NONE);
            StateHasChanged();
        }
    }
    protected override async void OnInitialized()
    {
        base.OnInitialized();
        // UriHelper.LocationChanged += LocationChanged;
        // Enable ripple effect to the material theme.
        SyncfusionService?.EnableRipple(UriHelper.Uri.IndexOf("material") > 0);
        searchContainer = SampleUtils.SEARCH_OVERLAY + SampleUtils.SPACE + SampleUtils.DISPLAY_NONE;

        // Condition to check whether the URL query params contains the proper theme name. If the URL query params donesn't contains the theme name, the URL redirects to existing component URL without query params.
        // Due to this redirection, we can prevent our site from multiple vulnerability attacks from hackers.
        string? themeName = System.Web.HttpUtility.ParseQueryString(new Uri(this.navigationManager?.Uri ?? "").Query).Get("theme");
        if (!string.IsNullOrEmpty(themeName) && themeName.Contains("-dark"))
        {
            // Remove "-dark" from the current theme
            themeName = themeName.Replace("-dark", "");
        }
#if !STAGING || DEBUG
        themeName = themeName != null && themeName.Equals("bootstrap5") ? "bootstrap5.3" : themeName;
#endif
        if (!string.IsNullOrEmpty(themeName) && !SampleUtils.ThemeData.Any((theme => theme.ID == themeName)) && themeName != "tailwind")
        {
            this.navigationManager?.NavigateTo(this.navigationManager.Uri.Split("?")[0], forceLoad: true);
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Add Spinner ref to the sample servie to get access in SampleBaseComponent class.
            if (SampleService.Spinner == null)
            {
                SampleService.Spinner = spinnerRef;
            }

            dotnetObjectRef = DotNetObjectReference.Create<object>(this);
           
            // Get device information for mobile sidebar rendering
            this.SampleService.IsDevice = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isDevice", dotnetObjectRef);
            this.DeviceMode.Isdevice = this.SampleService.IsDevice;
            this.isTablet = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isTablet");
            this.isDeviceMode = this.SampleService.IsDevice;
#if WASM
            if (this.SampleService.IsDevice)
            {
                LeftPaneRef?.UpdateExpandedState();
                StateHasChanged();
            }
#endif
            // Update home page or demo page loaded property in SampleService.
            // SampleUtils.GetDynamicResources(UriHelper, SampleService);
#if SERVER
            enableLazyLoad = true;
            StateHasChanged();
#endif        
        }
        else
        {
            // Refresh meta data for home page navigation.
            if (UriHelper.BaseUri == UriHelper.Uri)
            {
                SampleService.MetaData?.Refresh();
            }
        }
        if(!firstRender && LeftPaneRef !=null && LeftPaneRef.NavMenuRef !=null && LeftPaneRef.NavMenuRef.isNavigate)
        {
            CloseThemePrefPopups();
            LeftPaneRef.NavMenuRef.isNavigate = false;
        }
        if (!this.SampleService.IsDevice || this.isTablet)
        {
            // Render sample navigator in the right pane for desktop.
            RightPaneRef?.SampleNavigatorRef?.Rerender(SampleService.IsDevice,this.isTablet);
        }
    }
    public async Task<T> GetValueAsync<T>(T key)
    {
        var previouslySelectedCulture= await this.JsRuntime.InvokeAsync<T>("sfBlazorSB.getValue", key);
        return previouslySelectedCulture;
    }
    private async Task HideToast(){
        await JsRuntime.InvokeVoidAsync("hideToast");
    }
    public void Dispose()
    {
        dotnetObjectRef?.Dispose();
        // UriHelper.LocationChanged -= LocationChanged;
    }
}

